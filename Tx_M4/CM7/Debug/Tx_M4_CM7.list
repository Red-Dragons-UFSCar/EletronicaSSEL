
Tx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800b588  0800b588  0000c588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b63c  0800b63c  0000d170  2**0
                  CONTENTS
  4 .ARM          00000008  0800b63c  0800b63c  0000c63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b644  0800b644  0000d170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b644  0800b644  0000c644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b648  0800b648  0000c648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  24000000  0800b64c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dfc  24000170  0800b7bc  0000d170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001f6c  0800b7bc  0000df6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abe7  00000000  00000000  0000d19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c23  00000000  00000000  00027d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0002b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4f  00000000  00000000  0002cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cdc6  00000000  00000000  0002dadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b930  00000000  00000000  0006a8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f4e8  00000000  00000000  000861d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002056bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  00205700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0020a990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000170 	.word	0x24000170
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b570 	.word	0x0800b570

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000174 	.word	0x24000174
 80002dc:	0800b570 	.word	0x0800b570

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0aa      	sub	sp, #168	@ 0xa8
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007aa:	bf00      	nop
 80007ac:	4b58      	ldr	r3, [pc, #352]	@ (8000910 <main+0x174>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d006      	beq.n	80007c6 <main+0x2a>
 80007b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	dcf2      	bgt.n	80007ac <main+0x10>
  if ( timeout < 0 )
 80007c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	da01      	bge.n	80007d2 <main+0x36>
  {
  Error_Handler();
 80007ce:	f000 f9bd 	bl	8000b4c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 fc43 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f8a1 	bl	800091c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007da:	4b4d      	ldr	r3, [pc, #308]	@ (8000910 <main+0x174>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e0:	4a4b      	ldr	r2, [pc, #300]	@ (8000910 <main+0x174>)
 80007e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ea:	4b49      	ldr	r3, [pc, #292]	@ (8000910 <main+0x174>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 f84f 	bl	800189c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007fe:	2100      	movs	r1, #0
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f865 	bl	80018d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000806:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800080a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800080e:	bf00      	nop
 8000810:	4b3f      	ldr	r3, [pc, #252]	@ (8000910 <main+0x174>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d106      	bne.n	800082a <main+0x8e>
 800081c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000826:	2b00      	cmp	r3, #0
 8000828:	dcf2      	bgt.n	8000810 <main+0x74>
if ( timeout < 0 )
 800082a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x9a>
{
Error_Handler();
 8000832:	f000 f98b 	bl	8000b4c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f8f1 	bl	8000a1c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800083a:	f009 fca9 	bl	800a190 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 fa44 	bl	8000ccc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fa41 	bl	8000ccc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800084a:	2002      	movs	r0, #2
 800084c:	f000 fa3e 	bl	8000ccc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000850:	2101      	movs	r1, #1
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fab0 	bl	8000db8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000858:	4b2e      	ldr	r3, [pc, #184]	@ (8000914 <main+0x178>)
 800085a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000860:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <main+0x178>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000866:	4b2b      	ldr	r3, [pc, #172]	@ (8000914 <main+0x178>)
 8000868:	2200      	movs	r2, #0
 800086a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800086c:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <main+0x178>)
 800086e:	2200      	movs	r2, #0
 8000870:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000872:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <main+0x178>)
 8000874:	2200      	movs	r2, #0
 8000876:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000878:	4926      	ldr	r1, [pc, #152]	@ (8000914 <main+0x178>)
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fb2c 	bl	8000ed8 <BSP_COM_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <main+0xee>
  {
    Error_Handler();
 8000886:	f000 f961 	bl	8000b4c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100] = {'\0'};
 800088a:	2300      	movs	r3, #0
 800088c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800088e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000892:	2260      	movs	r2, #96	@ 0x60
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f00a f9ea 	bl	800ac70 <memset>
  uint8_t Retorno[4] = {20,20,20,20};
 800089c:	f04f 3314 	mov.w	r3, #336860180	@ 0x14141414
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t Receive = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  int Software[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2230      	movs	r2, #48	@ 0x30
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00a f9dd 	bl	800ac70 <memset>
  while (1)
  {
	if(Receive == 0){
 80008b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10d      	bne.n	80008da <main+0x13e>
		CDC_Receive_FS(Software,sizeof(Software));
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2130      	movs	r1, #48	@ 0x30
 80008c4:	4618      	mov	r0, r3
 80008c6:	f009 fd0f 	bl	800a2e8 <CDC_Receive_FS>
		Receive = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
		Retorno[0] = Software[0];
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80008d8:	e00c      	b.n	80008f4 <main+0x158>
	} else if (Receive ==1){
 80008da:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d108      	bne.n	80008f4 <main+0x158>
		CDC_Transmit_FS(message,sizeof(message));
 80008e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008e6:	2164      	movs	r1, #100	@ 0x64
 80008e8:	4618      	mov	r0, r3
 80008ea:	f009 fd11 	bl	800a310 <CDC_Transmit_FS>
		Receive = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
	}
	sprintf(message, "%d\n",Retorno[0]);
 80008f4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80008f8:	461a      	mov	r2, r3
 80008fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008fe:	4906      	ldr	r1, [pc, #24]	@ (8000918 <main+0x17c>)
 8000900:	4618      	mov	r0, r3
 8000902:	f00a f995 	bl	800ac30 <siprintf>
	//CDC_Transmit_FS(message,sizeof(message));
	HAL_Delay(5);
 8000906:	2005      	movs	r0, #5
 8000908:	f000 fc3a 	bl	8001180 <HAL_Delay>
	if(Receive == 0){
 800090c:	e7d3      	b.n	80008b6 <main+0x11a>
 800090e:	bf00      	nop
 8000910:	58024400 	.word	0x58024400
 8000914:	2400018c 	.word	0x2400018c
 8000918:	0800b588 	.word	0x0800b588

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	@ 0x70
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	224c      	movs	r2, #76	@ 0x4c
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00a f9a0 	bl	800ac70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f00a f99a 	bl	800ac70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800093c:	2004      	movs	r0, #4
 800093e:	f002 fa79 	bl	8002e34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <SystemClock_Config+0xf8>)
 8000948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094a:	4a32      	ldr	r2, [pc, #200]	@ (8000a14 <SystemClock_Config+0xf8>)
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000952:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <SystemClock_Config+0xf8>)
 8000954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <SystemClock_Config+0xfc>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000964:	4a2c      	ldr	r2, [pc, #176]	@ (8000a18 <SystemClock_Config+0xfc>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <SystemClock_Config+0xfc>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000978:	bf00      	nop
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <SystemClock_Config+0xfc>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000986:	d1f8      	bne.n	800097a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000988:	2322      	movs	r3, #34	@ 0x22
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800098c:	2301      	movs	r3, #1
 800098e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2340      	movs	r3, #64	@ 0x40
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099c:	2300      	movs	r3, #0
 800099e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80009a4:	2319      	movs	r3, #25
 80009a6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009ac:	2305      	movs	r3, #5
 80009ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009b4:	230c      	movs	r3, #12
 80009b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 fa9f 	bl	8002f08 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80009d0:	f000 f8bc 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	233f      	movs	r3, #63	@ 0x3f
 80009d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d8:	2303      	movs	r3, #3
 80009da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e4:	2340      	movs	r3, #64	@ 0x40
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f2:	2340      	movs	r3, #64	@ 0x40
 80009f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2104      	movs	r1, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fede 	bl	80037bc <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000a06:	f000 f8a1 	bl	8000b4c <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3770      	adds	r7, #112	@ 0x70
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	58000400 	.word	0x58000400
 8000a18:	58024800 	.word	0x58024800

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b41      	ldr	r3, [pc, #260]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	4a3f      	ldr	r2, [pc, #252]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a42:	4b3d      	ldr	r3, [pc, #244]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b39      	ldr	r3, [pc, #228]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	4a38      	ldr	r2, [pc, #224]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a60:	4b35      	ldr	r3, [pc, #212]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b32      	ldr	r3, [pc, #200]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	4a30      	ldr	r2, [pc, #192]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	4a29      	ldr	r2, [pc, #164]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9c:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <MX_GPIO_Init+0x11c>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000aaa:	2332      	movs	r3, #50	@ 0x32
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aba:	230b      	movs	r3, #11
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481d      	ldr	r0, [pc, #116]	@ (8000b3c <MX_GPIO_Init+0x120>)
 8000ac6:	f000 fd1f 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000aca:	2386      	movs	r3, #134	@ 0x86
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ada:	230b      	movs	r3, #11
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4816      	ldr	r0, [pc, #88]	@ (8000b40 <MX_GPIO_Init+0x124>)
 8000ae6:	f000 fd0f 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afc:	230b      	movs	r3, #11
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480f      	ldr	r0, [pc, #60]	@ (8000b44 <MX_GPIO_Init+0x128>)
 8000b08:	f000 fcfe 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b0c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1e:	230b      	movs	r3, #11
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_GPIO_Init+0x12c>)
 8000b2a:	f000 fced 	bl	8001508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	@ 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	58020800 	.word	0x58020800
 8000b40:	58020000 	.word	0x58020000
 8000b44:	58020400 	.word	0x58020400
 8000b48:	58021800 	.word	0x58021800

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b64:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x30>)
 8000b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	58024400 	.word	0x58024400

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be2:	f000 faad 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}

08000bea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f954 	bl	8000e9c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <OTG_FS_IRQHandler+0x10>)
 8000bfe:	f000 ffbc 	bl	8001b7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	24001720 	.word	0x24001720

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	@ (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f00a f820 	bl	800ac80 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	24080000 	.word	0x24080000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	2400019c 	.word	0x2400019c
 8000c74:	24001f70 	.word	0x24001f70

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c7c:	f7ff fcf8 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f009 fff1 	bl	800ac8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fd77 	bl	800079c <main>
  bx  lr
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cb8:	24000170 	.word	0x24000170
  ldr r2, =_sidata
 8000cbc:	0800b64c 	.word	0x0800b64c
  ldr r2, =_sbss
 8000cc0:	24000170 	.word	0x24000170
  ldr r4, =_ebss
 8000cc4:	24001f6c 	.word	0x24001f6c

08000cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC3_IRQHandler>
	...

08000ccc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	@ 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <BSP_LED_Init+0x28>
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d006      	beq.n	8000cf4 <BSP_LED_Init+0x28>
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d003      	beq.n	8000cf4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cec:	f06f 0301 	mvn.w	r3, #1
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cf2:	e055      	b.n	8000da0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10f      	bne.n	8000d1a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	4a2a      	ldr	r2, [pc, #168]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0a:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	e021      	b.n	8000d5e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d10f      	bne.n	8000d40 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	4a21      	ldr	r2, [pc, #132]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d30:	4b1e      	ldr	r3, [pc, #120]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	e00e      	b.n	8000d5e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d40:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	4a19      	ldr	r2, [pc, #100]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <BSP_LED_Init+0xe0>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <BSP_LED_Init+0xe4>)
 8000d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d66:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <BSP_LED_Init+0xe8>)
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	f107 0218 	add.w	r2, r7, #24
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fbc0 	bl	8001508 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <BSP_LED_Init+0xe8>)
 8000d8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <BSP_LED_Init+0xe4>)
 8000d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f000 fd64 	bl	8001868 <HAL_GPIO_WritePin>
  }

  return ret;
 8000da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3730      	adds	r7, #48	@ 0x30
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58024400 	.word	0x58024400
 8000db0:	0800b5e4 	.word	0x0800b5e4
 8000db4:	2400000c 	.word	0x2400000c

08000db8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <BSP_PB_Init+0xcc>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	4a2d      	ldr	r2, [pc, #180]	@ (8000e84 <BSP_PB_Init+0xcc>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <BSP_PB_Init+0xcc>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000de6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000dec:	2302      	movs	r3, #2
 8000dee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10c      	bne.n	8000e14 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <BSP_PB_Init+0xd0>)
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	f107 020c 	add.w	r2, r7, #12
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fb7b 	bl	8001508 <HAL_GPIO_Init>
 8000e12:	e031      	b.n	8000e78 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e18:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e88 <BSP_PB_Init+0xd0>)
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	f107 020c 	add.w	r2, r7, #12
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fb6d 	bl	8001508 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <BSP_PB_Init+0xd4>)
 8000e34:	441a      	add	r2, r3
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4915      	ldr	r1, [pc, #84]	@ (8000e90 <BSP_PB_Init+0xd8>)
 8000e3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4610      	mov	r0, r2
 8000e42:	f000 fb10 	bl	8001466 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <BSP_PB_Init+0xd4>)
 8000e4c:	1898      	adds	r0, r3, r2
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <BSP_PB_Init+0xdc>)
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	461a      	mov	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f000 fae5 	bl	8001428 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e5e:	2028      	movs	r0, #40	@ 0x28
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <BSP_PB_Init+0xe0>)
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f000 fa93 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e70:	2328      	movs	r3, #40	@ 0x28
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 faa9 	bl	80013ca <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	58024400 	.word	0x58024400
 8000e88:	24000018 	.word	0x24000018
 8000e8c:	240001a0 	.word	0x240001a0
 8000e90:	0800b5ec 	.word	0x0800b5ec
 8000e94:	2400001c 	.word	0x2400001c
 8000e98:	24000020 	.word	0x24000020

08000e9c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <BSP_PB_IRQHandler+0x20>)
 8000eac:	4413      	add	r3, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 faee 	bl	8001490 <HAL_EXTI_IRQHandler>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	240001a0 	.word	0x240001a0

08000ec0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000eee:	f06f 0301 	mvn.w	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e018      	b.n	8000f28 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2294      	movs	r2, #148	@ 0x94
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <BSP_COM_Init+0x5c>)
 8000f00:	4413      	add	r3, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f852 	bl	8000fac <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2294      	movs	r2, #148	@ 0x94
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <BSP_COM_Init+0x5c>)
 8000f12:	4413      	add	r3, r2
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f80e 	bl	8000f38 <MX_USART3_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f22:	f06f 0303 	mvn.w	r3, #3
 8000f26:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	240001a8 	.word	0x240001a8

08000f38 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <MX_USART3_Init+0x60>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	220c      	movs	r2, #12
 8000f56:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	895b      	ldrh	r3, [r3, #10]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	891b      	ldrh	r3, [r3, #8]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	899b      	ldrh	r3, [r3, #12]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f84:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f004 fdd0 	bl	8005b2c <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	24000008 	.word	0x24000008

08000f9c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff ff8d 	bl	8000ec0 <BSP_PB_Callback>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <COM1_MspInit+0xa8>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	4a26      	ldr	r2, [pc, #152]	@ (8001054 <COM1_MspInit+0xa8>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <COM1_MspInit+0xa8>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <COM1_MspInit+0xa8>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <COM1_MspInit+0xa8>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <COM1_MspInit+0xa8>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <COM1_MspInit+0xa8>)
 8000ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff6:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <COM1_MspInit+0xa8>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <COM1_MspInit+0xa8>)
 8001002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001006:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800100e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001012:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001020:	2307      	movs	r3, #7
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	480b      	ldr	r0, [pc, #44]	@ (8001058 <COM1_MspInit+0xac>)
 800102c:	f000 fa6c 	bl	8001508 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001034:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800103a:	2307      	movs	r3, #7
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <COM1_MspInit+0xac>)
 8001046:	f000 fa5f 	bl	8001508 <HAL_GPIO_Init>
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	@ 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	58024400 	.word	0x58024400
 8001058:	58020c00 	.word	0x58020c00

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001062:	2003      	movs	r0, #3
 8001064:	f000 f98c 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001068:	f002 fd5e 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 800106c:	4602      	mov	r2, r0
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_Init+0x68>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	4913      	ldr	r1, [pc, #76]	@ (80010c8 <HAL_Init+0x6c>)
 800107a:	5ccb      	ldrb	r3, [r1, r3]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_Init+0x68>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	4a0e      	ldr	r2, [pc, #56]	@ (80010c8 <HAL_Init+0x6c>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	fa22 f303 	lsr.w	r3, r2, r3
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_Init+0x70>)
 800109e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a0:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <HAL_Init+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f814 	bl	80010d4 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e002      	b.n	80010bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b6:	f7ff fd4f 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58024400 	.word	0x58024400
 80010c8:	0800b5d4 	.word	0x0800b5d4
 80010cc:	24000004 	.word	0x24000004
 80010d0:	24000000 	.word	0x24000000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e021      	b.n	800112c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_InitTick+0x64>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_InitTick+0x60>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f971 	bl	80013e6 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f93b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x68>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24000028 	.word	0x24000028
 8001138:	24000000 	.word	0x24000000
 800113c:	24000024 	.word	0x24000024

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	24000028 	.word	0x24000028
 8001164:	2400023c 	.word	0x2400023c

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2400023c 	.word	0x2400023c

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	24000028 	.word	0x24000028

080011c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetREVID+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0c1b      	lsrs	r3, r3, #16
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	5c001000 	.word	0x5c001000

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <__NVIC_SetPriorityGrouping+0x40>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	4313      	orrs	r3, r2
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <__NVIC_SetPriorityGrouping+0x40>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	05fa0000 	.word	0x05fa0000

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff40 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff33 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa4 	bl	800133c <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <HAL_GetCurrentCPUID+0x24>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	2b07      	cmp	r3, #7
 8001410:	d101      	bne.n	8001416 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001412:	2303      	movs	r3, #3
 8001414:	e000      	b.n	8001418 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001416:	2301      	movs	r3, #1
  }
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	460b      	mov	r3, r1
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e00a      	b.n	800145a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d103      	bne.n	8001452 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	605a      	str	r2, [r3, #4]
      break;
 8001450:	e002      	b.n	8001458 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	75fb      	strb	r3, [r7, #23]
      break;
 8001456:	bf00      	nop
  }

  return status;
 8001458:	7dfb      	ldrb	r3, [r7, #23]
}
 800145a:	4618      	mov	r0, r3
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e003      	b.n	8001482 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001480:	2300      	movs	r3, #0
  }
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0c1b      	lsrs	r3, r3, #16
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2201      	movs	r2, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80014b4:	f7ff ffa4 	bl	8001400 <HAL_GetCurrentCPUID>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d105      	bne.n	80014ca <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	011a      	lsls	r2, r3, #4
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_EXTI_IRQHandler+0x70>)
 80014c4:	4413      	add	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e004      	b.n	80014d4 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	011a      	lsls	r2, r3, #4
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_EXTI_IRQHandler+0x74>)
 80014d0:	4413      	add	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d009      	beq.n	80014f8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4798      	blx	r3
    }
  }
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58000088 	.word	0x58000088
 8001504:	580000c8 	.word	0x580000c8

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	@ 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001516:	4b89      	ldr	r3, [pc, #548]	@ (800173c <HAL_GPIO_Init+0x234>)
 8001518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800151a:	e194      	b.n	8001846 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2101      	movs	r1, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8186 	beq.w	8001840 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d005      	beq.n	800154c <HAL_GPIO_Init+0x44>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d130      	bne.n	80015ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001582:	2201      	movs	r2, #1
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f003 0201 	and.w	r2, r3, #1
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d017      	beq.n	80015ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d123      	bne.n	800163e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	69b9      	ldr	r1, [r7, #24]
 800163a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0203 	and.w	r2, r3, #3
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80e0 	beq.w	8001840 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <HAL_GPIO_Init+0x238>)
 8001682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001686:	4a2e      	ldr	r2, [pc, #184]	@ (8001740 <HAL_GPIO_Init+0x238>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001690:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <HAL_GPIO_Init+0x238>)
 8001692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a29      	ldr	r2, [pc, #164]	@ (8001744 <HAL_GPIO_Init+0x23c>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a20      	ldr	r2, [pc, #128]	@ (8001748 <HAL_GPIO_Init+0x240>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d052      	beq.n	8001770 <HAL_GPIO_Init+0x268>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a1f      	ldr	r2, [pc, #124]	@ (800174c <HAL_GPIO_Init+0x244>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d031      	beq.n	8001736 <HAL_GPIO_Init+0x22e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001750 <HAL_GPIO_Init+0x248>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d02b      	beq.n	8001732 <HAL_GPIO_Init+0x22a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001754 <HAL_GPIO_Init+0x24c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d025      	beq.n	800172e <HAL_GPIO_Init+0x226>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001758 <HAL_GPIO_Init+0x250>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01f      	beq.n	800172a <HAL_GPIO_Init+0x222>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <HAL_GPIO_Init+0x254>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x21e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <HAL_GPIO_Init+0x258>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <HAL_GPIO_Init+0x25c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x216>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a18      	ldr	r2, [pc, #96]	@ (8001768 <HAL_GPIO_Init+0x260>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x212>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a17      	ldr	r2, [pc, #92]	@ (800176c <HAL_GPIO_Init+0x264>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x20e>
 8001712:	2309      	movs	r3, #9
 8001714:	e02d      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 8001716:	230a      	movs	r3, #10
 8001718:	e02b      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 800171a:	2308      	movs	r3, #8
 800171c:	e029      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 800171e:	2307      	movs	r3, #7
 8001720:	e027      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 8001722:	2306      	movs	r3, #6
 8001724:	e025      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 8001726:	2305      	movs	r3, #5
 8001728:	e023      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 800172a:	2304      	movs	r3, #4
 800172c:	e021      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 800172e:	2303      	movs	r3, #3
 8001730:	e01f      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 8001732:	2302      	movs	r3, #2
 8001734:	e01d      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 8001736:	2301      	movs	r3, #1
 8001738:	e01b      	b.n	8001772 <HAL_GPIO_Init+0x26a>
 800173a:	bf00      	nop
 800173c:	58000080 	.word	0x58000080
 8001740:	58024400 	.word	0x58024400
 8001744:	58000400 	.word	0x58000400
 8001748:	58020000 	.word	0x58020000
 800174c:	58020400 	.word	0x58020400
 8001750:	58020800 	.word	0x58020800
 8001754:	58020c00 	.word	0x58020c00
 8001758:	58021000 	.word	0x58021000
 800175c:	58021400 	.word	0x58021400
 8001760:	58021800 	.word	0x58021800
 8001764:	58021c00 	.word	0x58021c00
 8001768:	58022000 	.word	0x58022000
 800176c:	58022400 	.word	0x58022400
 8001770:	2300      	movs	r3, #0
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	f002 0203 	and.w	r2, r2, #3
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	4093      	lsls	r3, r2
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001782:	4938      	ldr	r1, [pc, #224]	@ (8001864 <HAL_GPIO_Init+0x35c>)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	f47f ae63 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	@ 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	58000400 	.word	0x58000400

08001868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
 8001874:	4613      	mov	r3, r2
 8001876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001878:	787b      	ldrb	r3, [r7, #1]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001884:	e003      	b.n	800188e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	041a      	lsls	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018a4:	4a08      	ldr	r2, [pc, #32]	@ (80018c8 <HAL_HSEM_FastTake+0x2c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3320      	adds	r3, #32
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_HSEM_FastTake+0x30>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	58026400 	.word	0x58026400
 80018cc:	80000300 	.word	0x80000300

080018d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018da:	4906      	ldr	r1, [pc, #24]	@ (80018f4 <HAL_HSEM_Release+0x24>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	58026400 	.word	0x58026400

080018f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0fe      	b.n	8001b08 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f008 fe3e 	bl	800a5a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2203      	movs	r2, #3
 8001928:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f005 fa02 	bl	8006d3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7c1a      	ldrb	r2, [r3, #16]
 800193e:	f88d 2000 	strb.w	r2, [sp]
 8001942:	3304      	adds	r3, #4
 8001944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001946:	f005 f8d3 	bl	8006af0 <USB_CoreInit>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0d5      	b.n	8001b08 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f005 f9fa 	bl	8006d5c <USB_SetCurrentMode>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0c6      	b.n	8001b08 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e04a      	b.n	8001a16 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	3315      	adds	r3, #21
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3314      	adds	r3, #20
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	b298      	uxth	r0, r3
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	332e      	adds	r3, #46	@ 0x2e
 80019bc:	4602      	mov	r2, r0
 80019be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	3318      	adds	r3, #24
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	331c      	adds	r3, #28
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	3320      	adds	r3, #32
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3324      	adds	r3, #36	@ 0x24
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	3301      	adds	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	791b      	ldrb	r3, [r3, #4]
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3af      	bcc.n	8001980 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e044      	b.n	8001ab0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	3301      	adds	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3b5      	bcc.n	8001a26 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7c1a      	ldrb	r2, [r3, #16]
 8001ac2:	f88d 2000 	strb.w	r2, [sp]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aca:	f005 f993 	bl	8006df4 <USB_DevInit>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e013      	b.n	8001b08 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7b1b      	ldrb	r3, [r3, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f001 f96c 	bl	8002dd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f006 f9d2 	bl	8007eaa <USB_DevDisconnect>

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_PCD_Start+0x1c>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e022      	b.n	8001b72 <HAL_PCD_Start+0x62>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d009      	beq.n	8001b54 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f005 f8dd 	bl	8006d18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f006 f980 	bl	8007e68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b7a:	b590      	push	{r4, r7, lr}
 8001b7c:	b08d      	sub	sp, #52	@ 0x34
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f006 fa3e 	bl	8008012 <USB_GetMode>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f040 84b9 	bne.w	8002510 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f006 f9a2 	bl	8007eec <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 84af 	beq.w	800250e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f006 f98f 	bl	8007eec <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d107      	bne.n	8001be8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f002 0202 	and.w	r2, r2, #2
 8001be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f006 f97d 	bl	8007eec <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d161      	bne.n	8001cc0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0210 	bic.w	r2, r2, #16
 8001c0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 020f 	and.w	r2, r3, #15
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	0c5b      	lsrs	r3, r3, #17
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d124      	bne.n	8001c82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d035      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	6a38      	ldr	r0, [r7, #32]
 8001c58:	f005 ffb4 	bl	8007bc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c68:	441a      	add	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c7a:	441a      	add	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	e016      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	0c5b      	lsrs	r3, r3, #17
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d110      	bne.n	8001cb0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c94:	2208      	movs	r2, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	6a38      	ldr	r0, [r7, #32]
 8001c9a:	f005 ff93 	bl	8007bc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001caa:	441a      	add	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0210 	orr.w	r2, r2, #16
 8001cbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f006 f911 	bl	8007eec <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001cd4:	f040 80a7 	bne.w	8001e26 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f006 f916 	bl	8007f12 <USB_ReadDevAllOutEpInterrupt>
 8001ce6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001ce8:	e099      	b.n	8001e1e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 808e 	beq.w	8001e12 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f006 f93a 	bl	8007f7a <USB_ReadDevOutEPInterrupt>
 8001d06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2301      	movs	r3, #1
 8001d22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fece 	bl	8002ac8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d42:	461a      	mov	r2, r3
 8001d44:	2308      	movs	r3, #8
 8001d46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 ffa4 	bl	8002c98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d66:	461a      	mov	r2, r3
 8001d68:	2310      	movs	r3, #16
 8001d6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d030      	beq.n	8001dd8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7e:	2b80      	cmp	r3, #128	@ 0x80
 8001d80:	d109      	bne.n	8001d96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	78db      	ldrb	r3, [r3, #3]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d108      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2200      	movs	r2, #0
 8001db8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f008 fd23 	bl	800a80c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dee:	461a      	mov	r2, r3
 8001df0:	2320      	movs	r3, #32
 8001df2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	3301      	adds	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f af62 	bne.w	8001cea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f006 f85e 	bl	8007eec <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e3a:	f040 80db 	bne.w	8001ff4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f006 f87f 	bl	8007f46 <USB_ReadDevAllInEpInterrupt>
 8001e48:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001e4e:	e0cd      	b.n	8001fec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80c2 	beq.w	8001fe0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f006 f8a5 	bl	8007fb6 <USB_ReadDevInEPInterrupt>
 8001e6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d057      	beq.n	8001f28 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	2201      	movs	r2, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69f9      	ldr	r1, [r7, #28]
 8001e94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e98:	4013      	ands	r3, r2
 8001e9a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2301      	movs	r3, #1
 8001eac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	799b      	ldrb	r3, [r3, #6]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d132      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3320      	adds	r3, #32
 8001ec6:	6819      	ldr	r1, [r3, #0]
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4403      	add	r3, r0
 8001ed6:	331c      	adds	r3, #28
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4419      	add	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4403      	add	r3, r0
 8001eea:	3320      	adds	r3, #32
 8001eec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d113      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x3a2>
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3324      	adds	r3, #36	@ 0x24
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f14:	461a      	mov	r2, r3
 8001f16:	2101      	movs	r1, #1
 8001f18:	f006 f8ae 	bl	8008078 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f008 fbed 	bl	800a702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2308      	movs	r3, #8
 8001f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f76:	461a      	mov	r2, r3
 8001f78:	2340      	movs	r3, #64	@ 0x40
 8001f7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d023      	beq.n	8001fce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f88:	6a38      	ldr	r0, [r7, #32]
 8001f8a:	f005 f891 	bl	80070b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	3310      	adds	r3, #16
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d108      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2200      	movs	r2, #0
 8001fae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f008 fc3a 	bl	800a830 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2302      	movs	r3, #2
 8001fcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001fd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fce8 	bl	80029b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f47f af2e 	bne.w	8001e50 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f005 ff77 	bl	8007eec <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002004:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002008:	d122      	bne.n	8002050 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002024:	2b01      	cmp	r3, #1
 8002026:	d108      	bne.n	800203a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002030:	2100      	movs	r1, #0
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fef2 	bl	8002e1c <HAL_PCDEx_LPM_Callback>
 8002038:	e002      	b.n	8002040 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f008 fbd8 	bl	800a7f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800204e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f005 ff49 	bl	8007eec <USB_ReadInterrupts>
 800205a:	4603      	mov	r3, r0
 800205c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002064:	d112      	bne.n	800208c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f008 fb94 	bl	800a7a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800208a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f005 ff2b 	bl	8007eec <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800209c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020a0:	d121      	bne.n	80020e6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80020b0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d111      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	f003 020f 	and.w	r2, r3, #15
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020d6:	2101      	movs	r1, #1
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fe9f 	bl	8002e1c <HAL_PCDEx_LPM_Callback>
 80020de:	e002      	b.n	80020e6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f008 fb5f 	bl	800a7a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f005 fefe 	bl	8007eec <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020fa:	f040 80b7 	bne.w	800226c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2110      	movs	r1, #16
 8002118:	4618      	mov	r0, r3
 800211a:	f004 ffc9 	bl	80070b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002122:	e046      	b.n	80021b2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002130:	461a      	mov	r2, r3
 8002132:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002136:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002148:	0151      	lsls	r1, r2, #5
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	440a      	add	r2, r1
 800214e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002152:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002156:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800216a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800216c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800217c:	0151      	lsls	r1, r2, #5
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	440a      	add	r2, r1
 8002182:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002186:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800218a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800218c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800219c:	0151      	lsls	r1, r2, #5
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	440a      	add	r2, r1
 80021a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80021aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ae:	3301      	adds	r3, #1
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	461a      	mov	r2, r3
 80021b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d3b2      	bcc.n	8002124 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80021d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7bdb      	ldrb	r3, [r3, #15]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021ea:	f043 030b 	orr.w	r3, r3, #11
 80021ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002200:	f043 030b 	orr.w	r3, r3, #11
 8002204:	6453      	str	r3, [r2, #68]	@ 0x44
 8002206:	e015      	b.n	8002234 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002216:	4619      	mov	r1, r3
 8002218:	f242 032b 	movw	r3, #8235	@ 0x202b
 800221c:	4313      	orrs	r3, r2
 800221e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800222e:	f043 030b 	orr.w	r3, r3, #11
 8002232:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002242:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002246:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002256:	461a      	mov	r2, r3
 8002258:	f005 ff0e 	bl	8008078 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800226a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f005 fe3b 	bl	8007eec <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800227c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002280:	d123      	bne.n	80022ca <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f005 fed2 	bl	8008030 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f004 ff86 	bl	80071a2 <USB_GetDevSpeed>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681c      	ldr	r4, [r3, #0]
 80022a2:	f001 fdbb 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 80022a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022ac:	461a      	mov	r2, r3
 80022ae:	4620      	mov	r0, r4
 80022b0:	f004 fc90 	bl	8006bd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f008 fa4c 	bl	800a752 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80022c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f005 fe0c 	bl	8007eec <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d10a      	bne.n	80022f4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f008 fa29 	bl	800a736 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f002 0208 	and.w	r2, r2, #8
 80022f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 fdf7 	bl	8007eec <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002304:	2b80      	cmp	r3, #128	@ 0x80
 8002306:	d123      	bne.n	8002350 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002314:	2301      	movs	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
 8002318:	e014      	b.n	8002344 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fb08 	bl	800294e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	3301      	adds	r3, #1
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	791b      	ldrb	r3, [r3, #4]
 8002348:	461a      	mov	r2, r3
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	4293      	cmp	r3, r2
 800234e:	d3e4      	bcc.n	800231a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f005 fdc9 	bl	8007eec <USB_ReadInterrupts>
 800235a:	4603      	mov	r3, r0
 800235c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002364:	d13c      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002366:	2301      	movs	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
 800236a:	e02b      	b.n	80023c4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3318      	adds	r3, #24
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d115      	bne.n	80023be <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002392:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	da12      	bge.n	80023be <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3317      	adds	r3, #23
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fac8 	bl	800294e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	791b      	ldrb	r3, [r3, #4]
 80023c8:	461a      	mov	r2, r3
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d3cd      	bcc.n	800236c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80023de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 fd81 	bl	8007eec <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023f4:	d156      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f6:	2301      	movs	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	e045      	b.n	8002488 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d12e      	bne.n	8002482 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002424:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	da2b      	bge.n	8002482 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002436:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800243a:	429a      	cmp	r2, r3
 800243c:	d121      	bne.n	8002482 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800247a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247e:	6053      	str	r3, [r2, #4]
            break;
 8002480:	e008      	b.n	8002494 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	3301      	adds	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	791b      	ldrb	r3, [r3, #4]
 800248c:	461a      	mov	r2, r3
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	4293      	cmp	r3, r2
 8002492:	d3b3      	bcc.n	80023fc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80024a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f005 fd1f 	bl	8007eec <USB_ReadInterrupts>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b8:	d10a      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f008 f9ca 	bl	800a854 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80024ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f005 fd09 	bl	8007eec <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d115      	bne.n	8002510 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f008 f9ba 	bl	800a870 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	430a      	orrs	r2, r1
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	e000      	b.n	8002510 <HAL_PCD_IRQHandler+0x996>
      return;
 800250e:	bf00      	nop
    }
  }
}
 8002510:	3734      	adds	r7, #52	@ 0x34
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}

08002516 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_PCD_SetAddress+0x1a>
 800252c:	2302      	movs	r3, #2
 800252e:	e012      	b.n	8002556 <HAL_PCD_SetAddress+0x40>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f005 fc68 	bl	8007e1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	4608      	mov	r0, r1
 8002568:	4611      	mov	r1, r2
 800256a:	461a      	mov	r2, r3
 800256c:	4603      	mov	r3, r0
 800256e:	70fb      	strb	r3, [r7, #3]
 8002570:	460b      	mov	r3, r1
 8002572:	803b      	strh	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800257c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002580:	2b00      	cmp	r3, #0
 8002582:	da0f      	bge.n	80025a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	f003 020f 	and.w	r2, r3, #15
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	3310      	adds	r3, #16
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4413      	add	r3, r2
 8002598:	3304      	adds	r3, #4
 800259a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	705a      	strb	r2, [r3, #1]
 80025a2:	e00f      	b.n	80025c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f003 020f 	and.w	r2, r3, #15
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	3304      	adds	r3, #4
 80025bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025d0:	883a      	ldrh	r2, [r7, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	78ba      	ldrb	r2, [r7, #2]
 80025da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025ee:	78bb      	ldrb	r3, [r7, #2]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d102      	bne.n	80025fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_PCD_EP_Open+0xaa>
 8002604:	2302      	movs	r3, #2
 8002606:	e00e      	b.n	8002626 <HAL_PCD_EP_Open+0xc8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	4618      	mov	r0, r3
 8002618:	f004 fde8 	bl	80071ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002624:	7afb      	ldrb	r3, [r7, #11]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800263a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800263e:	2b00      	cmp	r3, #0
 8002640:	da0f      	bge.n	8002662 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	f003 020f 	and.w	r2, r3, #15
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	3310      	adds	r3, #16
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	3304      	adds	r3, #4
 8002658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	705a      	strb	r2, [r3, #1]
 8002660:	e00f      	b.n	8002682 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_PCD_EP_Close+0x6e>
 8002698:	2302      	movs	r3, #2
 800269a:	e00e      	b.n	80026ba <HAL_PCD_EP_Close+0x8c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 fe26 	bl	80072fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	460b      	mov	r3, r1
 80026d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	f003 020f 	and.w	r2, r3, #15
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002704:	7afb      	ldrb	r3, [r7, #11]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	b2da      	uxtb	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	799b      	ldrb	r3, [r3, #6]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	799b      	ldrb	r3, [r3, #6]
 8002726:	461a      	mov	r2, r3
 8002728:	6979      	ldr	r1, [r7, #20]
 800272a:	f004 fec3 	bl	80074b4 <USB_EPStartXfer>

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	f003 020f 	and.w	r2, r3, #15
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	460b      	mov	r3, r1
 8002776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	7afb      	ldrb	r3, [r7, #11]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3310      	adds	r3, #16
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2201      	movs	r2, #1
 80027a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027a8:	7afb      	ldrb	r3, [r7, #11]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	799b      	ldrb	r3, [r3, #6]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	799b      	ldrb	r3, [r3, #6]
 80027ca:	461a      	mov	r2, r3
 80027cc:	6979      	ldr	r1, [r7, #20]
 80027ce:	f004 fe71 	bl	80074b4 <USB_EPStartXfer>

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	7912      	ldrb	r2, [r2, #4]
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e04f      	b.n	800289a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da0f      	bge.n	8002822 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	3310      	adds	r3, #16
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	705a      	strb	r2, [r3, #1]
 8002820:	e00d      	b.n	800283e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	3304      	adds	r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_PCD_EP_SetStall+0x82>
 800285a:	2302      	movs	r3, #2
 800285c:	e01d      	b.n	800289a <HAL_PCD_EP_SetStall+0xbe>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68f9      	ldr	r1, [r7, #12]
 800286c:	4618      	mov	r0, r3
 800286e:	f005 fa01 	bl	8007c74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7999      	ldrb	r1, [r3, #6]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800288a:	461a      	mov	r2, r3
 800288c:	f005 fbf4 	bl	8008078 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	7912      	ldrb	r2, [r2, #4]
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e042      	b.n	8002946 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da0f      	bge.n	80028e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 020f 	and.w	r2, r3, #15
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	3310      	adds	r3, #16
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	3304      	adds	r3, #4
 80028de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	705a      	strb	r2, [r3, #1]
 80028e6:	e00f      	b.n	8002908 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 020f 	and.w	r2, r3, #15
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_PCD_EP_ClrStall+0x86>
 8002924:	2302      	movs	r3, #2
 8002926:	e00e      	b.n	8002946 <HAL_PCD_EP_ClrStall+0xa4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	4618      	mov	r0, r3
 8002938:	f005 fa0a 	bl	8007d50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800295a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800295e:	2b00      	cmp	r3, #0
 8002960:	da0c      	bge.n	800297c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	f003 020f 	and.w	r2, r3, #15
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3310      	adds	r3, #16
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	3304      	adds	r3, #4
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e00c      	b.n	8002996 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	3304      	adds	r3, #4
 8002994:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	4618      	mov	r0, r3
 800299e:	f005 f829 	bl	80079f4 <USB_EPStopXfer>
 80029a2:	4603      	mov	r3, r0
 80029a4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029a6:	7afb      	ldrb	r3, [r7, #11]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	@ 0x28
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3310      	adds	r3, #16
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d901      	bls.n	80029e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e06b      	b.n	8002ac0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d902      	bls.n	8002a04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	3303      	adds	r3, #3
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a0c:	e02a      	b.n	8002a64 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d902      	bls.n	8002a2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3303      	adds	r3, #3
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68d9      	ldr	r1, [r3, #12]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4603      	mov	r3, r0
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f005 f87e 	bl	8007b48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	441a      	add	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	441a      	add	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d809      	bhi.n	8002a8e <PCD_WriteEmptyTxFifo+0xde>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d203      	bcs.n	8002a8e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1bf      	bne.n	8002a0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d811      	bhi.n	8002abe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	6939      	ldr	r1, [r7, #16]
 8002ab6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002aba:	4013      	ands	r3, r2
 8002abc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	333c      	adds	r3, #60	@ 0x3c
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	799b      	ldrb	r3, [r3, #6]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d17b      	bne.n	8002bf6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	4a61      	ldr	r2, [pc, #388]	@ (8002c90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	f240 80b9 	bls.w	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80b3 	beq.w	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b30:	6093      	str	r3, [r2, #8]
 8002b32:	e0a7      	b.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	6093      	str	r3, [r2, #8]
 8002b50:	e098      	b.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f040 8093 	bne.w	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4a4b      	ldr	r2, [pc, #300]	@ (8002c90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d90f      	bls.n	8002b86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b82:	6093      	str	r3, [r2, #8]
 8002b84:	e07e      	b.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb2:	1ad2      	subs	r2, r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d114      	bne.n	8002be8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	f005 fa50 	bl	8008078 <USB_EP0_OutStart>
 8002bd8:	e006      	b.n	8002be8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	441a      	add	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f007 fd6c 	bl	800a6cc <HAL_PCD_DataOutStageCallback>
 8002bf4:	e046      	b.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4a26      	ldr	r2, [pc, #152]	@ (8002c94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d124      	bne.n	8002c48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c14:	461a      	mov	r2, r3
 8002c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	e032      	b.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c34:	461a      	mov	r2, r3
 8002c36:	2320      	movs	r3, #32
 8002c38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f007 fd43 	bl	800a6cc <HAL_PCD_DataOutStageCallback>
 8002c46:	e01d      	b.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d114      	bne.n	8002c78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d108      	bne.n	8002c78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c70:	461a      	mov	r2, r3
 8002c72:	2100      	movs	r1, #0
 8002c74:	f005 fa00 	bl	8008078 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f007 fd24 	bl	800a6cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	4f54300a 	.word	0x4f54300a
 8002c94:	4f54310a 	.word	0x4f54310a

08002c98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	333c      	adds	r3, #60	@ 0x3c
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a15      	ldr	r2, [pc, #84]	@ (8002d20 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d90e      	bls.n	8002cec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d009      	beq.n	8002cec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f007 fcdb 	bl	800a6a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d90c      	bls.n	8002d14 <PCD_EP_OutSetupPacket_int+0x7c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	799b      	ldrb	r3, [r3, #6]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2101      	movs	r1, #1
 8002d10:	f005 f9b2 	bl	8008078 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	4f54300a 	.word	0x4f54300a

08002d24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
 8002d30:	4613      	mov	r3, r2
 8002d32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d42:	883b      	ldrh	r3, [r7, #0]
 8002d44:	0419      	lsls	r1, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d50:	e028      	b.n	8002da4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e00d      	b.n	8002d82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	3340      	adds	r3, #64	@ 0x40
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	4413      	add	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3ec      	bcc.n	8002d66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d8c:	883b      	ldrh	r3, [r7, #0]
 8002d8e:	0418      	lsls	r0, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	4302      	orrs	r2, r0
 8002d9c:	3340      	adds	r3, #64	@ 0x40
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e02:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	10000003 	.word	0x10000003

08002e1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	2b06      	cmp	r3, #6
 8002e46:	d00a      	beq.n	8002e5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e48:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e040      	b.n	8002edc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e03e      	b.n	8002edc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002e66:	491f      	ldr	r1, [pc, #124]	@ (8002ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e6e:	f7fe f97b 	bl	8001168 <HAL_GetTick>
 8002e72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e74:	e009      	b.n	8002e8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e76:	f7fe f977 	bl	8001168 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e84:	d901      	bls.n	8002e8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e028      	b.n	8002edc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e96:	d1ee      	bne.n	8002e76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b1e      	cmp	r3, #30
 8002e9c:	d008      	beq.n	8002eb0 <HAL_PWREx_ConfigSupply+0x7c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ea2:	d005      	beq.n	8002eb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b1d      	cmp	r3, #29
 8002ea8:	d002      	beq.n	8002eb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b2d      	cmp	r3, #45	@ 0x2d
 8002eae:	d114      	bne.n	8002eda <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002eb0:	f7fe f95a 	bl	8001168 <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002eb6:	e009      	b.n	8002ecc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002eb8:	f7fe f956 	bl	8001168 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ec6:	d901      	bls.n	8002ecc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e007      	b.n	8002edc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed8:	d1ee      	bne.n	8002eb8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	58024800 	.word	0x58024800

08002ee8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002eec:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	58024800 	.word	0x58024800

08002f08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	@ 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f000 bc48 	b.w	80037ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8088 	beq.w	800303a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2a:	4b99      	ldr	r3, [pc, #612]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f34:	4b96      	ldr	r3, [pc, #600]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d007      	beq.n	8002f50 <HAL_RCC_OscConfig+0x48>
 8002f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f42:	2b18      	cmp	r3, #24
 8002f44:	d111      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62>
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	4b8f      	ldr	r3, [pc, #572]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d06d      	beq.n	8003038 <HAL_RCC_OscConfig+0x130>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d169      	bne.n	8003038 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f000 bc21 	b.w	80037ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x7a>
 8002f74:	4b86      	ldr	r3, [pc, #536]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a85      	ldr	r2, [pc, #532]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e02e      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x9c>
 8002f8a:	4b81      	ldr	r3, [pc, #516]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a80      	ldr	r2, [pc, #512]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b7e      	ldr	r3, [pc, #504]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e01d      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xc0>
 8002fae:	4b78      	ldr	r3, [pc, #480]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a77      	ldr	r2, [pc, #476]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b75      	ldr	r3, [pc, #468]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a74      	ldr	r2, [pc, #464]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd8>
 8002fc8:	4b71      	ldr	r3, [pc, #452]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a70      	ldr	r2, [pc, #448]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6d      	ldr	r2, [pc, #436]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8002fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe f8be 	bl	8001168 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe f8ba 	bl	8001168 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	@ 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e3d4      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003002:	4b63      	ldr	r3, [pc, #396]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xe8>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe f8aa 	bl	8001168 <HAL_GetTick>
 8003014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe f8a6 	bl	8001168 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	@ 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e3c0      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800302a:	4b59      	ldr	r3, [pc, #356]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x110>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80ca 	beq.w	80031dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003048:	4b51      	ldr	r3, [pc, #324]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003050:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003052:	4b4f      	ldr	r3, [pc, #316]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_RCC_OscConfig+0x166>
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b18      	cmp	r3, #24
 8003062:	d156      	bne.n	8003112 <HAL_RCC_OscConfig+0x20a>
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d151      	bne.n	8003112 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306e:	4b48      	ldr	r3, [pc, #288]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x17e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e392      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003086:	4b42      	ldr	r3, [pc, #264]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0219 	bic.w	r2, r3, #25
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	493f      	ldr	r1, [pc, #252]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe f866 	bl	8001168 <HAL_GetTick>
 800309c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe f862 	bl	8001168 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e37c      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b2:	4b37      	ldr	r3, [pc, #220]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	f7fe f883 	bl	80011c8 <HAL_GetREVID>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d817      	bhi.n	80030fc <HAL_RCC_OscConfig+0x1f4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b40      	cmp	r3, #64	@ 0x40
 80030d2:	d108      	bne.n	80030e6 <HAL_RCC_OscConfig+0x1de>
 80030d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80030dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 80030de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e4:	e07a      	b.n	80031dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	031b      	lsls	r3, r3, #12
 80030f4:	4926      	ldr	r1, [pc, #152]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030fa:	e06f      	b.n	80031dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fc:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	4921      	ldr	r1, [pc, #132]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003110:	e064      	b.n	80031dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d047      	beq.n	80031aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 0219 	bic.w	r2, r3, #25
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	491a      	ldr	r1, [pc, #104]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe f81c 	bl	8001168 <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003134:	f7fe f818 	bl	8001168 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e332      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003146:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	f7fe f839 	bl	80011c8 <HAL_GetREVID>
 8003156:	4603      	mov	r3, r0
 8003158:	f241 0203 	movw	r2, #4099	@ 0x1003
 800315c:	4293      	cmp	r3, r2
 800315e:	d819      	bhi.n	8003194 <HAL_RCC_OscConfig+0x28c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d108      	bne.n	800317a <HAL_RCC_OscConfig+0x272>
 8003168:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003170:	4a07      	ldr	r2, [pc, #28]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 8003172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003176:	6053      	str	r3, [r2, #4]
 8003178:	e030      	b.n	80031dc <HAL_RCC_OscConfig+0x2d4>
 800317a:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	031b      	lsls	r3, r3, #12
 8003188:	4901      	ldr	r1, [pc, #4]	@ (8003190 <HAL_RCC_OscConfig+0x288>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
 800318e:	e025      	b.n	80031dc <HAL_RCC_OscConfig+0x2d4>
 8003190:	58024400 	.word	0x58024400
 8003194:	4b9a      	ldr	r3, [pc, #616]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	4997      	ldr	r1, [pc, #604]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
 80031a8:	e018      	b.n	80031dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031aa:	4b95      	ldr	r3, [pc, #596]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a94      	ldr	r2, [pc, #592]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fd ffd7 	bl	8001168 <HAL_GetTick>
 80031ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031be:	f7fd ffd3 	bl	8001168 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e2ed      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031d0:	4b8b      	ldr	r3, [pc, #556]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a9 	beq.w	800333c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ea:	4b85      	ldr	r3, [pc, #532]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031f4:	4b82      	ldr	r3, [pc, #520]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d007      	beq.n	8003210 <HAL_RCC_OscConfig+0x308>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b18      	cmp	r3, #24
 8003204:	d13a      	bne.n	800327c <HAL_RCC_OscConfig+0x374>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d135      	bne.n	800327c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003210:	4b7b      	ldr	r3, [pc, #492]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_OscConfig+0x320>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b80      	cmp	r3, #128	@ 0x80
 8003222:	d001      	beq.n	8003228 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e2c1      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003228:	f7fd ffce 	bl	80011c8 <HAL_GetREVID>
 800322c:	4603      	mov	r3, r0
 800322e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003232:	4293      	cmp	r3, r2
 8003234:	d817      	bhi.n	8003266 <HAL_RCC_OscConfig+0x35e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	2b20      	cmp	r3, #32
 800323c:	d108      	bne.n	8003250 <HAL_RCC_OscConfig+0x348>
 800323e:	4b70      	ldr	r3, [pc, #448]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003246:	4a6e      	ldr	r2, [pc, #440]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003248:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800324c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800324e:	e075      	b.n	800333c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003250:	4b6b      	ldr	r3, [pc, #428]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	069b      	lsls	r3, r3, #26
 800325e:	4968      	ldr	r1, [pc, #416]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003264:	e06a      	b.n	800333c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003266:	4b66      	ldr	r3, [pc, #408]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	061b      	lsls	r3, r3, #24
 8003274:	4962      	ldr	r1, [pc, #392]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003276:	4313      	orrs	r3, r2
 8003278:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800327a:	e05f      	b.n	800333c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d042      	beq.n	800330a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003284:	4b5e      	ldr	r3, [pc, #376]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5d      	ldr	r2, [pc, #372]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800328e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fd ff6a 	bl	8001168 <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003298:	f7fd ff66 	bl	8001168 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e280      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032aa:	4b55      	ldr	r3, [pc, #340]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032b6:	f7fd ff87 	bl	80011c8 <HAL_GetREVID>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d817      	bhi.n	80032f4 <HAL_RCC_OscConfig+0x3ec>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d108      	bne.n	80032de <HAL_RCC_OscConfig+0x3d6>
 80032cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80032d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80032d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032da:	6053      	str	r3, [r2, #4]
 80032dc:	e02e      	b.n	800333c <HAL_RCC_OscConfig+0x434>
 80032de:	4b48      	ldr	r3, [pc, #288]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	069b      	lsls	r3, r3, #26
 80032ec:	4944      	ldr	r1, [pc, #272]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
 80032f2:	e023      	b.n	800333c <HAL_RCC_OscConfig+0x434>
 80032f4:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	493f      	ldr	r1, [pc, #252]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003304:	4313      	orrs	r3, r2
 8003306:	60cb      	str	r3, [r1, #12]
 8003308:	e018      	b.n	800333c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800330a:	4b3d      	ldr	r3, [pc, #244]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3c      	ldr	r2, [pc, #240]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fd ff27 	bl	8001168 <HAL_GetTick>
 800331a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800331e:	f7fd ff23 	bl	8001168 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e23d      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003330:	4b33      	ldr	r3, [pc, #204]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d036      	beq.n	80033b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d019      	beq.n	8003384 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003350:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003354:	4a2a      	ldr	r2, [pc, #168]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7fd ff04 	bl	8001168 <HAL_GetTick>
 8003360:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fd ff00 	bl	8001168 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e21a      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003376:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x45c>
 8003382:	e018      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003384:	4b1e      	ldr	r3, [pc, #120]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003388:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd feea 	bl	8001168 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003398:	f7fd fee6 	bl	8001168 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e200      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80033ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d039      	beq.n	8003436 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01c      	beq.n	8003404 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80033d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033d6:	f7fd fec7 	bl	8001168 <HAL_GetTick>
 80033da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033de:	f7fd fec3 	bl	8001168 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e1dd      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033f0:	4b03      	ldr	r3, [pc, #12]	@ (8003400 <HAL_RCC_OscConfig+0x4f8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x4d6>
 80033fc:	e01b      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
 80033fe:	bf00      	nop
 8003400:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003404:	4b9b      	ldr	r3, [pc, #620]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a9a      	ldr	r2, [pc, #616]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800340a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800340e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003410:	f7fd feaa 	bl	8001168 <HAL_GetTick>
 8003414:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003418:	f7fd fea6 	bl	8001168 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1c0      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800342a:	4b92      	ldr	r3, [pc, #584]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8081 	beq.w	8003546 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003444:	4b8c      	ldr	r3, [pc, #560]	@ (8003678 <HAL_RCC_OscConfig+0x770>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a8b      	ldr	r2, [pc, #556]	@ (8003678 <HAL_RCC_OscConfig+0x770>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003450:	f7fd fe8a 	bl	8001168 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003458:	f7fd fe86 	bl	8001168 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	@ 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1a0      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800346a:	4b83      	ldr	r3, [pc, #524]	@ (8003678 <HAL_RCC_OscConfig+0x770>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d106      	bne.n	800348c <HAL_RCC_OscConfig+0x584>
 800347e:	4b7d      	ldr	r3, [pc, #500]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	4a7c      	ldr	r2, [pc, #496]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6713      	str	r3, [r2, #112]	@ 0x70
 800348a:	e02d      	b.n	80034e8 <HAL_RCC_OscConfig+0x5e0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10c      	bne.n	80034ae <HAL_RCC_OscConfig+0x5a6>
 8003494:	4b77      	ldr	r3, [pc, #476]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	4a76      	ldr	r2, [pc, #472]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a0:	4b74      	ldr	r3, [pc, #464]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a4:	4a73      	ldr	r2, [pc, #460]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ac:	e01c      	b.n	80034e8 <HAL_RCC_OscConfig+0x5e0>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5c8>
 80034b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c6:	4a6b      	ldr	r2, [pc, #428]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0x5e0>
 80034d0:	4b68      	ldr	r3, [pc, #416]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	4a67      	ldr	r2, [pc, #412]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	@ 0x70
 80034dc:	4b65      	ldr	r3, [pc, #404]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	4a64      	ldr	r2, [pc, #400]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fd fe3a 	bl	8001168 <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fd fe36 	bl	8001168 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e14e      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800350e:	4b59      	ldr	r3, [pc, #356]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ee      	beq.n	80034f8 <HAL_RCC_OscConfig+0x5f0>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fe24 	bl	8001168 <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fd fe20 	bl	8001168 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e138      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800353a:	4b4e      	ldr	r3, [pc, #312]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ee      	bne.n	8003524 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 812d 	beq.w	80037aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003550:	4b48      	ldr	r3, [pc, #288]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003558:	2b18      	cmp	r3, #24
 800355a:	f000 80bd 	beq.w	80036d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	2b02      	cmp	r3, #2
 8003564:	f040 809e 	bne.w	80036a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003568:	4b42      	ldr	r3, [pc, #264]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a41      	ldr	r2, [pc, #260]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800356e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fd fdf8 	bl	8001168 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fd fdf4 	bl	8001168 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e10e      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800358e:	4b39      	ldr	r3, [pc, #228]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800359a:	4b36      	ldr	r3, [pc, #216]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800359c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800359e:	4b37      	ldr	r3, [pc, #220]	@ (800367c <HAL_RCC_OscConfig+0x774>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	430a      	orrs	r2, r1
 80035ae:	4931      	ldr	r1, [pc, #196]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	3b01      	subs	r3, #1
 80035ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c2:	3b01      	subs	r3, #1
 80035c4:	025b      	lsls	r3, r3, #9
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	3b01      	subs	r3, #1
 80035d0:	041b      	lsls	r3, r3, #16
 80035d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	3b01      	subs	r3, #1
 80035de:	061b      	lsls	r3, r3, #24
 80035e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80035e4:	4923      	ldr	r1, [pc, #140]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80035ea:	4b22      	ldr	r3, [pc, #136]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	4a21      	ldr	r2, [pc, #132]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 80035f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fa:	4b21      	ldr	r3, [pc, #132]	@ (8003680 <HAL_RCC_OscConfig+0x778>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003602:	00d2      	lsls	r2, r2, #3
 8003604:	491b      	ldr	r1, [pc, #108]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003606:	4313      	orrs	r3, r2
 8003608:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800360a:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	f023 020c 	bic.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	4917      	ldr	r1, [pc, #92]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003618:	4313      	orrs	r3, r2
 800361a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800361c:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	f023 0202 	bic.w	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	4912      	ldr	r1, [pc, #72]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800362e:	4b11      	ldr	r3, [pc, #68]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	4a10      	ldr	r2, [pc, #64]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363a:	4b0e      	ldr	r3, [pc, #56]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	4a0d      	ldr	r2, [pc, #52]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003646:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	4a0a      	ldr	r2, [pc, #40]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 800364c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003652:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	4a07      	ldr	r2, [pc, #28]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365e:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <HAL_RCC_OscConfig+0x76c>)
 8003664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fd fd7d 	bl	8001168 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003670:	e011      	b.n	8003696 <HAL_RCC_OscConfig+0x78e>
 8003672:	bf00      	nop
 8003674:	58024400 	.word	0x58024400
 8003678:	58024800 	.word	0x58024800
 800367c:	fffffc0c 	.word	0xfffffc0c
 8003680:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd fd70 	bl	8001168 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e08a      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003696:	4b47      	ldr	r3, [pc, #284]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x77c>
 80036a2:	e082      	b.n	80037aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b43      	ldr	r3, [pc, #268]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a42      	ldr	r2, [pc, #264]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 80036aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fd fd5a 	bl	8001168 <HAL_GetTick>
 80036b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd fd56 	bl	8001168 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e070      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ca:	4b3a      	ldr	r3, [pc, #232]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x7b0>
 80036d6:	e068      	b.n	80037aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036d8:	4b36      	ldr	r3, [pc, #216]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036de:	4b35      	ldr	r3, [pc, #212]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d031      	beq.n	8003750 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f003 0203 	and.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d12a      	bne.n	8003750 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d122      	bne.n	8003750 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d11a      	bne.n	8003750 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003726:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d111      	bne.n	8003750 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d108      	bne.n	8003750 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	0e1b      	lsrs	r3, r3, #24
 8003742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e02b      	b.n	80037ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003754:	4b17      	ldr	r3, [pc, #92]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 8003756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003758:	08db      	lsrs	r3, r3, #3
 800375a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800375e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	429a      	cmp	r2, r3
 8003768:	d01f      	beq.n	80037aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800376a:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003776:	f7fd fcf7 	bl	8001168 <HAL_GetTick>
 800377a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800377c:	bf00      	nop
 800377e:	f7fd fcf3 	bl	8001168 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	4293      	cmp	r3, r2
 8003788:	d0f9      	beq.n	800377e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800378a:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 800378c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800378e:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <HAL_RCC_OscConfig+0x8b0>)
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003796:	00d2      	lsls	r2, r2, #3
 8003798:	4906      	ldr	r1, [pc, #24]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 800379a:	4313      	orrs	r3, r2
 800379c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <HAL_RCC_OscConfig+0x8ac>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3730      	adds	r7, #48	@ 0x30
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	58024400 	.word	0x58024400
 80037b8:	ffff0007 	.word	0xffff0007

080037bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e19c      	b.n	8003b0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b8a      	ldr	r3, [pc, #552]	@ (80039fc <HAL_RCC_ClockConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d910      	bls.n	8003800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b87      	ldr	r3, [pc, #540]	@ (80039fc <HAL_RCC_ClockConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 020f 	bic.w	r2, r3, #15
 80037e6:	4985      	ldr	r1, [pc, #532]	@ (80039fc <HAL_RCC_ClockConfig+0x240>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b83      	ldr	r3, [pc, #524]	@ (80039fc <HAL_RCC_ClockConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e184      	b.n	8003b0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	4b7b      	ldr	r3, [pc, #492]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003818:	429a      	cmp	r2, r3
 800381a:	d908      	bls.n	800382e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800381c:	4b78      	ldr	r3, [pc, #480]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4975      	ldr	r1, [pc, #468]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800382a:	4313      	orrs	r3, r2
 800382c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d010      	beq.n	800385c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	4b70      	ldr	r3, [pc, #448]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003846:	429a      	cmp	r2, r3
 8003848:	d908      	bls.n	800385c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800384a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	496a      	ldr	r1, [pc, #424]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 8003858:	4313      	orrs	r3, r2
 800385a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	4b64      	ldr	r3, [pc, #400]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003874:	429a      	cmp	r2, r3
 8003876:	d908      	bls.n	800388a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003878:	4b61      	ldr	r3, [pc, #388]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	495e      	ldr	r1, [pc, #376]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 8003886:	4313      	orrs	r3, r2
 8003888:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d908      	bls.n	80038b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038a6:	4b56      	ldr	r3, [pc, #344]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	4953      	ldr	r1, [pc, #332]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d908      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f023 020f 	bic.w	r2, r3, #15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4947      	ldr	r1, [pc, #284]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d055      	beq.n	800399e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038f2:	4b43      	ldr	r3, [pc, #268]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4940      	ldr	r1, [pc, #256]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 8003900:	4313      	orrs	r3, r2
 8003902:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d107      	bne.n	800391c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800390c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d121      	bne.n	800395c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0f6      	b.n	8003b0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d107      	bne.n	8003934 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003924:	4b36      	ldr	r3, [pc, #216]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d115      	bne.n	800395c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0ea      	b.n	8003b0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d107      	bne.n	800394c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800393c:	4b30      	ldr	r3, [pc, #192]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0de      	b.n	8003b0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800394c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0d6      	b.n	8003b0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800395c:	4b28      	ldr	r3, [pc, #160]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f023 0207 	bic.w	r2, r3, #7
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4925      	ldr	r1, [pc, #148]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800396a:	4313      	orrs	r3, r2
 800396c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396e:	f7fd fbfb 	bl	8001168 <HAL_GetTick>
 8003972:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003974:	e00a      	b.n	800398c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003976:	f7fd fbf7 	bl	8001168 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0be      	b.n	8003b0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	429a      	cmp	r2, r3
 800399c:	d1eb      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4b14      	ldr	r3, [pc, #80]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d208      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ba:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f023 020f 	bic.w	r2, r3, #15
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	490e      	ldr	r1, [pc, #56]	@ (8003a00 <HAL_RCC_ClockConfig+0x244>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_ClockConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d214      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <HAL_RCC_ClockConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 020f 	bic.w	r2, r3, #15
 80039e2:	4906      	ldr	r1, [pc, #24]	@ (80039fc <HAL_RCC_ClockConfig+0x240>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <HAL_RCC_ClockConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e086      	b.n	8003b0a <HAL_RCC_ClockConfig+0x34e>
 80039fc:	52002000 	.word	0x52002000
 8003a00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d010      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	4b3f      	ldr	r3, [pc, #252]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d208      	bcs.n	8003a32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a20:	4b3c      	ldr	r3, [pc, #240]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	4939      	ldr	r1, [pc, #228]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	4b34      	ldr	r3, [pc, #208]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d208      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a4e:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	492e      	ldr	r1, [pc, #184]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d208      	bcs.n	8003a8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a7c:	4b25      	ldr	r3, [pc, #148]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	4922      	ldr	r1, [pc, #136]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d208      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4917      	ldr	r1, [pc, #92]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003abc:	f000 f834 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	4912      	ldr	r1, [pc, #72]	@ (8003b18 <HAL_RCC_ClockConfig+0x35c>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ada:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_RCC_ClockConfig+0x358>)
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8003b18 <HAL_RCC_ClockConfig+0x35c>)
 8003ae4:	5cd3      	ldrb	r3, [r2, r3]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
 8003af0:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <HAL_RCC_ClockConfig+0x360>)
 8003af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003af4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <HAL_RCC_ClockConfig+0x364>)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_RCC_ClockConfig+0x368>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fae8 	bl	80010d4 <HAL_InitTick>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	58024400 	.word	0x58024400
 8003b18:	0800b5d4 	.word	0x0800b5d4
 8003b1c:	24000004 	.word	0x24000004
 8003b20:	24000000 	.word	0x24000000
 8003b24:	24000024 	.word	0x24000024

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b089      	sub	sp, #36	@ 0x24
 8003b2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b2e:	4bb3      	ldr	r3, [pc, #716]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b36:	2b18      	cmp	r3, #24
 8003b38:	f200 8155 	bhi.w	8003de6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003ba9 	.word	0x08003ba9
 8003b48:	08003de7 	.word	0x08003de7
 8003b4c:	08003de7 	.word	0x08003de7
 8003b50:	08003de7 	.word	0x08003de7
 8003b54:	08003de7 	.word	0x08003de7
 8003b58:	08003de7 	.word	0x08003de7
 8003b5c:	08003de7 	.word	0x08003de7
 8003b60:	08003de7 	.word	0x08003de7
 8003b64:	08003bcf 	.word	0x08003bcf
 8003b68:	08003de7 	.word	0x08003de7
 8003b6c:	08003de7 	.word	0x08003de7
 8003b70:	08003de7 	.word	0x08003de7
 8003b74:	08003de7 	.word	0x08003de7
 8003b78:	08003de7 	.word	0x08003de7
 8003b7c:	08003de7 	.word	0x08003de7
 8003b80:	08003de7 	.word	0x08003de7
 8003b84:	08003bd5 	.word	0x08003bd5
 8003b88:	08003de7 	.word	0x08003de7
 8003b8c:	08003de7 	.word	0x08003de7
 8003b90:	08003de7 	.word	0x08003de7
 8003b94:	08003de7 	.word	0x08003de7
 8003b98:	08003de7 	.word	0x08003de7
 8003b9c:	08003de7 	.word	0x08003de7
 8003ba0:	08003de7 	.word	0x08003de7
 8003ba4:	08003bdb 	.word	0x08003bdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ba8:	4b94      	ldr	r3, [pc, #592]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bb4:	4b91      	ldr	r3, [pc, #580]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	4a90      	ldr	r2, [pc, #576]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003bc6:	e111      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bc8:	4b8d      	ldr	r3, [pc, #564]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bca:	61bb      	str	r3, [r7, #24]
      break;
 8003bcc:	e10e      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003bce:	4b8d      	ldr	r3, [pc, #564]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bd0:	61bb      	str	r3, [r7, #24]
      break;
 8003bd2:	e10b      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bd6:	61bb      	str	r3, [r7, #24]
      break;
 8003bd8:	e108      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bda:	4b88      	ldr	r3, [pc, #544]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003be4:	4b85      	ldr	r3, [pc, #532]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003bf0:	4b82      	ldr	r3, [pc, #520]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003bfa:	4b80      	ldr	r3, [pc, #512]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bfe:	08db      	lsrs	r3, r3, #3
 8003c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80e1 	beq.w	8003de0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	f000 8083 	beq.w	8003d2c <HAL_RCC_GetSysClockFreq+0x204>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	f200 80a1 	bhi.w	8003d70 <HAL_RCC_GetSysClockFreq+0x248>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x114>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d056      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c3a:	e099      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d02d      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c48:	4b6c      	ldr	r3, [pc, #432]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	4a6b      	ldr	r2, [pc, #428]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	4b62      	ldr	r3, [pc, #392]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ca2:	e087      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb6:	4b51      	ldr	r3, [pc, #324]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ce6:	e065      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfa:	4b40      	ldr	r3, [pc, #256]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d2a:	e043      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d6e:	e021      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d82:	4b1e      	ldr	r3, [pc, #120]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003db2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	0a5b      	lsrs	r3, r3, #9
 8003dba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd8:	ee17 3a90 	vmov	r3, s15
 8003ddc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003dde:	e005      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
      break;
 8003de4:	e002      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003de6:	4b07      	ldr	r3, [pc, #28]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003de8:	61bb      	str	r3, [r7, #24]
      break;
 8003dea:	bf00      	nop
  }

  return sysclockfreq;
 8003dec:	69bb      	ldr	r3, [r7, #24]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	@ 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	03d09000 	.word	0x03d09000
 8003e04:	003d0900 	.word	0x003d0900
 8003e08:	017d7840 	.word	0x017d7840
 8003e0c:	46000000 	.word	0x46000000
 8003e10:	4c742400 	.word	0x4c742400
 8003e14:	4a742400 	.word	0x4a742400
 8003e18:	4bbebc20 	.word	0x4bbebc20

08003e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e22:	f7ff fe81 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b10      	ldr	r3, [pc, #64]	@ (8003e6c <HAL_RCC_GetHCLKFreq+0x50>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	490f      	ldr	r1, [pc, #60]	@ (8003e70 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e34:	5ccb      	ldrb	r3, [r1, r3]
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e40:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <HAL_RCC_GetHCLKFreq+0x50>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	4a09      	ldr	r2, [pc, #36]	@ (8003e70 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	4a07      	ldr	r2, [pc, #28]	@ (8003e74 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e5a:	4a07      	ldr	r2, [pc, #28]	@ (8003e78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e60:	4b04      	ldr	r3, [pc, #16]	@ (8003e74 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	58024400 	.word	0x58024400
 8003e70:	0800b5d4 	.word	0x0800b5d4
 8003e74:	24000004 	.word	0x24000004
 8003e78:	24000000 	.word	0x24000000

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e80:	f7ff ffcc 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4904      	ldr	r1, [pc, #16]	@ (8003ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	0800b5d4 	.word	0x0800b5d4

08003ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003eac:	f7ff ffb6 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4904      	ldr	r1, [pc, #16]	@ (8003ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	0800b5d4 	.word	0x0800b5d4

08003ed4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed8:	b0ca      	sub	sp, #296	@ 0x128
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003ef8:	2500      	movs	r5, #0
 8003efa:	ea54 0305 	orrs.w	r3, r4, r5
 8003efe:	d049      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f0a:	d02f      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f10:	d828      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f16:	d01a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f1c:	d822      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f26:	d007      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f28:	e01c      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f2a:	4bb8      	ldr	r3, [pc, #736]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	4ab7      	ldr	r2, [pc, #732]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f36:	e01a      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 fc8f 	bl	8005864 <RCCEx_PLL2_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f4c:	e00f      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f52:	3328      	adds	r3, #40	@ 0x28
 8003f54:	2102      	movs	r1, #2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 fd36 	bl	80059c8 <RCCEx_PLL3_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f62:	e004      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f6a:	e000      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f76:	4ba5      	ldr	r3, [pc, #660]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f84:	4aa1      	ldr	r2, [pc, #644]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f86:	430b      	orrs	r3, r1
 8003f88:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f8a:	e003      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003fa0:	f04f 0900 	mov.w	r9, #0
 8003fa4:	ea58 0309 	orrs.w	r3, r8, r9
 8003fa8:	d047      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d82a      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fd1 	.word	0x08003fd1
 8003fc0:	08003fdf 	.word	0x08003fdf
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08004013 	.word	0x08004013
 8003fcc:	08004013 	.word	0x08004013
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	4a8d      	ldr	r2, [pc, #564]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fdc:	e01a      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 fc3c 	bl	8005864 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ff2:	e00f      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	3328      	adds	r3, #40	@ 0x28
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 fce3 	bl	80059c8 <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004008:	e004      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800401c:	4b7b      	ldr	r3, [pc, #492]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800401e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004020:	f023 0107 	bic.w	r1, r3, #7
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	4a78      	ldr	r2, [pc, #480]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800402c:	430b      	orrs	r3, r1
 800402e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004030:	e003      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004046:	f04f 0b00 	mov.w	fp, #0
 800404a:	ea5a 030b 	orrs.w	r3, sl, fp
 800404e:	d04c      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800405a:	d030      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800405c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004060:	d829      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004062:	2bc0      	cmp	r3, #192	@ 0xc0
 8004064:	d02d      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004066:	2bc0      	cmp	r3, #192	@ 0xc0
 8004068:	d825      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800406a:	2b80      	cmp	r3, #128	@ 0x80
 800406c:	d018      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800406e:	2b80      	cmp	r3, #128	@ 0x80
 8004070:	d821      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004076:	2b40      	cmp	r3, #64	@ 0x40
 8004078:	d007      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800407a:	e01c      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800407c:	4b63      	ldr	r3, [pc, #396]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	4a62      	ldr	r2, [pc, #392]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004088:	e01c      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	3308      	adds	r3, #8
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 fbe6 	bl	8005864 <RCCEx_PLL2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800409e:	e011      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	3328      	adds	r3, #40	@ 0x28
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 fc8d 	bl	80059c8 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040cc:	4b4f      	ldr	r3, [pc, #316]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	4a4c      	ldr	r2, [pc, #304]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	6513      	str	r3, [r2, #80]	@ 0x50
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80040f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004100:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004104:	460b      	mov	r3, r1
 8004106:	4313      	orrs	r3, r2
 8004108:	d053      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004112:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004116:	d035      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004118:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800411c:	d82e      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800411e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004122:	d031      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004124:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004128:	d828      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800412a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800412e:	d01a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004134:	d822      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800413a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800413e:	d007      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004140:	e01c      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004142:	4b32      	ldr	r3, [pc, #200]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	4a31      	ldr	r2, [pc, #196]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800414e:	e01c      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004154:	3308      	adds	r3, #8
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f001 fb83 	bl	8005864 <RCCEx_PLL2_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004164:	e011      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	3328      	adds	r3, #40	@ 0x28
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f001 fc2a 	bl	80059c8 <RCCEx_PLL3_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800417a:	e006      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004182:	e002      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004192:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041a2:	4a1a      	ldr	r2, [pc, #104]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80041be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80041c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d056      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041de:	d038      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80041e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041e4:	d831      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041ea:	d034      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80041ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041f0:	d82b      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041f6:	d01d      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80041f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041fc:	d825      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d006      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004208:	e01f      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800420a:	bf00      	nop
 800420c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004210:	4ba2      	ldr	r3, [pc, #648]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	4aa1      	ldr	r2, [pc, #644]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800421a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800421c:	e01c      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	3308      	adds	r3, #8
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fb1c 	bl	8005864 <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004232:	e011      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	3328      	adds	r3, #40	@ 0x28
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f001 fbc3 	bl	80059c8 <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004250:	e002      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10b      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004260:	4b8e      	ldr	r3, [pc, #568]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004264:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004270:	4a8a      	ldr	r2, [pc, #552]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004272:	430b      	orrs	r3, r1
 8004274:	6593      	str	r3, [r2, #88]	@ 0x58
 8004276:	e003      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800428c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004296:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d03a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a6:	2b30      	cmp	r3, #48	@ 0x30
 80042a8:	d01f      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80042aa:	2b30      	cmp	r3, #48	@ 0x30
 80042ac:	d819      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d00c      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d815      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d019      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d111      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042be:	4b77      	ldr	r3, [pc, #476]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	4a76      	ldr	r2, [pc, #472]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042ca:	e011      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d0:	3308      	adds	r3, #8
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fac5 	bl	8005864 <RCCEx_PLL2_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042e0:	e006      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042e8:	e002      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042f8:	4b68      	ldr	r3, [pc, #416]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	4a65      	ldr	r2, [pc, #404]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004308:	430b      	orrs	r3, r1
 800430a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800430c:	e003      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004322:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800432c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004330:	460b      	mov	r3, r1
 8004332:	4313      	orrs	r3, r2
 8004334:	d051      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004340:	d035      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004346:	d82e      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004348:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800434c:	d031      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800434e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004352:	d828      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004358:	d01a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800435a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435e:	d822      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004368:	d007      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800436a:	e01c      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800436c:	4b4b      	ldr	r3, [pc, #300]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	4a4a      	ldr	r2, [pc, #296]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004378:	e01c      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	3308      	adds	r3, #8
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f001 fa6e 	bl	8005864 <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800438e:	e011      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	3328      	adds	r3, #40	@ 0x28
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f001 fb15 	bl	80059c8 <RCCEx_PLL3_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043a4:	e006      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ac:	e002      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043bc:	4b37      	ldr	r3, [pc, #220]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ca:	4a34      	ldr	r2, [pc, #208]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80043e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80043f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d056      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004404:	d033      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004406:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800440a:	d82c      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800440c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004410:	d02f      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004416:	d826      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800441c:	d02b      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800441e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004422:	d820      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004428:	d012      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800442a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800442e:	d81a      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d022      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004438:	d115      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	3308      	adds	r3, #8
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f001 fa0e 	bl	8005864 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800444e:	e015      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	3328      	adds	r3, #40	@ 0x28
 8004456:	2101      	movs	r1, #1
 8004458:	4618      	mov	r0, r3
 800445a:	f001 fab5 	bl	80059c8 <RCCEx_PLL3_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004464:	e00a      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800446e:	bf00      	nop
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800447a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10d      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004488:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004492:	4a02      	ldr	r2, [pc, #8]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6513      	str	r3, [r2, #80]	@ 0x50
 8004498:	e006      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80044b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044b8:	2300      	movs	r3, #0
 80044ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	d055      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044d4:	d033      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80044d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044da:	d82c      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e0:	d02f      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e6:	d826      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044ec:	d02b      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80044ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044f2:	d820      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044f8:	d012      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80044fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044fe:	d81a      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d022      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004508:	d115      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	3308      	adds	r3, #8
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f001 f9a6 	bl	8005864 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800451e:	e015      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	3328      	adds	r3, #40	@ 0x28
 8004526:	2101      	movs	r1, #1
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fa4d 	bl	80059c8 <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800453e:	bf00      	nop
 8004540:	e004      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800454a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004554:	4ba3      	ldr	r3, [pc, #652]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004564:	4a9f      	ldr	r2, [pc, #636]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004566:	430b      	orrs	r3, r1
 8004568:	6593      	str	r3, [r2, #88]	@ 0x58
 800456a:	e003      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004580:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004584:	2300      	movs	r3, #0
 8004586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800458a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800458e:	460b      	mov	r3, r1
 8004590:	4313      	orrs	r3, r2
 8004592:	d037      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800459e:	d00e      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045a4:	d816      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d018      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80045aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ae:	d111      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b0:	4b8c      	ldr	r3, [pc, #560]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	4a8b      	ldr	r2, [pc, #556]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045bc:	e00f      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	3308      	adds	r3, #8
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 f94c 	bl	8005864 <RCCEx_PLL2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045d2:	e004      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045da:	e000      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80045dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045e6:	4b7f      	ldr	r3, [pc, #508]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	4a7b      	ldr	r2, [pc, #492]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f6:	430b      	orrs	r3, r1
 80045f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80045fa:	e003      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004614:	2300      	movs	r3, #0
 8004616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800461a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800461e:	460b      	mov	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	d039      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462a:	2b03      	cmp	r3, #3
 800462c:	d81c      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800462e:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004671 	.word	0x08004671
 8004638:	08004645 	.word	0x08004645
 800463c:	08004653 	.word	0x08004653
 8004640:	08004671 	.word	0x08004671
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004644:	4b67      	ldr	r3, [pc, #412]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	4a66      	ldr	r2, [pc, #408]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800464a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800464e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004650:	e00f      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	3308      	adds	r3, #8
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f001 f902 	bl	8005864 <RCCEx_PLL2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004666:	e004      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800466e:	e000      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800467a:	4b5a      	ldr	r3, [pc, #360]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800467c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467e:	f023 0103 	bic.w	r1, r3, #3
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004688:	4a56      	ldr	r2, [pc, #344]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800468a:	430b      	orrs	r3, r1
 800468c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800468e:	e003      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80046a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80046b2:	460b      	mov	r3, r1
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f000 809f 	beq.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ba:	4b4b      	ldr	r3, [pc, #300]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a4a      	ldr	r2, [pc, #296]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046c6:	f7fc fd4f 	bl	8001168 <HAL_GetTick>
 80046ca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046ce:	e00b      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d0:	f7fc fd4a 	bl	8001168 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b64      	cmp	r3, #100	@ 0x64
 80046de:	d903      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e6:	e005      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e8:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ed      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80046f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d179      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046fc:	4b39      	ldr	r3, [pc, #228]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004708:	4053      	eors	r3, r2
 800470a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d015      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004712:	4b34      	ldr	r3, [pc, #208]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800471e:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	4a30      	ldr	r2, [pc, #192]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004728:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800472a:	4b2e      	ldr	r3, [pc, #184]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472e:	4a2d      	ldr	r2, [pc, #180]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004734:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004736:	4a2b      	ldr	r2, [pc, #172]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800473c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800474a:	d118      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fc fd0c 	bl	8001168 <HAL_GetTick>
 8004750:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004754:	e00d      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fc fd07 	bl	8001168 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004760:	1ad2      	subs	r2, r2, r3
 8004762:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004766:	429a      	cmp	r2, r3
 8004768:	d903      	bls.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004770:	e005      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004772:	4b1c      	ldr	r3, [pc, #112]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0eb      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004782:	2b00      	cmp	r3, #0
 8004784:	d129      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800478e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004796:	d10e      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004798:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047a8:	091a      	lsrs	r2, r3, #4
 80047aa:	4b10      	ldr	r3, [pc, #64]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	4a0d      	ldr	r2, [pc, #52]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6113      	str	r3, [r2, #16]
 80047b4:	e005      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	4a0a      	ldr	r2, [pc, #40]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047c0:	6113      	str	r3, [r2, #16]
 80047c2:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d2:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d8:	e00e      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80047e2:	e009      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80047e4:	58024400 	.word	0x58024400
 80047e8:	58024800 	.word	0x58024800
 80047ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f002 0301 	and.w	r3, r2, #1
 8004804:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800480e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	f000 8089 	beq.w	800492c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004820:	2b28      	cmp	r3, #40	@ 0x28
 8004822:	d86b      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004824:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	08004905 	.word	0x08004905
 8004830:	080048fd 	.word	0x080048fd
 8004834:	080048fd 	.word	0x080048fd
 8004838:	080048fd 	.word	0x080048fd
 800483c:	080048fd 	.word	0x080048fd
 8004840:	080048fd 	.word	0x080048fd
 8004844:	080048fd 	.word	0x080048fd
 8004848:	080048fd 	.word	0x080048fd
 800484c:	080048d1 	.word	0x080048d1
 8004850:	080048fd 	.word	0x080048fd
 8004854:	080048fd 	.word	0x080048fd
 8004858:	080048fd 	.word	0x080048fd
 800485c:	080048fd 	.word	0x080048fd
 8004860:	080048fd 	.word	0x080048fd
 8004864:	080048fd 	.word	0x080048fd
 8004868:	080048fd 	.word	0x080048fd
 800486c:	080048e7 	.word	0x080048e7
 8004870:	080048fd 	.word	0x080048fd
 8004874:	080048fd 	.word	0x080048fd
 8004878:	080048fd 	.word	0x080048fd
 800487c:	080048fd 	.word	0x080048fd
 8004880:	080048fd 	.word	0x080048fd
 8004884:	080048fd 	.word	0x080048fd
 8004888:	080048fd 	.word	0x080048fd
 800488c:	08004905 	.word	0x08004905
 8004890:	080048fd 	.word	0x080048fd
 8004894:	080048fd 	.word	0x080048fd
 8004898:	080048fd 	.word	0x080048fd
 800489c:	080048fd 	.word	0x080048fd
 80048a0:	080048fd 	.word	0x080048fd
 80048a4:	080048fd 	.word	0x080048fd
 80048a8:	080048fd 	.word	0x080048fd
 80048ac:	08004905 	.word	0x08004905
 80048b0:	080048fd 	.word	0x080048fd
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048fd 	.word	0x080048fd
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048fd 	.word	0x080048fd
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	08004905 	.word	0x08004905
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	3308      	adds	r3, #8
 80048d6:	2101      	movs	r1, #1
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 ffc3 	bl	8005864 <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048e4:	e00f      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	3328      	adds	r3, #40	@ 0x28
 80048ec:	2101      	movs	r1, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 f86a 	bl	80059c8 <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048fa:	e004      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800490e:	4bbf      	ldr	r3, [pc, #764]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004912:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800491c:	4abb      	ldr	r2, [pc, #748]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800491e:	430b      	orrs	r3, r1
 8004920:	6553      	str	r3, [r2, #84]	@ 0x54
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f002 0302 	and.w	r3, r2, #2
 8004938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800493c:	2300      	movs	r3, #0
 800493e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004942:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004946:	460b      	mov	r3, r1
 8004948:	4313      	orrs	r3, r2
 800494a:	d041      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004950:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004952:	2b05      	cmp	r3, #5
 8004954:	d824      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004956:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	080049a9 	.word	0x080049a9
 8004960:	08004975 	.word	0x08004975
 8004964:	0800498b 	.word	0x0800498b
 8004968:	080049a9 	.word	0x080049a9
 800496c:	080049a9 	.word	0x080049a9
 8004970:	080049a9 	.word	0x080049a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	3308      	adds	r3, #8
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 ff71 	bl	8005864 <RCCEx_PLL2_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004988:	e00f      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	3328      	adds	r3, #40	@ 0x28
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f001 f818 	bl	80059c8 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800499e:	e004      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80049a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049b2:	4b96      	ldr	r3, [pc, #600]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	f023 0107 	bic.w	r1, r3, #7
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c0:	4a92      	ldr	r2, [pc, #584]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f002 0304 	and.w	r3, r2, #4
 80049dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4313      	orrs	r3, r2
 80049ee:	d044      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d825      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80049fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004a04 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a51 	.word	0x08004a51
 8004a08:	08004a1d 	.word	0x08004a1d
 8004a0c:	08004a33 	.word	0x08004a33
 8004a10:	08004a51 	.word	0x08004a51
 8004a14:	08004a51 	.word	0x08004a51
 8004a18:	08004a51 	.word	0x08004a51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a20:	3308      	adds	r3, #8
 8004a22:	2101      	movs	r1, #1
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 ff1d 	bl	8005864 <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a30:	e00f      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	3328      	adds	r3, #40	@ 0x28
 8004a38:	2101      	movs	r1, #1
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 ffc4 	bl	80059c8 <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a46:	e004      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a5a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5e:	f023 0107 	bic.w	r1, r3, #7
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a6a:	4a68      	ldr	r2, [pc, #416]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a70:	e003      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f002 0320 	and.w	r3, r2, #32
 8004a86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d055      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aa6:	d033      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aac:	d82c      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab2:	d02f      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab8:	d826      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004abe:	d02b      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004ac0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ac4:	d820      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aca:	d012      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ad0:	d81a      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d022      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ada:	d115      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 febd 	bl	8005864 <RCCEx_PLL2_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004af0:	e015      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	3328      	adds	r3, #40	@ 0x28
 8004af8:	2102      	movs	r1, #2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 ff64 	bl	80059c8 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b06:	e00a      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b0e:	e006      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b26:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	4a35      	ldr	r2, [pc, #212]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b3c:	e003      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d058      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b72:	d033      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b78:	d82c      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7e:	d02f      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b84:	d826      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b8a:	d02b      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004b8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b90:	d820      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b96:	d012      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b9c:	d81a      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d022      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba6:	d115      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	3308      	adds	r3, #8
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fe57 	bl	8005864 <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e015      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc2:	3328      	adds	r3, #40	@ 0x28
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fefe 	bl	80059c8 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e00a      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bda:	e006      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bdc:	bf00      	nop
 8004bde:	e004      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10e      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c02:	4a02      	ldr	r2, [pc, #8]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c08:	e006      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004c0a:	bf00      	nop
 8004c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c32:	460b      	mov	r3, r1
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d055      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c44:	d033      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004c46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c4a:	d82c      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c50:	d02f      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c56:	d826      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c5c:	d02b      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004c5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c62:	d820      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c68:	d012      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004c6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c6e:	d81a      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d022      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c78:	d115      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	3308      	adds	r3, #8
 8004c80:	2100      	movs	r1, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fdee 	bl	8005864 <RCCEx_PLL2_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c8e:	e015      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c94:	3328      	adds	r3, #40	@ 0x28
 8004c96:	2102      	movs	r1, #2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fe95 	bl	80059c8 <RCCEx_PLL3_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cac:	e006      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e004      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cb2:	bf00      	nop
 8004cb4:	e002      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10b      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cc4:	4ba1      	ldr	r3, [pc, #644]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cd4:	4a9d      	ldr	r2, [pc, #628]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cda:	e003      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f002 0308 	and.w	r3, r2, #8
 8004cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4313      	orrs	r3, r2
 8004d02:	d01e      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	3328      	adds	r3, #40	@ 0x28
 8004d18:	2102      	movs	r1, #2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fe54 	bl	80059c8 <RCCEx_PLL3_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d2c:	4b87      	ldr	r3, [pc, #540]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3c:	4a83      	ldr	r2, [pc, #524]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f002 0310 	and.w	r3, r2, #16
 8004d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d52:	2300      	movs	r3, #0
 8004d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d01e      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d74:	3328      	adds	r3, #40	@ 0x28
 8004d76:	2102      	movs	r1, #2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fe25 	bl	80059c8 <RCCEx_PLL3_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d8a:	4b70      	ldr	r3, [pc, #448]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d9a:	4a6c      	ldr	r2, [pc, #432]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004dac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004db6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	d03e      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dcc:	d022      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004dce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd2:	d81b      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ddc:	d00b      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004dde:	e015      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de4:	3308      	adds	r3, #8
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fd3b 	bl	8005864 <RCCEx_PLL2_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004df4:	e00f      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfa:	3328      	adds	r3, #40	@ 0x28
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fde2 	bl	80059c8 <RCCEx_PLL3_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e0a:	e004      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e12:	e000      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e2e:	4a47      	ldr	r2, [pc, #284]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e30:	430b      	orrs	r3, r1
 8004e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e54:	460b      	mov	r3, r1
 8004e56:	4313      	orrs	r3, r2
 8004e58:	d03b      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e66:	d01f      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004e68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e6c:	d818      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e72:	d003      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e78:	d007      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e7a:	e011      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7c:	4b33      	ldr	r3, [pc, #204]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e80:	4a32      	ldr	r2, [pc, #200]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e88:	e00f      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	3328      	adds	r3, #40	@ 0x28
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fd98 	bl	80059c8 <RCCEx_PLL3_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e9e:	e004      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eb2:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec2:	4a22      	ldr	r2, [pc, #136]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ec8:	e003      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ede:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ee4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4313      	orrs	r3, r2
 8004eec:	d034      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004efc:	d007      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004efe:	e011      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f00:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	4a11      	ldr	r2, [pc, #68]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f0c:	e00e      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	3308      	adds	r3, #8
 8004f14:	2102      	movs	r1, #2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fca4 	bl	8005864 <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10d      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f34:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f42:	4a02      	ldr	r2, [pc, #8]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f44:	430b      	orrs	r3, r1
 8004f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f48:	e006      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004f4a:	bf00      	nop
 8004f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f66:	2300      	movs	r3, #0
 8004f68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4313      	orrs	r3, r2
 8004f72:	d00c      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	3328      	adds	r3, #40	@ 0x28
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fd23 	bl	80059c8 <RCCEx_PLL3_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004f9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fa0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	d038      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb6:	d018      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fbc:	d811      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc2:	d014      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc8:	d80b      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd4:	4bc3      	ldr	r3, [pc, #780]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	4ac2      	ldr	r2, [pc, #776]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fe8:	e004      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ffc:	4bb9      	ldr	r3, [pc, #740]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005000:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500c:	4ab5      	ldr	r2, [pc, #724]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800500e:	430b      	orrs	r3, r1
 8005010:	6553      	str	r3, [r2, #84]	@ 0x54
 8005012:	e003      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800501c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005028:	65bb      	str	r3, [r7, #88]	@ 0x58
 800502a:	2300      	movs	r3, #0
 800502c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800502e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005038:	4baa      	ldr	r3, [pc, #680]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800503a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005046:	4aa7      	ldr	r2, [pc, #668]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005048:	430b      	orrs	r3, r1
 800504a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800504c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005058:	653b      	str	r3, [r7, #80]	@ 0x50
 800505a:	2300      	movs	r3, #0
 800505c:	657b      	str	r3, [r7, #84]	@ 0x54
 800505e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005062:	460b      	mov	r3, r1
 8005064:	4313      	orrs	r3, r2
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005068:	4b9e      	ldr	r3, [pc, #632]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005074:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005078:	4a9a      	ldr	r2, [pc, #616]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800507a:	430b      	orrs	r3, r1
 800507c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800508a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800508c:	2300      	movs	r3, #0
 800508e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005090:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800509a:	4b92      	ldr	r3, [pc, #584]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800509c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a8:	4a8e      	ldr	r2, [pc, #568]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050aa:	430b      	orrs	r3, r1
 80050ac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80050ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80050bc:	2300      	movs	r3, #0
 80050be:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ca:	4b86      	ldr	r3, [pc, #536]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	4a85      	ldr	r2, [pc, #532]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050d4:	6113      	str	r3, [r2, #16]
 80050d6:	4b83      	ldr	r3, [pc, #524]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050d8:	6919      	ldr	r1, [r3, #16]
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80050e2:	4a80      	ldr	r2, [pc, #512]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80050f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050f6:	2300      	movs	r3, #0
 80050f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80050fe:	460b      	mov	r3, r1
 8005100:	4313      	orrs	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005104:	4b77      	ldr	r3, [pc, #476]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005108:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005112:	4a74      	ldr	r2, [pc, #464]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005114:	430b      	orrs	r3, r1
 8005116:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
 8005126:	2300      	movs	r3, #0
 8005128:	637b      	str	r3, [r7, #52]	@ 0x34
 800512a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800512e:	460b      	mov	r3, r1
 8005130:	4313      	orrs	r3, r2
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005134:	4b6b      	ldr	r3, [pc, #428]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005138:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005144:	4a67      	ldr	r2, [pc, #412]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005146:	430b      	orrs	r3, r1
 8005148:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800514a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	2100      	movs	r1, #0
 8005154:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800515c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005160:	460b      	mov	r3, r1
 8005162:	4313      	orrs	r3, r2
 8005164:	d011      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516a:	3308      	adds	r3, #8
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fb78 	bl	8005864 <RCCEx_PLL2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800517a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800518a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	2100      	movs	r1, #0
 8005194:	6239      	str	r1, [r7, #32]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
 800519c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051a0:	460b      	mov	r3, r1
 80051a2:	4313      	orrs	r3, r2
 80051a4:	d011      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051aa:	3308      	adds	r3, #8
 80051ac:	2101      	movs	r1, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fb58 	bl	8005864 <RCCEx_PLL2_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	2100      	movs	r1, #0
 80051d4:	61b9      	str	r1, [r7, #24]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051e0:	460b      	mov	r3, r1
 80051e2:	4313      	orrs	r3, r2
 80051e4:	d011      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ea:	3308      	adds	r3, #8
 80051ec:	2102      	movs	r1, #2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fb38 	bl	8005864 <RCCEx_PLL2_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	2100      	movs	r1, #0
 8005214:	6139      	str	r1, [r7, #16]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005220:	460b      	mov	r3, r1
 8005222:	4313      	orrs	r3, r2
 8005224:	d011      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522a:	3328      	adds	r3, #40	@ 0x28
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fbca 	bl	80059c8 <RCCEx_PLL3_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800523a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800524a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	2100      	movs	r1, #0
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005260:	460b      	mov	r3, r1
 8005262:	4313      	orrs	r3, r2
 8005264:	d011      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526a:	3328      	adds	r3, #40	@ 0x28
 800526c:	2101      	movs	r1, #1
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fbaa 	bl	80059c8 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800527a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	2100      	movs	r1, #0
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80052a0:	460b      	mov	r3, r1
 80052a2:	4313      	orrs	r3, r2
 80052a4:	d011      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052aa:	3328      	adds	r3, #40	@ 0x28
 80052ac:	2102      	movs	r1, #2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fb8a 	bl	80059c8 <RCCEx_PLL3_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80052ca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e000      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
}
 80052d8:	4618      	mov	r0, r3
 80052da:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80052de:	46bd      	mov	sp, r7
 80052e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052e4:	58024400 	.word	0x58024400

080052e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80052ec:	f7fe fd96 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b06      	ldr	r3, [pc, #24]	@ (800530c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4904      	ldr	r1, [pc, #16]	@ (8005310 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	58024400 	.word	0x58024400
 8005310:	0800b5d4 	.word	0x0800b5d4

08005314 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005314:	b480      	push	{r7}
 8005316:	b089      	sub	sp, #36	@ 0x24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800531c:	4ba1      	ldr	r3, [pc, #644]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005326:	4b9f      	ldr	r3, [pc, #636]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532a:	0b1b      	lsrs	r3, r3, #12
 800532c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005330:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005332:	4b9c      	ldr	r3, [pc, #624]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800533e:	4b99      	ldr	r3, [pc, #612]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005342:	08db      	lsrs	r3, r3, #3
 8005344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8111 	beq.w	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b02      	cmp	r3, #2
 8005366:	f000 8083 	beq.w	8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b02      	cmp	r3, #2
 800536e:	f200 80a1 	bhi.w	80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d056      	beq.n	800542c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800537e:	e099      	b.n	80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005380:	4b88      	ldr	r3, [pc, #544]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02d      	beq.n	80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800538c:	4b85      	ldr	r3, [pc, #532]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	08db      	lsrs	r3, r3, #3
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	4a84      	ldr	r2, [pc, #528]	@ (80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
 800539c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	ee07 3a90 	vmov	s15, r3
 80053a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	4b7b      	ldr	r3, [pc, #492]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053e6:	e087      	b.n	80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80055b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b6a      	ldr	r3, [pc, #424]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a03 	vldr	s12, [r7, #12]
 800540e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800542a:	e065      	b.n	80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b59      	ldr	r3, [pc, #356]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005452:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800546e:	e043      	b.n	80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b48      	ldr	r3, [pc, #288]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005492:	ed97 6a03 	vldr	s12, [r7, #12]
 8005496:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054b2:	e021      	b.n	80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c6:	4b37      	ldr	r3, [pc, #220]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80054f8:	4b2a      	ldr	r3, [pc, #168]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fc:	0a5b      	lsrs	r3, r3, #9
 80054fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800550e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005512:	edd7 6a07 	vldr	s13, [r7, #28]
 8005516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800551a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551e:	ee17 2a90 	vmov	r2, s15
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005526:	4b1f      	ldr	r3, [pc, #124]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552a:	0c1b      	lsrs	r3, r3, #16
 800552c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005530:	ee07 3a90 	vmov	s15, r3
 8005534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800553c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005540:	edd7 6a07 	vldr	s13, [r7, #28]
 8005544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554c:	ee17 2a90 	vmov	r2, s15
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005554:	4b13      	ldr	r3, [pc, #76]	@ (80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	0e1b      	lsrs	r3, r3, #24
 800555a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800556a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800556e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800557a:	ee17 2a90 	vmov	r2, s15
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005582:	e008      	b.n	8005596 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	609a      	str	r2, [r3, #8]
}
 8005596:	bf00      	nop
 8005598:	3724      	adds	r7, #36	@ 0x24
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	58024400 	.word	0x58024400
 80055a8:	03d09000 	.word	0x03d09000
 80055ac:	46000000 	.word	0x46000000
 80055b0:	4c742400 	.word	0x4c742400
 80055b4:	4a742400 	.word	0x4a742400
 80055b8:	4bbebc20 	.word	0x4bbebc20

080055bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	@ 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055c4:	4ba1      	ldr	r3, [pc, #644]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055ce:	4b9f      	ldr	r3, [pc, #636]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	0d1b      	lsrs	r3, r3, #20
 80055d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055da:	4b9c      	ldr	r3, [pc, #624]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055e6:	4b99      	ldr	r3, [pc, #612]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	08db      	lsrs	r3, r3, #3
 80055ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8111 	beq.w	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b02      	cmp	r3, #2
 800560e:	f000 8083 	beq.w	8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b02      	cmp	r3, #2
 8005616:	f200 80a1 	bhi.w	800575c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d056      	beq.n	80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005626:	e099      	b.n	800575c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005628:	4b88      	ldr	r3, [pc, #544]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02d      	beq.n	8005690 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005634:	4b85      	ldr	r3, [pc, #532]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	08db      	lsrs	r3, r3, #3
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	4a84      	ldr	r2, [pc, #528]	@ (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565e:	4b7b      	ldr	r3, [pc, #492]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005672:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800568e:	e087      	b.n	80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800569e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a2:	4b6a      	ldr	r3, [pc, #424]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056d2:	e065      	b.n	80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800585c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e6:	4b59      	ldr	r3, [pc, #356]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800570a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005716:	e043      	b.n	80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572a:	4b48      	ldr	r3, [pc, #288]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573a:	ed97 6a03 	vldr	s12, [r7, #12]
 800573e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800574e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800575a:	e021      	b.n	80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005766:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800585c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800576a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576e:	4b37      	ldr	r3, [pc, #220]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005782:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800579e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80057a0:	4b2a      	ldr	r3, [pc, #168]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	0a5b      	lsrs	r3, r3, #9
 80057a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80057be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c6:	ee17 2a90 	vmov	r2, s15
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80057ce:	4b1f      	ldr	r3, [pc, #124]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	0c1b      	lsrs	r3, r3, #16
 80057d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d8:	ee07 3a90 	vmov	s15, r3
 80057dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80057ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057f4:	ee17 2a90 	vmov	r2, s15
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80057fc:	4b13      	ldr	r3, [pc, #76]	@ (800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	0e1b      	lsrs	r3, r3, #24
 8005802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005816:	edd7 6a07 	vldr	s13, [r7, #28]
 800581a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005822:	ee17 2a90 	vmov	r2, s15
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800582a:	e008      	b.n	800583e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	609a      	str	r2, [r3, #8]
}
 800583e:	bf00      	nop
 8005840:	3724      	adds	r7, #36	@ 0x24
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	58024400 	.word	0x58024400
 8005850:	03d09000 	.word	0x03d09000
 8005854:	46000000 	.word	0x46000000
 8005858:	4c742400 	.word	0x4c742400
 800585c:	4a742400 	.word	0x4a742400
 8005860:	4bbebc20 	.word	0x4bbebc20

08005864 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005872:	4b53      	ldr	r3, [pc, #332]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b03      	cmp	r3, #3
 800587c:	d101      	bne.n	8005882 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e099      	b.n	80059b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005882:	4b4f      	ldr	r3, [pc, #316]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a4e      	ldr	r2, [pc, #312]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005888:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800588c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588e:	f7fb fc6b 	bl	8001168 <HAL_GetTick>
 8005892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005894:	e008      	b.n	80058a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005896:	f7fb fc67 	bl	8001168 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e086      	b.n	80059b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058a8:	4b45      	ldr	r3, [pc, #276]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1f0      	bne.n	8005896 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058b4:	4b42      	ldr	r3, [pc, #264]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	031b      	lsls	r3, r3, #12
 80058c2:	493f      	ldr	r1, [pc, #252]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	025b      	lsls	r3, r3, #9
 80058da:	b29b      	uxth	r3, r3
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	041b      	lsls	r3, r3, #16
 80058e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	061b      	lsls	r3, r3, #24
 80058f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058f8:	4931      	ldr	r1, [pc, #196]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058fe:	4b30      	ldr	r3, [pc, #192]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	492d      	ldr	r1, [pc, #180]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 800590c:	4313      	orrs	r3, r2
 800590e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005910:	4b2b      	ldr	r3, [pc, #172]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	f023 0220 	bic.w	r2, r3, #32
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	4928      	ldr	r1, [pc, #160]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005922:	4b27      	ldr	r3, [pc, #156]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	4a26      	ldr	r2, [pc, #152]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005928:	f023 0310 	bic.w	r3, r3, #16
 800592c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800592e:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005930:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005932:	4b24      	ldr	r3, [pc, #144]	@ (80059c4 <RCCEx_PLL2_Config+0x160>)
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	69d2      	ldr	r2, [r2, #28]
 800593a:	00d2      	lsls	r2, r2, #3
 800593c:	4920      	ldr	r1, [pc, #128]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 800593e:	4313      	orrs	r3, r2
 8005940:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005942:	4b1f      	ldr	r3, [pc, #124]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	4a1e      	ldr	r2, [pc, #120]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005948:	f043 0310 	orr.w	r3, r3, #16
 800594c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005954:	4b1a      	ldr	r3, [pc, #104]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	4a19      	ldr	r2, [pc, #100]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 800595a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800595e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005960:	e00f      	b.n	8005982 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d106      	bne.n	8005976 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005968:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	4a14      	ldr	r2, [pc, #80]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 800596e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005974:	e005      	b.n	8005982 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005976:	4b12      	ldr	r3, [pc, #72]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	4a11      	ldr	r2, [pc, #68]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 800597c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005980:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005982:	4b0f      	ldr	r3, [pc, #60]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a0e      	ldr	r2, [pc, #56]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 8005988:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800598c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598e:	f7fb fbeb 	bl	8001168 <HAL_GetTick>
 8005992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005994:	e008      	b.n	80059a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005996:	f7fb fbe7 	bl	8001168 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e006      	b.n	80059b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059a8:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <RCCEx_PLL2_Config+0x15c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f0      	beq.n	8005996 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	58024400 	.word	0x58024400
 80059c4:	ffff0007 	.word	0xffff0007

080059c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059d6:	4b53      	ldr	r3, [pc, #332]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d101      	bne.n	80059e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e099      	b.n	8005b1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059e6:	4b4f      	ldr	r3, [pc, #316]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 80059ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f2:	f7fb fbb9 	bl	8001168 <HAL_GetTick>
 80059f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059f8:	e008      	b.n	8005a0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059fa:	f7fb fbb5 	bl	8001168 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e086      	b.n	8005b1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a0c:	4b45      	ldr	r3, [pc, #276]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a18:	4b42      	ldr	r3, [pc, #264]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	051b      	lsls	r3, r3, #20
 8005a26:	493f      	ldr	r1, [pc, #252]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	025b      	lsls	r3, r3, #9
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	061b      	lsls	r3, r3, #24
 8005a58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a5c:	4931      	ldr	r1, [pc, #196]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a62:	4b30      	ldr	r3, [pc, #192]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	492d      	ldr	r1, [pc, #180]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a74:	4b2b      	ldr	r3, [pc, #172]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	4928      	ldr	r1, [pc, #160]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a86:	4b27      	ldr	r3, [pc, #156]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	4a26      	ldr	r2, [pc, #152]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a92:	4b24      	ldr	r3, [pc, #144]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005a94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a96:	4b24      	ldr	r3, [pc, #144]	@ (8005b28 <RCCEx_PLL3_Config+0x160>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	69d2      	ldr	r2, [r2, #28]
 8005a9e:	00d2      	lsls	r2, r2, #3
 8005aa0:	4920      	ldr	r1, [pc, #128]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	4a19      	ldr	r2, [pc, #100]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005abe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ac4:	e00f      	b.n	8005ae6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d106      	bne.n	8005ada <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005acc:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	4a14      	ldr	r2, [pc, #80]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ad8:	e005      	b.n	8005ae6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ada:	4b12      	ldr	r3, [pc, #72]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ade:	4a11      	ldr	r2, [pc, #68]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a0e      	ldr	r2, [pc, #56]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af2:	f7fb fb39 	bl	8001168 <HAL_GetTick>
 8005af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005af8:	e008      	b.n	8005b0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005afa:	f7fb fb35 	bl	8001168 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e006      	b.n	8005b1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b0c:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
 8005b28:	ffff0007 	.word	0xffff0007

08005b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e042      	b.n	8005bc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d106      	bne.n	8005b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f83b 	bl	8005bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2224      	movs	r2, #36	@ 0x24
 8005b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fd9a 	bl	80066b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f82f 	bl	8005be0 <UART_SetConfig>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e01b      	b.n	8005bc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fe19 	bl	80067f4 <UART_CheckIdleState>
 8005bc2:	4603      	mov	r3, r0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be4:	b092      	sub	sp, #72	@ 0x48
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4bbe      	ldr	r3, [pc, #760]	@ (8005f08 <UART_SetConfig+0x328>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4ab3      	ldr	r2, [pc, #716]	@ (8005f0c <UART_SetConfig+0x32c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	4baf      	ldr	r3, [pc, #700]	@ (8005f10 <UART_SetConfig+0x330>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c66:	f023 010f 	bic.w	r1, r3, #15
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4aa6      	ldr	r2, [pc, #664]	@ (8005f14 <UART_SetConfig+0x334>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d177      	bne.n	8005d70 <UART_SetConfig+0x190>
 8005c80:	4ba5      	ldr	r3, [pc, #660]	@ (8005f18 <UART_SetConfig+0x338>)
 8005c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c88:	2b28      	cmp	r3, #40	@ 0x28
 8005c8a:	d86d      	bhi.n	8005d68 <UART_SetConfig+0x188>
 8005c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <UART_SetConfig+0xb4>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005d39 	.word	0x08005d39
 8005c98:	08005d69 	.word	0x08005d69
 8005c9c:	08005d69 	.word	0x08005d69
 8005ca0:	08005d69 	.word	0x08005d69
 8005ca4:	08005d69 	.word	0x08005d69
 8005ca8:	08005d69 	.word	0x08005d69
 8005cac:	08005d69 	.word	0x08005d69
 8005cb0:	08005d69 	.word	0x08005d69
 8005cb4:	08005d41 	.word	0x08005d41
 8005cb8:	08005d69 	.word	0x08005d69
 8005cbc:	08005d69 	.word	0x08005d69
 8005cc0:	08005d69 	.word	0x08005d69
 8005cc4:	08005d69 	.word	0x08005d69
 8005cc8:	08005d69 	.word	0x08005d69
 8005ccc:	08005d69 	.word	0x08005d69
 8005cd0:	08005d69 	.word	0x08005d69
 8005cd4:	08005d49 	.word	0x08005d49
 8005cd8:	08005d69 	.word	0x08005d69
 8005cdc:	08005d69 	.word	0x08005d69
 8005ce0:	08005d69 	.word	0x08005d69
 8005ce4:	08005d69 	.word	0x08005d69
 8005ce8:	08005d69 	.word	0x08005d69
 8005cec:	08005d69 	.word	0x08005d69
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d51 	.word	0x08005d51
 8005cf8:	08005d69 	.word	0x08005d69
 8005cfc:	08005d69 	.word	0x08005d69
 8005d00:	08005d69 	.word	0x08005d69
 8005d04:	08005d69 	.word	0x08005d69
 8005d08:	08005d69 	.word	0x08005d69
 8005d0c:	08005d69 	.word	0x08005d69
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d59 	.word	0x08005d59
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005d69 	.word	0x08005d69
 8005d28:	08005d69 	.word	0x08005d69
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005d69 	.word	0x08005d69
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e222      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e21e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e21a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d56:	e216      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d58:	2320      	movs	r3, #32
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e212      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d60:	2340      	movs	r3, #64	@ 0x40
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e20e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d68:	2380      	movs	r3, #128	@ 0x80
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e20a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a69      	ldr	r2, [pc, #420]	@ (8005f1c <UART_SetConfig+0x33c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d130      	bne.n	8005ddc <UART_SetConfig+0x1fc>
 8005d7a:	4b67      	ldr	r3, [pc, #412]	@ (8005f18 <UART_SetConfig+0x338>)
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	d826      	bhi.n	8005dd4 <UART_SetConfig+0x1f4>
 8005d86:	a201      	add	r2, pc, #4	@ (adr r2, 8005d8c <UART_SetConfig+0x1ac>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005da5 	.word	0x08005da5
 8005d90:	08005dad 	.word	0x08005dad
 8005d94:	08005db5 	.word	0x08005db5
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005dc5 	.word	0x08005dc5
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005daa:	e1ec      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dac:	2304      	movs	r3, #4
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e1e8      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005db4:	2308      	movs	r3, #8
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e1e4      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e1e0      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dc4:	2320      	movs	r3, #32
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e1dc      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dcc:	2340      	movs	r3, #64	@ 0x40
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e1d8      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dd4:	2380      	movs	r3, #128	@ 0x80
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e1d4      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a4f      	ldr	r2, [pc, #316]	@ (8005f20 <UART_SetConfig+0x340>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d130      	bne.n	8005e48 <UART_SetConfig+0x268>
 8005de6:	4b4c      	ldr	r3, [pc, #304]	@ (8005f18 <UART_SetConfig+0x338>)
 8005de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d826      	bhi.n	8005e40 <UART_SetConfig+0x260>
 8005df2:	a201      	add	r2, pc, #4	@ (adr r2, 8005df8 <UART_SetConfig+0x218>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e11 	.word	0x08005e11
 8005dfc:	08005e19 	.word	0x08005e19
 8005e00:	08005e21 	.word	0x08005e21
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e1b6      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e1b2      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e20:	2308      	movs	r3, #8
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e1ae      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e1aa      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e30:	2320      	movs	r3, #32
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e1a6      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e38:	2340      	movs	r3, #64	@ 0x40
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e1a2      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e40:	2380      	movs	r3, #128	@ 0x80
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e19e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a35      	ldr	r2, [pc, #212]	@ (8005f24 <UART_SetConfig+0x344>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d130      	bne.n	8005eb4 <UART_SetConfig+0x2d4>
 8005e52:	4b31      	ldr	r3, [pc, #196]	@ (8005f18 <UART_SetConfig+0x338>)
 8005e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d826      	bhi.n	8005eac <UART_SetConfig+0x2cc>
 8005e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <UART_SetConfig+0x284>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e7d 	.word	0x08005e7d
 8005e68:	08005e85 	.word	0x08005e85
 8005e6c:	08005e8d 	.word	0x08005e8d
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e9d 	.word	0x08005e9d
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e180      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e17c      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e178      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e174      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e170      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005ea4:	2340      	movs	r3, #64	@ 0x40
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e16c      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005eac:	2380      	movs	r3, #128	@ 0x80
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e168      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f28 <UART_SetConfig+0x348>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d142      	bne.n	8005f44 <UART_SetConfig+0x364>
 8005ebe:	4b16      	ldr	r3, [pc, #88]	@ (8005f18 <UART_SetConfig+0x338>)
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d838      	bhi.n	8005f3c <UART_SetConfig+0x35c>
 8005eca:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed0 <UART_SetConfig+0x2f0>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e14a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e146      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e142      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e13e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f08:	cfff69f3 	.word	0xcfff69f3
 8005f0c:	58000c00 	.word	0x58000c00
 8005f10:	11fff4ff 	.word	0x11fff4ff
 8005f14:	40011000 	.word	0x40011000
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	40004400 	.word	0x40004400
 8005f20:	40004800 	.word	0x40004800
 8005f24:	40004c00 	.word	0x40004c00
 8005f28:	40005000 	.word	0x40005000
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e128      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f34:	2340      	movs	r3, #64	@ 0x40
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e124      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f3c:	2380      	movs	r3, #128	@ 0x80
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e120      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4acb      	ldr	r2, [pc, #812]	@ (8006278 <UART_SetConfig+0x698>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d176      	bne.n	800603c <UART_SetConfig+0x45c>
 8005f4e:	4bcb      	ldr	r3, [pc, #812]	@ (800627c <UART_SetConfig+0x69c>)
 8005f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f56:	2b28      	cmp	r3, #40	@ 0x28
 8005f58:	d86c      	bhi.n	8006034 <UART_SetConfig+0x454>
 8005f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UART_SetConfig+0x380>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08006005 	.word	0x08006005
 8005f64:	08006035 	.word	0x08006035
 8005f68:	08006035 	.word	0x08006035
 8005f6c:	08006035 	.word	0x08006035
 8005f70:	08006035 	.word	0x08006035
 8005f74:	08006035 	.word	0x08006035
 8005f78:	08006035 	.word	0x08006035
 8005f7c:	08006035 	.word	0x08006035
 8005f80:	0800600d 	.word	0x0800600d
 8005f84:	08006035 	.word	0x08006035
 8005f88:	08006035 	.word	0x08006035
 8005f8c:	08006035 	.word	0x08006035
 8005f90:	08006035 	.word	0x08006035
 8005f94:	08006035 	.word	0x08006035
 8005f98:	08006035 	.word	0x08006035
 8005f9c:	08006035 	.word	0x08006035
 8005fa0:	08006015 	.word	0x08006015
 8005fa4:	08006035 	.word	0x08006035
 8005fa8:	08006035 	.word	0x08006035
 8005fac:	08006035 	.word	0x08006035
 8005fb0:	08006035 	.word	0x08006035
 8005fb4:	08006035 	.word	0x08006035
 8005fb8:	08006035 	.word	0x08006035
 8005fbc:	08006035 	.word	0x08006035
 8005fc0:	0800601d 	.word	0x0800601d
 8005fc4:	08006035 	.word	0x08006035
 8005fc8:	08006035 	.word	0x08006035
 8005fcc:	08006035 	.word	0x08006035
 8005fd0:	08006035 	.word	0x08006035
 8005fd4:	08006035 	.word	0x08006035
 8005fd8:	08006035 	.word	0x08006035
 8005fdc:	08006035 	.word	0x08006035
 8005fe0:	08006025 	.word	0x08006025
 8005fe4:	08006035 	.word	0x08006035
 8005fe8:	08006035 	.word	0x08006035
 8005fec:	08006035 	.word	0x08006035
 8005ff0:	08006035 	.word	0x08006035
 8005ff4:	08006035 	.word	0x08006035
 8005ff8:	08006035 	.word	0x08006035
 8005ffc:	08006035 	.word	0x08006035
 8006000:	0800602d 	.word	0x0800602d
 8006004:	2301      	movs	r3, #1
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e0bc      	b.n	8006186 <UART_SetConfig+0x5a6>
 800600c:	2304      	movs	r3, #4
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e0b8      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006014:	2308      	movs	r3, #8
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e0b4      	b.n	8006186 <UART_SetConfig+0x5a6>
 800601c:	2310      	movs	r3, #16
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e0b0      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006024:	2320      	movs	r3, #32
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e0ac      	b.n	8006186 <UART_SetConfig+0x5a6>
 800602c:	2340      	movs	r3, #64	@ 0x40
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e0a8      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006034:	2380      	movs	r3, #128	@ 0x80
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e0a4      	b.n	8006186 <UART_SetConfig+0x5a6>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a8f      	ldr	r2, [pc, #572]	@ (8006280 <UART_SetConfig+0x6a0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d130      	bne.n	80060a8 <UART_SetConfig+0x4c8>
 8006046:	4b8d      	ldr	r3, [pc, #564]	@ (800627c <UART_SetConfig+0x69c>)
 8006048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	2b05      	cmp	r3, #5
 8006050:	d826      	bhi.n	80060a0 <UART_SetConfig+0x4c0>
 8006052:	a201      	add	r2, pc, #4	@ (adr r2, 8006058 <UART_SetConfig+0x478>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006071 	.word	0x08006071
 800605c:	08006079 	.word	0x08006079
 8006060:	08006081 	.word	0x08006081
 8006064:	08006089 	.word	0x08006089
 8006068:	08006091 	.word	0x08006091
 800606c:	08006099 	.word	0x08006099
 8006070:	2300      	movs	r3, #0
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e086      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006078:	2304      	movs	r3, #4
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e082      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006080:	2308      	movs	r3, #8
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e07e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006088:	2310      	movs	r3, #16
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608e:	e07a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006090:	2320      	movs	r3, #32
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	e076      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006098:	2340      	movs	r3, #64	@ 0x40
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e072      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060a0:	2380      	movs	r3, #128	@ 0x80
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e06e      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a75      	ldr	r2, [pc, #468]	@ (8006284 <UART_SetConfig+0x6a4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d130      	bne.n	8006114 <UART_SetConfig+0x534>
 80060b2:	4b72      	ldr	r3, [pc, #456]	@ (800627c <UART_SetConfig+0x69c>)
 80060b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d826      	bhi.n	800610c <UART_SetConfig+0x52c>
 80060be:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <UART_SetConfig+0x4e4>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060dd 	.word	0x080060dd
 80060c8:	080060e5 	.word	0x080060e5
 80060cc:	080060ed 	.word	0x080060ed
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	2300      	movs	r3, #0
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e050      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060e4:	2304      	movs	r3, #4
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e04c      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060ec:	2308      	movs	r3, #8
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e048      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060f4:	2310      	movs	r3, #16
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e044      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060fc:	2320      	movs	r3, #32
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e040      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006104:	2340      	movs	r3, #64	@ 0x40
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e03c      	b.n	8006186 <UART_SetConfig+0x5a6>
 800610c:	2380      	movs	r3, #128	@ 0x80
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e038      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a5b      	ldr	r2, [pc, #364]	@ (8006288 <UART_SetConfig+0x6a8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d130      	bne.n	8006180 <UART_SetConfig+0x5a0>
 800611e:	4b57      	ldr	r3, [pc, #348]	@ (800627c <UART_SetConfig+0x69c>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	2b05      	cmp	r3, #5
 8006128:	d826      	bhi.n	8006178 <UART_SetConfig+0x598>
 800612a:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <UART_SetConfig+0x550>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006149 	.word	0x08006149
 8006134:	08006151 	.word	0x08006151
 8006138:	08006159 	.word	0x08006159
 800613c:	08006161 	.word	0x08006161
 8006140:	08006169 	.word	0x08006169
 8006144:	08006171 	.word	0x08006171
 8006148:	2302      	movs	r3, #2
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e01a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006150:	2304      	movs	r3, #4
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e016      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006158:	2308      	movs	r3, #8
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e012      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006160:	2310      	movs	r3, #16
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e00e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006168:	2320      	movs	r3, #32
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e00a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006170:	2340      	movs	r3, #64	@ 0x40
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e006      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006178:	2380      	movs	r3, #128	@ 0x80
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e002      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a3f      	ldr	r2, [pc, #252]	@ (8006288 <UART_SetConfig+0x6a8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	f040 80f8 	bne.w	8006382 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006192:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006196:	2b20      	cmp	r3, #32
 8006198:	dc46      	bgt.n	8006228 <UART_SetConfig+0x648>
 800619a:	2b02      	cmp	r3, #2
 800619c:	f2c0 8082 	blt.w	80062a4 <UART_SetConfig+0x6c4>
 80061a0:	3b02      	subs	r3, #2
 80061a2:	2b1e      	cmp	r3, #30
 80061a4:	d87e      	bhi.n	80062a4 <UART_SetConfig+0x6c4>
 80061a6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <UART_SetConfig+0x5cc>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	0800622f 	.word	0x0800622f
 80061b0:	080062a5 	.word	0x080062a5
 80061b4:	08006237 	.word	0x08006237
 80061b8:	080062a5 	.word	0x080062a5
 80061bc:	080062a5 	.word	0x080062a5
 80061c0:	080062a5 	.word	0x080062a5
 80061c4:	08006247 	.word	0x08006247
 80061c8:	080062a5 	.word	0x080062a5
 80061cc:	080062a5 	.word	0x080062a5
 80061d0:	080062a5 	.word	0x080062a5
 80061d4:	080062a5 	.word	0x080062a5
 80061d8:	080062a5 	.word	0x080062a5
 80061dc:	080062a5 	.word	0x080062a5
 80061e0:	080062a5 	.word	0x080062a5
 80061e4:	08006257 	.word	0x08006257
 80061e8:	080062a5 	.word	0x080062a5
 80061ec:	080062a5 	.word	0x080062a5
 80061f0:	080062a5 	.word	0x080062a5
 80061f4:	080062a5 	.word	0x080062a5
 80061f8:	080062a5 	.word	0x080062a5
 80061fc:	080062a5 	.word	0x080062a5
 8006200:	080062a5 	.word	0x080062a5
 8006204:	080062a5 	.word	0x080062a5
 8006208:	080062a5 	.word	0x080062a5
 800620c:	080062a5 	.word	0x080062a5
 8006210:	080062a5 	.word	0x080062a5
 8006214:	080062a5 	.word	0x080062a5
 8006218:	080062a5 	.word	0x080062a5
 800621c:	080062a5 	.word	0x080062a5
 8006220:	080062a5 	.word	0x080062a5
 8006224:	08006297 	.word	0x08006297
 8006228:	2b40      	cmp	r3, #64	@ 0x40
 800622a:	d037      	beq.n	800629c <UART_SetConfig+0x6bc>
 800622c:	e03a      	b.n	80062a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800622e:	f7ff f85b 	bl	80052e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006232:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006234:	e03c      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff f86a 	bl	8005314 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006244:	e034      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006246:	f107 0318 	add.w	r3, r7, #24
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f9b6 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006254:	e02c      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006256:	4b09      	ldr	r3, [pc, #36]	@ (800627c <UART_SetConfig+0x69c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d016      	beq.n	8006290 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006262:	4b06      	ldr	r3, [pc, #24]	@ (800627c <UART_SetConfig+0x69c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	08db      	lsrs	r3, r3, #3
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	4a07      	ldr	r2, [pc, #28]	@ (800628c <UART_SetConfig+0x6ac>)
 800626e:	fa22 f303 	lsr.w	r3, r2, r3
 8006272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006274:	e01c      	b.n	80062b0 <UART_SetConfig+0x6d0>
 8006276:	bf00      	nop
 8006278:	40011400 	.word	0x40011400
 800627c:	58024400 	.word	0x58024400
 8006280:	40007800 	.word	0x40007800
 8006284:	40007c00 	.word	0x40007c00
 8006288:	58000c00 	.word	0x58000c00
 800628c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006290:	4b9d      	ldr	r3, [pc, #628]	@ (8006508 <UART_SetConfig+0x928>)
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006294:	e00c      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006296:	4b9d      	ldr	r3, [pc, #628]	@ (800650c <UART_SetConfig+0x92c>)
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800629a:	e009      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a2:	e005      	b.n	80062b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 81de 	beq.w	8006674 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062bc:	4a94      	ldr	r2, [pc, #592]	@ (8006510 <UART_SetConfig+0x930>)
 80062be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d8:	429a      	cmp	r2, r3
 80062da:	d305      	bcc.n	80062e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d903      	bls.n	80062f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062ee:	e1c1      	b.n	8006674 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f2:	2200      	movs	r2, #0
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	60fa      	str	r2, [r7, #12]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	4a84      	ldr	r2, [pc, #528]	@ (8006510 <UART_SetConfig+0x930>)
 80062fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006302:	b29b      	uxth	r3, r3
 8006304:	2200      	movs	r2, #0
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006312:	f7fa f835 	bl	8000380 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	020b      	lsls	r3, r1, #8
 8006328:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800632c:	0202      	lsls	r2, r0, #8
 800632e:	6979      	ldr	r1, [r7, #20]
 8006330:	6849      	ldr	r1, [r1, #4]
 8006332:	0849      	lsrs	r1, r1, #1
 8006334:	2000      	movs	r0, #0
 8006336:	460c      	mov	r4, r1
 8006338:	4605      	mov	r5, r0
 800633a:	eb12 0804 	adds.w	r8, r2, r4
 800633e:	eb43 0905 	adc.w	r9, r3, r5
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	469a      	mov	sl, r3
 800634a:	4693      	mov	fp, r2
 800634c:	4652      	mov	r2, sl
 800634e:	465b      	mov	r3, fp
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa f814 	bl	8000380 <__aeabi_uldivmod>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4613      	mov	r3, r2
 800635e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006366:	d308      	bcc.n	800637a <UART_SetConfig+0x79a>
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800636e:	d204      	bcs.n	800637a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006376:	60da      	str	r2, [r3, #12]
 8006378:	e17c      	b.n	8006674 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006380:	e178      	b.n	8006674 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800638a:	f040 80c5 	bne.w	8006518 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800638e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006392:	2b20      	cmp	r3, #32
 8006394:	dc48      	bgt.n	8006428 <UART_SetConfig+0x848>
 8006396:	2b00      	cmp	r3, #0
 8006398:	db7b      	blt.n	8006492 <UART_SetConfig+0x8b2>
 800639a:	2b20      	cmp	r3, #32
 800639c:	d879      	bhi.n	8006492 <UART_SetConfig+0x8b2>
 800639e:	a201      	add	r2, pc, #4	@ (adr r2, 80063a4 <UART_SetConfig+0x7c4>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	0800642f 	.word	0x0800642f
 80063a8:	08006437 	.word	0x08006437
 80063ac:	08006493 	.word	0x08006493
 80063b0:	08006493 	.word	0x08006493
 80063b4:	0800643f 	.word	0x0800643f
 80063b8:	08006493 	.word	0x08006493
 80063bc:	08006493 	.word	0x08006493
 80063c0:	08006493 	.word	0x08006493
 80063c4:	0800644f 	.word	0x0800644f
 80063c8:	08006493 	.word	0x08006493
 80063cc:	08006493 	.word	0x08006493
 80063d0:	08006493 	.word	0x08006493
 80063d4:	08006493 	.word	0x08006493
 80063d8:	08006493 	.word	0x08006493
 80063dc:	08006493 	.word	0x08006493
 80063e0:	08006493 	.word	0x08006493
 80063e4:	0800645f 	.word	0x0800645f
 80063e8:	08006493 	.word	0x08006493
 80063ec:	08006493 	.word	0x08006493
 80063f0:	08006493 	.word	0x08006493
 80063f4:	08006493 	.word	0x08006493
 80063f8:	08006493 	.word	0x08006493
 80063fc:	08006493 	.word	0x08006493
 8006400:	08006493 	.word	0x08006493
 8006404:	08006493 	.word	0x08006493
 8006408:	08006493 	.word	0x08006493
 800640c:	08006493 	.word	0x08006493
 8006410:	08006493 	.word	0x08006493
 8006414:	08006493 	.word	0x08006493
 8006418:	08006493 	.word	0x08006493
 800641c:	08006493 	.word	0x08006493
 8006420:	08006493 	.word	0x08006493
 8006424:	08006485 	.word	0x08006485
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	d02e      	beq.n	800648a <UART_SetConfig+0x8aa>
 800642c:	e031      	b.n	8006492 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800642e:	f7fd fd25 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8006432:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006434:	e033      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006436:	f7fd fd37 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 800643a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800643c:	e02f      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800643e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe ff66 	bl	8005314 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800644c:	e027      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644e:	f107 0318 	add.w	r3, r7, #24
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff f8b2 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800645c:	e01f      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645e:	4b2d      	ldr	r3, [pc, #180]	@ (8006514 <UART_SetConfig+0x934>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800646a:	4b2a      	ldr	r3, [pc, #168]	@ (8006514 <UART_SetConfig+0x934>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	08db      	lsrs	r3, r3, #3
 8006470:	f003 0303 	and.w	r3, r3, #3
 8006474:	4a24      	ldr	r2, [pc, #144]	@ (8006508 <UART_SetConfig+0x928>)
 8006476:	fa22 f303 	lsr.w	r3, r2, r3
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800647c:	e00f      	b.n	800649e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800647e:	4b22      	ldr	r3, [pc, #136]	@ (8006508 <UART_SetConfig+0x928>)
 8006480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006482:	e00c      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006484:	4b21      	ldr	r3, [pc, #132]	@ (800650c <UART_SetConfig+0x92c>)
 8006486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006488:	e009      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800648e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006490:	e005      	b.n	800649e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800649c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80e7 	beq.w	8006674 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	4a19      	ldr	r2, [pc, #100]	@ (8006510 <UART_SetConfig+0x930>)
 80064ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b8:	005a      	lsls	r2, r3, #1
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	085b      	lsrs	r3, r3, #1
 80064c0:	441a      	add	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ce:	2b0f      	cmp	r3, #15
 80064d0:	d916      	bls.n	8006500 <UART_SetConfig+0x920>
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d8:	d212      	bcs.n	8006500 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f023 030f 	bic.w	r3, r3, #15
 80064e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064f2:	4313      	orrs	r3, r2
 80064f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80064fc:	60da      	str	r2, [r3, #12]
 80064fe:	e0b9      	b.n	8006674 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006506:	e0b5      	b.n	8006674 <UART_SetConfig+0xa94>
 8006508:	03d09000 	.word	0x03d09000
 800650c:	003d0900 	.word	0x003d0900
 8006510:	0800b5f0 	.word	0x0800b5f0
 8006514:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006518:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800651c:	2b20      	cmp	r3, #32
 800651e:	dc49      	bgt.n	80065b4 <UART_SetConfig+0x9d4>
 8006520:	2b00      	cmp	r3, #0
 8006522:	db7c      	blt.n	800661e <UART_SetConfig+0xa3e>
 8006524:	2b20      	cmp	r3, #32
 8006526:	d87a      	bhi.n	800661e <UART_SetConfig+0xa3e>
 8006528:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <UART_SetConfig+0x950>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	080065bb 	.word	0x080065bb
 8006534:	080065c3 	.word	0x080065c3
 8006538:	0800661f 	.word	0x0800661f
 800653c:	0800661f 	.word	0x0800661f
 8006540:	080065cb 	.word	0x080065cb
 8006544:	0800661f 	.word	0x0800661f
 8006548:	0800661f 	.word	0x0800661f
 800654c:	0800661f 	.word	0x0800661f
 8006550:	080065db 	.word	0x080065db
 8006554:	0800661f 	.word	0x0800661f
 8006558:	0800661f 	.word	0x0800661f
 800655c:	0800661f 	.word	0x0800661f
 8006560:	0800661f 	.word	0x0800661f
 8006564:	0800661f 	.word	0x0800661f
 8006568:	0800661f 	.word	0x0800661f
 800656c:	0800661f 	.word	0x0800661f
 8006570:	080065eb 	.word	0x080065eb
 8006574:	0800661f 	.word	0x0800661f
 8006578:	0800661f 	.word	0x0800661f
 800657c:	0800661f 	.word	0x0800661f
 8006580:	0800661f 	.word	0x0800661f
 8006584:	0800661f 	.word	0x0800661f
 8006588:	0800661f 	.word	0x0800661f
 800658c:	0800661f 	.word	0x0800661f
 8006590:	0800661f 	.word	0x0800661f
 8006594:	0800661f 	.word	0x0800661f
 8006598:	0800661f 	.word	0x0800661f
 800659c:	0800661f 	.word	0x0800661f
 80065a0:	0800661f 	.word	0x0800661f
 80065a4:	0800661f 	.word	0x0800661f
 80065a8:	0800661f 	.word	0x0800661f
 80065ac:	0800661f 	.word	0x0800661f
 80065b0:	08006611 	.word	0x08006611
 80065b4:	2b40      	cmp	r3, #64	@ 0x40
 80065b6:	d02e      	beq.n	8006616 <UART_SetConfig+0xa36>
 80065b8:	e031      	b.n	800661e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ba:	f7fd fc5f 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 80065be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065c0:	e033      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c2:	f7fd fc71 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 80065c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065c8:	e02f      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fea0 	bl	8005314 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d8:	e027      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065da:	f107 0318 	add.w	r3, r7, #24
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe ffec 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e8:	e01f      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ea:	4b2d      	ldr	r3, [pc, #180]	@ (80066a0 <UART_SetConfig+0xac0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065f6:	4b2a      	ldr	r3, [pc, #168]	@ (80066a0 <UART_SetConfig+0xac0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	08db      	lsrs	r3, r3, #3
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	4a28      	ldr	r2, [pc, #160]	@ (80066a4 <UART_SetConfig+0xac4>)
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006608:	e00f      	b.n	800662a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800660a:	4b26      	ldr	r3, [pc, #152]	@ (80066a4 <UART_SetConfig+0xac4>)
 800660c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660e:	e00c      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006610:	4b25      	ldr	r3, [pc, #148]	@ (80066a8 <UART_SetConfig+0xac8>)
 8006612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006614:	e009      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661c:	e005      	b.n	800662a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006628:	bf00      	nop
    }

    if (pclk != 0U)
 800662a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d021      	beq.n	8006674 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	4a1d      	ldr	r2, [pc, #116]	@ (80066ac <UART_SetConfig+0xacc>)
 8006636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663a:	461a      	mov	r2, r3
 800663c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800663e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	441a      	add	r2, r3
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006652:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d909      	bls.n	800666e <UART_SetConfig+0xa8e>
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006660:	d205      	bcs.n	800666e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006664:	b29a      	uxth	r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60da      	str	r2, [r3, #12]
 800666c:	e002      	b.n	8006674 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2201      	movs	r2, #1
 8006678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2201      	movs	r2, #1
 8006680:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2200      	movs	r2, #0
 8006688:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006690:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006694:	4618      	mov	r0, r3
 8006696:	3748      	adds	r7, #72	@ 0x48
 8006698:	46bd      	mov	sp, r7
 800669a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800669e:	bf00      	nop
 80066a0:	58024400 	.word	0x58024400
 80066a4:	03d09000 	.word	0x03d09000
 80066a8:	003d0900 	.word	0x003d0900
 80066ac:	0800b5f0 	.word	0x0800b5f0

080066b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ae:	d10a      	bne.n	80067c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b098      	sub	sp, #96	@ 0x60
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006804:	f7fa fcb0 	bl	8001168 <HAL_GetTick>
 8006808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b08      	cmp	r3, #8
 8006816:	d12f      	bne.n	8006878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006820:	2200      	movs	r2, #0
 8006822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f88e 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d022      	beq.n	8006878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006846:	653b      	str	r3, [r7, #80]	@ 0x50
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006850:	647b      	str	r3, [r7, #68]	@ 0x44
 8006852:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800685e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e6      	bne.n	8006832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e063      	b.n	8006940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b04      	cmp	r3, #4
 8006884:	d149      	bne.n	800691a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006886:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800688e:	2200      	movs	r2, #0
 8006890:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f857 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d03c      	beq.n	800691a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	623b      	str	r3, [r7, #32]
   return(result);
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068be:	633b      	str	r3, [r7, #48]	@ 0x30
 80068c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e6      	bne.n	80068a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	69b9      	ldr	r1, [r7, #24]
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e012      	b.n	8006940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3758      	adds	r7, #88	@ 0x58
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	e04f      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d04b      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fa fc01 	bl	8001168 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <UART_WaitOnFlagUntilTimeout+0x30>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e04e      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d037      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b80      	cmp	r3, #128	@ 0x80
 800698e:	d034      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b40      	cmp	r3, #64	@ 0x40
 8006994:	d031      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d110      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f839 	bl	8006a24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2208      	movs	r2, #8
 80069b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e029      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d4:	d111      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f81f 	bl	8006a24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e00f      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4013      	ands	r3, r2
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d0a0      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b095      	sub	sp, #84	@ 0x54
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e6      	bne.n	8006a2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	4b1e      	ldr	r3, [pc, #120]	@ (8006aec <UART_EndRxTransfer+0xc8>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e5      	bne.n	8006a5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d118      	bne.n	8006acc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	e853 3f00 	ldrex	r3, [r3]
 8006aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f023 0310 	bic.w	r3, r3, #16
 8006aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6979      	ldr	r1, [r7, #20]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e6      	bne.n	8006a9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ae0:	bf00      	nop
 8006ae2:	3754      	adds	r7, #84	@ 0x54
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	effffffe 	.word	0xeffffffe

08006af0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006af0:	b084      	sub	sp, #16
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	f107 001c 	add.w	r0, r7, #28
 8006afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d121      	bne.n	8006b4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bcc <USB_CoreInit+0xdc>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d105      	bne.n	8006b42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 faf6 	bl	8008134 <USB_CoreReset>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
 8006b4c:	e01b      	b.n	8006b86 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 faea 	bl	8008134 <USB_CoreReset>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d106      	bne.n	8006b7a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b78:	e005      	b.n	8006b86 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b86:	7fbb      	ldrb	r3, [r7, #30]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d116      	bne.n	8006bba <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd0 <USB_CoreInit+0xe0>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f043 0206 	orr.w	r2, r3, #6
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f043 0220 	orr.w	r2, r3, #32
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc6:	b004      	add	sp, #16
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	ffbdffbf 	.word	0xffbdffbf
 8006bd0:	03ee0000 	.word	0x03ee0000

08006bd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d165      	bne.n	8006cb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4a41      	ldr	r2, [pc, #260]	@ (8006cf0 <USB_SetTurnaroundTime+0x11c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d906      	bls.n	8006bfe <USB_SetTurnaroundTime+0x2a>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a40      	ldr	r2, [pc, #256]	@ (8006cf4 <USB_SetTurnaroundTime+0x120>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d202      	bcs.n	8006bfe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006bf8:	230f      	movs	r3, #15
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e062      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4a3c      	ldr	r2, [pc, #240]	@ (8006cf4 <USB_SetTurnaroundTime+0x120>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d306      	bcc.n	8006c14 <USB_SetTurnaroundTime+0x40>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4a3b      	ldr	r2, [pc, #236]	@ (8006cf8 <USB_SetTurnaroundTime+0x124>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d202      	bcs.n	8006c14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c0e:	230e      	movs	r3, #14
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e057      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4a38      	ldr	r2, [pc, #224]	@ (8006cf8 <USB_SetTurnaroundTime+0x124>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d306      	bcc.n	8006c2a <USB_SetTurnaroundTime+0x56>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4a37      	ldr	r2, [pc, #220]	@ (8006cfc <USB_SetTurnaroundTime+0x128>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d202      	bcs.n	8006c2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c24:	230d      	movs	r3, #13
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	e04c      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4a33      	ldr	r2, [pc, #204]	@ (8006cfc <USB_SetTurnaroundTime+0x128>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d306      	bcc.n	8006c40 <USB_SetTurnaroundTime+0x6c>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4a32      	ldr	r2, [pc, #200]	@ (8006d00 <USB_SetTurnaroundTime+0x12c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d802      	bhi.n	8006c40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	e041      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4a2f      	ldr	r2, [pc, #188]	@ (8006d00 <USB_SetTurnaroundTime+0x12c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d906      	bls.n	8006c56 <USB_SetTurnaroundTime+0x82>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8006d04 <USB_SetTurnaroundTime+0x130>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d802      	bhi.n	8006c56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c50:	230b      	movs	r3, #11
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	e036      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4a2a      	ldr	r2, [pc, #168]	@ (8006d04 <USB_SetTurnaroundTime+0x130>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d906      	bls.n	8006c6c <USB_SetTurnaroundTime+0x98>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4a29      	ldr	r2, [pc, #164]	@ (8006d08 <USB_SetTurnaroundTime+0x134>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d802      	bhi.n	8006c6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c66:	230a      	movs	r3, #10
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e02b      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4a26      	ldr	r2, [pc, #152]	@ (8006d08 <USB_SetTurnaroundTime+0x134>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d906      	bls.n	8006c82 <USB_SetTurnaroundTime+0xae>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4a25      	ldr	r2, [pc, #148]	@ (8006d0c <USB_SetTurnaroundTime+0x138>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d202      	bcs.n	8006c82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c7c:	2309      	movs	r3, #9
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	e020      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4a21      	ldr	r2, [pc, #132]	@ (8006d0c <USB_SetTurnaroundTime+0x138>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d306      	bcc.n	8006c98 <USB_SetTurnaroundTime+0xc4>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	4a20      	ldr	r2, [pc, #128]	@ (8006d10 <USB_SetTurnaroundTime+0x13c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d802      	bhi.n	8006c98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c92:	2308      	movs	r3, #8
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	e015      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006d10 <USB_SetTurnaroundTime+0x13c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d906      	bls.n	8006cae <USB_SetTurnaroundTime+0xda>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d14 <USB_SetTurnaroundTime+0x140>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d202      	bcs.n	8006cae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ca8:	2307      	movs	r3, #7
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e00a      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006cae:	2306      	movs	r3, #6
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e007      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006cba:	2309      	movs	r3, #9
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	e001      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006cc0:	2309      	movs	r3, #9
 8006cc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	029b      	lsls	r3, r3, #10
 8006cd8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	00d8acbf 	.word	0x00d8acbf
 8006cf4:	00e4e1c0 	.word	0x00e4e1c0
 8006cf8:	00f42400 	.word	0x00f42400
 8006cfc:	01067380 	.word	0x01067380
 8006d00:	011a499f 	.word	0x011a499f
 8006d04:	01312cff 	.word	0x01312cff
 8006d08:	014ca43f 	.word	0x014ca43f
 8006d0c:	016e3600 	.word	0x016e3600
 8006d10:	01a6ab1f 	.word	0x01a6ab1f
 8006d14:	01e84800 	.word	0x01e84800

08006d18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f043 0201 	orr.w	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d115      	bne.n	8006daa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d8a:	200a      	movs	r0, #10
 8006d8c:	f7fa f9f8 	bl	8001180 <HAL_Delay>
      ms += 10U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	330a      	adds	r3, #10
 8006d94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 f93b 	bl	8008012 <USB_GetMode>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d01e      	beq.n	8006de0 <USB_SetCurrentMode+0x84>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006da6:	d9f0      	bls.n	8006d8a <USB_SetCurrentMode+0x2e>
 8006da8:	e01a      	b.n	8006de0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d115      	bne.n	8006ddc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dbc:	200a      	movs	r0, #10
 8006dbe:	f7fa f9df 	bl	8001180 <HAL_Delay>
      ms += 10U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	330a      	adds	r3, #10
 8006dc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f922 	bl	8008012 <USB_GetMode>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <USB_SetCurrentMode+0x84>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dd8:	d9f0      	bls.n	8006dbc <USB_SetCurrentMode+0x60>
 8006dda:	e001      	b.n	8006de0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e005      	b.n	8006dec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2bc8      	cmp	r3, #200	@ 0xc8
 8006de4:	d101      	bne.n	8006dea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df4:	b084      	sub	sp, #16
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b086      	sub	sp, #24
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	e009      	b.n	8006e28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3340      	adds	r3, #64	@ 0x40
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3301      	adds	r3, #1
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b0e      	cmp	r3, #14
 8006e2c:	d9f2      	bls.n	8006e14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d11c      	bne.n	8006e70 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e44:	f043 0302 	orr.w	r3, r3, #2
 8006e48:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e005      	b.n	8006e7c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e82:	461a      	mov	r2, r3
 8006e84:	2300      	movs	r3, #0
 8006e86:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e88:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d10d      	bne.n	8006eac <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f968 	bl	8007170 <USB_SetDevSpeed>
 8006ea0:	e008      	b.n	8006eb4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f963 	bl	8007170 <USB_SetDevSpeed>
 8006eaa:	e003      	b.n	8006eb4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006eac:	2103      	movs	r1, #3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f95e 	bl	8007170 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006eb4:	2110      	movs	r1, #16
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f8fa 	bl	80070b0 <USB_FlushTxFifo>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f924 	bl	8007114 <USB_FlushRxFifo>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006edc:	461a      	mov	r2, r3
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2300      	movs	r3, #0
 8006eec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	e043      	b.n	8006f88 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f16:	d118      	bne.n	8006f4a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e013      	b.n	8006f5c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f40:	461a      	mov	r2, r3
 8006f42:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	e008      	b.n	8006f5c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f56:	461a      	mov	r2, r3
 8006f58:	2300      	movs	r3, #0
 8006f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3301      	adds	r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d3b5      	bcc.n	8006f00 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	e043      	b.n	8007022 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fb0:	d118      	bne.n	8006fe4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	e013      	b.n	8006ff6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e008      	b.n	8006ff6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007002:	461a      	mov	r2, r3
 8007004:	2300      	movs	r3, #0
 8007006:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	461a      	mov	r2, r3
 8007016:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800701a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	3301      	adds	r3, #1
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007026:	461a      	mov	r2, r3
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4293      	cmp	r3, r2
 800702c:	d3b5      	bcc.n	8006f9a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800703c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007040:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800704e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007050:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007054:	2b00      	cmp	r3, #0
 8007056:	d105      	bne.n	8007064 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	f043 0210 	orr.w	r2, r3, #16
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699a      	ldr	r2, [r3, #24]
 8007068:	4b0f      	ldr	r3, [pc, #60]	@ (80070a8 <USB_DevInit+0x2b4>)
 800706a:	4313      	orrs	r3, r2
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007070:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f043 0208 	orr.w	r2, r3, #8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007084:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007088:	2b01      	cmp	r3, #1
 800708a:	d105      	bne.n	8007098 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699a      	ldr	r2, [r3, #24]
 8007090:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <USB_DevInit+0x2b8>)
 8007092:	4313      	orrs	r3, r2
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070a4:	b004      	add	sp, #16
 80070a6:	4770      	bx	lr
 80070a8:	803c3800 	.word	0x803c3800
 80070ac:	40000004 	.word	0x40000004

080070b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ca:	d901      	bls.n	80070d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e01b      	b.n	8007108 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	daf2      	bge.n	80070be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	019b      	lsls	r3, r3, #6
 80070e0:	f043 0220 	orr.w	r2, r3, #32
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070f4:	d901      	bls.n	80070fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e006      	b.n	8007108 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b20      	cmp	r3, #32
 8007104:	d0f0      	beq.n	80070e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800712c:	d901      	bls.n	8007132 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e018      	b.n	8007164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	daf2      	bge.n	8007120 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2210      	movs	r2, #16
 8007142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007150:	d901      	bls.n	8007156 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e006      	b.n	8007164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b10      	cmp	r3, #16
 8007160:	d0f0      	beq.n	8007144 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007190:	4313      	orrs	r3, r2
 8007192:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b087      	sub	sp, #28
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0306 	and.w	r3, r3, #6
 80071ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d102      	bne.n	80071c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
 80071c6:	e00a      	b.n	80071de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d002      	beq.n	80071d4 <USB_GetDevSpeed+0x32>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b06      	cmp	r3, #6
 80071d2:	d102      	bne.n	80071da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80071d4:	2302      	movs	r3, #2
 80071d6:	75fb      	strb	r3, [r7, #23]
 80071d8:	e001      	b.n	80071de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80071da:	230f      	movs	r3, #15
 80071dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d139      	bne.n	800727c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	2101      	movs	r1, #1
 800721a:	fa01 f303 	lsl.w	r3, r1, r3
 800721e:	b29b      	uxth	r3, r3
 8007220:	68f9      	ldr	r1, [r7, #12]
 8007222:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007226:	4313      	orrs	r3, r2
 8007228:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d153      	bne.n	80072e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	791b      	ldrb	r3, [r3, #4]
 800725a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800725c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	059b      	lsls	r3, r3, #22
 8007262:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007264:	431a      	orrs	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	0159      	lsls	r1, r3, #5
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	440b      	add	r3, r1
 800726e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007272:	4619      	mov	r1, r3
 8007274:	4b20      	ldr	r3, [pc, #128]	@ (80072f8 <USB_ActivateEndpoint+0x10c>)
 8007276:	4313      	orrs	r3, r2
 8007278:	600b      	str	r3, [r1, #0]
 800727a:	e035      	b.n	80072e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	2101      	movs	r1, #1
 800728e:	fa01 f303 	lsl.w	r3, r1, r3
 8007292:	041b      	lsls	r3, r3, #16
 8007294:	68f9      	ldr	r1, [r7, #12]
 8007296:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800729a:	4313      	orrs	r3, r2
 800729c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d119      	bne.n	80072e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	791b      	ldrb	r3, [r3, #4]
 80072ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072d0:	430b      	orrs	r3, r1
 80072d2:	431a      	orrs	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	0159      	lsls	r1, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	440b      	add	r3, r1
 80072dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e0:	4619      	mov	r1, r3
 80072e2:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <USB_ActivateEndpoint+0x10c>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	10008000 	.word	0x10008000

080072fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d161      	bne.n	80073dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800732a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800732e:	d11f      	bne.n	8007370 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800734a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800734e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800736a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800736e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	2101      	movs	r1, #1
 8007382:	fa01 f303 	lsl.w	r3, r1, r3
 8007386:	b29b      	uxth	r3, r3
 8007388:	43db      	mvns	r3, r3
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007390:	4013      	ands	r3, r2
 8007392:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	2101      	movs	r1, #1
 80073a6:	fa01 f303 	lsl.w	r3, r1, r3
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	43db      	mvns	r3, r3
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073b4:	4013      	ands	r3, r2
 80073b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	0159      	lsls	r1, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	440b      	add	r3, r1
 80073ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d2:	4619      	mov	r1, r3
 80073d4:	4b35      	ldr	r3, [pc, #212]	@ (80074ac <USB_DeactivateEndpoint+0x1b0>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	600b      	str	r3, [r1, #0]
 80073da:	e060      	b.n	800749e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073f2:	d11f      	bne.n	8007434 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800740e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007412:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800742e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007432:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800743a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	2101      	movs	r1, #1
 8007446:	fa01 f303 	lsl.w	r3, r1, r3
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	43db      	mvns	r3, r3
 800744e:	68f9      	ldr	r1, [r7, #12]
 8007450:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007454:	4013      	ands	r3, r2
 8007456:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	2101      	movs	r1, #1
 800746a:	fa01 f303 	lsl.w	r3, r1, r3
 800746e:	041b      	lsls	r3, r3, #16
 8007470:	43db      	mvns	r3, r3
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007478:	4013      	ands	r3, r2
 800747a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	0159      	lsls	r1, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	440b      	add	r3, r1
 8007492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007496:	4619      	mov	r1, r3
 8007498:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <USB_DeactivateEndpoint+0x1b4>)
 800749a:	4013      	ands	r3, r2
 800749c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	ec337800 	.word	0xec337800
 80074b0:	eff37800 	.word	0xeff37800

080074b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	@ 0x28
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	785b      	ldrb	r3, [r3, #1]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	f040 8181 	bne.w	80077d8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d132      	bne.n	8007544 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	0159      	lsls	r1, r3, #5
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	440b      	add	r3, r1
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	4619      	mov	r1, r3
 80074fa:	4ba5      	ldr	r3, [pc, #660]	@ (8007790 <USB_EPStartXfer+0x2dc>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800751a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800751e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	0159      	lsls	r1, r3, #5
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	440b      	add	r3, r1
 8007536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753a:	4619      	mov	r1, r3
 800753c:	4b95      	ldr	r3, [pc, #596]	@ (8007794 <USB_EPStartXfer+0x2e0>)
 800753e:	4013      	ands	r3, r2
 8007540:	610b      	str	r3, [r1, #16]
 8007542:	e092      	b.n	800766a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007550:	691a      	ldr	r2, [r3, #16]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	0159      	lsls	r1, r3, #5
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	440b      	add	r3, r1
 800755a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800755e:	4619      	mov	r1, r3
 8007560:	4b8c      	ldr	r3, [pc, #560]	@ (8007794 <USB_EPStartXfer+0x2e0>)
 8007562:	4013      	ands	r3, r2
 8007564:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	0159      	lsls	r1, r3, #5
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	440b      	add	r3, r1
 800757c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007580:	4619      	mov	r1, r3
 8007582:	4b83      	ldr	r3, [pc, #524]	@ (8007790 <USB_EPStartXfer+0x2dc>)
 8007584:	4013      	ands	r3, r2
 8007586:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d11a      	bne.n	80075c4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	429a      	cmp	r2, r3
 8007598:	d903      	bls.n	80075a2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075c0:	6113      	str	r3, [r2, #16]
 80075c2:	e01b      	b.n	80075fc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6919      	ldr	r1, [r3, #16]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	440b      	add	r3, r1
 80075dc:	1e59      	subs	r1, r3, #1
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80075e6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80075e8:	4b6b      	ldr	r3, [pc, #428]	@ (8007798 <USB_EPStartXfer+0x2e4>)
 80075ea:	400b      	ands	r3, r1
 80075ec:	69b9      	ldr	r1, [r7, #24]
 80075ee:	0148      	lsls	r0, r1, #5
 80075f0:	69f9      	ldr	r1, [r7, #28]
 80075f2:	4401      	add	r1, r0
 80075f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075f8:	4313      	orrs	r3, r2
 80075fa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007612:	69b9      	ldr	r1, [r7, #24]
 8007614:	0148      	lsls	r0, r1, #5
 8007616:	69f9      	ldr	r1, [r7, #28]
 8007618:	4401      	add	r1, r0
 800761a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800761e:	4313      	orrs	r3, r2
 8007620:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d11f      	bne.n	800766a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007644:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007648:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007664:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007668:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800766a:	79fb      	ldrb	r3, [r7, #7]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d14b      	bne.n	8007708 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007684:	461a      	mov	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d128      	bne.n	80076e6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d110      	bne.n	80076c6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	e00f      	b.n	80076e6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	0151      	lsls	r1, r2, #5
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	440a      	add	r2, r1
 80076dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007700:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e16a      	b.n	80079de <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007722:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007726:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	791b      	ldrb	r3, [r3, #4]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d015      	beq.n	800775c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 8152 	beq.w	80079de <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	2101      	movs	r1, #1
 800774c:	fa01 f303 	lsl.w	r3, r1, r3
 8007750:	69f9      	ldr	r1, [r7, #28]
 8007752:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007756:	4313      	orrs	r3, r2
 8007758:	634b      	str	r3, [r1, #52]	@ 0x34
 800775a:	e140      	b.n	80079de <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007768:	2b00      	cmp	r3, #0
 800776a:	d117      	bne.n	800779c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007786:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	e016      	b.n	80077bc <USB_EPStartXfer+0x308>
 800778e:	bf00      	nop
 8007790:	e007ffff 	.word	0xe007ffff
 8007794:	fff80000 	.word	0xfff80000
 8007798:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	68d9      	ldr	r1, [r3, #12]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	b298      	uxth	r0, r3
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	4603      	mov	r3, r0
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f9b9 	bl	8007b48 <USB_WritePacket>
 80077d6:	e102      	b.n	80079de <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	0159      	lsls	r1, r3, #5
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	440b      	add	r3, r1
 80077ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f2:	4619      	mov	r1, r3
 80077f4:	4b7c      	ldr	r3, [pc, #496]	@ (80079e8 <USB_EPStartXfer+0x534>)
 80077f6:	4013      	ands	r3, r2
 80077f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	0159      	lsls	r1, r3, #5
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	440b      	add	r3, r1
 8007810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007814:	4619      	mov	r1, r3
 8007816:	4b75      	ldr	r3, [pc, #468]	@ (80079ec <USB_EPStartXfer+0x538>)
 8007818:	4013      	ands	r3, r2
 800781a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d12f      	bne.n	8007882 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007850:	69b9      	ldr	r1, [r7, #24]
 8007852:	0148      	lsls	r0, r1, #5
 8007854:	69f9      	ldr	r1, [r7, #28]
 8007856:	4401      	add	r1, r0
 8007858:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800785c:	4313      	orrs	r3, r2
 800785e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800787a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800787e:	6113      	str	r3, [r2, #16]
 8007880:	e05f      	b.n	8007942 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d123      	bne.n	80078d2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078a0:	69b9      	ldr	r1, [r7, #24]
 80078a2:	0148      	lsls	r0, r1, #5
 80078a4:	69f9      	ldr	r1, [r7, #28]
 80078a6:	4401      	add	r1, r0
 80078a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078ac:	4313      	orrs	r3, r2
 80078ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	0151      	lsls	r1, r2, #5
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	440a      	add	r2, r1
 80078c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ce:	6113      	str	r3, [r2, #16]
 80078d0:	e037      	b.n	8007942 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	4413      	add	r3, r2
 80078dc:	1e5a      	subs	r2, r3, #1
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	8afa      	ldrh	r2, [r7, #22]
 80078ee:	fb03 f202 	mul.w	r2, r3, r2
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	8afb      	ldrh	r3, [r7, #22]
 8007906:	04d9      	lsls	r1, r3, #19
 8007908:	4b39      	ldr	r3, [pc, #228]	@ (80079f0 <USB_EPStartXfer+0x53c>)
 800790a:	400b      	ands	r3, r1
 800790c:	69b9      	ldr	r1, [r7, #24]
 800790e:	0148      	lsls	r0, r1, #5
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	4401      	add	r1, r0
 8007914:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007918:	4313      	orrs	r3, r2
 800791a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007932:	69b9      	ldr	r1, [r7, #24]
 8007934:	0148      	lsls	r0, r1, #5
 8007936:	69f9      	ldr	r1, [r7, #28]
 8007938:	4401      	add	r1, r0
 800793a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800793e:	4313      	orrs	r3, r2
 8007940:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d10d      	bne.n	8007964 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	68d9      	ldr	r1, [r3, #12]
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007960:	460a      	mov	r2, r1
 8007962:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	791b      	ldrb	r3, [r3, #4]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d128      	bne.n	80079be <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007978:	2b00      	cmp	r3, #0
 800797a:	d110      	bne.n	800799e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007996:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e00f      	b.n	80079be <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	0151      	lsls	r1, r2, #5
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	440a      	add	r2, r1
 80079b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079bc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80079dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3720      	adds	r7, #32
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	fff80000 	.word	0xfff80000
 80079ec:	e007ffff 	.word	0xe007ffff
 80079f0:	1ff80000 	.word	0x1ff80000

080079f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d14a      	bne.n	8007aa8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a2a:	f040 8086 	bne.w	8007b3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	7812      	ldrb	r2, [r2, #0]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d902      	bls.n	8007a8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	75fb      	strb	r3, [r7, #23]
          break;
 8007a8a:	e056      	b.n	8007b3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aa4:	d0e7      	beq.n	8007a76 <USB_EPStopXfer+0x82>
 8007aa6:	e048      	b.n	8007b3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ac0:	d13b      	bne.n	8007b3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	7812      	ldrb	r2, [r2, #0]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ae0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ae4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	7812      	ldrb	r2, [r2, #0]
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d902      	bls.n	8007b20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b1e:	e00c      	b.n	8007b3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b38:	d0e7      	beq.n	8007b0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b089      	sub	sp, #36	@ 0x24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4611      	mov	r1, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	460b      	mov	r3, r1
 8007b58:	71fb      	strb	r3, [r7, #7]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d123      	bne.n	8007bb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b6e:	88bb      	ldrh	r3, [r7, #4]
 8007b70:	3303      	adds	r3, #3
 8007b72:	089b      	lsrs	r3, r3, #2
 8007b74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	61bb      	str	r3, [r7, #24]
 8007b7a:	e018      	b.n	8007bae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	031a      	lsls	r2, r3, #12
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b88:	461a      	mov	r2, r3
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	3301      	adds	r3, #1
 8007b94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	3301      	adds	r3, #1
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d3e2      	bcc.n	8007b7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3724      	adds	r7, #36	@ 0x24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b08b      	sub	sp, #44	@ 0x2c
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	089b      	lsrs	r3, r3, #2
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bea:	2300      	movs	r3, #0
 8007bec:	623b      	str	r3, [r7, #32]
 8007bee:	e014      	b.n	8007c1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	3301      	adds	r3, #1
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	3301      	adds	r3, #1
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	3301      	adds	r3, #1
 8007c12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	3301      	adds	r3, #1
 8007c18:	623b      	str	r3, [r7, #32]
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d3e6      	bcc.n	8007bf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c22:	8bfb      	ldrh	r3, [r7, #30]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01e      	beq.n	8007c66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c32:	461a      	mov	r2, r3
 8007c34:	f107 0310 	add.w	r3, r7, #16
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	fa22 f303 	lsr.w	r3, r2, r3
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	701a      	strb	r2, [r3, #0]
      i++;
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	3301      	adds	r3, #1
 8007c52:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	3301      	adds	r3, #1
 8007c58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007c5a:	8bfb      	ldrh	r3, [r7, #30]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c60:	8bfb      	ldrh	r3, [r7, #30]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1ea      	bne.n	8007c3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	372c      	adds	r7, #44	@ 0x2c
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d12c      	bne.n	8007cea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	db12      	blt.n	8007cc8 <USB_EPSetStall+0x54>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00f      	beq.n	8007cc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	0151      	lsls	r1, r2, #5
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	e02b      	b.n	8007d42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	db12      	blt.n	8007d22 <USB_EPSetStall+0xae>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00f      	beq.n	8007d22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	0151      	lsls	r1, r2, #5
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	440a      	add	r2, r1
 8007d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d128      	bne.n	8007dbe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	791b      	ldrb	r3, [r3, #4]
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d003      	beq.n	8007d9c <USB_EPClearStall+0x4c>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	791b      	ldrb	r3, [r3, #4]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d138      	bne.n	8007e0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	0151      	lsls	r1, r2, #5
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	440a      	add	r2, r1
 8007db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	e027      	b.n	8007e0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ddc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	791b      	ldrb	r3, [r3, #4]
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d003      	beq.n	8007dee <USB_EPClearStall+0x9e>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	791b      	ldrb	r3, [r3, #4]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d10f      	bne.n	8007e0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007e50:	68f9      	ldr	r1, [r7, #12]
 8007e52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e56:	4313      	orrs	r3, r2
 8007e58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e96:	f023 0302 	bic.w	r3, r3, #2
 8007e9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ec4:	f023 0303 	bic.w	r3, r3, #3
 8007ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ed8:	f043 0302 	orr.w	r3, r3, #2
 8007edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4013      	ands	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f04:	68fb      	ldr	r3, [r7, #12]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b085      	sub	sp, #20
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	4013      	ands	r3, r2
 8007f34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	0c1b      	lsrs	r3, r3, #16
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4013      	ands	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	b29b      	uxth	r3, r3
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b087      	sub	sp, #28
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe6:	01db      	lsls	r3, r3, #7
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4013      	ands	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008004:	68bb      	ldr	r3, [r7, #8]
}
 8008006:	4618      	mov	r0, r3
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	f003 0301 	and.w	r3, r3, #1
}
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804a:	4619      	mov	r1, r3
 800804c:	4b09      	ldr	r3, [pc, #36]	@ (8008074 <USB_ActivateSetup+0x44>)
 800804e:	4013      	ands	r3, r2
 8008050:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008064:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	fffff800 	.word	0xfffff800

08008078 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	460b      	mov	r3, r1
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	333c      	adds	r3, #60	@ 0x3c
 800808e:	3304      	adds	r3, #4
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	4a26      	ldr	r2, [pc, #152]	@ (8008130 <USB_EP0_OutStart+0xb8>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d90a      	bls.n	80080b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ac:	d101      	bne.n	80080b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e037      	b.n	8008122 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b8:	461a      	mov	r2, r3
 80080ba:	2300      	movs	r3, #0
 80080bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e0:	f043 0318 	orr.w	r3, r3, #24
 80080e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080f4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80080f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10f      	bne.n	8008120 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800811a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800811e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	4f54300a 	.word	0x4f54300a

08008134 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800814c:	d901      	bls.n	8008152 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e01b      	b.n	800818a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	daf2      	bge.n	8008140 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f043 0201 	orr.w	r2, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3301      	adds	r3, #1
 800816e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008176:	d901      	bls.n	800817c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e006      	b.n	800818a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b01      	cmp	r3, #1
 8008186:	d0f0      	beq.n	800816a <USB_CoreReset+0x36>

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80081a8:	f002 fcfe 	bl	800aba8 <USBD_static_malloc>
 80081ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32b0      	adds	r2, #176	@ 0xb0
 80081be:	2100      	movs	r1, #0
 80081c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80081c4:	2302      	movs	r3, #2
 80081c6:	e0d4      	b.n	8008372 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80081c8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80081cc:	2100      	movs	r1, #0
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f002 fd4e 	bl	800ac70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	32b0      	adds	r2, #176	@ 0xb0
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	32b0      	adds	r2, #176	@ 0xb0
 80081ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	7c1b      	ldrb	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d138      	bne.n	8008272 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008200:	4b5e      	ldr	r3, [pc, #376]	@ (800837c <USBD_CDC_Init+0x1e4>)
 8008202:	7819      	ldrb	r1, [r3, #0]
 8008204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008208:	2202      	movs	r2, #2
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f002 fba9 	bl	800a962 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008210:	4b5a      	ldr	r3, [pc, #360]	@ (800837c <USBD_CDC_Init+0x1e4>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	f003 020f 	and.w	r2, r3, #15
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	3324      	adds	r3, #36	@ 0x24
 8008226:	2201      	movs	r2, #1
 8008228:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800822a:	4b55      	ldr	r3, [pc, #340]	@ (8008380 <USBD_CDC_Init+0x1e8>)
 800822c:	7819      	ldrb	r1, [r3, #0]
 800822e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008232:	2202      	movs	r2, #2
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f002 fb94 	bl	800a962 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800823a:	4b51      	ldr	r3, [pc, #324]	@ (8008380 <USBD_CDC_Init+0x1e8>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	f003 020f 	and.w	r2, r3, #15
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008252:	2201      	movs	r2, #1
 8008254:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008256:	4b4b      	ldr	r3, [pc, #300]	@ (8008384 <USBD_CDC_Init+0x1ec>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	f003 020f 	and.w	r2, r3, #15
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	3326      	adds	r3, #38	@ 0x26
 800826c:	2210      	movs	r2, #16
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	e035      	b.n	80082de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008272:	4b42      	ldr	r3, [pc, #264]	@ (800837c <USBD_CDC_Init+0x1e4>)
 8008274:	7819      	ldrb	r1, [r3, #0]
 8008276:	2340      	movs	r3, #64	@ 0x40
 8008278:	2202      	movs	r2, #2
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f002 fb71 	bl	800a962 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008280:	4b3e      	ldr	r3, [pc, #248]	@ (800837c <USBD_CDC_Init+0x1e4>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 020f 	and.w	r2, r3, #15
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	440b      	add	r3, r1
 8008294:	3324      	adds	r3, #36	@ 0x24
 8008296:	2201      	movs	r2, #1
 8008298:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800829a:	4b39      	ldr	r3, [pc, #228]	@ (8008380 <USBD_CDC_Init+0x1e8>)
 800829c:	7819      	ldrb	r1, [r3, #0]
 800829e:	2340      	movs	r3, #64	@ 0x40
 80082a0:	2202      	movs	r2, #2
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f002 fb5d 	bl	800a962 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082a8:	4b35      	ldr	r3, [pc, #212]	@ (8008380 <USBD_CDC_Init+0x1e8>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	f003 020f 	and.w	r2, r3, #15
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80082c0:	2201      	movs	r2, #1
 80082c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008384 <USBD_CDC_Init+0x1ec>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 020f 	and.w	r2, r3, #15
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	3326      	adds	r3, #38	@ 0x26
 80082da:	2210      	movs	r2, #16
 80082dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082de:	4b29      	ldr	r3, [pc, #164]	@ (8008384 <USBD_CDC_Init+0x1ec>)
 80082e0:	7819      	ldrb	r1, [r3, #0]
 80082e2:	2308      	movs	r3, #8
 80082e4:	2203      	movs	r2, #3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f002 fb3b 	bl	800a962 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80082ec:	4b25      	ldr	r3, [pc, #148]	@ (8008384 <USBD_CDC_Init+0x1ec>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 020f 	and.w	r2, r3, #15
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	440b      	add	r3, r1
 8008300:	3324      	adds	r3, #36	@ 0x24
 8008302:	2201      	movs	r2, #1
 8008304:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	33b0      	adds	r3, #176	@ 0xb0
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800833c:	2302      	movs	r3, #2
 800833e:	e018      	b.n	8008372 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	7c1b      	ldrb	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10a      	bne.n	800835e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008348:	4b0d      	ldr	r3, [pc, #52]	@ (8008380 <USBD_CDC_Init+0x1e8>)
 800834a:	7819      	ldrb	r1, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f002 fbf2 	bl	800ab40 <USBD_LL_PrepareReceive>
 800835c:	e008      	b.n	8008370 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800835e:	4b08      	ldr	r3, [pc, #32]	@ (8008380 <USBD_CDC_Init+0x1e8>)
 8008360:	7819      	ldrb	r1, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008368:	2340      	movs	r3, #64	@ 0x40
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f002 fbe8 	bl	800ab40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	240000b3 	.word	0x240000b3
 8008380:	240000b4 	.word	0x240000b4
 8008384:	240000b5 	.word	0x240000b5

08008388 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008394:	4b3a      	ldr	r3, [pc, #232]	@ (8008480 <USBD_CDC_DeInit+0xf8>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f002 fb07 	bl	800a9ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80083a0:	4b37      	ldr	r3, [pc, #220]	@ (8008480 <USBD_CDC_DeInit+0xf8>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	6879      	ldr	r1, [r7, #4]
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	440b      	add	r3, r1
 80083b4:	3324      	adds	r3, #36	@ 0x24
 80083b6:	2200      	movs	r2, #0
 80083b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80083ba:	4b32      	ldr	r3, [pc, #200]	@ (8008484 <USBD_CDC_DeInit+0xfc>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f002 faf4 	bl	800a9ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80083c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008484 <USBD_CDC_DeInit+0xfc>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	f003 020f 	and.w	r2, r3, #15
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083de:	2200      	movs	r2, #0
 80083e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80083e2:	4b29      	ldr	r3, [pc, #164]	@ (8008488 <USBD_CDC_DeInit+0x100>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f002 fae0 	bl	800a9ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80083ee:	4b26      	ldr	r3, [pc, #152]	@ (8008488 <USBD_CDC_DeInit+0x100>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f003 020f 	and.w	r2, r3, #15
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	3324      	adds	r3, #36	@ 0x24
 8008404:	2200      	movs	r2, #0
 8008406:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008408:	4b1f      	ldr	r3, [pc, #124]	@ (8008488 <USBD_CDC_DeInit+0x100>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f003 020f 	and.w	r2, r3, #15
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	3326      	adds	r3, #38	@ 0x26
 800841e:	2200      	movs	r2, #0
 8008420:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	32b0      	adds	r2, #176	@ 0xb0
 800842c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01f      	beq.n	8008474 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	33b0      	adds	r3, #176	@ 0xb0
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	32b0      	adds	r2, #176	@ 0xb0
 8008452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008456:	4618      	mov	r0, r3
 8008458:	f002 fbb4 	bl	800abc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	32b0      	adds	r2, #176	@ 0xb0
 8008466:	2100      	movs	r1, #0
 8008468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	240000b3 	.word	0x240000b3
 8008484:	240000b4 	.word	0x240000b4
 8008488:	240000b5 	.word	0x240000b5

0800848c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	32b0      	adds	r2, #176	@ 0xb0
 80084a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e0bf      	b.n	800863c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d050      	beq.n	800856a <USBD_CDC_Setup+0xde>
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	f040 80af 	bne.w	800862c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	88db      	ldrh	r3, [r3, #6]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d03a      	beq.n	800854c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b25b      	sxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	da1b      	bge.n	8008518 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	33b0      	adds	r3, #176	@ 0xb0
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80084f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	88d2      	ldrh	r2, [r2, #6]
 80084fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	88db      	ldrh	r3, [r3, #6]
 8008502:	2b07      	cmp	r3, #7
 8008504:	bf28      	it	cs
 8008506:	2307      	movcs	r3, #7
 8008508:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	89fa      	ldrh	r2, [r7, #14]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 fdbd 	bl	800a090 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008516:	e090      	b.n	800863a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	785a      	ldrb	r2, [r3, #1]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	88db      	ldrh	r3, [r3, #6]
 8008526:	2b3f      	cmp	r3, #63	@ 0x3f
 8008528:	d803      	bhi.n	8008532 <USBD_CDC_Setup+0xa6>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	88db      	ldrh	r3, [r3, #6]
 800852e:	b2da      	uxtb	r2, r3
 8008530:	e000      	b.n	8008534 <USBD_CDC_Setup+0xa8>
 8008532:	2240      	movs	r2, #64	@ 0x40
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800853a:	6939      	ldr	r1, [r7, #16]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008542:	461a      	mov	r2, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fdcf 	bl	800a0e8 <USBD_CtlPrepareRx>
      break;
 800854a:	e076      	b.n	800863a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	33b0      	adds	r3, #176	@ 0xb0
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	7850      	ldrb	r0, [r2, #1]
 8008562:	2200      	movs	r2, #0
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	4798      	blx	r3
      break;
 8008568:	e067      	b.n	800863a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	2b0b      	cmp	r3, #11
 8008570:	d851      	bhi.n	8008616 <USBD_CDC_Setup+0x18a>
 8008572:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <USBD_CDC_Setup+0xec>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	080085a9 	.word	0x080085a9
 800857c:	08008625 	.word	0x08008625
 8008580:	08008617 	.word	0x08008617
 8008584:	08008617 	.word	0x08008617
 8008588:	08008617 	.word	0x08008617
 800858c:	08008617 	.word	0x08008617
 8008590:	08008617 	.word	0x08008617
 8008594:	08008617 	.word	0x08008617
 8008598:	08008617 	.word	0x08008617
 800859c:	08008617 	.word	0x08008617
 80085a0:	080085d3 	.word	0x080085d3
 80085a4:	080085fd 	.word	0x080085fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d107      	bne.n	80085c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085b4:	f107 030a 	add.w	r3, r7, #10
 80085b8:	2202      	movs	r2, #2
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 fd67 	bl	800a090 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085c2:	e032      	b.n	800862a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 fce5 	bl	8009f96 <USBD_CtlError>
            ret = USBD_FAIL;
 80085cc:	2303      	movs	r3, #3
 80085ce:	75fb      	strb	r3, [r7, #23]
          break;
 80085d0:	e02b      	b.n	800862a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d107      	bne.n	80085ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085de:	f107 030d 	add.w	r3, r7, #13
 80085e2:	2201      	movs	r2, #1
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fd52 	bl	800a090 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085ec:	e01d      	b.n	800862a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fcd0 	bl	8009f96 <USBD_CtlError>
            ret = USBD_FAIL;
 80085f6:	2303      	movs	r3, #3
 80085f8:	75fb      	strb	r3, [r7, #23]
          break;
 80085fa:	e016      	b.n	800862a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b03      	cmp	r3, #3
 8008606:	d00f      	beq.n	8008628 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fcc3 	bl	8009f96 <USBD_CtlError>
            ret = USBD_FAIL;
 8008610:	2303      	movs	r3, #3
 8008612:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008614:	e008      	b.n	8008628 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 fcbc 	bl	8009f96 <USBD_CtlError>
          ret = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	75fb      	strb	r3, [r7, #23]
          break;
 8008622:	e002      	b.n	800862a <USBD_CDC_Setup+0x19e>
          break;
 8008624:	bf00      	nop
 8008626:	e008      	b.n	800863a <USBD_CDC_Setup+0x1ae>
          break;
 8008628:	bf00      	nop
      }
      break;
 800862a:	e006      	b.n	800863a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 fcb1 	bl	8009f96 <USBD_CtlError>
      ret = USBD_FAIL;
 8008634:	2303      	movs	r3, #3
 8008636:	75fb      	strb	r3, [r7, #23]
      break;
 8008638:	bf00      	nop
  }

  return (uint8_t)ret;
 800863a:	7dfb      	ldrb	r3, [r7, #23]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008656:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	32b0      	adds	r2, #176	@ 0xb0
 8008662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800866a:	2303      	movs	r3, #3
 800866c:	e065      	b.n	800873a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	32b0      	adds	r2, #176	@ 0xb0
 8008678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	f003 020f 	and.w	r2, r3, #15
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	3318      	adds	r3, #24
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d02f      	beq.n	80086f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	f003 020f 	and.w	r2, r3, #15
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	3318      	adds	r3, #24
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	f003 010f 	and.w	r1, r3, #15
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	460b      	mov	r3, r1
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	440b      	add	r3, r1
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4403      	add	r3, r0
 80086c0:	331c      	adds	r3, #28
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d112      	bne.n	80086f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	f003 020f 	and.w	r2, r3, #15
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	3318      	adds	r3, #24
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086ea:	78f9      	ldrb	r1, [r7, #3]
 80086ec:	2300      	movs	r3, #0
 80086ee:	2200      	movs	r2, #0
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f002 fa04 	bl	800aafe <USBD_LL_Transmit>
 80086f6:	e01f      	b.n	8008738 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	33b0      	adds	r3, #176	@ 0xb0
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d010      	beq.n	8008738 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	33b0      	adds	r3, #176	@ 0xb0
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008734:	78fa      	ldrb	r2, [r7, #3]
 8008736:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	32b0      	adds	r2, #176	@ 0xb0
 8008758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	32b0      	adds	r2, #176	@ 0xb0
 8008768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008770:	2303      	movs	r3, #3
 8008772:	e01a      	b.n	80087aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f002 fa02 	bl	800ab82 <USBD_LL_GetRxDataSize>
 800877e:	4602      	mov	r2, r0
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	33b0      	adds	r3, #176	@ 0xb0
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80087a4:	4611      	mov	r1, r2
 80087a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	32b0      	adds	r2, #176	@ 0xb0
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e024      	b.n	800881e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	33b0      	adds	r3, #176	@ 0xb0
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d019      	beq.n	800881c <USBD_CDC_EP0_RxReady+0x6a>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80087ee:	2bff      	cmp	r3, #255	@ 0xff
 80087f0:	d014      	beq.n	800881c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	33b0      	adds	r3, #176	@ 0xb0
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800880a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008812:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	22ff      	movs	r2, #255	@ 0xff
 8008818:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008830:	2182      	movs	r1, #130	@ 0x82
 8008832:	4818      	ldr	r0, [pc, #96]	@ (8008894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008834:	f000 fd4f 	bl	80092d6 <USBD_GetEpDesc>
 8008838:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800883a:	2101      	movs	r1, #1
 800883c:	4815      	ldr	r0, [pc, #84]	@ (8008894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800883e:	f000 fd4a 	bl	80092d6 <USBD_GetEpDesc>
 8008842:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008844:	2181      	movs	r1, #129	@ 0x81
 8008846:	4813      	ldr	r0, [pc, #76]	@ (8008894 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008848:	f000 fd45 	bl	80092d6 <USBD_GetEpDesc>
 800884c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2210      	movs	r2, #16
 8008858:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d006      	beq.n	800886e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	2200      	movs	r2, #0
 8008864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008868:	711a      	strb	r2, [r3, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d006      	beq.n	8008882 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800887c:	711a      	strb	r2, [r3, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2243      	movs	r2, #67	@ 0x43
 8008886:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008888:	4b02      	ldr	r3, [pc, #8]	@ (8008894 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800888a:	4618      	mov	r0, r3
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	24000070 	.word	0x24000070

08008898 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088a0:	2182      	movs	r1, #130	@ 0x82
 80088a2:	4818      	ldr	r0, [pc, #96]	@ (8008904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088a4:	f000 fd17 	bl	80092d6 <USBD_GetEpDesc>
 80088a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088aa:	2101      	movs	r1, #1
 80088ac:	4815      	ldr	r0, [pc, #84]	@ (8008904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088ae:	f000 fd12 	bl	80092d6 <USBD_GetEpDesc>
 80088b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088b4:	2181      	movs	r1, #129	@ 0x81
 80088b6:	4813      	ldr	r0, [pc, #76]	@ (8008904 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088b8:	f000 fd0d 	bl	80092d6 <USBD_GetEpDesc>
 80088bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2210      	movs	r2, #16
 80088c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	2200      	movs	r2, #0
 80088d4:	711a      	strb	r2, [r3, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f042 0202 	orr.w	r2, r2, #2
 80088dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d006      	beq.n	80088f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	711a      	strb	r2, [r3, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f042 0202 	orr.w	r2, r2, #2
 80088f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2243      	movs	r2, #67	@ 0x43
 80088f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088f8:	4b02      	ldr	r3, [pc, #8]	@ (8008904 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	24000070 	.word	0x24000070

08008908 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008910:	2182      	movs	r1, #130	@ 0x82
 8008912:	4818      	ldr	r0, [pc, #96]	@ (8008974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008914:	f000 fcdf 	bl	80092d6 <USBD_GetEpDesc>
 8008918:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800891a:	2101      	movs	r1, #1
 800891c:	4815      	ldr	r0, [pc, #84]	@ (8008974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800891e:	f000 fcda 	bl	80092d6 <USBD_GetEpDesc>
 8008922:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008924:	2181      	movs	r1, #129	@ 0x81
 8008926:	4813      	ldr	r0, [pc, #76]	@ (8008974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008928:	f000 fcd5 	bl	80092d6 <USBD_GetEpDesc>
 800892c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2210      	movs	r2, #16
 8008938:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2200      	movs	r2, #0
 8008944:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008948:	711a      	strb	r2, [r3, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800895c:	711a      	strb	r2, [r3, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2243      	movs	r2, #67	@ 0x43
 8008966:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008968:	4b02      	ldr	r3, [pc, #8]	@ (8008974 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	24000070 	.word	0x24000070

08008978 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	220a      	movs	r2, #10
 8008984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008986:	4b03      	ldr	r3, [pc, #12]	@ (8008994 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	2400002c 	.word	0x2400002c

08008998 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e009      	b.n	80089c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	33b0      	adds	r3, #176	@ 0xb0
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	32b0      	adds	r2, #176	@ 0xb0
 80089e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e008      	b.n	8008a04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	32b0      	adds	r2, #176	@ 0xb0
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e004      	b.n	8008a3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
	...

08008a4c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	32b0      	adds	r2, #176	@ 0xb0
 8008a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a62:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a64:	2301      	movs	r3, #1
 8008a66:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e025      	b.n	8008abe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d11f      	bne.n	8008abc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a84:	4b10      	ldr	r3, [pc, #64]	@ (8008ac8 <USBD_CDC_TransmitPacket+0x7c>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	f003 020f 	and.w	r2, r3, #15
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4403      	add	r3, r0
 8008a9e:	3318      	adds	r3, #24
 8008aa0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008aa2:	4b09      	ldr	r3, [pc, #36]	@ (8008ac8 <USBD_CDC_TransmitPacket+0x7c>)
 8008aa4:	7819      	ldrb	r1, [r3, #0]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f002 f823 	bl	800aafe <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	240000b3 	.word	0x240000b3

08008acc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	32b0      	adds	r2, #176	@ 0xb0
 8008ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	32b0      	adds	r2, #176	@ 0xb0
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e018      	b.n	8008b2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	7c1b      	ldrb	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b02:	4b0c      	ldr	r3, [pc, #48]	@ (8008b34 <USBD_CDC_ReceivePacket+0x68>)
 8008b04:	7819      	ldrb	r1, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f002 f815 	bl	800ab40 <USBD_LL_PrepareReceive>
 8008b16:	e008      	b.n	8008b2a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b18:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <USBD_CDC_ReceivePacket+0x68>)
 8008b1a:	7819      	ldrb	r1, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b22:	2340      	movs	r3, #64	@ 0x40
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f002 f80b 	bl	800ab40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	240000b4 	.word	0x240000b4

08008b38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	4613      	mov	r3, r2
 8008b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e01f      	b.n	8008b90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	79fa      	ldrb	r2, [r7, #7]
 8008b82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f001 fe81 	bl	800a88c <USBD_LL_Init>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e025      	b.n	8008bfc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	32ae      	adds	r2, #174	@ 0xae
 8008bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00f      	beq.n	8008bec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32ae      	adds	r2, #174	@ 0xae
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bdc:	f107 020e 	add.w	r2, r7, #14
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	4602      	mov	r2, r0
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 fe8d 	bl	800a92c <USBD_LL_Start>
 8008c12:	4603      	mov	r3, r0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	4611      	mov	r1, r2
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	4798      	blx	r3
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	78fa      	ldrb	r2, [r7, #3]
 8008c84:	4611      	mov	r1, r2
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	4798      	blx	r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c90:	2303      	movs	r3, #3
 8008c92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f001 f936 	bl	8009f22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008cd2:	f003 031f 	and.w	r3, r3, #31
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d01a      	beq.n	8008d10 <USBD_LL_SetupStage+0x72>
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d822      	bhi.n	8008d24 <USBD_LL_SetupStage+0x86>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <USBD_LL_SetupStage+0x4a>
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d00a      	beq.n	8008cfc <USBD_LL_SetupStage+0x5e>
 8008ce6:	e01d      	b.n	8008d24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fb63 	bl	80093bc <USBD_StdDevReq>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfa:	e020      	b.n	8008d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fbcb 	bl	80094a0 <USBD_StdItfReq>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0e:	e016      	b.n	8008d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fc2d 	bl	8009578 <USBD_StdEPReq>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]
      break;
 8008d22:	e00c      	b.n	8008d3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d2a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 fe5a 	bl	800a9ec <USBD_LL_StallEP>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d3c:	bf00      	nop
  }

  return ret;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	460b      	mov	r3, r1
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d5a:	7afb      	ldrb	r3, [r7, #11]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d16e      	bne.n	8008e3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	f040 8098 	bne.w	8008ea4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d913      	bls.n	8008da8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	1ad2      	subs	r2, r2, r3
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	4293      	cmp	r3, r2
 8008d98:	bf28      	it	cs
 8008d9a:	4613      	movcs	r3, r2
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f001 f9be 	bl	800a122 <USBD_CtlContinueRx>
 8008da6:	e07d      	b.n	8008ea4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dae:	f003 031f 	and.w	r3, r3, #31
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d014      	beq.n	8008de0 <USBD_LL_DataOutStage+0x98>
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d81d      	bhi.n	8008df6 <USBD_LL_DataOutStage+0xae>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <USBD_LL_DataOutStage+0x7c>
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d003      	beq.n	8008dca <USBD_LL_DataOutStage+0x82>
 8008dc2:	e018      	b.n	8008df6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8008dc8:	e018      	b.n	8008dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 fa64 	bl	80092a2 <USBD_CoreFindIF>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75bb      	strb	r3, [r7, #22]
            break;
 8008dde:	e00d      	b.n	8008dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	4619      	mov	r1, r3
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fa66 	bl	80092bc <USBD_CoreFindEP>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75bb      	strb	r3, [r7, #22]
            break;
 8008df4:	e002      	b.n	8008dfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75bb      	strb	r3, [r7, #22]
            break;
 8008dfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008dfc:	7dbb      	ldrb	r3, [r7, #22]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d119      	bne.n	8008e36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d113      	bne.n	8008e36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e0e:	7dba      	ldrb	r2, [r7, #22]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	32ae      	adds	r2, #174	@ 0xae
 8008e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00b      	beq.n	8008e36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e1e:	7dba      	ldrb	r2, [r7, #22]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e26:	7dba      	ldrb	r2, [r7, #22]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	32ae      	adds	r2, #174	@ 0xae
 8008e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f001 f984 	bl	800a144 <USBD_CtlSendStatus>
 8008e3c:	e032      	b.n	8008ea4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	4619      	mov	r1, r3
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 fa37 	bl	80092bc <USBD_CoreFindEP>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e52:	7dbb      	ldrb	r3, [r7, #22]
 8008e54:	2bff      	cmp	r3, #255	@ 0xff
 8008e56:	d025      	beq.n	8008ea4 <USBD_LL_DataOutStage+0x15c>
 8008e58:	7dbb      	ldrb	r3, [r7, #22]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d122      	bne.n	8008ea4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d117      	bne.n	8008e9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e6a:	7dba      	ldrb	r2, [r7, #22]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	32ae      	adds	r2, #174	@ 0xae
 8008e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00f      	beq.n	8008e9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e7a:	7dba      	ldrb	r2, [r7, #22]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e82:	7dba      	ldrb	r2, [r7, #22]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	32ae      	adds	r2, #174	@ 0xae
 8008e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	7afa      	ldrb	r2, [r7, #11]
 8008e90:	4611      	mov	r1, r2
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	4798      	blx	r3
 8008e96:	4603      	mov	r3, r0
 8008e98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	e000      	b.n	8008ea6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	607a      	str	r2, [r7, #4]
 8008eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d16f      	bne.n	8008fa2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d15a      	bne.n	8008f88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d914      	bls.n	8008f08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	1ad2      	subs	r2, r2, r3
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f001 f8e6 	bl	800a0c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008efa:	2300      	movs	r3, #0
 8008efc:	2200      	movs	r2, #0
 8008efe:	2100      	movs	r1, #0
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f001 fe1d 	bl	800ab40 <USBD_LL_PrepareReceive>
 8008f06:	e03f      	b.n	8008f88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d11c      	bne.n	8008f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d316      	bcc.n	8008f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d20f      	bcs.n	8008f4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2100      	movs	r1, #0
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f001 f8c7 	bl	800a0c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f40:	2300      	movs	r3, #0
 8008f42:	2200      	movs	r2, #0
 8008f44:	2100      	movs	r1, #0
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f001 fdfa 	bl	800ab40 <USBD_LL_PrepareReceive>
 8008f4c:	e01c      	b.n	8008f88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d10f      	bne.n	8008f7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d009      	beq.n	8008f7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f7a:	2180      	movs	r1, #128	@ 0x80
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f001 fd35 	bl	800a9ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f001 f8f1 	bl	800a16a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d03a      	beq.n	8009008 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff fe42 	bl	8008c1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008fa0:	e032      	b.n	8009008 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	4619      	mov	r1, r3
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f985 	bl	80092bc <USBD_CoreFindEP>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	2bff      	cmp	r3, #255	@ 0xff
 8008fba:	d025      	beq.n	8009008 <USBD_LL_DataInStage+0x15a>
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d122      	bne.n	8009008 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d11c      	bne.n	8009008 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008fce:	7dfa      	ldrb	r2, [r7, #23]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	32ae      	adds	r2, #174	@ 0xae
 8008fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d014      	beq.n	8009008 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008fde:	7dfa      	ldrb	r2, [r7, #23]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008fe6:	7dfa      	ldrb	r2, [r7, #23]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	32ae      	adds	r2, #174	@ 0xae
 8008fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	7afa      	ldrb	r2, [r7, #11]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	4798      	blx	r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008ffe:	7dbb      	ldrb	r3, [r7, #22]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009004:	7dbb      	ldrb	r3, [r7, #22]
 8009006:	e000      	b.n	800900a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d014      	beq.n	8009078 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00e      	beq.n	8009078 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	6852      	ldr	r2, [r2, #4]
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	4611      	mov	r1, r2
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009074:	2303      	movs	r3, #3
 8009076:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009078:	2340      	movs	r3, #64	@ 0x40
 800907a:	2200      	movs	r2, #0
 800907c:	2100      	movs	r1, #0
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fc6f 	bl	800a962 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2240      	movs	r2, #64	@ 0x40
 8009090:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009094:	2340      	movs	r3, #64	@ 0x40
 8009096:	2200      	movs	r2, #0
 8009098:	2180      	movs	r1, #128	@ 0x80
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 fc61 	bl	800a962 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2240      	movs	r2, #64	@ 0x40
 80090aa:	621a      	str	r2, [r3, #32]

  return ret;
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d006      	beq.n	80090f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2204      	movs	r2, #4
 80090fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b04      	cmp	r3, #4
 8009120:	d106      	bne.n	8009130 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009128:	b2da      	uxtb	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b03      	cmp	r3, #3
 8009150:	d110      	bne.n	8009174 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	460b      	mov	r3, r1
 8009188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	32ae      	adds	r2, #174	@ 0xae
 8009194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	e01c      	b.n	80091da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d115      	bne.n	80091d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32ae      	adds	r2, #174	@ 0xae
 80091b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	32ae      	adds	r2, #174	@ 0xae
 80091ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	4611      	mov	r1, r2
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	32ae      	adds	r2, #174	@ 0xae
 80091f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009200:	2303      	movs	r3, #3
 8009202:	e01c      	b.n	800923e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b03      	cmp	r3, #3
 800920e:	d115      	bne.n	800923c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32ae      	adds	r2, #174	@ 0xae
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	32ae      	adds	r2, #174	@ 0xae
 800922e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	4611      	mov	r1, r2
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00e      	beq.n	8009298 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6852      	ldr	r2, [r2, #4]
 8009286:	b2d2      	uxtb	r2, r2
 8009288:	4611      	mov	r1, r2
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009294:	2303      	movs	r3, #3
 8009296:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b086      	sub	sp, #24
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	885b      	ldrh	r3, [r3, #2]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	7812      	ldrb	r2, [r2, #0]
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d91f      	bls.n	800933c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009302:	e013      	b.n	800932c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009304:	f107 030a 	add.w	r3, r7, #10
 8009308:	4619      	mov	r1, r3
 800930a:	6978      	ldr	r0, [r7, #20]
 800930c:	f000 f81b 	bl	8009346 <USBD_GetNextDesc>
 8009310:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	785b      	ldrb	r3, [r3, #1]
 8009316:	2b05      	cmp	r3, #5
 8009318:	d108      	bne.n	800932c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	789b      	ldrb	r3, [r3, #2]
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	429a      	cmp	r2, r3
 8009326:	d008      	beq.n	800933a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009328:	2300      	movs	r3, #0
 800932a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	885b      	ldrh	r3, [r3, #2]
 8009330:	b29a      	uxth	r2, r3
 8009332:	897b      	ldrh	r3, [r7, #10]
 8009334:	429a      	cmp	r2, r3
 8009336:	d8e5      	bhi.n	8009304 <USBD_GetEpDesc+0x2e>
 8009338:	e000      	b.n	800933c <USBD_GetEpDesc+0x66>
          break;
 800933a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800933c:	693b      	ldr	r3, [r7, #16]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009346:	b480      	push	{r7}
 8009348:	b085      	sub	sp, #20
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	7812      	ldrb	r2, [r2, #0]
 800935c:	4413      	add	r3, r2
 800935e:	b29a      	uxth	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4413      	add	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009370:	68fb      	ldr	r3, [r7, #12]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800937e:	b480      	push	{r7}
 8009380:	b087      	sub	sp, #28
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	3301      	adds	r3, #1
 8009394:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800939c:	8a3b      	ldrh	r3, [r7, #16]
 800939e:	021b      	lsls	r3, r3, #8
 80093a0:	b21a      	sxth	r2, r3
 80093a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	b21b      	sxth	r3, r3
 80093aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093ac:	89fb      	ldrh	r3, [r7, #14]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	371c      	adds	r7, #28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
	...

080093bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093d2:	2b40      	cmp	r3, #64	@ 0x40
 80093d4:	d005      	beq.n	80093e2 <USBD_StdDevReq+0x26>
 80093d6:	2b40      	cmp	r3, #64	@ 0x40
 80093d8:	d857      	bhi.n	800948a <USBD_StdDevReq+0xce>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00f      	beq.n	80093fe <USBD_StdDevReq+0x42>
 80093de:	2b20      	cmp	r3, #32
 80093e0:	d153      	bne.n	800948a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	32ae      	adds	r2, #174	@ 0xae
 80093ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	4798      	blx	r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	73fb      	strb	r3, [r7, #15]
      break;
 80093fc:	e04a      	b.n	8009494 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	785b      	ldrb	r3, [r3, #1]
 8009402:	2b09      	cmp	r3, #9
 8009404:	d83b      	bhi.n	800947e <USBD_StdDevReq+0xc2>
 8009406:	a201      	add	r2, pc, #4	@ (adr r2, 800940c <USBD_StdDevReq+0x50>)
 8009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940c:	08009461 	.word	0x08009461
 8009410:	08009475 	.word	0x08009475
 8009414:	0800947f 	.word	0x0800947f
 8009418:	0800946b 	.word	0x0800946b
 800941c:	0800947f 	.word	0x0800947f
 8009420:	0800943f 	.word	0x0800943f
 8009424:	08009435 	.word	0x08009435
 8009428:	0800947f 	.word	0x0800947f
 800942c:	08009457 	.word	0x08009457
 8009430:	08009449 	.word	0x08009449
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa3c 	bl	80098b4 <USBD_GetDescriptor>
          break;
 800943c:	e024      	b.n	8009488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fbcb 	bl	8009bdc <USBD_SetAddress>
          break;
 8009446:	e01f      	b.n	8009488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fc0a 	bl	8009c64 <USBD_SetConfig>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]
          break;
 8009454:	e018      	b.n	8009488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fcad 	bl	8009db8 <USBD_GetConfig>
          break;
 800945e:	e013      	b.n	8009488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fcde 	bl	8009e24 <USBD_GetStatus>
          break;
 8009468:	e00e      	b.n	8009488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fd0d 	bl	8009e8c <USBD_SetFeature>
          break;
 8009472:	e009      	b.n	8009488 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fd31 	bl	8009ede <USBD_ClrFeature>
          break;
 800947c:	e004      	b.n	8009488 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fd88 	bl	8009f96 <USBD_CtlError>
          break;
 8009486:	bf00      	nop
      }
      break;
 8009488:	e004      	b.n	8009494 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fd82 	bl	8009f96 <USBD_CtlError>
      break;
 8009492:	bf00      	nop
  }

  return ret;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop

080094a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094b6:	2b40      	cmp	r3, #64	@ 0x40
 80094b8:	d005      	beq.n	80094c6 <USBD_StdItfReq+0x26>
 80094ba:	2b40      	cmp	r3, #64	@ 0x40
 80094bc:	d852      	bhi.n	8009564 <USBD_StdItfReq+0xc4>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <USBD_StdItfReq+0x26>
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d14e      	bne.n	8009564 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	3b01      	subs	r3, #1
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d840      	bhi.n	8009556 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	889b      	ldrh	r3, [r3, #4]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d836      	bhi.n	800954c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	889b      	ldrh	r3, [r3, #4]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff fedb 	bl	80092a2 <USBD_CoreFindIF>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	2bff      	cmp	r3, #255	@ 0xff
 80094f4:	d01d      	beq.n	8009532 <USBD_StdItfReq+0x92>
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d11a      	bne.n	8009532 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094fc:	7bba      	ldrb	r2, [r7, #14]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	32ae      	adds	r2, #174	@ 0xae
 8009502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00f      	beq.n	800952c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800950c:	7bba      	ldrb	r2, [r7, #14]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009514:	7bba      	ldrb	r2, [r7, #14]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	32ae      	adds	r2, #174	@ 0xae
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4798      	blx	r3
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800952a:	e004      	b.n	8009536 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009530:	e001      	b.n	8009536 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009532:	2303      	movs	r3, #3
 8009534:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	88db      	ldrh	r3, [r3, #6]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d110      	bne.n	8009560 <USBD_StdItfReq+0xc0>
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10d      	bne.n	8009560 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fdfd 	bl	800a144 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800954a:	e009      	b.n	8009560 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fd21 	bl	8009f96 <USBD_CtlError>
          break;
 8009554:	e004      	b.n	8009560 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fd1c 	bl	8009f96 <USBD_CtlError>
          break;
 800955e:	e000      	b.n	8009562 <USBD_StdItfReq+0xc2>
          break;
 8009560:	bf00      	nop
      }
      break;
 8009562:	e004      	b.n	800956e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fd15 	bl	8009f96 <USBD_CtlError>
      break;
 800956c:	bf00      	nop
  }

  return ret;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	889b      	ldrh	r3, [r3, #4]
 800958a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009594:	2b40      	cmp	r3, #64	@ 0x40
 8009596:	d007      	beq.n	80095a8 <USBD_StdEPReq+0x30>
 8009598:	2b40      	cmp	r3, #64	@ 0x40
 800959a:	f200 817f 	bhi.w	800989c <USBD_StdEPReq+0x324>
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d02a      	beq.n	80095f8 <USBD_StdEPReq+0x80>
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	f040 817a 	bne.w	800989c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff fe85 	bl	80092bc <USBD_CoreFindEP>
 80095b2:	4603      	mov	r3, r0
 80095b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095b6:	7b7b      	ldrb	r3, [r7, #13]
 80095b8:	2bff      	cmp	r3, #255	@ 0xff
 80095ba:	f000 8174 	beq.w	80098a6 <USBD_StdEPReq+0x32e>
 80095be:	7b7b      	ldrb	r3, [r7, #13]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f040 8170 	bne.w	80098a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80095c6:	7b7a      	ldrb	r2, [r7, #13]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80095ce:	7b7a      	ldrb	r2, [r7, #13]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	32ae      	adds	r2, #174	@ 0xae
 80095d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 8163 	beq.w	80098a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095e0:	7b7a      	ldrb	r2, [r7, #13]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	32ae      	adds	r2, #174	@ 0xae
 80095e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
 80095f2:	4603      	mov	r3, r0
 80095f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095f6:	e156      	b.n	80098a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d008      	beq.n	8009612 <USBD_StdEPReq+0x9a>
 8009600:	2b03      	cmp	r3, #3
 8009602:	f300 8145 	bgt.w	8009890 <USBD_StdEPReq+0x318>
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 809b 	beq.w	8009742 <USBD_StdEPReq+0x1ca>
 800960c:	2b01      	cmp	r3, #1
 800960e:	d03c      	beq.n	800968a <USBD_StdEPReq+0x112>
 8009610:	e13e      	b.n	8009890 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b02      	cmp	r3, #2
 800961c:	d002      	beq.n	8009624 <USBD_StdEPReq+0xac>
 800961e:	2b03      	cmp	r3, #3
 8009620:	d016      	beq.n	8009650 <USBD_StdEPReq+0xd8>
 8009622:	e02c      	b.n	800967e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00d      	beq.n	8009646 <USBD_StdEPReq+0xce>
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	2b80      	cmp	r3, #128	@ 0x80
 800962e:	d00a      	beq.n	8009646 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 f9d9 	bl	800a9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800963a:	2180      	movs	r1, #128	@ 0x80
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f9d5 	bl	800a9ec <USBD_LL_StallEP>
 8009642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009644:	e020      	b.n	8009688 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fca4 	bl	8009f96 <USBD_CtlError>
              break;
 800964e:	e01b      	b.n	8009688 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	885b      	ldrh	r3, [r3, #2]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10e      	bne.n	8009676 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <USBD_StdEPReq+0xfe>
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b80      	cmp	r3, #128	@ 0x80
 8009662:	d008      	beq.n	8009676 <USBD_StdEPReq+0xfe>
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	88db      	ldrh	r3, [r3, #6]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d104      	bne.n	8009676 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 f9bb 	bl	800a9ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fd64 	bl	800a144 <USBD_CtlSendStatus>

              break;
 800967c:	e004      	b.n	8009688 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fc88 	bl	8009f96 <USBD_CtlError>
              break;
 8009686:	bf00      	nop
          }
          break;
 8009688:	e107      	b.n	800989a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d002      	beq.n	800969c <USBD_StdEPReq+0x124>
 8009696:	2b03      	cmp	r3, #3
 8009698:	d016      	beq.n	80096c8 <USBD_StdEPReq+0x150>
 800969a:	e04b      	b.n	8009734 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00d      	beq.n	80096be <USBD_StdEPReq+0x146>
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	2b80      	cmp	r3, #128	@ 0x80
 80096a6:	d00a      	beq.n	80096be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 f99d 	bl	800a9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096b2:	2180      	movs	r1, #128	@ 0x80
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 f999 	bl	800a9ec <USBD_LL_StallEP>
 80096ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096bc:	e040      	b.n	8009740 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fc68 	bl	8009f96 <USBD_CtlError>
              break;
 80096c6:	e03b      	b.n	8009740 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	885b      	ldrh	r3, [r3, #2]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d136      	bne.n	800973e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d004      	beq.n	80096e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 f9a3 	bl	800aa2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fd2d 	bl	800a144 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff fde4 	bl	80092bc <USBD_CoreFindEP>
 80096f4:	4603      	mov	r3, r0
 80096f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096f8:	7b7b      	ldrb	r3, [r7, #13]
 80096fa:	2bff      	cmp	r3, #255	@ 0xff
 80096fc:	d01f      	beq.n	800973e <USBD_StdEPReq+0x1c6>
 80096fe:	7b7b      	ldrb	r3, [r7, #13]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d11c      	bne.n	800973e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009704:	7b7a      	ldrb	r2, [r7, #13]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800970c:	7b7a      	ldrb	r2, [r7, #13]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	32ae      	adds	r2, #174	@ 0xae
 8009712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d010      	beq.n	800973e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800971c:	7b7a      	ldrb	r2, [r7, #13]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	32ae      	adds	r2, #174	@ 0xae
 8009722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009732:	e004      	b.n	800973e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fc2d 	bl	8009f96 <USBD_CtlError>
              break;
 800973c:	e000      	b.n	8009740 <USBD_StdEPReq+0x1c8>
              break;
 800973e:	bf00      	nop
          }
          break;
 8009740:	e0ab      	b.n	800989a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b02      	cmp	r3, #2
 800974c:	d002      	beq.n	8009754 <USBD_StdEPReq+0x1dc>
 800974e:	2b03      	cmp	r3, #3
 8009750:	d032      	beq.n	80097b8 <USBD_StdEPReq+0x240>
 8009752:	e097      	b.n	8009884 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d007      	beq.n	800976a <USBD_StdEPReq+0x1f2>
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b80      	cmp	r3, #128	@ 0x80
 800975e:	d004      	beq.n	800976a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fc17 	bl	8009f96 <USBD_CtlError>
                break;
 8009768:	e091      	b.n	800988e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800976a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800976e:	2b00      	cmp	r3, #0
 8009770:	da0b      	bge.n	800978a <USBD_StdEPReq+0x212>
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	3310      	adds	r3, #16
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	4413      	add	r3, r2
 8009786:	3304      	adds	r3, #4
 8009788:	e00b      	b.n	80097a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009790:	4613      	mov	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	4413      	add	r3, r2
 80097a0:	3304      	adds	r3, #4
 80097a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2200      	movs	r2, #0
 80097a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2202      	movs	r2, #2
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fc6d 	bl	800a090 <USBD_CtlSendData>
              break;
 80097b6:	e06a      	b.n	800988e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	da11      	bge.n	80097e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
 80097c2:	f003 020f 	and.w	r2, r3, #15
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	3324      	adds	r3, #36	@ 0x24
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d117      	bne.n	800980a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fbda 	bl	8009f96 <USBD_CtlError>
                  break;
 80097e2:	e054      	b.n	800988e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	f003 020f 	and.w	r2, r3, #15
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	440b      	add	r3, r1
 80097f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fbc7 	bl	8009f96 <USBD_CtlError>
                  break;
 8009808:	e041      	b.n	800988e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800980a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980e:	2b00      	cmp	r3, #0
 8009810:	da0b      	bge.n	800982a <USBD_StdEPReq+0x2b2>
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	3310      	adds	r3, #16
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4413      	add	r3, r2
 8009826:	3304      	adds	r3, #4
 8009828:	e00b      	b.n	8009842 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	4413      	add	r3, r2
 8009840:	3304      	adds	r3, #4
 8009842:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009844:	7bbb      	ldrb	r3, [r7, #14]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <USBD_StdEPReq+0x2d8>
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	2b80      	cmp	r3, #128	@ 0x80
 800984e:	d103      	bne.n	8009858 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	e00e      	b.n	8009876 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f001 f903 	bl	800aa68 <USBD_LL_IsStallEP>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2201      	movs	r2, #1
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	e002      	b.n	8009876 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	2202      	movs	r2, #2
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fc07 	bl	800a090 <USBD_CtlSendData>
              break;
 8009882:	e004      	b.n	800988e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb85 	bl	8009f96 <USBD_CtlError>
              break;
 800988c:	bf00      	nop
          }
          break;
 800988e:	e004      	b.n	800989a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fb7f 	bl	8009f96 <USBD_CtlError>
          break;
 8009898:	bf00      	nop
      }
      break;
 800989a:	e005      	b.n	80098a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fb79 	bl	8009f96 <USBD_CtlError>
      break;
 80098a4:	e000      	b.n	80098a8 <USBD_StdEPReq+0x330>
      break;
 80098a6:	bf00      	nop
  }

  return ret;
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	885b      	ldrh	r3, [r3, #2]
 80098ce:	0a1b      	lsrs	r3, r3, #8
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	2b0e      	cmp	r3, #14
 80098d6:	f200 8152 	bhi.w	8009b7e <USBD_GetDescriptor+0x2ca>
 80098da:	a201      	add	r2, pc, #4	@ (adr r2, 80098e0 <USBD_GetDescriptor+0x2c>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	08009951 	.word	0x08009951
 80098e4:	08009969 	.word	0x08009969
 80098e8:	080099a9 	.word	0x080099a9
 80098ec:	08009b7f 	.word	0x08009b7f
 80098f0:	08009b7f 	.word	0x08009b7f
 80098f4:	08009b1f 	.word	0x08009b1f
 80098f8:	08009b4b 	.word	0x08009b4b
 80098fc:	08009b7f 	.word	0x08009b7f
 8009900:	08009b7f 	.word	0x08009b7f
 8009904:	08009b7f 	.word	0x08009b7f
 8009908:	08009b7f 	.word	0x08009b7f
 800990c:	08009b7f 	.word	0x08009b7f
 8009910:	08009b7f 	.word	0x08009b7f
 8009914:	08009b7f 	.word	0x08009b7f
 8009918:	0800991d 	.word	0x0800991d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00b      	beq.n	8009940 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	7c12      	ldrb	r2, [r2, #16]
 8009934:	f107 0108 	add.w	r1, r7, #8
 8009938:	4610      	mov	r0, r2
 800993a:	4798      	blx	r3
 800993c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800993e:	e126      	b.n	8009b8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fb27 	bl	8009f96 <USBD_CtlError>
        err++;
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	3301      	adds	r3, #1
 800994c:	72fb      	strb	r3, [r7, #11]
      break;
 800994e:	e11e      	b.n	8009b8e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	7c12      	ldrb	r2, [r2, #16]
 800995c:	f107 0108 	add.w	r1, r7, #8
 8009960:	4610      	mov	r0, r2
 8009962:	4798      	blx	r3
 8009964:	60f8      	str	r0, [r7, #12]
      break;
 8009966:	e112      	b.n	8009b8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7c1b      	ldrb	r3, [r3, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10d      	bne.n	800998c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009978:	f107 0208 	add.w	r2, r7, #8
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3301      	adds	r3, #1
 8009986:	2202      	movs	r2, #2
 8009988:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800998a:	e100      	b.n	8009b8e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009994:	f107 0208 	add.w	r2, r7, #8
 8009998:	4610      	mov	r0, r2
 800999a:	4798      	blx	r3
 800999c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	2202      	movs	r2, #2
 80099a4:	701a      	strb	r2, [r3, #0]
      break;
 80099a6:	e0f2      	b.n	8009b8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	885b      	ldrh	r3, [r3, #2]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b05      	cmp	r3, #5
 80099b0:	f200 80ac 	bhi.w	8009b0c <USBD_GetDescriptor+0x258>
 80099b4:	a201      	add	r2, pc, #4	@ (adr r2, 80099bc <USBD_GetDescriptor+0x108>)
 80099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ba:	bf00      	nop
 80099bc:	080099d5 	.word	0x080099d5
 80099c0:	08009a09 	.word	0x08009a09
 80099c4:	08009a3d 	.word	0x08009a3d
 80099c8:	08009a71 	.word	0x08009a71
 80099cc:	08009aa5 	.word	0x08009aa5
 80099d0:	08009ad9 	.word	0x08009ad9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	f107 0108 	add.w	r1, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f6:	e091      	b.n	8009b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 facb 	bl	8009f96 <USBD_CtlError>
            err++;
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	3301      	adds	r3, #1
 8009a04:	72fb      	strb	r3, [r7, #11]
          break;
 8009a06:	e089      	b.n	8009b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2a:	e077      	b.n	8009b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fab1 	bl	8009f96 <USBD_CtlError>
            err++;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	3301      	adds	r3, #1
 8009a38:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3a:	e06f      	b.n	8009b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7c12      	ldrb	r2, [r2, #16]
 8009a54:	f107 0108 	add.w	r1, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5e:	e05d      	b.n	8009b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa97 	bl	8009f96 <USBD_CtlError>
            err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6e:	e055      	b.n	8009b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	7c12      	ldrb	r2, [r2, #16]
 8009a88:	f107 0108 	add.w	r1, r7, #8
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a92:	e043      	b.n	8009b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa7d 	bl	8009f96 <USBD_CtlError>
            err++;
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa2:	e03b      	b.n	8009b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac6:	e029      	b.n	8009b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa63 	bl	8009f96 <USBD_CtlError>
            err++;
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad6:	e021      	b.n	8009b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afa:	e00f      	b.n	8009b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa49 	bl	8009f96 <USBD_CtlError>
            err++;
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	3301      	adds	r3, #1
 8009b08:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0a:	e007      	b.n	8009b1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa41 	bl	8009f96 <USBD_CtlError>
          err++;
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	3301      	adds	r3, #1
 8009b18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b1a:	bf00      	nop
      }
      break;
 8009b1c:	e037      	b.n	8009b8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7c1b      	ldrb	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b2e:	f107 0208 	add.w	r2, r7, #8
 8009b32:	4610      	mov	r0, r2
 8009b34:	4798      	blx	r3
 8009b36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b38:	e029      	b.n	8009b8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fa2a 	bl	8009f96 <USBD_CtlError>
        err++;
 8009b42:	7afb      	ldrb	r3, [r7, #11]
 8009b44:	3301      	adds	r3, #1
 8009b46:	72fb      	strb	r3, [r7, #11]
      break;
 8009b48:	e021      	b.n	8009b8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	7c1b      	ldrb	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10d      	bne.n	8009b6e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5a:	f107 0208 	add.w	r2, r7, #8
 8009b5e:	4610      	mov	r0, r2
 8009b60:	4798      	blx	r3
 8009b62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	2207      	movs	r2, #7
 8009b6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b6c:	e00f      	b.n	8009b8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fa10 	bl	8009f96 <USBD_CtlError>
        err++;
 8009b76:	7afb      	ldrb	r3, [r7, #11]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b7c:	e007      	b.n	8009b8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fa08 	bl	8009f96 <USBD_CtlError>
      err++;
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b8c:	bf00      	nop
  }

  if (err != 0U)
 8009b8e:	7afb      	ldrb	r3, [r7, #11]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d11e      	bne.n	8009bd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	88db      	ldrh	r3, [r3, #6]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d016      	beq.n	8009bca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009b9c:	893b      	ldrh	r3, [r7, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00e      	beq.n	8009bc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88da      	ldrh	r2, [r3, #6]
 8009ba6:	893b      	ldrh	r3, [r7, #8]
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	bf28      	it	cs
 8009bac:	4613      	movcs	r3, r2
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bb2:	893b      	ldrh	r3, [r7, #8]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68f9      	ldr	r1, [r7, #12]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fa69 	bl	800a090 <USBD_CtlSendData>
 8009bbe:	e009      	b.n	8009bd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f9e7 	bl	8009f96 <USBD_CtlError>
 8009bc8:	e004      	b.n	8009bd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 faba 	bl	800a144 <USBD_CtlSendStatus>
 8009bd0:	e000      	b.n	8009bd4 <USBD_GetDescriptor+0x320>
    return;
 8009bd2:	bf00      	nop
  }
}
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop

08009bdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	889b      	ldrh	r3, [r3, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d131      	bne.n	8009c52 <USBD_SetAddress+0x76>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	88db      	ldrh	r3, [r3, #6]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d12d      	bne.n	8009c52 <USBD_SetAddress+0x76>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	885b      	ldrh	r3, [r3, #2]
 8009bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bfc:	d829      	bhi.n	8009c52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	885b      	ldrh	r3, [r3, #2]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d104      	bne.n	8009c20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f9bc 	bl	8009f96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1e:	e01d      	b.n	8009c5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	7bfa      	ldrb	r2, [r7, #15]
 8009c24:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 ff47 	bl	800aac0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa86 	bl	800a144 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2202      	movs	r2, #2
 8009c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c46:	e009      	b.n	8009c5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c50:	e004      	b.n	8009c5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f99e 	bl	8009f96 <USBD_CtlError>
  }
}
 8009c5a:	bf00      	nop
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	885b      	ldrh	r3, [r3, #2]
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	4b4e      	ldr	r3, [pc, #312]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009c7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d905      	bls.n	8009c90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f985 	bl	8009f96 <USBD_CtlError>
    return USBD_FAIL;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e08c      	b.n	8009daa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d002      	beq.n	8009ca2 <USBD_SetConfig+0x3e>
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d029      	beq.n	8009cf4 <USBD_SetConfig+0x90>
 8009ca0:	e075      	b.n	8009d8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ca2:	4b44      	ldr	r3, [pc, #272]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d020      	beq.n	8009cec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009caa:	4b42      	ldr	r3, [pc, #264]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7fe ffb9 	bl	8008c32 <USBD_SetClassConfig>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d008      	beq.n	8009cdc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f962 	bl	8009f96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cda:	e065      	b.n	8009da8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fa31 	bl	800a144 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009cea:	e05d      	b.n	8009da8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fa29 	bl	800a144 <USBD_CtlSendStatus>
      break;
 8009cf2:	e059      	b.n	8009da8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d112      	bne.n	8009d22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009d04:	4b2b      	ldr	r3, [pc, #172]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d0e:	4b29      	ldr	r3, [pc, #164]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7fe ffa8 	bl	8008c6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa12 	bl	800a144 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d20:	e042      	b.n	8009da8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d22:	4b24      	ldr	r3, [pc, #144]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d02a      	beq.n	8009d86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7fe ff96 	bl	8008c6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d48:	4b1a      	ldr	r3, [pc, #104]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fe ff6f 	bl	8008c32 <USBD_SetClassConfig>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00f      	beq.n	8009d7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f918 	bl	8009f96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7fe ff7b 	bl	8008c6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d7c:	e014      	b.n	8009da8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9e0 	bl	800a144 <USBD_CtlSendStatus>
      break;
 8009d84:	e010      	b.n	8009da8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f9dc 	bl	800a144 <USBD_CtlSendStatus>
      break;
 8009d8c:	e00c      	b.n	8009da8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f900 	bl	8009f96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d96:	4b07      	ldr	r3, [pc, #28]	@ (8009db4 <USBD_SetConfig+0x150>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7fe ff64 	bl	8008c6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009da2:	2303      	movs	r3, #3
 8009da4:	73fb      	strb	r3, [r7, #15]
      break;
 8009da6:	bf00      	nop
  }

  return ret;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	24000240 	.word	0x24000240

08009db8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	88db      	ldrh	r3, [r3, #6]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d004      	beq.n	8009dd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f8e2 	bl	8009f96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dd2:	e023      	b.n	8009e1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	dc02      	bgt.n	8009de6 <USBD_GetConfig+0x2e>
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	dc03      	bgt.n	8009dec <USBD_GetConfig+0x34>
 8009de4:	e015      	b.n	8009e12 <USBD_GetConfig+0x5a>
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d00b      	beq.n	8009e02 <USBD_GetConfig+0x4a>
 8009dea:	e012      	b.n	8009e12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3308      	adds	r3, #8
 8009df6:	2201      	movs	r2, #1
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f948 	bl	800a090 <USBD_CtlSendData>
        break;
 8009e00:	e00c      	b.n	8009e1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3304      	adds	r3, #4
 8009e06:	2201      	movs	r2, #1
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f940 	bl	800a090 <USBD_CtlSendData>
        break;
 8009e10:	e004      	b.n	8009e1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f8be 	bl	8009f96 <USBD_CtlError>
        break;
 8009e1a:	bf00      	nop
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	3b01      	subs	r3, #1
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d81e      	bhi.n	8009e7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	88db      	ldrh	r3, [r3, #6]
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d004      	beq.n	8009e4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f8a5 	bl	8009f96 <USBD_CtlError>
        break;
 8009e4c:	e01a      	b.n	8009e84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	f043 0202 	orr.w	r2, r3, #2
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	330c      	adds	r3, #12
 8009e6e:	2202      	movs	r2, #2
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f90c 	bl	800a090 <USBD_CtlSendData>
      break;
 8009e78:	e004      	b.n	8009e84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f88a 	bl	8009f96 <USBD_CtlError>
      break;
 8009e82:	bf00      	nop
  }
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d107      	bne.n	8009eae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f94c 	bl	800a144 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009eac:	e013      	b.n	8009ed6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	885b      	ldrh	r3, [r3, #2]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d10b      	bne.n	8009ece <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	889b      	ldrh	r3, [r3, #4]
 8009eba:	0a1b      	lsrs	r3, r3, #8
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f93c 	bl	800a144 <USBD_CtlSendStatus>
}
 8009ecc:	e003      	b.n	8009ed6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f860 	bl	8009f96 <USBD_CtlError>
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d80b      	bhi.n	8009f0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	885b      	ldrh	r3, [r3, #2]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d10c      	bne.n	8009f18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f91c 	bl	800a144 <USBD_CtlSendStatus>
      }
      break;
 8009f0c:	e004      	b.n	8009f18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f840 	bl	8009f96 <USBD_CtlError>
      break;
 8009f16:	e000      	b.n	8009f1a <USBD_ClrFeature+0x3c>
      break;
 8009f18:	bf00      	nop
  }
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	781a      	ldrb	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fa16 	bl	800937e <SWAPBYTE>
 8009f52:	4603      	mov	r3, r0
 8009f54:	461a      	mov	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f7ff fa09 	bl	800937e <SWAPBYTE>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3301      	adds	r3, #1
 8009f78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f7ff f9fc 	bl	800937e <SWAPBYTE>
 8009f86:	4603      	mov	r3, r0
 8009f88:	461a      	mov	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	80da      	strh	r2, [r3, #6]
}
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fa0:	2180      	movs	r1, #128	@ 0x80
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fd22 	bl	800a9ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fd1e 	bl	800a9ec <USBD_LL_StallEP>
}
 8009fb0:	bf00      	nop
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d042      	beq.n	800a054 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009fd2:	6938      	ldr	r0, [r7, #16]
 8009fd4:	f000 f842 	bl	800a05c <USBD_GetLen>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	3301      	adds	r3, #1
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fe2:	d808      	bhi.n	8009ff6 <USBD_GetString+0x3e>
 8009fe4:	6938      	ldr	r0, [r7, #16]
 8009fe6:	f000 f839 	bl	800a05c <USBD_GetLen>
 8009fea:	4603      	mov	r3, r0
 8009fec:	3301      	adds	r3, #1
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	e001      	b.n	8009ffa <USBD_GetString+0x42>
 8009ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	4413      	add	r3, r2
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	7812      	ldrb	r2, [r2, #0]
 800a008:	701a      	strb	r2, [r3, #0]
  idx++;
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
 800a00c:	3301      	adds	r3, #1
 800a00e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a010:	7dfb      	ldrb	r3, [r7, #23]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	4413      	add	r3, r2
 800a016:	2203      	movs	r2, #3
 800a018:	701a      	strb	r2, [r3, #0]
  idx++;
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	3301      	adds	r3, #1
 800a01e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a020:	e013      	b.n	800a04a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	4413      	add	r3, r2
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	7812      	ldrb	r2, [r2, #0]
 800a02c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	3301      	adds	r3, #1
 800a032:	613b      	str	r3, [r7, #16]
    idx++;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	3301      	adds	r3, #1
 800a038:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	4413      	add	r3, r2
 800a040:	2200      	movs	r2, #0
 800a042:	701a      	strb	r2, [r3, #0]
    idx++;
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	3301      	adds	r3, #1
 800a048:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1e7      	bne.n	800a022 <USBD_GetString+0x6a>
 800a052:	e000      	b.n	800a056 <USBD_GetString+0x9e>
    return;
 800a054:	bf00      	nop
  }
}
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a06c:	e005      	b.n	800a07a <USBD_GetLen+0x1e>
  {
    len++;
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	3301      	adds	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	3301      	adds	r3, #1
 800a078:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1f5      	bne.n	800a06e <USBD_GetLen+0x12>
  }

  return len;
 800a082:	7bfb      	ldrb	r3, [r7, #15]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 fd21 	bl	800aafe <USBD_LL_Transmit>

  return USBD_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	60b9      	str	r1, [r7, #8]
 800a0d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 fd10 	bl	800aafe <USBD_LL_Transmit>

  return USBD_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2203      	movs	r2, #3
 800a0f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	2100      	movs	r1, #0
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 fd14 	bl	800ab40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	2100      	movs	r1, #0
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 fd03 	bl	800ab40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2204      	movs	r2, #4
 800a150:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a154:	2300      	movs	r3, #0
 800a156:	2200      	movs	r2, #0
 800a158:	2100      	movs	r1, #0
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fccf 	bl	800aafe <USBD_LL_Transmit>

  return USBD_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2205      	movs	r2, #5
 800a176:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a17a:	2300      	movs	r3, #0
 800a17c:	2200      	movs	r2, #0
 800a17e:	2100      	movs	r1, #0
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fcdd 	bl	800ab40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a194:	2200      	movs	r2, #0
 800a196:	4913      	ldr	r1, [pc, #76]	@ (800a1e4 <MX_USB_DEVICE_Init+0x54>)
 800a198:	4813      	ldr	r0, [pc, #76]	@ (800a1e8 <MX_USB_DEVICE_Init+0x58>)
 800a19a:	f7fe fccd 	bl	8008b38 <USBD_Init>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1a4:	f7f6 fcd2 	bl	8000b4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1a8:	4910      	ldr	r1, [pc, #64]	@ (800a1ec <MX_USB_DEVICE_Init+0x5c>)
 800a1aa:	480f      	ldr	r0, [pc, #60]	@ (800a1e8 <MX_USB_DEVICE_Init+0x58>)
 800a1ac:	f7fe fcf4 	bl	8008b98 <USBD_RegisterClass>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1b6:	f7f6 fcc9 	bl	8000b4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1ba:	490d      	ldr	r1, [pc, #52]	@ (800a1f0 <MX_USB_DEVICE_Init+0x60>)
 800a1bc:	480a      	ldr	r0, [pc, #40]	@ (800a1e8 <MX_USB_DEVICE_Init+0x58>)
 800a1be:	f7fe fbeb 	bl	8008998 <USBD_CDC_RegisterInterface>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1c8:	f7f6 fcc0 	bl	8000b4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1cc:	4806      	ldr	r0, [pc, #24]	@ (800a1e8 <MX_USB_DEVICE_Init+0x58>)
 800a1ce:	f7fe fd19 	bl	8008c04 <USBD_Start>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1d8:	f7f6 fcb8 	bl	8000b4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a1dc:	f7f8 fe84 	bl	8002ee8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1e0:	bf00      	nop
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	240000cc 	.word	0x240000cc
 800a1e8:	24000244 	.word	0x24000244
 800a1ec:	24000038 	.word	0x24000038
 800a1f0:	240000b8 	.word	0x240000b8

0800a1f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	4905      	ldr	r1, [pc, #20]	@ (800a210 <CDC_Init_FS+0x1c>)
 800a1fc:	4805      	ldr	r0, [pc, #20]	@ (800a214 <CDC_Init_FS+0x20>)
 800a1fe:	f7fe fbe5 	bl	80089cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a202:	4905      	ldr	r1, [pc, #20]	@ (800a218 <CDC_Init_FS+0x24>)
 800a204:	4803      	ldr	r0, [pc, #12]	@ (800a214 <CDC_Init_FS+0x20>)
 800a206:	f7fe fc03 	bl	8008a10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a20a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	24000d20 	.word	0x24000d20
 800a214:	24000244 	.word	0x24000244
 800a218:	24000520 	.word	0x24000520

0800a21c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a220:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a222:	4618      	mov	r0, r3
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	6039      	str	r1, [r7, #0]
 800a236:	71fb      	strb	r3, [r7, #7]
 800a238:	4613      	mov	r3, r2
 800a23a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a23c:	79fb      	ldrb	r3, [r7, #7]
 800a23e:	2b23      	cmp	r3, #35	@ 0x23
 800a240:	d84a      	bhi.n	800a2d8 <CDC_Control_FS+0xac>
 800a242:	a201      	add	r2, pc, #4	@ (adr r2, 800a248 <CDC_Control_FS+0x1c>)
 800a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a248:	0800a2d9 	.word	0x0800a2d9
 800a24c:	0800a2d9 	.word	0x0800a2d9
 800a250:	0800a2d9 	.word	0x0800a2d9
 800a254:	0800a2d9 	.word	0x0800a2d9
 800a258:	0800a2d9 	.word	0x0800a2d9
 800a25c:	0800a2d9 	.word	0x0800a2d9
 800a260:	0800a2d9 	.word	0x0800a2d9
 800a264:	0800a2d9 	.word	0x0800a2d9
 800a268:	0800a2d9 	.word	0x0800a2d9
 800a26c:	0800a2d9 	.word	0x0800a2d9
 800a270:	0800a2d9 	.word	0x0800a2d9
 800a274:	0800a2d9 	.word	0x0800a2d9
 800a278:	0800a2d9 	.word	0x0800a2d9
 800a27c:	0800a2d9 	.word	0x0800a2d9
 800a280:	0800a2d9 	.word	0x0800a2d9
 800a284:	0800a2d9 	.word	0x0800a2d9
 800a288:	0800a2d9 	.word	0x0800a2d9
 800a28c:	0800a2d9 	.word	0x0800a2d9
 800a290:	0800a2d9 	.word	0x0800a2d9
 800a294:	0800a2d9 	.word	0x0800a2d9
 800a298:	0800a2d9 	.word	0x0800a2d9
 800a29c:	0800a2d9 	.word	0x0800a2d9
 800a2a0:	0800a2d9 	.word	0x0800a2d9
 800a2a4:	0800a2d9 	.word	0x0800a2d9
 800a2a8:	0800a2d9 	.word	0x0800a2d9
 800a2ac:	0800a2d9 	.word	0x0800a2d9
 800a2b0:	0800a2d9 	.word	0x0800a2d9
 800a2b4:	0800a2d9 	.word	0x0800a2d9
 800a2b8:	0800a2d9 	.word	0x0800a2d9
 800a2bc:	0800a2d9 	.word	0x0800a2d9
 800a2c0:	0800a2d9 	.word	0x0800a2d9
 800a2c4:	0800a2d9 	.word	0x0800a2d9
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2d9 	.word	0x0800a2d9
 800a2d0:	0800a2d9 	.word	0x0800a2d9
 800a2d4:	0800a2d9 	.word	0x0800a2d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2d8:	bf00      	nop
  }

  return (USBD_OK);
 800a2da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	4805      	ldr	r0, [pc, #20]	@ (800a30c <CDC_Receive_FS+0x24>)
 800a2f6:	f7fe fb8b 	bl	8008a10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2fa:	4804      	ldr	r0, [pc, #16]	@ (800a30c <CDC_Receive_FS+0x24>)
 800a2fc:	f7fe fbe6 	bl	8008acc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a300:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	24000244 	.word	0x24000244

0800a310 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a320:	4b0d      	ldr	r3, [pc, #52]	@ (800a358 <CDC_Transmit_FS+0x48>)
 800a322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a326:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a332:	2301      	movs	r3, #1
 800a334:	e00b      	b.n	800a34e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a336:	887b      	ldrh	r3, [r7, #2]
 800a338:	461a      	mov	r2, r3
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	4806      	ldr	r0, [pc, #24]	@ (800a358 <CDC_Transmit_FS+0x48>)
 800a33e:	f7fe fb45 	bl	80089cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a342:	4805      	ldr	r0, [pc, #20]	@ (800a358 <CDC_Transmit_FS+0x48>)
 800a344:	f7fe fb82 	bl	8008a4c <USBD_CDC_TransmitPacket>
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	24000244 	.word	0x24000244

0800a35c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a372:	4618      	mov	r0, r3
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
	...

0800a380 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	6039      	str	r1, [r7, #0]
 800a38a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2212      	movs	r2, #18
 800a390:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a392:	4b03      	ldr	r3, [pc, #12]	@ (800a3a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	240000ec 	.word	0x240000ec

0800a3a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	6039      	str	r1, [r7, #0]
 800a3ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2204      	movs	r2, #4
 800a3b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3b6:	4b03      	ldr	r3, [pc, #12]	@ (800a3c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	24000100 	.word	0x24000100

0800a3c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	6039      	str	r1, [r7, #0]
 800a3d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d105      	bne.n	800a3e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	4907      	ldr	r1, [pc, #28]	@ (800a3fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a3de:	4808      	ldr	r0, [pc, #32]	@ (800a400 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3e0:	f7ff fdea 	bl	8009fb8 <USBD_GetString>
 800a3e4:	e004      	b.n	800a3f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	4904      	ldr	r1, [pc, #16]	@ (800a3fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ea:	4805      	ldr	r0, [pc, #20]	@ (800a400 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3ec:	f7ff fde4 	bl	8009fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3f0:	4b02      	ldr	r3, [pc, #8]	@ (800a3fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	24001520 	.word	0x24001520
 800a400:	0800b58c 	.word	0x0800b58c

0800a404 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	6039      	str	r1, [r7, #0]
 800a40e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	4904      	ldr	r1, [pc, #16]	@ (800a424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a414:	4804      	ldr	r0, [pc, #16]	@ (800a428 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a416:	f7ff fdcf 	bl	8009fb8 <USBD_GetString>
  return USBD_StrDesc;
 800a41a:	4b02      	ldr	r3, [pc, #8]	@ (800a424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	24001520 	.word	0x24001520
 800a428:	0800b5a4 	.word	0x0800b5a4

0800a42c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	6039      	str	r1, [r7, #0]
 800a436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	221a      	movs	r2, #26
 800a43c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a43e:	f000 f843 	bl	800a4c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a442:	4b02      	ldr	r3, [pc, #8]	@ (800a44c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	24000104 	.word	0x24000104

0800a450 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	6039      	str	r1, [r7, #0]
 800a45a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d105      	bne.n	800a46e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	4907      	ldr	r1, [pc, #28]	@ (800a484 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a466:	4808      	ldr	r0, [pc, #32]	@ (800a488 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a468:	f7ff fda6 	bl	8009fb8 <USBD_GetString>
 800a46c:	e004      	b.n	800a478 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	4904      	ldr	r1, [pc, #16]	@ (800a484 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a472:	4805      	ldr	r0, [pc, #20]	@ (800a488 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a474:	f7ff fda0 	bl	8009fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a478:	4b02      	ldr	r3, [pc, #8]	@ (800a484 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	24001520 	.word	0x24001520
 800a488:	0800b5b8 	.word	0x0800b5b8

0800a48c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	6039      	str	r1, [r7, #0]
 800a496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d105      	bne.n	800a4aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	4907      	ldr	r1, [pc, #28]	@ (800a4c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4a2:	4808      	ldr	r0, [pc, #32]	@ (800a4c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4a4:	f7ff fd88 	bl	8009fb8 <USBD_GetString>
 800a4a8:	e004      	b.n	800a4b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	4904      	ldr	r1, [pc, #16]	@ (800a4c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4ae:	4805      	ldr	r0, [pc, #20]	@ (800a4c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4b0:	f7ff fd82 	bl	8009fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4b4:	4b02      	ldr	r3, [pc, #8]	@ (800a4c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	24001520 	.word	0x24001520
 800a4c4:	0800b5c4 	.word	0x0800b5c4

0800a4c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a50c <Get_SerialNum+0x44>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a510 <Get_SerialNum+0x48>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4da:	4b0e      	ldr	r3, [pc, #56]	@ (800a514 <Get_SerialNum+0x4c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d009      	beq.n	800a502 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4ee:	2208      	movs	r2, #8
 800a4f0:	4909      	ldr	r1, [pc, #36]	@ (800a518 <Get_SerialNum+0x50>)
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f814 	bl	800a520 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4f8:	2204      	movs	r2, #4
 800a4fa:	4908      	ldr	r1, [pc, #32]	@ (800a51c <Get_SerialNum+0x54>)
 800a4fc:	68b8      	ldr	r0, [r7, #8]
 800a4fe:	f000 f80f 	bl	800a520 <IntToUnicode>
  }
}
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	1ff1e800 	.word	0x1ff1e800
 800a510:	1ff1e804 	.word	0x1ff1e804
 800a514:	1ff1e808 	.word	0x1ff1e808
 800a518:	24000106 	.word	0x24000106
 800a51c:	24000116 	.word	0x24000116

0800a520 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a520:	b480      	push	{r7}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a532:	2300      	movs	r3, #0
 800a534:	75fb      	strb	r3, [r7, #23]
 800a536:	e027      	b.n	800a588 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	0f1b      	lsrs	r3, r3, #28
 800a53c:	2b09      	cmp	r3, #9
 800a53e:	d80b      	bhi.n	800a558 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	0f1b      	lsrs	r3, r3, #28
 800a544:	b2da      	uxtb	r2, r3
 800a546:	7dfb      	ldrb	r3, [r7, #23]
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	4619      	mov	r1, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	440b      	add	r3, r1
 800a550:	3230      	adds	r2, #48	@ 0x30
 800a552:	b2d2      	uxtb	r2, r2
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	e00a      	b.n	800a56e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	0f1b      	lsrs	r3, r3, #28
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	4619      	mov	r1, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	440b      	add	r3, r1
 800a568:	3237      	adds	r2, #55	@ 0x37
 800a56a:	b2d2      	uxtb	r2, r2
 800a56c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	011b      	lsls	r3, r3, #4
 800a572:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
 800a576:	005b      	lsls	r3, r3, #1
 800a578:	3301      	adds	r3, #1
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	3301      	adds	r3, #1
 800a586:	75fb      	strb	r3, [r7, #23]
 800a588:	7dfa      	ldrb	r2, [r7, #23]
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d3d3      	bcc.n	800a538 <IntToUnicode+0x18>
  }
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	371c      	adds	r7, #28
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
	...

0800a5a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b0ba      	sub	sp, #232	@ 0xe8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	605a      	str	r2, [r3, #4]
 800a5b2:	609a      	str	r2, [r3, #8]
 800a5b4:	60da      	str	r2, [r3, #12]
 800a5b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5b8:	f107 0310 	add.w	r3, r7, #16
 800a5bc:	22c0      	movs	r2, #192	@ 0xc0
 800a5be:	2100      	movs	r1, #0
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fb55 	bl	800ac70 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a34      	ldr	r2, [pc, #208]	@ (800a69c <HAL_PCD_MspInit+0xfc>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d161      	bne.n	800a694 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a5d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a5d4:	f04f 0300 	mov.w	r3, #0
 800a5d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a5dc:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a5e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5e4:	f107 0310 	add.w	r3, r7, #16
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7f9 fc73 	bl	8003ed4 <HAL_RCCEx_PeriphCLKConfig>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800a5f4:	f7f6 faaa 	bl	8000b4c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a5f8:	f7f8 fc76 	bl	8002ee8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5fc:	4b28      	ldr	r3, [pc, #160]	@ (800a6a0 <HAL_PCD_MspInit+0x100>)
 800a5fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a602:	4a27      	ldr	r2, [pc, #156]	@ (800a6a0 <HAL_PCD_MspInit+0x100>)
 800a604:	f043 0301 	orr.w	r3, r3, #1
 800a608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a60c:	4b24      	ldr	r3, [pc, #144]	@ (800a6a0 <HAL_PCD_MspInit+0x100>)
 800a60e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a61a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800a61e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a622:	2302      	movs	r3, #2
 800a624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62e:	2300      	movs	r3, #0
 800a630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a634:	230a      	movs	r3, #10
 800a636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a63a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a63e:	4619      	mov	r1, r3
 800a640:	4818      	ldr	r0, [pc, #96]	@ (800a6a4 <HAL_PCD_MspInit+0x104>)
 800a642:	f7f6 ff61 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a64a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a64e:	2300      	movs	r3, #0
 800a650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a654:	2300      	movs	r3, #0
 800a656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a65a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a65e:	4619      	mov	r1, r3
 800a660:	4810      	ldr	r0, [pc, #64]	@ (800a6a4 <HAL_PCD_MspInit+0x104>)
 800a662:	f7f6 ff51 	bl	8001508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a666:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a0 <HAL_PCD_MspInit+0x100>)
 800a668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a66c:	4a0c      	ldr	r2, [pc, #48]	@ (800a6a0 <HAL_PCD_MspInit+0x100>)
 800a66e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a672:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a676:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a0 <HAL_PCD_MspInit+0x100>)
 800a678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a67c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a680:	60bb      	str	r3, [r7, #8]
 800a682:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a684:	2200      	movs	r2, #0
 800a686:	2100      	movs	r1, #0
 800a688:	2065      	movs	r0, #101	@ 0x65
 800a68a:	f7f6 fe84 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a68e:	2065      	movs	r0, #101	@ 0x65
 800a690:	f7f6 fe9b 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a694:	bf00      	nop
 800a696:	37e8      	adds	r7, #232	@ 0xe8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	40080000 	.word	0x40080000
 800a6a0:	58024400 	.word	0x58024400
 800a6a4:	58020000 	.word	0x58020000

0800a6a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4610      	mov	r0, r2
 800a6c0:	f7fe faed 	bl	8008c9e <USBD_LL_SetupStage>
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6de:	78fa      	ldrb	r2, [r7, #3]
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	4413      	add	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	440b      	add	r3, r1
 800a6ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	78fb      	ldrb	r3, [r7, #3]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f7fe fb27 	bl	8008d48 <USBD_LL_DataOutStage>
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	460b      	mov	r3, r1
 800a70c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a714:	78fa      	ldrb	r2, [r7, #3]
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4613      	mov	r3, r2
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	440b      	add	r3, r1
 800a722:	3320      	adds	r3, #32
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	4619      	mov	r1, r3
 800a72a:	f7fe fbc0 	bl	8008eae <USBD_LL_DataInStage>
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b082      	sub	sp, #8
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe fcfa 	bl	800913e <USBD_LL_SOF>
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a75a:	2301      	movs	r3, #1
 800a75c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	79db      	ldrb	r3, [r3, #7]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d102      	bne.n	800a76c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a766:	2300      	movs	r3, #0
 800a768:	73fb      	strb	r3, [r7, #15]
 800a76a:	e008      	b.n	800a77e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	79db      	ldrb	r3, [r3, #7]
 800a770:	2b02      	cmp	r3, #2
 800a772:	d102      	bne.n	800a77a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a774:	2301      	movs	r3, #1
 800a776:	73fb      	strb	r3, [r7, #15]
 800a778:	e001      	b.n	800a77e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a77a:	f7f6 f9e7 	bl	8000b4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a784:	7bfa      	ldrb	r2, [r7, #15]
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fc94 	bl	80090b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fc3c 	bl	8009012 <USBD_LL_Reset>
}
 800a79a:	bf00      	nop
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fc8f 	bl	80090d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7ca:	f043 0301 	orr.w	r3, r3, #1
 800a7ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	7adb      	ldrb	r3, [r3, #11]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d005      	beq.n	800a7e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7d8:	4b04      	ldr	r3, [pc, #16]	@ (800a7ec <HAL_PCD_SuspendCallback+0x48>)
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	4a03      	ldr	r2, [pc, #12]	@ (800a7ec <HAL_PCD_SuspendCallback+0x48>)
 800a7de:	f043 0306 	orr.w	r3, r3, #6
 800a7e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	e000ed00 	.word	0xe000ed00

0800a7f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fc85 	bl	800910e <USBD_LL_Resume>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fcdd 	bl	80091e2 <USBD_LL_IsoOUTIncomplete>
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a842:	78fa      	ldrb	r2, [r7, #3]
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fc99 	bl	800917e <USBD_LL_IsoINIncomplete>
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fcef 	bl	8009246 <USBD_LL_DevConnected>
}
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fcec 	bl	800925c <USBD_LL_DevDisconnected>
}
 800a884:	bf00      	nop
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d13e      	bne.n	800a91a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a89c:	4a21      	ldr	r2, [pc, #132]	@ (800a924 <USBD_LL_Init+0x98>)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a1f      	ldr	r2, [pc, #124]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8ae:	4a1e      	ldr	r2, [pc, #120]	@ (800a928 <USBD_LL_Init+0x9c>)
 800a8b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800a8b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8b4:	2209      	movs	r2, #9
 800a8b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8be:	4b19      	ldr	r3, [pc, #100]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8c4:	4b17      	ldr	r3, [pc, #92]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a8ca:	4b16      	ldr	r3, [pc, #88]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8d0:	4b14      	ldr	r3, [pc, #80]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8d6:	4b13      	ldr	r3, [pc, #76]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800a8dc:	4b11      	ldr	r3, [pc, #68]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a8e2:	4b10      	ldr	r3, [pc, #64]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8ee:	480d      	ldr	r0, [pc, #52]	@ (800a924 <USBD_LL_Init+0x98>)
 800a8f0:	f7f7 f802 	bl	80018f8 <HAL_PCD_Init>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a8fa:	f7f6 f927 	bl	8000b4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8fe:	2180      	movs	r1, #128	@ 0x80
 800a900:	4808      	ldr	r0, [pc, #32]	@ (800a924 <USBD_LL_Init+0x98>)
 800a902:	f7f8 fa56 	bl	8002db2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a906:	2240      	movs	r2, #64	@ 0x40
 800a908:	2100      	movs	r1, #0
 800a90a:	4806      	ldr	r0, [pc, #24]	@ (800a924 <USBD_LL_Init+0x98>)
 800a90c:	f7f8 fa0a 	bl	8002d24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a910:	2280      	movs	r2, #128	@ 0x80
 800a912:	2101      	movs	r1, #1
 800a914:	4803      	ldr	r0, [pc, #12]	@ (800a924 <USBD_LL_Init+0x98>)
 800a916:	f7f8 fa05 	bl	8002d24 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	24001720 	.word	0x24001720
 800a928:	40080000 	.word	0x40080000

0800a92c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a942:	4618      	mov	r0, r3
 800a944:	f7f7 f8e4 	bl	8001b10 <HAL_PCD_Start>
 800a948:	4603      	mov	r3, r0
 800a94a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 f942 	bl	800abd8 <USBD_Get_USB_Status>
 800a954:	4603      	mov	r3, r0
 800a956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a958:	7bbb      	ldrb	r3, [r7, #14]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	4608      	mov	r0, r1
 800a96c:	4611      	mov	r1, r2
 800a96e:	461a      	mov	r2, r3
 800a970:	4603      	mov	r3, r0
 800a972:	70fb      	strb	r3, [r7, #3]
 800a974:	460b      	mov	r3, r1
 800a976:	70bb      	strb	r3, [r7, #2]
 800a978:	4613      	mov	r3, r2
 800a97a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a98a:	78bb      	ldrb	r3, [r7, #2]
 800a98c:	883a      	ldrh	r2, [r7, #0]
 800a98e:	78f9      	ldrb	r1, [r7, #3]
 800a990:	f7f7 fde5 	bl	800255e <HAL_PCD_EP_Open>
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f91c 	bl	800abd8 <USBD_Get_USB_Status>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9c8:	78fa      	ldrb	r2, [r7, #3]
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7f7 fe2e 	bl	800262e <HAL_PCD_EP_Close>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 f8fd 	bl	800abd8 <USBD_Get_USB_Status>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa06:	78fa      	ldrb	r2, [r7, #3]
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7f7 fee6 	bl	80027dc <HAL_PCD_EP_SetStall>
 800aa10:	4603      	mov	r3, r0
 800aa12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f8de 	bl	800abd8 <USBD_Get_USB_Status>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa20:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	460b      	mov	r3, r1
 800aa34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa44:	78fa      	ldrb	r2, [r7, #3]
 800aa46:	4611      	mov	r1, r2
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7f7 ff2a 	bl	80028a2 <HAL_PCD_EP_ClrStall>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 f8bf 	bl	800abd8 <USBD_Get_USB_Status>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	da0b      	bge.n	800aa9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa84:	78fb      	ldrb	r3, [r7, #3]
 800aa86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	440b      	add	r3, r1
 800aa96:	3316      	adds	r3, #22
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	e00b      	b.n	800aab4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa9c:	78fb      	ldrb	r3, [r7, #3]
 800aa9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aaa2:	68f9      	ldr	r1, [r7, #12]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aab2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aada:	78fa      	ldrb	r2, [r7, #3]
 800aadc:	4611      	mov	r1, r2
 800aade:	4618      	mov	r0, r3
 800aae0:	f7f7 fd19 	bl	8002516 <HAL_PCD_SetAddress>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 f874 	bl	800abd8 <USBD_Get_USB_Status>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b086      	sub	sp, #24
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	60f8      	str	r0, [r7, #12]
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab1c:	7af9      	ldrb	r1, [r7, #11]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	f7f7 fe21 	bl	8002768 <HAL_PCD_EP_Transmit>
 800ab26:	4603      	mov	r3, r0
 800ab28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 f853 	bl	800abd8 <USBD_Get_USB_Status>
 800ab32:	4603      	mov	r3, r0
 800ab34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab36:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	603b      	str	r3, [r7, #0]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab5e:	7af9      	ldrb	r1, [r7, #11]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	f7f7 fdad 	bl	80026c2 <HAL_PCD_EP_Receive>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 f832 	bl	800abd8 <USBD_Get_USB_Status>
 800ab74:	4603      	mov	r3, r0
 800ab76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	4611      	mov	r1, r2
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7f7 fdcd 	bl	8002738 <HAL_PCD_EP_GetRxCount>
 800ab9e:	4603      	mov	r3, r0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abb0:	4b03      	ldr	r3, [pc, #12]	@ (800abc0 <USBD_static_malloc+0x18>)
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	24001c04 	.word	0x24001c04

0800abc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	4603      	mov	r3, r0
 800abe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abe6:	79fb      	ldrb	r3, [r7, #7]
 800abe8:	2b03      	cmp	r3, #3
 800abea:	d817      	bhi.n	800ac1c <USBD_Get_USB_Status+0x44>
 800abec:	a201      	add	r2, pc, #4	@ (adr r2, 800abf4 <USBD_Get_USB_Status+0x1c>)
 800abee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf2:	bf00      	nop
 800abf4:	0800ac05 	.word	0x0800ac05
 800abf8:	0800ac0b 	.word	0x0800ac0b
 800abfc:	0800ac11 	.word	0x0800ac11
 800ac00:	0800ac17 	.word	0x0800ac17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73fb      	strb	r3, [r7, #15]
    break;
 800ac08:	e00b      	b.n	800ac22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0e:	e008      	b.n	800ac22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
    break;
 800ac14:	e005      	b.n	800ac22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac16:	2303      	movs	r3, #3
 800ac18:	73fb      	strb	r3, [r7, #15]
    break;
 800ac1a:	e002      	b.n	800ac22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac20:	bf00      	nop
  }
  return usb_status;
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <siprintf>:
 800ac30:	b40e      	push	{r1, r2, r3}
 800ac32:	b500      	push	{lr}
 800ac34:	b09c      	sub	sp, #112	@ 0x70
 800ac36:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac38:	9002      	str	r0, [sp, #8]
 800ac3a:	9006      	str	r0, [sp, #24]
 800ac3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac40:	4809      	ldr	r0, [pc, #36]	@ (800ac68 <siprintf+0x38>)
 800ac42:	9107      	str	r1, [sp, #28]
 800ac44:	9104      	str	r1, [sp, #16]
 800ac46:	4909      	ldr	r1, [pc, #36]	@ (800ac6c <siprintf+0x3c>)
 800ac48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac4c:	9105      	str	r1, [sp, #20]
 800ac4e:	6800      	ldr	r0, [r0, #0]
 800ac50:	9301      	str	r3, [sp, #4]
 800ac52:	a902      	add	r1, sp, #8
 800ac54:	f000 f994 	bl	800af80 <_svfiprintf_r>
 800ac58:	9b02      	ldr	r3, [sp, #8]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	701a      	strb	r2, [r3, #0]
 800ac5e:	b01c      	add	sp, #112	@ 0x70
 800ac60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac64:	b003      	add	sp, #12
 800ac66:	4770      	bx	lr
 800ac68:	24000120 	.word	0x24000120
 800ac6c:	ffff0208 	.word	0xffff0208

0800ac70 <memset>:
 800ac70:	4402      	add	r2, r0
 800ac72:	4603      	mov	r3, r0
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <memset+0xa>
 800ac78:	4770      	bx	lr
 800ac7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7e:	e7f9      	b.n	800ac74 <memset+0x4>

0800ac80 <__errno>:
 800ac80:	4b01      	ldr	r3, [pc, #4]	@ (800ac88 <__errno+0x8>)
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	24000120 	.word	0x24000120

0800ac8c <__libc_init_array>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	4d0d      	ldr	r5, [pc, #52]	@ (800acc4 <__libc_init_array+0x38>)
 800ac90:	4c0d      	ldr	r4, [pc, #52]	@ (800acc8 <__libc_init_array+0x3c>)
 800ac92:	1b64      	subs	r4, r4, r5
 800ac94:	10a4      	asrs	r4, r4, #2
 800ac96:	2600      	movs	r6, #0
 800ac98:	42a6      	cmp	r6, r4
 800ac9a:	d109      	bne.n	800acb0 <__libc_init_array+0x24>
 800ac9c:	4d0b      	ldr	r5, [pc, #44]	@ (800accc <__libc_init_array+0x40>)
 800ac9e:	4c0c      	ldr	r4, [pc, #48]	@ (800acd0 <__libc_init_array+0x44>)
 800aca0:	f000 fc66 	bl	800b570 <_init>
 800aca4:	1b64      	subs	r4, r4, r5
 800aca6:	10a4      	asrs	r4, r4, #2
 800aca8:	2600      	movs	r6, #0
 800acaa:	42a6      	cmp	r6, r4
 800acac:	d105      	bne.n	800acba <__libc_init_array+0x2e>
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb4:	4798      	blx	r3
 800acb6:	3601      	adds	r6, #1
 800acb8:	e7ee      	b.n	800ac98 <__libc_init_array+0xc>
 800acba:	f855 3b04 	ldr.w	r3, [r5], #4
 800acbe:	4798      	blx	r3
 800acc0:	3601      	adds	r6, #1
 800acc2:	e7f2      	b.n	800acaa <__libc_init_array+0x1e>
 800acc4:	0800b644 	.word	0x0800b644
 800acc8:	0800b644 	.word	0x0800b644
 800accc:	0800b644 	.word	0x0800b644
 800acd0:	0800b648 	.word	0x0800b648

0800acd4 <__retarget_lock_acquire_recursive>:
 800acd4:	4770      	bx	lr

0800acd6 <__retarget_lock_release_recursive>:
 800acd6:	4770      	bx	lr

0800acd8 <_free_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4605      	mov	r5, r0
 800acdc:	2900      	cmp	r1, #0
 800acde:	d041      	beq.n	800ad64 <_free_r+0x8c>
 800ace0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace4:	1f0c      	subs	r4, r1, #4
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bfb8      	it	lt
 800acea:	18e4      	addlt	r4, r4, r3
 800acec:	f000 f8e0 	bl	800aeb0 <__malloc_lock>
 800acf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad68 <_free_r+0x90>)
 800acf2:	6813      	ldr	r3, [r2, #0]
 800acf4:	b933      	cbnz	r3, 800ad04 <_free_r+0x2c>
 800acf6:	6063      	str	r3, [r4, #4]
 800acf8:	6014      	str	r4, [r2, #0]
 800acfa:	4628      	mov	r0, r5
 800acfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad00:	f000 b8dc 	b.w	800aebc <__malloc_unlock>
 800ad04:	42a3      	cmp	r3, r4
 800ad06:	d908      	bls.n	800ad1a <_free_r+0x42>
 800ad08:	6820      	ldr	r0, [r4, #0]
 800ad0a:	1821      	adds	r1, r4, r0
 800ad0c:	428b      	cmp	r3, r1
 800ad0e:	bf01      	itttt	eq
 800ad10:	6819      	ldreq	r1, [r3, #0]
 800ad12:	685b      	ldreq	r3, [r3, #4]
 800ad14:	1809      	addeq	r1, r1, r0
 800ad16:	6021      	streq	r1, [r4, #0]
 800ad18:	e7ed      	b.n	800acf6 <_free_r+0x1e>
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	b10b      	cbz	r3, 800ad24 <_free_r+0x4c>
 800ad20:	42a3      	cmp	r3, r4
 800ad22:	d9fa      	bls.n	800ad1a <_free_r+0x42>
 800ad24:	6811      	ldr	r1, [r2, #0]
 800ad26:	1850      	adds	r0, r2, r1
 800ad28:	42a0      	cmp	r0, r4
 800ad2a:	d10b      	bne.n	800ad44 <_free_r+0x6c>
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	4401      	add	r1, r0
 800ad30:	1850      	adds	r0, r2, r1
 800ad32:	4283      	cmp	r3, r0
 800ad34:	6011      	str	r1, [r2, #0]
 800ad36:	d1e0      	bne.n	800acfa <_free_r+0x22>
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	6053      	str	r3, [r2, #4]
 800ad3e:	4408      	add	r0, r1
 800ad40:	6010      	str	r0, [r2, #0]
 800ad42:	e7da      	b.n	800acfa <_free_r+0x22>
 800ad44:	d902      	bls.n	800ad4c <_free_r+0x74>
 800ad46:	230c      	movs	r3, #12
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	e7d6      	b.n	800acfa <_free_r+0x22>
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	1821      	adds	r1, r4, r0
 800ad50:	428b      	cmp	r3, r1
 800ad52:	bf04      	itt	eq
 800ad54:	6819      	ldreq	r1, [r3, #0]
 800ad56:	685b      	ldreq	r3, [r3, #4]
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	bf04      	itt	eq
 800ad5c:	1809      	addeq	r1, r1, r0
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	6054      	str	r4, [r2, #4]
 800ad62:	e7ca      	b.n	800acfa <_free_r+0x22>
 800ad64:	bd38      	pop	{r3, r4, r5, pc}
 800ad66:	bf00      	nop
 800ad68:	24001f68 	.word	0x24001f68

0800ad6c <sbrk_aligned>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	4e0f      	ldr	r6, [pc, #60]	@ (800adac <sbrk_aligned+0x40>)
 800ad70:	460c      	mov	r4, r1
 800ad72:	6831      	ldr	r1, [r6, #0]
 800ad74:	4605      	mov	r5, r0
 800ad76:	b911      	cbnz	r1, 800ad7e <sbrk_aligned+0x12>
 800ad78:	f000 fba6 	bl	800b4c8 <_sbrk_r>
 800ad7c:	6030      	str	r0, [r6, #0]
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4628      	mov	r0, r5
 800ad82:	f000 fba1 	bl	800b4c8 <_sbrk_r>
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	d103      	bne.n	800ad92 <sbrk_aligned+0x26>
 800ad8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad8e:	4620      	mov	r0, r4
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	1cc4      	adds	r4, r0, #3
 800ad94:	f024 0403 	bic.w	r4, r4, #3
 800ad98:	42a0      	cmp	r0, r4
 800ad9a:	d0f8      	beq.n	800ad8e <sbrk_aligned+0x22>
 800ad9c:	1a21      	subs	r1, r4, r0
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f000 fb92 	bl	800b4c8 <_sbrk_r>
 800ada4:	3001      	adds	r0, #1
 800ada6:	d1f2      	bne.n	800ad8e <sbrk_aligned+0x22>
 800ada8:	e7ef      	b.n	800ad8a <sbrk_aligned+0x1e>
 800adaa:	bf00      	nop
 800adac:	24001f64 	.word	0x24001f64

0800adb0 <_malloc_r>:
 800adb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	1ccd      	adds	r5, r1, #3
 800adb6:	f025 0503 	bic.w	r5, r5, #3
 800adba:	3508      	adds	r5, #8
 800adbc:	2d0c      	cmp	r5, #12
 800adbe:	bf38      	it	cc
 800adc0:	250c      	movcc	r5, #12
 800adc2:	2d00      	cmp	r5, #0
 800adc4:	4606      	mov	r6, r0
 800adc6:	db01      	blt.n	800adcc <_malloc_r+0x1c>
 800adc8:	42a9      	cmp	r1, r5
 800adca:	d904      	bls.n	800add6 <_malloc_r+0x26>
 800adcc:	230c      	movs	r3, #12
 800adce:	6033      	str	r3, [r6, #0]
 800add0:	2000      	movs	r0, #0
 800add2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeac <_malloc_r+0xfc>
 800adda:	f000 f869 	bl	800aeb0 <__malloc_lock>
 800adde:	f8d8 3000 	ldr.w	r3, [r8]
 800ade2:	461c      	mov	r4, r3
 800ade4:	bb44      	cbnz	r4, 800ae38 <_malloc_r+0x88>
 800ade6:	4629      	mov	r1, r5
 800ade8:	4630      	mov	r0, r6
 800adea:	f7ff ffbf 	bl	800ad6c <sbrk_aligned>
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	4604      	mov	r4, r0
 800adf2:	d158      	bne.n	800aea6 <_malloc_r+0xf6>
 800adf4:	f8d8 4000 	ldr.w	r4, [r8]
 800adf8:	4627      	mov	r7, r4
 800adfa:	2f00      	cmp	r7, #0
 800adfc:	d143      	bne.n	800ae86 <_malloc_r+0xd6>
 800adfe:	2c00      	cmp	r4, #0
 800ae00:	d04b      	beq.n	800ae9a <_malloc_r+0xea>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	4639      	mov	r1, r7
 800ae06:	4630      	mov	r0, r6
 800ae08:	eb04 0903 	add.w	r9, r4, r3
 800ae0c:	f000 fb5c 	bl	800b4c8 <_sbrk_r>
 800ae10:	4581      	cmp	r9, r0
 800ae12:	d142      	bne.n	800ae9a <_malloc_r+0xea>
 800ae14:	6821      	ldr	r1, [r4, #0]
 800ae16:	1a6d      	subs	r5, r5, r1
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ffa6 	bl	800ad6c <sbrk_aligned>
 800ae20:	3001      	adds	r0, #1
 800ae22:	d03a      	beq.n	800ae9a <_malloc_r+0xea>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	442b      	add	r3, r5
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	bb62      	cbnz	r2, 800ae8c <_malloc_r+0xdc>
 800ae32:	f8c8 7000 	str.w	r7, [r8]
 800ae36:	e00f      	b.n	800ae58 <_malloc_r+0xa8>
 800ae38:	6822      	ldr	r2, [r4, #0]
 800ae3a:	1b52      	subs	r2, r2, r5
 800ae3c:	d420      	bmi.n	800ae80 <_malloc_r+0xd0>
 800ae3e:	2a0b      	cmp	r2, #11
 800ae40:	d917      	bls.n	800ae72 <_malloc_r+0xc2>
 800ae42:	1961      	adds	r1, r4, r5
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	6025      	str	r5, [r4, #0]
 800ae48:	bf18      	it	ne
 800ae4a:	6059      	strne	r1, [r3, #4]
 800ae4c:	6863      	ldr	r3, [r4, #4]
 800ae4e:	bf08      	it	eq
 800ae50:	f8c8 1000 	streq.w	r1, [r8]
 800ae54:	5162      	str	r2, [r4, r5]
 800ae56:	604b      	str	r3, [r1, #4]
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f000 f82f 	bl	800aebc <__malloc_unlock>
 800ae5e:	f104 000b 	add.w	r0, r4, #11
 800ae62:	1d23      	adds	r3, r4, #4
 800ae64:	f020 0007 	bic.w	r0, r0, #7
 800ae68:	1ac2      	subs	r2, r0, r3
 800ae6a:	bf1c      	itt	ne
 800ae6c:	1a1b      	subne	r3, r3, r0
 800ae6e:	50a3      	strne	r3, [r4, r2]
 800ae70:	e7af      	b.n	800add2 <_malloc_r+0x22>
 800ae72:	6862      	ldr	r2, [r4, #4]
 800ae74:	42a3      	cmp	r3, r4
 800ae76:	bf0c      	ite	eq
 800ae78:	f8c8 2000 	streq.w	r2, [r8]
 800ae7c:	605a      	strne	r2, [r3, #4]
 800ae7e:	e7eb      	b.n	800ae58 <_malloc_r+0xa8>
 800ae80:	4623      	mov	r3, r4
 800ae82:	6864      	ldr	r4, [r4, #4]
 800ae84:	e7ae      	b.n	800ade4 <_malloc_r+0x34>
 800ae86:	463c      	mov	r4, r7
 800ae88:	687f      	ldr	r7, [r7, #4]
 800ae8a:	e7b6      	b.n	800adfa <_malloc_r+0x4a>
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	42a3      	cmp	r3, r4
 800ae92:	d1fb      	bne.n	800ae8c <_malloc_r+0xdc>
 800ae94:	2300      	movs	r3, #0
 800ae96:	6053      	str	r3, [r2, #4]
 800ae98:	e7de      	b.n	800ae58 <_malloc_r+0xa8>
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	6033      	str	r3, [r6, #0]
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f000 f80c 	bl	800aebc <__malloc_unlock>
 800aea4:	e794      	b.n	800add0 <_malloc_r+0x20>
 800aea6:	6005      	str	r5, [r0, #0]
 800aea8:	e7d6      	b.n	800ae58 <_malloc_r+0xa8>
 800aeaa:	bf00      	nop
 800aeac:	24001f68 	.word	0x24001f68

0800aeb0 <__malloc_lock>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	@ (800aeb8 <__malloc_lock+0x8>)
 800aeb2:	f7ff bf0f 	b.w	800acd4 <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	24001f60 	.word	0x24001f60

0800aebc <__malloc_unlock>:
 800aebc:	4801      	ldr	r0, [pc, #4]	@ (800aec4 <__malloc_unlock+0x8>)
 800aebe:	f7ff bf0a 	b.w	800acd6 <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	24001f60 	.word	0x24001f60

0800aec8 <__ssputs_r>:
 800aec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aecc:	688e      	ldr	r6, [r1, #8]
 800aece:	461f      	mov	r7, r3
 800aed0:	42be      	cmp	r6, r7
 800aed2:	680b      	ldr	r3, [r1, #0]
 800aed4:	4682      	mov	sl, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4690      	mov	r8, r2
 800aeda:	d82d      	bhi.n	800af38 <__ssputs_r+0x70>
 800aedc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aee0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aee4:	d026      	beq.n	800af34 <__ssputs_r+0x6c>
 800aee6:	6965      	ldr	r5, [r4, #20]
 800aee8:	6909      	ldr	r1, [r1, #16]
 800aeea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeee:	eba3 0901 	sub.w	r9, r3, r1
 800aef2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aef6:	1c7b      	adds	r3, r7, #1
 800aef8:	444b      	add	r3, r9
 800aefa:	106d      	asrs	r5, r5, #1
 800aefc:	429d      	cmp	r5, r3
 800aefe:	bf38      	it	cc
 800af00:	461d      	movcc	r5, r3
 800af02:	0553      	lsls	r3, r2, #21
 800af04:	d527      	bpl.n	800af56 <__ssputs_r+0x8e>
 800af06:	4629      	mov	r1, r5
 800af08:	f7ff ff52 	bl	800adb0 <_malloc_r>
 800af0c:	4606      	mov	r6, r0
 800af0e:	b360      	cbz	r0, 800af6a <__ssputs_r+0xa2>
 800af10:	6921      	ldr	r1, [r4, #16]
 800af12:	464a      	mov	r2, r9
 800af14:	f000 fae8 	bl	800b4e8 <memcpy>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	6126      	str	r6, [r4, #16]
 800af26:	6165      	str	r5, [r4, #20]
 800af28:	444e      	add	r6, r9
 800af2a:	eba5 0509 	sub.w	r5, r5, r9
 800af2e:	6026      	str	r6, [r4, #0]
 800af30:	60a5      	str	r5, [r4, #8]
 800af32:	463e      	mov	r6, r7
 800af34:	42be      	cmp	r6, r7
 800af36:	d900      	bls.n	800af3a <__ssputs_r+0x72>
 800af38:	463e      	mov	r6, r7
 800af3a:	6820      	ldr	r0, [r4, #0]
 800af3c:	4632      	mov	r2, r6
 800af3e:	4641      	mov	r1, r8
 800af40:	f000 faa8 	bl	800b494 <memmove>
 800af44:	68a3      	ldr	r3, [r4, #8]
 800af46:	1b9b      	subs	r3, r3, r6
 800af48:	60a3      	str	r3, [r4, #8]
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	4433      	add	r3, r6
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	2000      	movs	r0, #0
 800af52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af56:	462a      	mov	r2, r5
 800af58:	f000 fad4 	bl	800b504 <_realloc_r>
 800af5c:	4606      	mov	r6, r0
 800af5e:	2800      	cmp	r0, #0
 800af60:	d1e0      	bne.n	800af24 <__ssputs_r+0x5c>
 800af62:	6921      	ldr	r1, [r4, #16]
 800af64:	4650      	mov	r0, sl
 800af66:	f7ff feb7 	bl	800acd8 <_free_r>
 800af6a:	230c      	movs	r3, #12
 800af6c:	f8ca 3000 	str.w	r3, [sl]
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	f04f 30ff 	mov.w	r0, #4294967295
 800af7c:	e7e9      	b.n	800af52 <__ssputs_r+0x8a>
	...

0800af80 <_svfiprintf_r>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	4698      	mov	r8, r3
 800af86:	898b      	ldrh	r3, [r1, #12]
 800af88:	061b      	lsls	r3, r3, #24
 800af8a:	b09d      	sub	sp, #116	@ 0x74
 800af8c:	4607      	mov	r7, r0
 800af8e:	460d      	mov	r5, r1
 800af90:	4614      	mov	r4, r2
 800af92:	d510      	bpl.n	800afb6 <_svfiprintf_r+0x36>
 800af94:	690b      	ldr	r3, [r1, #16]
 800af96:	b973      	cbnz	r3, 800afb6 <_svfiprintf_r+0x36>
 800af98:	2140      	movs	r1, #64	@ 0x40
 800af9a:	f7ff ff09 	bl	800adb0 <_malloc_r>
 800af9e:	6028      	str	r0, [r5, #0]
 800afa0:	6128      	str	r0, [r5, #16]
 800afa2:	b930      	cbnz	r0, 800afb2 <_svfiprintf_r+0x32>
 800afa4:	230c      	movs	r3, #12
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	b01d      	add	sp, #116	@ 0x74
 800afae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb2:	2340      	movs	r3, #64	@ 0x40
 800afb4:	616b      	str	r3, [r5, #20]
 800afb6:	2300      	movs	r3, #0
 800afb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800afba:	2320      	movs	r3, #32
 800afbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800afc4:	2330      	movs	r3, #48	@ 0x30
 800afc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b164 <_svfiprintf_r+0x1e4>
 800afca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afce:	f04f 0901 	mov.w	r9, #1
 800afd2:	4623      	mov	r3, r4
 800afd4:	469a      	mov	sl, r3
 800afd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afda:	b10a      	cbz	r2, 800afe0 <_svfiprintf_r+0x60>
 800afdc:	2a25      	cmp	r2, #37	@ 0x25
 800afde:	d1f9      	bne.n	800afd4 <_svfiprintf_r+0x54>
 800afe0:	ebba 0b04 	subs.w	fp, sl, r4
 800afe4:	d00b      	beq.n	800affe <_svfiprintf_r+0x7e>
 800afe6:	465b      	mov	r3, fp
 800afe8:	4622      	mov	r2, r4
 800afea:	4629      	mov	r1, r5
 800afec:	4638      	mov	r0, r7
 800afee:	f7ff ff6b 	bl	800aec8 <__ssputs_r>
 800aff2:	3001      	adds	r0, #1
 800aff4:	f000 80a7 	beq.w	800b146 <_svfiprintf_r+0x1c6>
 800aff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800affa:	445a      	add	r2, fp
 800affc:	9209      	str	r2, [sp, #36]	@ 0x24
 800affe:	f89a 3000 	ldrb.w	r3, [sl]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 809f 	beq.w	800b146 <_svfiprintf_r+0x1c6>
 800b008:	2300      	movs	r3, #0
 800b00a:	f04f 32ff 	mov.w	r2, #4294967295
 800b00e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b012:	f10a 0a01 	add.w	sl, sl, #1
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	9307      	str	r3, [sp, #28]
 800b01a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b01e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b020:	4654      	mov	r4, sl
 800b022:	2205      	movs	r2, #5
 800b024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b028:	484e      	ldr	r0, [pc, #312]	@ (800b164 <_svfiprintf_r+0x1e4>)
 800b02a:	f7f5 f959 	bl	80002e0 <memchr>
 800b02e:	9a04      	ldr	r2, [sp, #16]
 800b030:	b9d8      	cbnz	r0, 800b06a <_svfiprintf_r+0xea>
 800b032:	06d0      	lsls	r0, r2, #27
 800b034:	bf44      	itt	mi
 800b036:	2320      	movmi	r3, #32
 800b038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b03c:	0711      	lsls	r1, r2, #28
 800b03e:	bf44      	itt	mi
 800b040:	232b      	movmi	r3, #43	@ 0x2b
 800b042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b046:	f89a 3000 	ldrb.w	r3, [sl]
 800b04a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b04c:	d015      	beq.n	800b07a <_svfiprintf_r+0xfa>
 800b04e:	9a07      	ldr	r2, [sp, #28]
 800b050:	4654      	mov	r4, sl
 800b052:	2000      	movs	r0, #0
 800b054:	f04f 0c0a 	mov.w	ip, #10
 800b058:	4621      	mov	r1, r4
 800b05a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b05e:	3b30      	subs	r3, #48	@ 0x30
 800b060:	2b09      	cmp	r3, #9
 800b062:	d94b      	bls.n	800b0fc <_svfiprintf_r+0x17c>
 800b064:	b1b0      	cbz	r0, 800b094 <_svfiprintf_r+0x114>
 800b066:	9207      	str	r2, [sp, #28]
 800b068:	e014      	b.n	800b094 <_svfiprintf_r+0x114>
 800b06a:	eba0 0308 	sub.w	r3, r0, r8
 800b06e:	fa09 f303 	lsl.w	r3, r9, r3
 800b072:	4313      	orrs	r3, r2
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	46a2      	mov	sl, r4
 800b078:	e7d2      	b.n	800b020 <_svfiprintf_r+0xa0>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	1d19      	adds	r1, r3, #4
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	9103      	str	r1, [sp, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	bfbb      	ittet	lt
 800b086:	425b      	neglt	r3, r3
 800b088:	f042 0202 	orrlt.w	r2, r2, #2
 800b08c:	9307      	strge	r3, [sp, #28]
 800b08e:	9307      	strlt	r3, [sp, #28]
 800b090:	bfb8      	it	lt
 800b092:	9204      	strlt	r2, [sp, #16]
 800b094:	7823      	ldrb	r3, [r4, #0]
 800b096:	2b2e      	cmp	r3, #46	@ 0x2e
 800b098:	d10a      	bne.n	800b0b0 <_svfiprintf_r+0x130>
 800b09a:	7863      	ldrb	r3, [r4, #1]
 800b09c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b09e:	d132      	bne.n	800b106 <_svfiprintf_r+0x186>
 800b0a0:	9b03      	ldr	r3, [sp, #12]
 800b0a2:	1d1a      	adds	r2, r3, #4
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	9203      	str	r2, [sp, #12]
 800b0a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0ac:	3402      	adds	r4, #2
 800b0ae:	9305      	str	r3, [sp, #20]
 800b0b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b174 <_svfiprintf_r+0x1f4>
 800b0b4:	7821      	ldrb	r1, [r4, #0]
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	f7f5 f911 	bl	80002e0 <memchr>
 800b0be:	b138      	cbz	r0, 800b0d0 <_svfiprintf_r+0x150>
 800b0c0:	9b04      	ldr	r3, [sp, #16]
 800b0c2:	eba0 000a 	sub.w	r0, r0, sl
 800b0c6:	2240      	movs	r2, #64	@ 0x40
 800b0c8:	4082      	lsls	r2, r0
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	3401      	adds	r4, #1
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d4:	4824      	ldr	r0, [pc, #144]	@ (800b168 <_svfiprintf_r+0x1e8>)
 800b0d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0da:	2206      	movs	r2, #6
 800b0dc:	f7f5 f900 	bl	80002e0 <memchr>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d036      	beq.n	800b152 <_svfiprintf_r+0x1d2>
 800b0e4:	4b21      	ldr	r3, [pc, #132]	@ (800b16c <_svfiprintf_r+0x1ec>)
 800b0e6:	bb1b      	cbnz	r3, 800b130 <_svfiprintf_r+0x1b0>
 800b0e8:	9b03      	ldr	r3, [sp, #12]
 800b0ea:	3307      	adds	r3, #7
 800b0ec:	f023 0307 	bic.w	r3, r3, #7
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	9303      	str	r3, [sp, #12]
 800b0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f6:	4433      	add	r3, r6
 800b0f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0fa:	e76a      	b.n	800afd2 <_svfiprintf_r+0x52>
 800b0fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b100:	460c      	mov	r4, r1
 800b102:	2001      	movs	r0, #1
 800b104:	e7a8      	b.n	800b058 <_svfiprintf_r+0xd8>
 800b106:	2300      	movs	r3, #0
 800b108:	3401      	adds	r4, #1
 800b10a:	9305      	str	r3, [sp, #20]
 800b10c:	4619      	mov	r1, r3
 800b10e:	f04f 0c0a 	mov.w	ip, #10
 800b112:	4620      	mov	r0, r4
 800b114:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b118:	3a30      	subs	r2, #48	@ 0x30
 800b11a:	2a09      	cmp	r2, #9
 800b11c:	d903      	bls.n	800b126 <_svfiprintf_r+0x1a6>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d0c6      	beq.n	800b0b0 <_svfiprintf_r+0x130>
 800b122:	9105      	str	r1, [sp, #20]
 800b124:	e7c4      	b.n	800b0b0 <_svfiprintf_r+0x130>
 800b126:	fb0c 2101 	mla	r1, ip, r1, r2
 800b12a:	4604      	mov	r4, r0
 800b12c:	2301      	movs	r3, #1
 800b12e:	e7f0      	b.n	800b112 <_svfiprintf_r+0x192>
 800b130:	ab03      	add	r3, sp, #12
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	462a      	mov	r2, r5
 800b136:	4b0e      	ldr	r3, [pc, #56]	@ (800b170 <_svfiprintf_r+0x1f0>)
 800b138:	a904      	add	r1, sp, #16
 800b13a:	4638      	mov	r0, r7
 800b13c:	f3af 8000 	nop.w
 800b140:	1c42      	adds	r2, r0, #1
 800b142:	4606      	mov	r6, r0
 800b144:	d1d6      	bne.n	800b0f4 <_svfiprintf_r+0x174>
 800b146:	89ab      	ldrh	r3, [r5, #12]
 800b148:	065b      	lsls	r3, r3, #25
 800b14a:	f53f af2d 	bmi.w	800afa8 <_svfiprintf_r+0x28>
 800b14e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b150:	e72c      	b.n	800afac <_svfiprintf_r+0x2c>
 800b152:	ab03      	add	r3, sp, #12
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	462a      	mov	r2, r5
 800b158:	4b05      	ldr	r3, [pc, #20]	@ (800b170 <_svfiprintf_r+0x1f0>)
 800b15a:	a904      	add	r1, sp, #16
 800b15c:	4638      	mov	r0, r7
 800b15e:	f000 f879 	bl	800b254 <_printf_i>
 800b162:	e7ed      	b.n	800b140 <_svfiprintf_r+0x1c0>
 800b164:	0800b608 	.word	0x0800b608
 800b168:	0800b612 	.word	0x0800b612
 800b16c:	00000000 	.word	0x00000000
 800b170:	0800aec9 	.word	0x0800aec9
 800b174:	0800b60e 	.word	0x0800b60e

0800b178 <_printf_common>:
 800b178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	4616      	mov	r6, r2
 800b17e:	4698      	mov	r8, r3
 800b180:	688a      	ldr	r2, [r1, #8]
 800b182:	690b      	ldr	r3, [r1, #16]
 800b184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b188:	4293      	cmp	r3, r2
 800b18a:	bfb8      	it	lt
 800b18c:	4613      	movlt	r3, r2
 800b18e:	6033      	str	r3, [r6, #0]
 800b190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b194:	4607      	mov	r7, r0
 800b196:	460c      	mov	r4, r1
 800b198:	b10a      	cbz	r2, 800b19e <_printf_common+0x26>
 800b19a:	3301      	adds	r3, #1
 800b19c:	6033      	str	r3, [r6, #0]
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	0699      	lsls	r1, r3, #26
 800b1a2:	bf42      	ittt	mi
 800b1a4:	6833      	ldrmi	r3, [r6, #0]
 800b1a6:	3302      	addmi	r3, #2
 800b1a8:	6033      	strmi	r3, [r6, #0]
 800b1aa:	6825      	ldr	r5, [r4, #0]
 800b1ac:	f015 0506 	ands.w	r5, r5, #6
 800b1b0:	d106      	bne.n	800b1c0 <_printf_common+0x48>
 800b1b2:	f104 0a19 	add.w	sl, r4, #25
 800b1b6:	68e3      	ldr	r3, [r4, #12]
 800b1b8:	6832      	ldr	r2, [r6, #0]
 800b1ba:	1a9b      	subs	r3, r3, r2
 800b1bc:	42ab      	cmp	r3, r5
 800b1be:	dc26      	bgt.n	800b20e <_printf_common+0x96>
 800b1c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1c4:	6822      	ldr	r2, [r4, #0]
 800b1c6:	3b00      	subs	r3, #0
 800b1c8:	bf18      	it	ne
 800b1ca:	2301      	movne	r3, #1
 800b1cc:	0692      	lsls	r2, r2, #26
 800b1ce:	d42b      	bmi.n	800b228 <_printf_common+0xb0>
 800b1d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1d4:	4641      	mov	r1, r8
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	47c8      	blx	r9
 800b1da:	3001      	adds	r0, #1
 800b1dc:	d01e      	beq.n	800b21c <_printf_common+0xa4>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	6922      	ldr	r2, [r4, #16]
 800b1e2:	f003 0306 	and.w	r3, r3, #6
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	bf02      	ittt	eq
 800b1ea:	68e5      	ldreq	r5, [r4, #12]
 800b1ec:	6833      	ldreq	r3, [r6, #0]
 800b1ee:	1aed      	subeq	r5, r5, r3
 800b1f0:	68a3      	ldr	r3, [r4, #8]
 800b1f2:	bf0c      	ite	eq
 800b1f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1f8:	2500      	movne	r5, #0
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	bfc4      	itt	gt
 800b1fe:	1a9b      	subgt	r3, r3, r2
 800b200:	18ed      	addgt	r5, r5, r3
 800b202:	2600      	movs	r6, #0
 800b204:	341a      	adds	r4, #26
 800b206:	42b5      	cmp	r5, r6
 800b208:	d11a      	bne.n	800b240 <_printf_common+0xc8>
 800b20a:	2000      	movs	r0, #0
 800b20c:	e008      	b.n	800b220 <_printf_common+0xa8>
 800b20e:	2301      	movs	r3, #1
 800b210:	4652      	mov	r2, sl
 800b212:	4641      	mov	r1, r8
 800b214:	4638      	mov	r0, r7
 800b216:	47c8      	blx	r9
 800b218:	3001      	adds	r0, #1
 800b21a:	d103      	bne.n	800b224 <_printf_common+0xac>
 800b21c:	f04f 30ff 	mov.w	r0, #4294967295
 800b220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b224:	3501      	adds	r5, #1
 800b226:	e7c6      	b.n	800b1b6 <_printf_common+0x3e>
 800b228:	18e1      	adds	r1, r4, r3
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	2030      	movs	r0, #48	@ 0x30
 800b22e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b232:	4422      	add	r2, r4
 800b234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b23c:	3302      	adds	r3, #2
 800b23e:	e7c7      	b.n	800b1d0 <_printf_common+0x58>
 800b240:	2301      	movs	r3, #1
 800b242:	4622      	mov	r2, r4
 800b244:	4641      	mov	r1, r8
 800b246:	4638      	mov	r0, r7
 800b248:	47c8      	blx	r9
 800b24a:	3001      	adds	r0, #1
 800b24c:	d0e6      	beq.n	800b21c <_printf_common+0xa4>
 800b24e:	3601      	adds	r6, #1
 800b250:	e7d9      	b.n	800b206 <_printf_common+0x8e>
	...

0800b254 <_printf_i>:
 800b254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	7e0f      	ldrb	r7, [r1, #24]
 800b25a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b25c:	2f78      	cmp	r7, #120	@ 0x78
 800b25e:	4691      	mov	r9, r2
 800b260:	4680      	mov	r8, r0
 800b262:	460c      	mov	r4, r1
 800b264:	469a      	mov	sl, r3
 800b266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b26a:	d807      	bhi.n	800b27c <_printf_i+0x28>
 800b26c:	2f62      	cmp	r7, #98	@ 0x62
 800b26e:	d80a      	bhi.n	800b286 <_printf_i+0x32>
 800b270:	2f00      	cmp	r7, #0
 800b272:	f000 80d2 	beq.w	800b41a <_printf_i+0x1c6>
 800b276:	2f58      	cmp	r7, #88	@ 0x58
 800b278:	f000 80b9 	beq.w	800b3ee <_printf_i+0x19a>
 800b27c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b284:	e03a      	b.n	800b2fc <_printf_i+0xa8>
 800b286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b28a:	2b15      	cmp	r3, #21
 800b28c:	d8f6      	bhi.n	800b27c <_printf_i+0x28>
 800b28e:	a101      	add	r1, pc, #4	@ (adr r1, 800b294 <_printf_i+0x40>)
 800b290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b294:	0800b2ed 	.word	0x0800b2ed
 800b298:	0800b301 	.word	0x0800b301
 800b29c:	0800b27d 	.word	0x0800b27d
 800b2a0:	0800b27d 	.word	0x0800b27d
 800b2a4:	0800b27d 	.word	0x0800b27d
 800b2a8:	0800b27d 	.word	0x0800b27d
 800b2ac:	0800b301 	.word	0x0800b301
 800b2b0:	0800b27d 	.word	0x0800b27d
 800b2b4:	0800b27d 	.word	0x0800b27d
 800b2b8:	0800b27d 	.word	0x0800b27d
 800b2bc:	0800b27d 	.word	0x0800b27d
 800b2c0:	0800b401 	.word	0x0800b401
 800b2c4:	0800b32b 	.word	0x0800b32b
 800b2c8:	0800b3bb 	.word	0x0800b3bb
 800b2cc:	0800b27d 	.word	0x0800b27d
 800b2d0:	0800b27d 	.word	0x0800b27d
 800b2d4:	0800b423 	.word	0x0800b423
 800b2d8:	0800b27d 	.word	0x0800b27d
 800b2dc:	0800b32b 	.word	0x0800b32b
 800b2e0:	0800b27d 	.word	0x0800b27d
 800b2e4:	0800b27d 	.word	0x0800b27d
 800b2e8:	0800b3c3 	.word	0x0800b3c3
 800b2ec:	6833      	ldr	r3, [r6, #0]
 800b2ee:	1d1a      	adds	r2, r3, #4
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6032      	str	r2, [r6, #0]
 800b2f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e09d      	b.n	800b43c <_printf_i+0x1e8>
 800b300:	6833      	ldr	r3, [r6, #0]
 800b302:	6820      	ldr	r0, [r4, #0]
 800b304:	1d19      	adds	r1, r3, #4
 800b306:	6031      	str	r1, [r6, #0]
 800b308:	0606      	lsls	r6, r0, #24
 800b30a:	d501      	bpl.n	800b310 <_printf_i+0xbc>
 800b30c:	681d      	ldr	r5, [r3, #0]
 800b30e:	e003      	b.n	800b318 <_printf_i+0xc4>
 800b310:	0645      	lsls	r5, r0, #25
 800b312:	d5fb      	bpl.n	800b30c <_printf_i+0xb8>
 800b314:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b318:	2d00      	cmp	r5, #0
 800b31a:	da03      	bge.n	800b324 <_printf_i+0xd0>
 800b31c:	232d      	movs	r3, #45	@ 0x2d
 800b31e:	426d      	negs	r5, r5
 800b320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b324:	4859      	ldr	r0, [pc, #356]	@ (800b48c <_printf_i+0x238>)
 800b326:	230a      	movs	r3, #10
 800b328:	e011      	b.n	800b34e <_printf_i+0xfa>
 800b32a:	6821      	ldr	r1, [r4, #0]
 800b32c:	6833      	ldr	r3, [r6, #0]
 800b32e:	0608      	lsls	r0, r1, #24
 800b330:	f853 5b04 	ldr.w	r5, [r3], #4
 800b334:	d402      	bmi.n	800b33c <_printf_i+0xe8>
 800b336:	0649      	lsls	r1, r1, #25
 800b338:	bf48      	it	mi
 800b33a:	b2ad      	uxthmi	r5, r5
 800b33c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b33e:	4853      	ldr	r0, [pc, #332]	@ (800b48c <_printf_i+0x238>)
 800b340:	6033      	str	r3, [r6, #0]
 800b342:	bf14      	ite	ne
 800b344:	230a      	movne	r3, #10
 800b346:	2308      	moveq	r3, #8
 800b348:	2100      	movs	r1, #0
 800b34a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b34e:	6866      	ldr	r6, [r4, #4]
 800b350:	60a6      	str	r6, [r4, #8]
 800b352:	2e00      	cmp	r6, #0
 800b354:	bfa2      	ittt	ge
 800b356:	6821      	ldrge	r1, [r4, #0]
 800b358:	f021 0104 	bicge.w	r1, r1, #4
 800b35c:	6021      	strge	r1, [r4, #0]
 800b35e:	b90d      	cbnz	r5, 800b364 <_printf_i+0x110>
 800b360:	2e00      	cmp	r6, #0
 800b362:	d04b      	beq.n	800b3fc <_printf_i+0x1a8>
 800b364:	4616      	mov	r6, r2
 800b366:	fbb5 f1f3 	udiv	r1, r5, r3
 800b36a:	fb03 5711 	mls	r7, r3, r1, r5
 800b36e:	5dc7      	ldrb	r7, [r0, r7]
 800b370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b374:	462f      	mov	r7, r5
 800b376:	42bb      	cmp	r3, r7
 800b378:	460d      	mov	r5, r1
 800b37a:	d9f4      	bls.n	800b366 <_printf_i+0x112>
 800b37c:	2b08      	cmp	r3, #8
 800b37e:	d10b      	bne.n	800b398 <_printf_i+0x144>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	07df      	lsls	r7, r3, #31
 800b384:	d508      	bpl.n	800b398 <_printf_i+0x144>
 800b386:	6923      	ldr	r3, [r4, #16]
 800b388:	6861      	ldr	r1, [r4, #4]
 800b38a:	4299      	cmp	r1, r3
 800b38c:	bfde      	ittt	le
 800b38e:	2330      	movle	r3, #48	@ 0x30
 800b390:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b394:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b398:	1b92      	subs	r2, r2, r6
 800b39a:	6122      	str	r2, [r4, #16]
 800b39c:	f8cd a000 	str.w	sl, [sp]
 800b3a0:	464b      	mov	r3, r9
 800b3a2:	aa03      	add	r2, sp, #12
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	f7ff fee6 	bl	800b178 <_printf_common>
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	d14a      	bne.n	800b446 <_printf_i+0x1f2>
 800b3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b4:	b004      	add	sp, #16
 800b3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	f043 0320 	orr.w	r3, r3, #32
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	4833      	ldr	r0, [pc, #204]	@ (800b490 <_printf_i+0x23c>)
 800b3c4:	2778      	movs	r7, #120	@ 0x78
 800b3c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	6831      	ldr	r1, [r6, #0]
 800b3ce:	061f      	lsls	r7, r3, #24
 800b3d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3d4:	d402      	bmi.n	800b3dc <_printf_i+0x188>
 800b3d6:	065f      	lsls	r7, r3, #25
 800b3d8:	bf48      	it	mi
 800b3da:	b2ad      	uxthmi	r5, r5
 800b3dc:	6031      	str	r1, [r6, #0]
 800b3de:	07d9      	lsls	r1, r3, #31
 800b3e0:	bf44      	itt	mi
 800b3e2:	f043 0320 	orrmi.w	r3, r3, #32
 800b3e6:	6023      	strmi	r3, [r4, #0]
 800b3e8:	b11d      	cbz	r5, 800b3f2 <_printf_i+0x19e>
 800b3ea:	2310      	movs	r3, #16
 800b3ec:	e7ac      	b.n	800b348 <_printf_i+0xf4>
 800b3ee:	4827      	ldr	r0, [pc, #156]	@ (800b48c <_printf_i+0x238>)
 800b3f0:	e7e9      	b.n	800b3c6 <_printf_i+0x172>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	f023 0320 	bic.w	r3, r3, #32
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	e7f6      	b.n	800b3ea <_printf_i+0x196>
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	e7bd      	b.n	800b37c <_printf_i+0x128>
 800b400:	6833      	ldr	r3, [r6, #0]
 800b402:	6825      	ldr	r5, [r4, #0]
 800b404:	6961      	ldr	r1, [r4, #20]
 800b406:	1d18      	adds	r0, r3, #4
 800b408:	6030      	str	r0, [r6, #0]
 800b40a:	062e      	lsls	r6, r5, #24
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	d501      	bpl.n	800b414 <_printf_i+0x1c0>
 800b410:	6019      	str	r1, [r3, #0]
 800b412:	e002      	b.n	800b41a <_printf_i+0x1c6>
 800b414:	0668      	lsls	r0, r5, #25
 800b416:	d5fb      	bpl.n	800b410 <_printf_i+0x1bc>
 800b418:	8019      	strh	r1, [r3, #0]
 800b41a:	2300      	movs	r3, #0
 800b41c:	6123      	str	r3, [r4, #16]
 800b41e:	4616      	mov	r6, r2
 800b420:	e7bc      	b.n	800b39c <_printf_i+0x148>
 800b422:	6833      	ldr	r3, [r6, #0]
 800b424:	1d1a      	adds	r2, r3, #4
 800b426:	6032      	str	r2, [r6, #0]
 800b428:	681e      	ldr	r6, [r3, #0]
 800b42a:	6862      	ldr	r2, [r4, #4]
 800b42c:	2100      	movs	r1, #0
 800b42e:	4630      	mov	r0, r6
 800b430:	f7f4 ff56 	bl	80002e0 <memchr>
 800b434:	b108      	cbz	r0, 800b43a <_printf_i+0x1e6>
 800b436:	1b80      	subs	r0, r0, r6
 800b438:	6060      	str	r0, [r4, #4]
 800b43a:	6863      	ldr	r3, [r4, #4]
 800b43c:	6123      	str	r3, [r4, #16]
 800b43e:	2300      	movs	r3, #0
 800b440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b444:	e7aa      	b.n	800b39c <_printf_i+0x148>
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	4632      	mov	r2, r6
 800b44a:	4649      	mov	r1, r9
 800b44c:	4640      	mov	r0, r8
 800b44e:	47d0      	blx	sl
 800b450:	3001      	adds	r0, #1
 800b452:	d0ad      	beq.n	800b3b0 <_printf_i+0x15c>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	079b      	lsls	r3, r3, #30
 800b458:	d413      	bmi.n	800b482 <_printf_i+0x22e>
 800b45a:	68e0      	ldr	r0, [r4, #12]
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	4298      	cmp	r0, r3
 800b460:	bfb8      	it	lt
 800b462:	4618      	movlt	r0, r3
 800b464:	e7a6      	b.n	800b3b4 <_printf_i+0x160>
 800b466:	2301      	movs	r3, #1
 800b468:	4632      	mov	r2, r6
 800b46a:	4649      	mov	r1, r9
 800b46c:	4640      	mov	r0, r8
 800b46e:	47d0      	blx	sl
 800b470:	3001      	adds	r0, #1
 800b472:	d09d      	beq.n	800b3b0 <_printf_i+0x15c>
 800b474:	3501      	adds	r5, #1
 800b476:	68e3      	ldr	r3, [r4, #12]
 800b478:	9903      	ldr	r1, [sp, #12]
 800b47a:	1a5b      	subs	r3, r3, r1
 800b47c:	42ab      	cmp	r3, r5
 800b47e:	dcf2      	bgt.n	800b466 <_printf_i+0x212>
 800b480:	e7eb      	b.n	800b45a <_printf_i+0x206>
 800b482:	2500      	movs	r5, #0
 800b484:	f104 0619 	add.w	r6, r4, #25
 800b488:	e7f5      	b.n	800b476 <_printf_i+0x222>
 800b48a:	bf00      	nop
 800b48c:	0800b619 	.word	0x0800b619
 800b490:	0800b62a 	.word	0x0800b62a

0800b494 <memmove>:
 800b494:	4288      	cmp	r0, r1
 800b496:	b510      	push	{r4, lr}
 800b498:	eb01 0402 	add.w	r4, r1, r2
 800b49c:	d902      	bls.n	800b4a4 <memmove+0x10>
 800b49e:	4284      	cmp	r4, r0
 800b4a0:	4623      	mov	r3, r4
 800b4a2:	d807      	bhi.n	800b4b4 <memmove+0x20>
 800b4a4:	1e43      	subs	r3, r0, #1
 800b4a6:	42a1      	cmp	r1, r4
 800b4a8:	d008      	beq.n	800b4bc <memmove+0x28>
 800b4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4b2:	e7f8      	b.n	800b4a6 <memmove+0x12>
 800b4b4:	4402      	add	r2, r0
 800b4b6:	4601      	mov	r1, r0
 800b4b8:	428a      	cmp	r2, r1
 800b4ba:	d100      	bne.n	800b4be <memmove+0x2a>
 800b4bc:	bd10      	pop	{r4, pc}
 800b4be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4c6:	e7f7      	b.n	800b4b8 <memmove+0x24>

0800b4c8 <_sbrk_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4d06      	ldr	r5, [pc, #24]	@ (800b4e4 <_sbrk_r+0x1c>)
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	4608      	mov	r0, r1
 800b4d2:	602b      	str	r3, [r5, #0]
 800b4d4:	f7f5 fb9a 	bl	8000c0c <_sbrk>
 800b4d8:	1c43      	adds	r3, r0, #1
 800b4da:	d102      	bne.n	800b4e2 <_sbrk_r+0x1a>
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	b103      	cbz	r3, 800b4e2 <_sbrk_r+0x1a>
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	24001f5c 	.word	0x24001f5c

0800b4e8 <memcpy>:
 800b4e8:	440a      	add	r2, r1
 800b4ea:	4291      	cmp	r1, r2
 800b4ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4f0:	d100      	bne.n	800b4f4 <memcpy+0xc>
 800b4f2:	4770      	bx	lr
 800b4f4:	b510      	push	{r4, lr}
 800b4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4fe:	4291      	cmp	r1, r2
 800b500:	d1f9      	bne.n	800b4f6 <memcpy+0xe>
 800b502:	bd10      	pop	{r4, pc}

0800b504 <_realloc_r>:
 800b504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	4680      	mov	r8, r0
 800b50a:	4615      	mov	r5, r2
 800b50c:	460c      	mov	r4, r1
 800b50e:	b921      	cbnz	r1, 800b51a <_realloc_r+0x16>
 800b510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b514:	4611      	mov	r1, r2
 800b516:	f7ff bc4b 	b.w	800adb0 <_malloc_r>
 800b51a:	b92a      	cbnz	r2, 800b528 <_realloc_r+0x24>
 800b51c:	f7ff fbdc 	bl	800acd8 <_free_r>
 800b520:	2400      	movs	r4, #0
 800b522:	4620      	mov	r0, r4
 800b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b528:	f000 f81a 	bl	800b560 <_malloc_usable_size_r>
 800b52c:	4285      	cmp	r5, r0
 800b52e:	4606      	mov	r6, r0
 800b530:	d802      	bhi.n	800b538 <_realloc_r+0x34>
 800b532:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b536:	d8f4      	bhi.n	800b522 <_realloc_r+0x1e>
 800b538:	4629      	mov	r1, r5
 800b53a:	4640      	mov	r0, r8
 800b53c:	f7ff fc38 	bl	800adb0 <_malloc_r>
 800b540:	4607      	mov	r7, r0
 800b542:	2800      	cmp	r0, #0
 800b544:	d0ec      	beq.n	800b520 <_realloc_r+0x1c>
 800b546:	42b5      	cmp	r5, r6
 800b548:	462a      	mov	r2, r5
 800b54a:	4621      	mov	r1, r4
 800b54c:	bf28      	it	cs
 800b54e:	4632      	movcs	r2, r6
 800b550:	f7ff ffca 	bl	800b4e8 <memcpy>
 800b554:	4621      	mov	r1, r4
 800b556:	4640      	mov	r0, r8
 800b558:	f7ff fbbe 	bl	800acd8 <_free_r>
 800b55c:	463c      	mov	r4, r7
 800b55e:	e7e0      	b.n	800b522 <_realloc_r+0x1e>

0800b560 <_malloc_usable_size_r>:
 800b560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b564:	1f18      	subs	r0, r3, #4
 800b566:	2b00      	cmp	r3, #0
 800b568:	bfbc      	itt	lt
 800b56a:	580b      	ldrlt	r3, [r1, r0]
 800b56c:	18c0      	addlt	r0, r0, r3
 800b56e:	4770      	bx	lr

0800b570 <_init>:
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b572:	bf00      	nop
 800b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b576:	bc08      	pop	{r3}
 800b578:	469e      	mov	lr, r3
 800b57a:	4770      	bx	lr

0800b57c <_fini>:
 800b57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57e:	bf00      	nop
 800b580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b582:	bc08      	pop	{r3}
 800b584:	469e      	mov	lr, r3
 800b586:	4770      	bx	lr
