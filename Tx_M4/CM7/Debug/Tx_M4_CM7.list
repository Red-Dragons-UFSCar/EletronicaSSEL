
Tx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800b658  0800b658  0000c658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b728  0800b728  0000d170  2**0
                  CONTENTS
  4 .ARM          00000008  0800b728  0800b728  0000c728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b730  0800b730  0000d170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b730  0800b730  0000c730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b734  0800b734  0000c734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  24000000  0800b738  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dfc  24000170  0800b8a8  0000d170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001f6c  0800b8a8  0000df6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac9b  00000000  00000000  0000d19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c85  00000000  00000000  00027e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e55  00000000  00000000  0002cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cdc6  00000000  00000000  0002dc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9c6  00000000  00000000  0006a9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f523  00000000  00000000  00086391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002058b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  002058f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0020abb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000170 	.word	0x24000170
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b640 	.word	0x0800b640

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000174 	.word	0x24000174
 80002dc:	0800b640 	.word	0x0800b640

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <get_M4>:

// pointer to shared_data struct (inter-core buffers and status)
volatile struct shared_data * const xfr_ptr = (struct shared_data *)0x38001000;

void  get_M4(int *data) // get data from M4 to M7 buffer
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	 // buffer to receive data
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <get_M4+0x5c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d11e      	bne.n	80007ec <get_M4+0x50>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <get_M4+0x5c>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 9; n++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	e012      	b.n	80007e0 <get_M4+0x44>
		{
			data[n] = xfr_ptr->M4toM7[n]; // transfer data
 80007ba:	490f      	ldr	r1, [pc, #60]	@ (80007f8 <get_M4+0x5c>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	441a      	add	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	6013      	str	r3, [r2, #0]
			xfr_ptr->M4toM7[n] = 0; // clear M4 to M7 buffer
 80007ce:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <get_M4+0x5c>)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
		for(int n = 0; n < 9; n++)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b08      	cmp	r3, #8
 80007e4:	dde9      	ble.n	80007ba <get_M4+0x1e>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <get_M4+0x5c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	} // return the buffer (pointer)
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	38001000 	.word	0x38001000

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	b0bf      	sub	sp, #252	@ 0xfc
 8000800:	af08      	add	r7, sp, #32
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800080a:	bf00      	nop
 800080c:	4b73      	ldr	r3, [pc, #460]	@ (80009dc <main+0x1e0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d006      	beq.n	8000826 <main+0x2a>
 8000818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000822:	2b00      	cmp	r3, #0
 8000824:	dcf2      	bgt.n	800080c <main+0x10>
  if ( timeout < 0 )
 8000826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800082a:	2b00      	cmp	r3, #0
 800082c:	da01      	bge.n	8000832 <main+0x36>
  {
  Error_Handler();
 800082e:	f000 f9f5 	bl	8000c1c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fc7b 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f8d9 	bl	80009ec <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800083a:	4b68      	ldr	r3, [pc, #416]	@ (80009dc <main+0x1e0>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000840:	4a66      	ldr	r2, [pc, #408]	@ (80009dc <main+0x1e0>)
 8000842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000846:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084a:	4b64      	ldr	r3, [pc, #400]	@ (80009dc <main+0x1e0>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000858:	2000      	movs	r0, #0
 800085a:	f001 f887 	bl	800196c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800085e:	2100      	movs	r1, #0
 8000860:	2000      	movs	r0, #0
 8000862:	f001 f89d 	bl	80019a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800086a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800086e:	bf00      	nop
 8000870:	4b5a      	ldr	r3, [pc, #360]	@ (80009dc <main+0x1e0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000878:	2b00      	cmp	r3, #0
 800087a:	d106      	bne.n	800088a <main+0x8e>
 800087c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000886:	2b00      	cmp	r3, #0
 8000888:	dcf2      	bgt.n	8000870 <main+0x74>
if ( timeout < 0 )
 800088a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800088e:	2b00      	cmp	r3, #0
 8000890:	da01      	bge.n	8000896 <main+0x9a>
{
Error_Handler();
 8000892:	f000 f9c3 	bl	8000c1c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 f929 	bl	8000aec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800089a:	f009 fce1 	bl	800a260 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 fa7c 	bl	8000d9c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f000 fa79 	bl	8000d9c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 fa76 	bl	8000d9c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008b0:	2101      	movs	r1, #1
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 fae8 	bl	8000e88 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008b8:	4b49      	ldr	r3, [pc, #292]	@ (80009e0 <main+0x1e4>)
 80008ba:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008be:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008c0:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <main+0x1e4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <main+0x1e4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008cc:	4b44      	ldr	r3, [pc, #272]	@ (80009e0 <main+0x1e4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008d2:	4b43      	ldr	r3, [pc, #268]	@ (80009e0 <main+0x1e4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008d8:	4941      	ldr	r1, [pc, #260]	@ (80009e0 <main+0x1e4>)
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fb64 	bl	8000fa8 <BSP_COM_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <main+0xee>
  {
    Error_Handler();
 80008e6:	f000 f999 	bl	8000c1c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  xfr_ptr->sts_4to7 = 0;
 80008ea:	4b3e      	ldr	r3, [pc, #248]	@ (80009e4 <main+0x1e8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  xfr_ptr->sts_7to4 = 0;
 80008f0:	4b3c      	ldr	r3, [pc, #240]	@ (80009e4 <main+0x1e8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	705a      	strb	r2, [r3, #1]

  char message[100] = {'\0'};
 80008f6:	2300      	movs	r3, #0
 80008f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80008fa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80008fe:	2260      	movs	r2, #96	@ 0x60
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f00a fa1c 	bl	800ad40 <memset>
  int Retorno[9] = {0,0,0,0,0,0,0,0,0};//Correntes (3 robos), Latência (3 Robos), Perda de Pacote (3 Robos)
 8000908:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800090c:	2224      	movs	r2, #36	@ 0x24
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f00a fa15 	bl	800ad40 <memset>
  int Software[12] = {0,0,0,0,0,0,0,0,0,0,0,0}; //((vel)*4Rodas)*3Robos
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2230      	movs	r2, #48	@ 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f00a fa0e 	bl	800ad40 <memset>
  while (1)
  {
	  if(xfr_ptr->sts_4to7 == 1){
 8000924:	4b2f      	ldr	r3, [pc, #188]	@ (80009e4 <main+0x1e8>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b01      	cmp	r3, #1
 800092c:	d104      	bne.n	8000938 <main+0x13c>
		get_M4(Retorno);
 800092e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff32 	bl	800079c <get_M4>
	  }
	CDC_Receive_FS(Software,sizeof(Software));
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	2130      	movs	r1, #48	@ 0x30
 800093e:	4618      	mov	r0, r3
 8000940:	f009 fd3a 	bl	800a3b8 <CDC_Receive_FS>
	sprintf(message, "oi %d %d %d %d %d %d %d %d %d\n",Software[0],Retorno[1],Retorno[2],Retorno[3],Retorno[4],Retorno[5],Retorno[6],Retorno[7],Retorno[8],Retorno[9]);
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800094e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000950:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000952:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8000958:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 800095a:	6ebe      	ldr	r6, [r7, #104]	@ 0x68
 800095c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800095e:	f107 0c6c 	add.w	ip, r7, #108	@ 0x6c
 8000962:	9007      	str	r0, [sp, #28]
 8000964:	9606      	str	r6, [sp, #24]
 8000966:	9505      	str	r5, [sp, #20]
 8000968:	9404      	str	r4, [sp, #16]
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	9003      	str	r0, [sp, #12]
 800096e:	9102      	str	r1, [sp, #8]
 8000970:	9201      	str	r2, [sp, #4]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	491b      	ldr	r1, [pc, #108]	@ (80009e8 <main+0x1ec>)
 800097a:	4660      	mov	r0, ip
 800097c:	f00a f9c0 	bl	800ad00 <siprintf>
	CDC_Transmit_FS(message,sizeof(message));
 8000980:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000984:	2164      	movs	r1, #100	@ 0x64
 8000986:	4618      	mov	r0, r3
 8000988:	f009 fd2a 	bl	800a3e0 <CDC_Transmit_FS>
	/*
	if(xfr_ptr->sts_7to4 == 0){
		 xfr_ptr->sts_7to4 = 1;
	 }
	*/
	if(xfr_ptr->sts_7to4 == 0){
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <main+0x1e8>)
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11e      	bne.n	80009d4 <main+0x1d8>
			 for(int n = 0; n < 12; n++){
 8000996:	2300      	movs	r3, #0
 8000998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800099c:	e013      	b.n	80009c6 <main+0x1ca>
			 	xfr_ptr->M7toM4[n] = Software[n];
 800099e:	4911      	ldr	r1, [pc, #68]	@ (80009e4 <main+0x1e8>)
 80009a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	33c8      	adds	r3, #200	@ 0xc8
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	4413      	add	r3, r2
 80009ae:	f853 2cc0 	ldr.w	r2, [r3, #-192]
 80009b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009b6:	330a      	adds	r3, #10
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 for(int n = 0; n < 12; n++){
 80009bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009c0:	3301      	adds	r3, #1
 80009c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80009c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009ca:	2b0b      	cmp	r3, #11
 80009cc:	dde7      	ble.n	800099e <main+0x1a2>
			 	}
			 xfr_ptr->sts_7to4 = 1;
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <main+0x1e8>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	705a      	strb	r2, [r3, #1]
		 }


	HAL_Delay(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 fc3b 	bl	8001250 <HAL_Delay>
	  if(xfr_ptr->sts_4to7 == 1){
 80009da:	e7a3      	b.n	8000924 <main+0x128>
 80009dc:	58024400 	.word	0x58024400
 80009e0:	2400018c 	.word	0x2400018c
 80009e4:	38001000 	.word	0x38001000
 80009e8:	0800b658 	.word	0x0800b658

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b09c      	sub	sp, #112	@ 0x70
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f6:	224c      	movs	r2, #76	@ 0x4c
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f00a f9a0 	bl	800ad40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2220      	movs	r2, #32
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00a f99a 	bl	800ad40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	f002 fa79 	bl	8002f04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <SystemClock_Config+0xf8>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1a:	4a32      	ldr	r2, [pc, #200]	@ (8000ae4 <SystemClock_Config+0xf8>)
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a22:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <SystemClock_Config+0xf8>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae8 <SystemClock_Config+0xfc>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a34:	4a2c      	ldr	r2, [pc, #176]	@ (8000ae8 <SystemClock_Config+0xfc>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae8 <SystemClock_Config+0xfc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a48:	bf00      	nop
 8000a4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ae8 <SystemClock_Config+0xfc>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a56:	d1f8      	bne.n	8000a4a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a58:	2322      	movs	r3, #34	@ 0x22
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a64:	2301      	movs	r3, #1
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000a74:	2319      	movs	r3, #25
 8000a76:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a7c:	2305      	movs	r3, #5
 8000a7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a84:	230c      	movs	r3, #12
 8000a86:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 fa9f 	bl	8002fd8 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000aa0:	f000 f8bc 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	233f      	movs	r3, #63	@ 0x3f
 8000aa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ab4:	2340      	movs	r3, #64	@ 0x40
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab8:	2340      	movs	r3, #64	@ 0x40
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac2:	2340      	movs	r3, #64	@ 0x40
 8000ac4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fede 	bl	800388c <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000ad6:	f000 f8a1 	bl	8000c1c <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3770      	adds	r7, #112	@ 0x70
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	58000400 	.word	0x58000400
 8000ae8:	58024800 	.word	0x58024800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b41      	ldr	r3, [pc, #260]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	4a3f      	ldr	r2, [pc, #252]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b12:	4b3d      	ldr	r3, [pc, #244]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b39      	ldr	r3, [pc, #228]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	4a38      	ldr	r2, [pc, #224]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b30:	4b35      	ldr	r3, [pc, #212]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	4a30      	ldr	r2, [pc, #192]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b62:	4a29      	ldr	r2, [pc, #164]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6c:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b7a:	2332      	movs	r3, #50	@ 0x32
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	481d      	ldr	r0, [pc, #116]	@ (8000c0c <MX_GPIO_Init+0x120>)
 8000b96:	f000 fd1f 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b9a:	2386      	movs	r3, #134	@ 0x86
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000baa:	230b      	movs	r3, #11
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4816      	ldr	r0, [pc, #88]	@ (8000c10 <MX_GPIO_Init+0x124>)
 8000bb6:	f000 fd0f 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480f      	ldr	r0, [pc, #60]	@ (8000c14 <MX_GPIO_Init+0x128>)
 8000bd8:	f000 fcfe 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bdc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bee:	230b      	movs	r3, #11
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <MX_GPIO_Init+0x12c>)
 8000bfa:	f000 fced 	bl	80015d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	@ 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020800 	.word	0x58020800
 8000c10:	58020000 	.word	0x58020000
 8000c14:	58020400 	.word	0x58020400
 8000c18:	58021800 	.word	0x58021800

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x8>

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_MspInit+0x30>)
 8000c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c34:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_MspInit+0x30>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_MspInit+0x30>)
 8000c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	58024400 	.word	0x58024400

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb2:	f000 faad 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f954 	bl	8000f6c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <OTG_FS_IRQHandler+0x10>)
 8000cce:	f000 ffbc 	bl	8001c4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24001720 	.word	0x24001720

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	@ (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f00a f820 	bl	800ad50 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	24080000 	.word	0x24080000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	2400019c 	.word	0x2400019c
 8000d44:	24001f70 	.word	0x24001f70

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f7ff fc90 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d76:	f009 fff1 	bl	800ad5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fd3f 	bl	80007fc <main>
  bx  lr
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d88:	24000170 	.word	0x24000170
  ldr r2, =_sidata
 8000d8c:	0800b738 	.word	0x0800b738
  ldr r2, =_sbss
 8000d90:	24000170 	.word	0x24000170
  ldr r4, =_ebss
 8000d94:	24001f6c 	.word	0x24001f6c

08000d98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC3_IRQHandler>
	...

08000d9c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d009      	beq.n	8000dc4 <BSP_LED_Init+0x28>
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d006      	beq.n	8000dc4 <BSP_LED_Init+0x28>
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d003      	beq.n	8000dc4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dbc:	f06f 0301 	mvn.w	r3, #1
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dc2:	e055      	b.n	8000e70 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10f      	bne.n	8000dea <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dda:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	e021      	b.n	8000e2e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d10f      	bne.n	8000e10 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	4a21      	ldr	r2, [pc, #132]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e00:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	e00e      	b.n	8000e2e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a19      	ldr	r2, [pc, #100]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <BSP_LED_Init+0xe0>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4a13      	ldr	r2, [pc, #76]	@ (8000e80 <BSP_LED_Init+0xe4>)
 8000e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e36:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <BSP_LED_Init+0xe8>)
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	f107 0218 	add.w	r2, r7, #24
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fbc0 	bl	80015d8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <BSP_LED_Init+0xe8>)
 8000e5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <BSP_LED_Init+0xe4>)
 8000e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f000 fd64 	bl	8001938 <HAL_GPIO_WritePin>
  }

  return ret;
 8000e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3730      	adds	r7, #48	@ 0x30
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	0800b6d0 	.word	0x0800b6d0
 8000e84:	2400000c 	.word	0x2400000c

08000e88 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e98:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <BSP_PB_Init+0xcc>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f54 <BSP_PB_Init+0xcc>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <BSP_PB_Init+0xcc>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10c      	bne.n	8000ee4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4a21      	ldr	r2, [pc, #132]	@ (8000f58 <BSP_PB_Init+0xd0>)
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	f107 020c 	add.w	r2, r7, #12
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fb7b 	bl	80015d8 <HAL_GPIO_Init>
 8000ee2:	e031      	b.n	8000f48 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000ee4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ee8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4a1a      	ldr	r2, [pc, #104]	@ (8000f58 <BSP_PB_Init+0xd0>)
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	f107 020c 	add.w	r2, r7, #12
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fb6d 	bl	80015d8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <BSP_PB_Init+0xd4>)
 8000f04:	441a      	add	r2, r3
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4915      	ldr	r1, [pc, #84]	@ (8000f60 <BSP_PB_Init+0xd8>)
 8000f0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f000 fb10 	bl	8001536 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <BSP_PB_Init+0xd4>)
 8000f1c:	1898      	adds	r0, r3, r2
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <BSP_PB_Init+0xdc>)
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	461a      	mov	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f000 fae5 	bl	80014f8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f2e:	2028      	movs	r0, #40	@ 0x28
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <BSP_PB_Init+0xe0>)
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f000 fa93 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f40:	2328      	movs	r3, #40	@ 0x28
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 faa9 	bl	800149a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	58024400 	.word	0x58024400
 8000f58:	24000018 	.word	0x24000018
 8000f5c:	240001a0 	.word	0x240001a0
 8000f60:	0800b6d8 	.word	0x0800b6d8
 8000f64:	2400001c 	.word	0x2400001c
 8000f68:	24000020 	.word	0x24000020

08000f6c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <BSP_PB_IRQHandler+0x20>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 faee 	bl	8001560 <HAL_EXTI_IRQHandler>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	240001a0 	.word	0x240001a0

08000f90 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fbe:	f06f 0301 	mvn.w	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e018      	b.n	8000ff8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2294      	movs	r2, #148	@ 0x94
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <BSP_COM_Init+0x5c>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f852 	bl	800107c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2294      	movs	r2, #148	@ 0x94
 8000fdc:	fb02 f303 	mul.w	r3, r2, r3
 8000fe0:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <BSP_COM_Init+0x5c>)
 8000fe2:	4413      	add	r3, r2
 8000fe4:	6839      	ldr	r1, [r7, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f80e 	bl	8001008 <MX_USART3_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000ff2:	f06f 0303 	mvn.w	r3, #3
 8000ff6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	240001a8 	.word	0x240001a8

08001008 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_USART3_Init+0x60>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	220c      	movs	r2, #12
 8001026:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	895b      	ldrh	r3, [r3, #10]
 800102c:	461a      	mov	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	891b      	ldrh	r3, [r3, #8]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	899b      	ldrh	r3, [r3, #12]
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001054:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f004 fdd0 	bl	8005bfc <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	24000008 	.word	0x24000008

0800106c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff8d 	bl	8000f90 <BSP_PB_Callback>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001084:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <COM1_MspInit+0xa8>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	4a26      	ldr	r2, [pc, #152]	@ (8001124 <COM1_MspInit+0xa8>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001094:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <COM1_MspInit+0xa8>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010a2:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <COM1_MspInit+0xa8>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <COM1_MspInit+0xa8>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <COM1_MspInit+0xa8>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <COM1_MspInit+0xa8>)
 80010c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <COM1_MspInit+0xa8>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <COM1_MspInit+0xa8>)
 80010d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80010de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80010f0:	2307      	movs	r3, #7
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	@ (8001128 <COM1_MspInit+0xac>)
 80010fc:	f000 fa6c 	bl	80015d8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001104:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800110a:	2307      	movs	r3, #7
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <COM1_MspInit+0xac>)
 8001116:	f000 fa5f 	bl	80015d8 <HAL_GPIO_Init>
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	@ 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	58024400 	.word	0x58024400
 8001128:	58020c00 	.word	0x58020c00

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f98c 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001138:	f002 fd5e 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	4913      	ldr	r1, [pc, #76]	@ (8001198 <HAL_Init+0x6c>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <HAL_Init+0x6c>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <HAL_Init+0x70>)
 800116e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001170:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <HAL_Init+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f814 	bl	80011a4 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e002      	b.n	800118c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fd4f 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	0800b6c0 	.word	0x0800b6c0
 800119c:	24000004 	.word	0x24000004
 80011a0:	24000000 	.word	0x24000000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e021      	b.n	80011fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <HAL_InitTick+0x64>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_InitTick+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f971 	bl	80014b6 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f93b 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	@ (800120c <HAL_InitTick+0x68>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24000028 	.word	0x24000028
 8001208:	24000000 	.word	0x24000000
 800120c:	24000024 	.word	0x24000024

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24000028 	.word	0x24000028
 8001234:	2400023c 	.word	0x2400023c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400023c 	.word	0x2400023c

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24000028 	.word	0x24000028

08001298 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_GetREVID+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0c1b      	lsrs	r3, r3, #16
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	5c001000 	.word	0x5c001000

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	05fa0000 	.word	0x05fa0000

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	@ (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	@ (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	@ (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	@ 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	@ (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff40 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff33 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa4 	bl	800140c <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <HAL_GetCurrentCPUID+0x24>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	2b07      	cmp	r3, #7
 80014e0:	d101      	bne.n	80014e6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e000      	b.n	80014e8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80014e6:	2301      	movs	r3, #1
  }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	460b      	mov	r3, r1
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e00a      	b.n	800152a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]
      break;
 8001520:	e002      	b.n	8001528 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
      break;
 8001526:	bf00      	nop
  }

  return status;
 8001528:	7dfb      	ldrb	r3, [r7, #23]
}
 800152a:	4618      	mov	r0, r3
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e003      	b.n	8001552 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001550:	2300      	movs	r3, #0
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2201      	movs	r2, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001584:	f7ff ffa4 	bl	80014d0 <HAL_GetCurrentCPUID>
 8001588:	4603      	mov	r3, r0
 800158a:	2b03      	cmp	r3, #3
 800158c:	d105      	bne.n	800159a <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	011a      	lsls	r2, r3, #4
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <HAL_EXTI_IRQHandler+0x70>)
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e004      	b.n	80015a4 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	011a      	lsls	r2, r3, #4
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <HAL_EXTI_IRQHandler+0x74>)
 80015a0:	4413      	add	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4798      	blx	r3
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	58000088 	.word	0x58000088
 80015d4:	580000c8 	.word	0x580000c8

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015e6:	4b89      	ldr	r3, [pc, #548]	@ (800180c <HAL_GPIO_Init+0x234>)
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015ea:	e194      	b.n	8001916 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8186 	beq.w	8001910 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x44>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0201 	and.w	r2, r3, #1
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	69b9      	ldr	r1, [r7, #24]
 800170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80e0 	beq.w	8001910 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b2f      	ldr	r3, [pc, #188]	@ (8001810 <HAL_GPIO_Init+0x238>)
 8001752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001756:	4a2e      	ldr	r2, [pc, #184]	@ (8001810 <HAL_GPIO_Init+0x238>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001760:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <HAL_GPIO_Init+0x238>)
 8001762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a29      	ldr	r2, [pc, #164]	@ (8001814 <HAL_GPIO_Init+0x23c>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a20      	ldr	r2, [pc, #128]	@ (8001818 <HAL_GPIO_Init+0x240>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d052      	beq.n	8001840 <HAL_GPIO_Init+0x268>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a1f      	ldr	r2, [pc, #124]	@ (800181c <HAL_GPIO_Init+0x244>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d031      	beq.n	8001806 <HAL_GPIO_Init+0x22e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <HAL_GPIO_Init+0x248>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d02b      	beq.n	8001802 <HAL_GPIO_Init+0x22a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <HAL_GPIO_Init+0x24c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d025      	beq.n	80017fe <HAL_GPIO_Init+0x226>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001828 <HAL_GPIO_Init+0x250>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01f      	beq.n	80017fa <HAL_GPIO_Init+0x222>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a1b      	ldr	r2, [pc, #108]	@ (800182c <HAL_GPIO_Init+0x254>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d019      	beq.n	80017f6 <HAL_GPIO_Init+0x21e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001830 <HAL_GPIO_Init+0x258>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x21a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a19      	ldr	r2, [pc, #100]	@ (8001834 <HAL_GPIO_Init+0x25c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x216>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a18      	ldr	r2, [pc, #96]	@ (8001838 <HAL_GPIO_Init+0x260>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x212>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a17      	ldr	r2, [pc, #92]	@ (800183c <HAL_GPIO_Init+0x264>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x20e>
 80017e2:	2309      	movs	r3, #9
 80017e4:	e02d      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 80017e6:	230a      	movs	r3, #10
 80017e8:	e02b      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 80017ea:	2308      	movs	r3, #8
 80017ec:	e029      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e027      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 80017f2:	2306      	movs	r3, #6
 80017f4:	e025      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 80017f6:	2305      	movs	r3, #5
 80017f8:	e023      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e021      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 80017fe:	2303      	movs	r3, #3
 8001800:	e01f      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 8001802:	2302      	movs	r3, #2
 8001804:	e01d      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 8001806:	2301      	movs	r3, #1
 8001808:	e01b      	b.n	8001842 <HAL_GPIO_Init+0x26a>
 800180a:	bf00      	nop
 800180c:	58000080 	.word	0x58000080
 8001810:	58024400 	.word	0x58024400
 8001814:	58000400 	.word	0x58000400
 8001818:	58020000 	.word	0x58020000
 800181c:	58020400 	.word	0x58020400
 8001820:	58020800 	.word	0x58020800
 8001824:	58020c00 	.word	0x58020c00
 8001828:	58021000 	.word	0x58021000
 800182c:	58021400 	.word	0x58021400
 8001830:	58021800 	.word	0x58021800
 8001834:	58021c00 	.word	0x58021c00
 8001838:	58022000 	.word	0x58022000
 800183c:	58022400 	.word	0x58022400
 8001840:	2300      	movs	r3, #0
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	4093      	lsls	r3, r2
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001852:	4938      	ldr	r1, [pc, #224]	@ (8001934 <HAL_GPIO_Init+0x35c>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	3301      	adds	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f ae63 	bne.w	80015ec <HAL_GPIO_Init+0x14>
  }
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	3724      	adds	r7, #36	@ 0x24
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	58000400 	.word	0x58000400

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001974:	4a08      	ldr	r2, [pc, #32]	@ (8001998 <HAL_HSEM_FastTake+0x2c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3320      	adds	r3, #32
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	4a07      	ldr	r2, [pc, #28]	@ (800199c <HAL_HSEM_FastTake+0x30>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	58026400 	.word	0x58026400
 800199c:	80000300 	.word	0x80000300

080019a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80019aa:	4906      	ldr	r1, [pc, #24]	@ (80019c4 <HAL_HSEM_Release+0x24>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	58026400 	.word	0x58026400

080019c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0fe      	b.n	8001bd8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f008 fe3e 	bl	800a670 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 fa02 	bl	8006e0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7c1a      	ldrb	r2, [r3, #16]
 8001a0e:	f88d 2000 	strb.w	r2, [sp]
 8001a12:	3304      	adds	r3, #4
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	f005 f8d3 	bl	8006bc0 <USB_CoreInit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0d5      	b.n	8001bd8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 f9fa 	bl	8006e2c <USB_SetCurrentMode>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2202      	movs	r2, #2
 8001a42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0c6      	b.n	8001bd8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e04a      	b.n	8001ae6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3315      	adds	r3, #21
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3314      	adds	r3, #20
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	b298      	uxth	r0, r3
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	332e      	adds	r3, #46	@ 0x2e
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3318      	adds	r3, #24
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	331c      	adds	r3, #28
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	3324      	adds	r3, #36	@ 0x24
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3af      	bcc.n	8001a50 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e044      	b.n	8001b80 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d3b5      	bcc.n	8001af6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7c1a      	ldrb	r2, [r3, #16]
 8001b92:	f88d 2000 	strb.w	r2, [sp]
 8001b96:	3304      	adds	r3, #4
 8001b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9a:	f005 f993 	bl	8006ec4 <USB_DevInit>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e013      	b.n	8001bd8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f001 f96c 	bl	8002ea4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f006 f9d2 	bl	8007f7a <USB_DevDisconnect>

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_Start+0x1c>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e022      	b.n	8001c42 <HAL_PCD_Start+0x62>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d105      	bne.n	8001c24 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 f8dd 	bl	8006de8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f006 f980 	bl	8007f38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c4a:	b590      	push	{r4, r7, lr}
 8001c4c:	b08d      	sub	sp, #52	@ 0x34
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f006 fa3e 	bl	80080e2 <USB_GetMode>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 84b9 	bne.w	80025e0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 f9a2 	bl	8007fbc <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 84af 	beq.w	80025de <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f006 f98f 	bl	8007fbc <USB_ReadInterrupts>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d107      	bne.n	8001cb8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f002 0202 	and.w	r2, r2, #2
 8001cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f006 f97d 	bl	8007fbc <USB_ReadInterrupts>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d161      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0210 	bic.w	r2, r2, #16
 8001cda:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	f003 020f 	and.w	r2, r3, #15
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	0c5b      	lsrs	r3, r3, #17
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d124      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d035      	beq.n	8001d80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	6a38      	ldr	r0, [r7, #32]
 8001d28:	f005 ffb4 	bl	8007c94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d38:	441a      	add	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d4a:	441a      	add	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	615a      	str	r2, [r3, #20]
 8001d50:	e016      	b.n	8001d80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	0c5b      	lsrs	r3, r3, #17
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d110      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d64:	2208      	movs	r2, #8
 8001d66:	4619      	mov	r1, r3
 8001d68:	6a38      	ldr	r0, [r7, #32]
 8001d6a:	f005 ff93 	bl	8007c94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d7a:	441a      	add	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0210 	orr.w	r2, r2, #16
 8001d8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f006 f911 	bl	8007fbc <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001da0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001da4:	f040 80a7 	bne.w	8001ef6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f006 f916 	bl	8007fe2 <USB_ReadDevAllOutEpInterrupt>
 8001db6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001db8:	e099      	b.n	8001eee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 808e 	beq.w	8001ee2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 f93a 	bl	800804a <USB_ReadDevOutEPInterrupt>
 8001dd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dee:	461a      	mov	r2, r3
 8001df0:	2301      	movs	r3, #1
 8001df2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001df4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fece 	bl	8002b98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e12:	461a      	mov	r2, r3
 8001e14:	2308      	movs	r3, #8
 8001e16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 ffa4 	bl	8002d68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e36:	461a      	mov	r2, r3
 8001e38:	2310      	movs	r3, #16
 8001e3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d030      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4e:	2b80      	cmp	r3, #128	@ 0x80
 8001e50:	d109      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e64:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	3304      	adds	r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	78db      	ldrb	r3, [r3, #3]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2200      	movs	r2, #0
 8001e88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f008 fd23 	bl	800a8dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eda:	461a      	mov	r2, r3
 8001edc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f47f af62 	bne.w	8001dba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f006 f85e 	bl	8007fbc <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f0a:	f040 80db 	bne.w	80020c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f006 f87f 	bl	8008016 <USB_ReadDevAllInEpInterrupt>
 8001f18:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001f1e:	e0cd      	b.n	80020bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80c2 	beq.w	80020b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f006 f8a5 	bl	8008086 <USB_ReadDevInEPInterrupt>
 8001f3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d057      	beq.n	8001ff8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	2201      	movs	r2, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69f9      	ldr	r1, [r7, #28]
 8001f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f68:	4013      	ands	r3, r2
 8001f6a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	799b      	ldrb	r3, [r3, #6]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d132      	bne.n	8001fec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3320      	adds	r3, #32
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4403      	add	r3, r0
 8001fa6:	331c      	adds	r3, #28
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4419      	add	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4403      	add	r3, r0
 8001fba:	3320      	adds	r3, #32
 8001fbc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d113      	bne.n	8001fec <HAL_PCD_IRQHandler+0x3a2>
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3324      	adds	r3, #36	@ 0x24
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	f006 f8ae 	bl	8008148 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f008 fbed 	bl	800a7d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800200e:	461a      	mov	r2, r3
 8002010:	2308      	movs	r3, #8
 8002012:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800202a:	461a      	mov	r2, r3
 800202c:	2310      	movs	r3, #16
 800202e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002046:	461a      	mov	r2, r3
 8002048:	2340      	movs	r3, #64	@ 0x40
 800204a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d023      	beq.n	800209e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002056:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002058:	6a38      	ldr	r0, [r7, #32]
 800205a:	f005 f891 	bl	8007180 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800205e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	3310      	adds	r3, #16
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	78db      	ldrb	r3, [r3, #3]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2200      	movs	r2, #0
 800207e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f008 fc3a 	bl	800a900 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4413      	add	r3, r2
 8002094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002098:	461a      	mov	r2, r3
 800209a:	2302      	movs	r3, #2
 800209c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fce8 	bl	8002a80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	3301      	adds	r3, #1
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f47f af2e 	bne.w	8001f20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f005 ff77 	bl	8007fbc <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020d8:	d122      	bne.n	8002120 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d108      	bne.n	800210a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002100:	2100      	movs	r1, #0
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fef2 	bl	8002eec <HAL_PCDEx_LPM_Callback>
 8002108:	e002      	b.n	8002110 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f008 fbd8 	bl	800a8c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800211e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f005 ff49 	bl	8007fbc <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002134:	d112      	bne.n	800215c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f008 fb94 	bl	800a874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800215a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f005 ff2b 	bl	8007fbc <USB_ReadInterrupts>
 8002166:	4603      	mov	r3, r0
 8002168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800216c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002170:	d121      	bne.n	80021b6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002180:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002188:	2b00      	cmp	r3, #0
 800218a:	d111      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80021a6:	2101      	movs	r1, #1
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fe9f 	bl	8002eec <HAL_PCDEx_LPM_Callback>
 80021ae:	e002      	b.n	80021b6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f008 fb5f 	bl	800a874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 fefe 	bl	8007fbc <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ca:	f040 80b7 	bne.w	800233c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2110      	movs	r1, #16
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 ffc9 	bl	8007180 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021f2:	e046      	b.n	8002282 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002200:	461a      	mov	r2, r3
 8002202:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002206:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002218:	0151      	lsls	r1, r2, #5
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	440a      	add	r2, r1
 800221e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002222:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002226:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002234:	461a      	mov	r2, r3
 8002236:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800223a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800223c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800224c:	0151      	lsls	r1, r2, #5
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	440a      	add	r2, r1
 8002252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002256:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800225a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800225c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800226c:	0151      	lsls	r1, r2, #5
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	440a      	add	r2, r1
 8002272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002276:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800227a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227e:	3301      	adds	r3, #1
 8002280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	791b      	ldrb	r3, [r3, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228a:	4293      	cmp	r3, r2
 800228c:	d3b2      	bcc.n	80021f4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800229c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80022a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7bdb      	ldrb	r3, [r3, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022ba:	f043 030b 	orr.w	r3, r3, #11
 80022be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022d0:	f043 030b 	orr.w	r3, r3, #11
 80022d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d6:	e015      	b.n	8002304 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022e6:	4619      	mov	r1, r3
 80022e8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80022ec:	4313      	orrs	r3, r2
 80022ee:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022fe:	f043 030b 	orr.w	r3, r3, #11
 8002302:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002312:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002316:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002326:	461a      	mov	r2, r3
 8002328:	f005 ff0e 	bl	8008148 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800233a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f005 fe3b 	bl	8007fbc <USB_ReadInterrupts>
 8002346:	4603      	mov	r3, r0
 8002348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800234c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002350:	d123      	bne.n	800239a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f005 fed2 	bl	8008100 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f004 ff86 	bl	8007272 <USB_GetDevSpeed>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681c      	ldr	r4, [r3, #0]
 8002372:	f001 fdbb 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8002376:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800237c:	461a      	mov	r2, r3
 800237e:	4620      	mov	r0, r4
 8002380:	f004 fc90 	bl	8006ca4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f008 fa4c 	bl	800a822 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002398:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 fe0c 	bl	8007fbc <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d10a      	bne.n	80023c4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f008 fa29 	bl	800a806 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f002 0208 	and.w	r2, r2, #8
 80023c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f005 fdf7 	bl	8007fbc <USB_ReadInterrupts>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d4:	2b80      	cmp	r3, #128	@ 0x80
 80023d6:	d123      	bne.n	8002420 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023e4:	2301      	movs	r3, #1
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e8:	e014      	b.n	8002414 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4619      	mov	r1, r3
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fb08 	bl	8002a1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	791b      	ldrb	r3, [r3, #4]
 8002418:	461a      	mov	r2, r3
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	4293      	cmp	r3, r2
 800241e:	d3e4      	bcc.n	80023ea <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f005 fdc9 	bl	8007fbc <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002434:	d13c      	bne.n	80024b0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002436:	2301      	movs	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
 800243a:	e02b      	b.n	8002494 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3318      	adds	r3, #24
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d115      	bne.n	800248e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002462:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	da12      	bge.n	800248e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3317      	adds	r3, #23
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fac8 	bl	8002a1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	791b      	ldrb	r3, [r3, #4]
 8002498:	461a      	mov	r2, r3
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	4293      	cmp	r3, r2
 800249e:	d3cd      	bcc.n	800243c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80024ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 fd81 	bl	8007fbc <USB_ReadInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024c4:	d156      	bne.n	8002574 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c6:	2301      	movs	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ca:	e045      	b.n	8002558 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d12e      	bne.n	8002552 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da2b      	bge.n	8002552 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002506:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800250a:	429a      	cmp	r2, r3
 800250c:	d121      	bne.n	8002552 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800254a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800254e:	6053      	str	r3, [r2, #4]
            break;
 8002550:	e008      	b.n	8002564 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	791b      	ldrb	r3, [r3, #4]
 800255c:	461a      	mov	r2, r3
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	4293      	cmp	r3, r2
 8002562:	d3b3      	bcc.n	80024cc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f005 fd1f 	bl	8007fbc <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002588:	d10a      	bne.n	80025a0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f008 f9ca 	bl	800a924 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800259e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f005 fd09 	bl	8007fbc <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d115      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f008 f9ba 	bl	800a940 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	e000      	b.n	80025e0 <HAL_PCD_IRQHandler+0x996>
      return;
 80025de:	bf00      	nop
    }
  }
}
 80025e0:	3734      	adds	r7, #52	@ 0x34
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}

080025e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_PCD_SetAddress+0x1a>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e012      	b.n	8002626 <HAL_PCD_SetAddress+0x40>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f005 fc68 	bl	8007eec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	4608      	mov	r0, r1
 8002638:	4611      	mov	r1, r2
 800263a:	461a      	mov	r2, r3
 800263c:	4603      	mov	r3, r0
 800263e:	70fb      	strb	r3, [r7, #3]
 8002640:	460b      	mov	r3, r1
 8002642:	803b      	strh	r3, [r7, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800264c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002650:	2b00      	cmp	r3, #0
 8002652:	da0f      	bge.n	8002674 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	3310      	adds	r3, #16
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	705a      	strb	r2, [r3, #1]
 8002672:	e00f      	b.n	8002694 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 020f 	and.w	r2, r3, #15
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026a0:	883a      	ldrh	r2, [r7, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	78ba      	ldrb	r2, [r7, #2]
 80026aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026be:	78bb      	ldrb	r3, [r7, #2]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d102      	bne.n	80026ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_PCD_EP_Open+0xaa>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e00e      	b.n	80026f6 <HAL_PCD_EP_Open+0xc8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 fde8 	bl	80072bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80026f4:	7afb      	ldrb	r3, [r7, #11]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800270a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800270e:	2b00      	cmp	r3, #0
 8002710:	da0f      	bge.n	8002732 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	3310      	adds	r3, #16
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	3304      	adds	r3, #4
 8002728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	705a      	strb	r2, [r3, #1]
 8002730:	e00f      	b.n	8002752 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 020f 	and.w	r2, r3, #15
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_PCD_EP_Close+0x6e>
 8002768:	2302      	movs	r3, #2
 800276a:	e00e      	b.n	800278a <HAL_PCD_EP_Close+0x8c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68f9      	ldr	r1, [r7, #12]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fe26 	bl	80073cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	460b      	mov	r3, r1
 80027a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	f003 020f 	and.w	r2, r3, #15
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2200      	movs	r2, #0
 80027d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d4:	7afb      	ldrb	r3, [r7, #11]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	799b      	ldrb	r3, [r3, #6]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d102      	bne.n	80027ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	799b      	ldrb	r3, [r3, #6]
 80027f6:	461a      	mov	r2, r3
 80027f8:	6979      	ldr	r1, [r7, #20]
 80027fa:	f004 fec3 	bl	8007584 <USB_EPStartXfer>

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	460b      	mov	r3, r1
 8002846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002848:	7afb      	ldrb	r3, [r7, #11]
 800284a:	f003 020f 	and.w	r2, r3, #15
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	3310      	adds	r3, #16
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	3304      	adds	r3, #4
 800285e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2200      	movs	r2, #0
 8002870:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2201      	movs	r2, #1
 8002876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	b2da      	uxtb	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	799b      	ldrb	r3, [r3, #6]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	799b      	ldrb	r3, [r3, #6]
 800289a:	461a      	mov	r2, r3
 800289c:	6979      	ldr	r1, [r7, #20]
 800289e:	f004 fe71 	bl	8007584 <USB_EPStartXfer>

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	7912      	ldrb	r2, [r2, #4]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e04f      	b.n	800296a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da0f      	bge.n	80028f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 020f 	and.w	r2, r3, #15
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	3310      	adds	r3, #16
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	3304      	adds	r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	705a      	strb	r2, [r3, #1]
 80028f0:	e00d      	b.n	800290e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	b2da      	uxtb	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_PCD_EP_SetStall+0x82>
 800292a:	2302      	movs	r3, #2
 800292c:	e01d      	b.n	800296a <HAL_PCD_EP_SetStall+0xbe>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	4618      	mov	r0, r3
 800293e:	f005 fa01 	bl	8007d44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7999      	ldrb	r1, [r3, #6]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800295a:	461a      	mov	r2, r3
 800295c:	f005 fbf4 	bl	8008148 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	7912      	ldrb	r2, [r2, #4]
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e042      	b.n	8002a16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002994:	2b00      	cmp	r3, #0
 8002996:	da0f      	bge.n	80029b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	3310      	adds	r3, #16
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	705a      	strb	r2, [r3, #1]
 80029b6:	e00f      	b.n	80029d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f003 020f 	and.w	r2, r3, #15
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_PCD_EP_ClrStall+0x86>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e00e      	b.n	8002a16 <HAL_PCD_EP_ClrStall+0xa4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f005 fa0a 	bl	8007e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da0c      	bge.n	8002a4c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	3310      	adds	r3, #16
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	3304      	adds	r3, #4
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e00c      	b.n	8002a66 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68f9      	ldr	r1, [r7, #12]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 f829 	bl	8007ac4 <USB_EPStopXfer>
 8002a72:	4603      	mov	r3, r0
 8002a74:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a76:	7afb      	ldrb	r3, [r7, #11]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d901      	bls.n	8002ab8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e06b      	b.n	8002b90 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d902      	bls.n	8002ad4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3303      	adds	r3, #3
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002adc:	e02a      	b.n	8002b34 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d902      	bls.n	8002afa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3303      	adds	r3, #3
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68d9      	ldr	r1, [r3, #12]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	4603      	mov	r3, r0
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f005 f87e 	bl	8007c18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	441a      	add	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	441a      	add	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d809      	bhi.n	8002b5e <PCD_WriteEmptyTxFifo+0xde>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d203      	bcs.n	8002b5e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1bf      	bne.n	8002ade <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d811      	bhi.n	8002b8e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	2201      	movs	r2, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	6939      	ldr	r1, [r7, #16]
 8002b86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	333c      	adds	r3, #60	@ 0x3c
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	799b      	ldrb	r3, [r3, #6]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d17b      	bne.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d015      	beq.n	8002c04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	4a61      	ldr	r2, [pc, #388]	@ (8002d60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f240 80b9 	bls.w	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80b3 	beq.w	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c00:	6093      	str	r3, [r2, #8]
 8002c02:	e0a7      	b.n	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	6093      	str	r3, [r2, #8]
 8002c20:	e098      	b.n	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 8093 	bne.w	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	4a4b      	ldr	r2, [pc, #300]	@ (8002d60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d90f      	bls.n	8002c56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c52:	6093      	str	r3, [r2, #8]
 8002c54:	e07e      	b.n	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	0159      	lsls	r1, r3, #5
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	440b      	add	r3, r1
 8002c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	1ad2      	subs	r2, r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d114      	bne.n	8002cb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	f005 fa50 	bl	8008148 <USB_EP0_OutStart>
 8002ca8:	e006      	b.n	8002cb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f007 fd6c 	bl	800a79c <HAL_PCD_DataOutStageCallback>
 8002cc4:	e046      	b.n	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	4a26      	ldr	r2, [pc, #152]	@ (8002d64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d124      	bne.n	8002d18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cea:	6093      	str	r3, [r2, #8]
 8002cec:	e032      	b.n	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d04:	461a      	mov	r2, r3
 8002d06:	2320      	movs	r3, #32
 8002d08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f007 fd43 	bl	800a79c <HAL_PCD_DataOutStageCallback>
 8002d16:	e01d      	b.n	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d40:	461a      	mov	r2, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	f005 fa00 	bl	8008148 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f007 fd24 	bl	800a79c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	4f54300a 	.word	0x4f54300a
 8002d64:	4f54310a 	.word	0x4f54310a

08002d68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	333c      	adds	r3, #60	@ 0x3c
 8002d80:	3304      	adds	r3, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a15      	ldr	r2, [pc, #84]	@ (8002df0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d90e      	bls.n	8002dbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db4:	461a      	mov	r2, r3
 8002db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f007 fcdb 	bl	800a778 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d90c      	bls.n	8002de4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	799b      	ldrb	r3, [r3, #6]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d108      	bne.n	8002de4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2101      	movs	r1, #1
 8002de0:	f005 f9b2 	bl	8008148 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	4f54300a 	.word	0x4f54300a

08002df4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	70fb      	strb	r3, [r7, #3]
 8002e00:	4613      	mov	r3, r2
 8002e02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d107      	bne.n	8002e22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e12:	883b      	ldrh	r3, [r7, #0]
 8002e14:	0419      	lsls	r1, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e20:	e028      	b.n	8002e74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e00d      	b.n	8002e52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	3340      	adds	r3, #64	@ 0x40
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	4413      	add	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3ec      	bcc.n	8002e36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e5c:	883b      	ldrh	r3, [r7, #0]
 8002e5e:	0418      	lsls	r0, r3, #16
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	4302      	orrs	r2, r0
 8002e6c:	3340      	adds	r3, #64	@ 0x40
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	10000003 	.word	0x10000003

08002eec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f0c:	4b29      	ldr	r3, [pc, #164]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d00a      	beq.n	8002f2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f18:	4b26      	ldr	r3, [pc, #152]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e040      	b.n	8002fac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e03e      	b.n	8002fac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f2e:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002f36:	491f      	ldr	r1, [pc, #124]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f3e:	f7fe f97b 	bl	8001238 <HAL_GetTick>
 8002f42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f44:	e009      	b.n	8002f5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f46:	f7fe f977 	bl	8001238 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f54:	d901      	bls.n	8002f5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e028      	b.n	8002fac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f5a:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f66:	d1ee      	bne.n	8002f46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b1e      	cmp	r3, #30
 8002f6c:	d008      	beq.n	8002f80 <HAL_PWREx_ConfigSupply+0x7c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f72:	d005      	beq.n	8002f80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b1d      	cmp	r3, #29
 8002f78:	d002      	beq.n	8002f80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b2d      	cmp	r3, #45	@ 0x2d
 8002f7e:	d114      	bne.n	8002faa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f80:	f7fe f95a 	bl	8001238 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f86:	e009      	b.n	8002f9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f88:	f7fe f956 	bl	8001238 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f96:	d901      	bls.n	8002f9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e007      	b.n	8002fac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa8:	d1ee      	bne.n	8002f88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	58024800 	.word	0x58024800

08002fb8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc6:	60d3      	str	r3, [r2, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	58024800 	.word	0x58024800

08002fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	@ 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f000 bc48 	b.w	800387c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8088 	beq.w	800310a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffa:	4b99      	ldr	r3, [pc, #612]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003004:	4b96      	ldr	r3, [pc, #600]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	2b10      	cmp	r3, #16
 800300e:	d007      	beq.n	8003020 <HAL_RCC_OscConfig+0x48>
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	2b18      	cmp	r3, #24
 8003014:	d111      	bne.n	800303a <HAL_RCC_OscConfig+0x62>
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d10c      	bne.n	800303a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b8f      	ldr	r3, [pc, #572]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d06d      	beq.n	8003108 <HAL_RCC_OscConfig+0x130>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d169      	bne.n	8003108 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f000 bc21 	b.w	800387c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x7a>
 8003044:	4b86      	ldr	r3, [pc, #536]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a85      	ldr	r2, [pc, #532]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e02e      	b.n	80030b0 <HAL_RCC_OscConfig+0xd8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x9c>
 800305a:	4b81      	ldr	r3, [pc, #516]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a80      	ldr	r2, [pc, #512]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b7e      	ldr	r3, [pc, #504]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a7d      	ldr	r2, [pc, #500]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800306c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xd8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0xc0>
 800307e:	4b78      	ldr	r3, [pc, #480]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a77      	ldr	r2, [pc, #476]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b75      	ldr	r3, [pc, #468]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a74      	ldr	r2, [pc, #464]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xd8>
 8003098:	4b71      	ldr	r3, [pc, #452]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a70      	ldr	r2, [pc, #448]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b6e      	ldr	r3, [pc, #440]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6d      	ldr	r2, [pc, #436]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe f8be 	bl	8001238 <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe f8ba 	bl	8001238 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e3d4      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030d2:	4b63      	ldr	r3, [pc, #396]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe8>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe f8aa 	bl	8001238 <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe f8a6 	bl	8001238 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e3c0      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030fa:	4b59      	ldr	r3, [pc, #356]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x110>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80ca 	beq.w	80032ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003118:	4b51      	ldr	r3, [pc, #324]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003120:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003122:	4b4f      	ldr	r3, [pc, #316]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_RCC_OscConfig+0x166>
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2b18      	cmp	r3, #24
 8003132:	d156      	bne.n	80031e2 <HAL_RCC_OscConfig+0x20a>
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d151      	bne.n	80031e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313e:	4b48      	ldr	r3, [pc, #288]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x17e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e392      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003156:	4b42      	ldr	r3, [pc, #264]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 0219 	bic.w	r2, r3, #25
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	493f      	ldr	r1, [pc, #252]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003164:	4313      	orrs	r3, r2
 8003166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe f866 	bl	8001238 <HAL_GetTick>
 800316c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003170:	f7fe f862 	bl	8001238 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e37c      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003182:	4b37      	ldr	r3, [pc, #220]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	f7fe f883 	bl	8001298 <HAL_GetREVID>
 8003192:	4603      	mov	r3, r0
 8003194:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003198:	4293      	cmp	r3, r2
 800319a:	d817      	bhi.n	80031cc <HAL_RCC_OscConfig+0x1f4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d108      	bne.n	80031b6 <HAL_RCC_OscConfig+0x1de>
 80031a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80031ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80031ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b4:	e07a      	b.n	80032ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	031b      	lsls	r3, r3, #12
 80031c4:	4926      	ldr	r1, [pc, #152]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ca:	e06f      	b.n	80032ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b24      	ldr	r3, [pc, #144]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	4921      	ldr	r1, [pc, #132]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e0:	e064      	b.n	80032ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d047      	beq.n	800327a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0219 	bic.w	r2, r3, #25
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	491a      	ldr	r1, [pc, #104]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe f81c 	bl	8001238 <HAL_GetTick>
 8003200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003204:	f7fe f818 	bl	8001238 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e332      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003216:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	f7fe f839 	bl	8001298 <HAL_GetREVID>
 8003226:	4603      	mov	r3, r0
 8003228:	f241 0203 	movw	r2, #4099	@ 0x1003
 800322c:	4293      	cmp	r3, r2
 800322e:	d819      	bhi.n	8003264 <HAL_RCC_OscConfig+0x28c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b40      	cmp	r3, #64	@ 0x40
 8003236:	d108      	bne.n	800324a <HAL_RCC_OscConfig+0x272>
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003240:	4a07      	ldr	r2, [pc, #28]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003246:	6053      	str	r3, [r2, #4]
 8003248:	e030      	b.n	80032ac <HAL_RCC_OscConfig+0x2d4>
 800324a:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	031b      	lsls	r3, r3, #12
 8003258:	4901      	ldr	r1, [pc, #4]	@ (8003260 <HAL_RCC_OscConfig+0x288>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
 800325e:	e025      	b.n	80032ac <HAL_RCC_OscConfig+0x2d4>
 8003260:	58024400 	.word	0x58024400
 8003264:	4b9a      	ldr	r3, [pc, #616]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	4997      	ldr	r1, [pc, #604]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	e018      	b.n	80032ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327a:	4b95      	ldr	r3, [pc, #596]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a94      	ldr	r2, [pc, #592]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fd ffd7 	bl	8001238 <HAL_GetTick>
 800328a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328e:	f7fd ffd3 	bl	8001238 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e2ed      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032a0:	4b8b      	ldr	r3, [pc, #556]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a9 	beq.w	800340c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ba:	4b85      	ldr	r3, [pc, #532]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032c4:	4b82      	ldr	r3, [pc, #520]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d007      	beq.n	80032e0 <HAL_RCC_OscConfig+0x308>
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b18      	cmp	r3, #24
 80032d4:	d13a      	bne.n	800334c <HAL_RCC_OscConfig+0x374>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d135      	bne.n	800334c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032e0:	4b7b      	ldr	r3, [pc, #492]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x320>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b80      	cmp	r3, #128	@ 0x80
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e2c1      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032f8:	f7fd ffce 	bl	8001298 <HAL_GetREVID>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003302:	4293      	cmp	r3, r2
 8003304:	d817      	bhi.n	8003336 <HAL_RCC_OscConfig+0x35e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	2b20      	cmp	r3, #32
 800330c:	d108      	bne.n	8003320 <HAL_RCC_OscConfig+0x348>
 800330e:	4b70      	ldr	r3, [pc, #448]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003316:	4a6e      	ldr	r2, [pc, #440]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800331c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800331e:	e075      	b.n	800340c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003320:	4b6b      	ldr	r3, [pc, #428]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	069b      	lsls	r3, r3, #26
 800332e:	4968      	ldr	r1, [pc, #416]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003334:	e06a      	b.n	800340c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003336:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	061b      	lsls	r3, r3, #24
 8003344:	4962      	ldr	r1, [pc, #392]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800334a:	e05f      	b.n	800340c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d042      	beq.n	80033da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003354:	4b5e      	ldr	r3, [pc, #376]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5d      	ldr	r2, [pc, #372]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 800335a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800335e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd ff6a 	bl	8001238 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003368:	f7fd ff66 	bl	8001238 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e280      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800337a:	4b55      	ldr	r3, [pc, #340]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003386:	f7fd ff87 	bl	8001298 <HAL_GetREVID>
 800338a:	4603      	mov	r3, r0
 800338c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003390:	4293      	cmp	r3, r2
 8003392:	d817      	bhi.n	80033c4 <HAL_RCC_OscConfig+0x3ec>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	2b20      	cmp	r3, #32
 800339a:	d108      	bne.n	80033ae <HAL_RCC_OscConfig+0x3d6>
 800339c:	4b4c      	ldr	r3, [pc, #304]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80033a4:	4a4a      	ldr	r2, [pc, #296]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80033a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033aa:	6053      	str	r3, [r2, #4]
 80033ac:	e02e      	b.n	800340c <HAL_RCC_OscConfig+0x434>
 80033ae:	4b48      	ldr	r3, [pc, #288]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	069b      	lsls	r3, r3, #26
 80033bc:	4944      	ldr	r1, [pc, #272]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
 80033c2:	e023      	b.n	800340c <HAL_RCC_OscConfig+0x434>
 80033c4:	4b42      	ldr	r3, [pc, #264]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	493f      	ldr	r1, [pc, #252]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
 80033d8:	e018      	b.n	800340c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033da:	4b3d      	ldr	r3, [pc, #244]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3c      	ldr	r2, [pc, #240]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80033e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fd ff27 	bl	8001238 <HAL_GetTick>
 80033ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033ee:	f7fd ff23 	bl	8001238 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e23d      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003400:	4b33      	ldr	r3, [pc, #204]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d036      	beq.n	8003486 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d019      	beq.n	8003454 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003420:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003424:	4a2a      	ldr	r2, [pc, #168]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fd ff04 	bl	8001238 <HAL_GetTick>
 8003430:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fd ff00 	bl	8001238 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e21a      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003446:	4b22      	ldr	r3, [pc, #136]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x45c>
 8003452:	e018      	b.n	8003486 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003454:	4b1e      	ldr	r3, [pc, #120]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 8003456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003458:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fd feea 	bl	8001238 <HAL_GetTick>
 8003464:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7fd fee6 	bl	8001238 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e200      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 800347c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d039      	beq.n	8003506 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800349a:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a0c      	ldr	r2, [pc, #48]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80034a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034a6:	f7fd fec7 	bl	8001238 <HAL_GetTick>
 80034aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ae:	f7fd fec3 	bl	8001238 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e1dd      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034c0:	4b03      	ldr	r3, [pc, #12]	@ (80034d0 <HAL_RCC_OscConfig+0x4f8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x4d6>
 80034cc:	e01b      	b.n	8003506 <HAL_RCC_OscConfig+0x52e>
 80034ce:	bf00      	nop
 80034d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034d4:	4b9b      	ldr	r3, [pc, #620]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a9a      	ldr	r2, [pc, #616]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80034da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034e0:	f7fd feaa 	bl	8001238 <HAL_GetTick>
 80034e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e8:	f7fd fea6 	bl	8001238 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1c0      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034fa:	4b92      	ldr	r3, [pc, #584]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8081 	beq.w	8003616 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003514:	4b8c      	ldr	r3, [pc, #560]	@ (8003748 <HAL_RCC_OscConfig+0x770>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a8b      	ldr	r2, [pc, #556]	@ (8003748 <HAL_RCC_OscConfig+0x770>)
 800351a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800351e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003520:	f7fd fe8a 	bl	8001238 <HAL_GetTick>
 8003524:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003528:	f7fd fe86 	bl	8001238 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	@ 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e1a0      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800353a:	4b83      	ldr	r3, [pc, #524]	@ (8003748 <HAL_RCC_OscConfig+0x770>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x584>
 800354e:	4b7d      	ldr	r3, [pc, #500]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	4a7c      	ldr	r2, [pc, #496]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	@ 0x70
 800355a:	e02d      	b.n	80035b8 <HAL_RCC_OscConfig+0x5e0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10c      	bne.n	800357e <HAL_RCC_OscConfig+0x5a6>
 8003564:	4b77      	ldr	r3, [pc, #476]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003568:	4a76      	ldr	r2, [pc, #472]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003570:	4b74      	ldr	r3, [pc, #464]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003574:	4a73      	ldr	r2, [pc, #460]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	@ 0x70
 800357c:	e01c      	b.n	80035b8 <HAL_RCC_OscConfig+0x5e0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b05      	cmp	r3, #5
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c8>
 8003586:	4b6f      	ldr	r3, [pc, #444]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358a:	4a6e      	ldr	r2, [pc, #440]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	6713      	str	r3, [r2, #112]	@ 0x70
 8003592:	4b6c      	ldr	r3, [pc, #432]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003596:	4a6b      	ldr	r2, [pc, #428]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6713      	str	r3, [r2, #112]	@ 0x70
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0x5e0>
 80035a0:	4b68      	ldr	r3, [pc, #416]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a4:	4a67      	ldr	r2, [pc, #412]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ac:	4b65      	ldr	r3, [pc, #404]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b0:	4a64      	ldr	r2, [pc, #400]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80035b2:	f023 0304 	bic.w	r3, r3, #4
 80035b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d015      	beq.n	80035ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fd fe3a 	bl	8001238 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035c6:	e00a      	b.n	80035de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fd fe36 	bl	8001238 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e14e      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035de:	4b59      	ldr	r3, [pc, #356]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ee      	beq.n	80035c8 <HAL_RCC_OscConfig+0x5f0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fd fe24 	bl	8001238 <HAL_GetTick>
 80035f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fd fe20 	bl	8001238 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e138      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800360a:	4b4e      	ldr	r3, [pc, #312]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ee      	bne.n	80035f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 812d 	beq.w	800387a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003620:	4b48      	ldr	r3, [pc, #288]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003628:	2b18      	cmp	r3, #24
 800362a:	f000 80bd 	beq.w	80037a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	2b02      	cmp	r3, #2
 8003634:	f040 809e 	bne.w	8003774 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b42      	ldr	r3, [pc, #264]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a41      	ldr	r2, [pc, #260]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd fdf8 	bl	8001238 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fdf4 	bl	8001238 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e10e      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800365e:	4b39      	ldr	r3, [pc, #228]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366a:	4b36      	ldr	r3, [pc, #216]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800366c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800366e:	4b37      	ldr	r3, [pc, #220]	@ (800374c <HAL_RCC_OscConfig+0x774>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	430a      	orrs	r2, r1
 800367e:	4931      	ldr	r1, [pc, #196]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	628b      	str	r3, [r1, #40]	@ 0x28
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	3b01      	subs	r3, #1
 800368a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003692:	3b01      	subs	r3, #1
 8003694:	025b      	lsls	r3, r3, #9
 8003696:	b29b      	uxth	r3, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ac:	3b01      	subs	r3, #1
 80036ae:	061b      	lsls	r3, r3, #24
 80036b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036b4:	4923      	ldr	r1, [pc, #140]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036ba:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	4a21      	ldr	r2, [pc, #132]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ca:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <HAL_RCC_OscConfig+0x778>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036d2:	00d2      	lsls	r2, r2, #3
 80036d4:	491b      	ldr	r1, [pc, #108]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036da:	4b1a      	ldr	r3, [pc, #104]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	f023 020c 	bic.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	4917      	ldr	r1, [pc, #92]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036ec:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f0:	f023 0202 	bic.w	r2, r3, #2
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f8:	4912      	ldr	r1, [pc, #72]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036fe:	4b11      	ldr	r3, [pc, #68]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	4a10      	ldr	r2, [pc, #64]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370a:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370e:	4a0d      	ldr	r2, [pc, #52]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	4a0a      	ldr	r2, [pc, #40]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003720:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	4a07      	ldr	r2, [pc, #28]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372e:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <HAL_RCC_OscConfig+0x76c>)
 8003734:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd fd7d 	bl	8001238 <HAL_GetTick>
 800373e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003740:	e011      	b.n	8003766 <HAL_RCC_OscConfig+0x78e>
 8003742:	bf00      	nop
 8003744:	58024400 	.word	0x58024400
 8003748:	58024800 	.word	0x58024800
 800374c:	fffffc0c 	.word	0xfffffc0c
 8003750:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003754:	f7fd fd70 	bl	8001238 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e08a      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x77c>
 8003772:	e082      	b.n	800387a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a42      	ldr	r2, [pc, #264]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 800377a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fd fd5a 	bl	8001238 <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fd fd56 	bl	8001238 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e070      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800379a:	4b3a      	ldr	r3, [pc, #232]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x7b0>
 80037a6:	e068      	b.n	800387a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037a8:	4b36      	ldr	r3, [pc, #216]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037ae:	4b35      	ldr	r3, [pc, #212]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d031      	beq.n	8003820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d12a      	bne.n	8003820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d122      	bne.n	8003820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d11a      	bne.n	8003820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0a5b      	lsrs	r3, r3, #9
 80037ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d111      	bne.n	8003820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d108      	bne.n	8003820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	0e1b      	lsrs	r3, r3, #24
 8003812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e02b      	b.n	800387c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003824:	4b17      	ldr	r3, [pc, #92]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800382e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	429a      	cmp	r2, r3
 8003838:	d01f      	beq.n	800387a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800383a:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	4a11      	ldr	r2, [pc, #68]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003846:	f7fd fcf7 	bl	8001238 <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800384c:	bf00      	nop
 800384e:	f7fd fcf3 	bl	8001238 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	4293      	cmp	r3, r2
 8003858:	d0f9      	beq.n	800384e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800385a:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 800385c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_RCC_OscConfig+0x8b0>)
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003866:	00d2      	lsls	r2, r2, #3
 8003868:	4906      	ldr	r1, [pc, #24]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 800386a:	4313      	orrs	r3, r2
 800386c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 8003870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003872:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <HAL_RCC_OscConfig+0x8ac>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3730      	adds	r7, #48	@ 0x30
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	58024400 	.word	0x58024400
 8003888:	ffff0007 	.word	0xffff0007

0800388c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e19c      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b8a      	ldr	r3, [pc, #552]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d910      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b87      	ldr	r3, [pc, #540]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 020f 	bic.w	r2, r3, #15
 80038b6:	4985      	ldr	r1, [pc, #532]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b83      	ldr	r3, [pc, #524]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e184      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d908      	bls.n	80038fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038ec:	4b78      	ldr	r3, [pc, #480]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	4975      	ldr	r1, [pc, #468]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	4b70      	ldr	r3, [pc, #448]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003916:	429a      	cmp	r2, r3
 8003918:	d908      	bls.n	800392c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800391a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	496a      	ldr	r1, [pc, #424]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003928:	4313      	orrs	r3, r2
 800392a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d010      	beq.n	800395a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	4b64      	ldr	r3, [pc, #400]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003944:	429a      	cmp	r2, r3
 8003946:	d908      	bls.n	800395a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003948:	4b61      	ldr	r3, [pc, #388]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	495e      	ldr	r1, [pc, #376]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003956:	4313      	orrs	r3, r2
 8003958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	4b59      	ldr	r3, [pc, #356]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003972:	429a      	cmp	r2, r3
 8003974:	d908      	bls.n	8003988 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003976:	4b56      	ldr	r3, [pc, #344]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4953      	ldr	r1, [pc, #332]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003984:	4313      	orrs	r3, r2
 8003986:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d010      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d908      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f023 020f 	bic.w	r2, r3, #15
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4947      	ldr	r1, [pc, #284]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d055      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039c2:	4b43      	ldr	r3, [pc, #268]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4940      	ldr	r1, [pc, #256]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d107      	bne.n	80039ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039dc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d121      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0f6      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039f4:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d115      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0ea      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0de      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d6      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a2c:	4b28      	ldr	r3, [pc, #160]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f023 0207 	bic.w	r2, r3, #7
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4925      	ldr	r1, [pc, #148]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fbfb 	bl	8001238 <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a46:	f7fd fbf7 	bl	8001238 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e0be      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d1eb      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d208      	bcs.n	8003a9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f023 020f 	bic.w	r2, r3, #15
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	490e      	ldr	r1, [pc, #56]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d214      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 020f 	bic.w	r2, r3, #15
 8003ab2:	4906      	ldr	r1, [pc, #24]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e086      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
 8003acc:	52002000 	.word	0x52002000
 8003ad0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d208      	bcs.n	8003b02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003af0:	4b3c      	ldr	r3, [pc, #240]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	4939      	ldr	r1, [pc, #228]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	4b34      	ldr	r3, [pc, #208]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d208      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b1e:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	492e      	ldr	r1, [pc, #184]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d010      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d208      	bcs.n	8003b5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b4c:	4b25      	ldr	r3, [pc, #148]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4922      	ldr	r1, [pc, #136]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d010      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d208      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4917      	ldr	r1, [pc, #92]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b8c:	f000 f834 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b14      	ldr	r3, [pc, #80]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	4912      	ldr	r1, [pc, #72]	@ (8003be8 <HAL_RCC_ClockConfig+0x35c>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003baa:	4b0e      	ldr	r3, [pc, #56]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <HAL_RCC_ClockConfig+0x35c>)
 8003bb4:	5cd3      	ldrb	r3, [r2, r3]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <HAL_RCC_ClockConfig+0x360>)
 8003bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <HAL_RCC_ClockConfig+0x364>)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bca:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <HAL_RCC_ClockConfig+0x368>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fae8 	bl	80011a4 <HAL_InitTick>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	58024400 	.word	0x58024400
 8003be8:	0800b6c0 	.word	0x0800b6c0
 8003bec:	24000004 	.word	0x24000004
 8003bf0:	24000000 	.word	0x24000000
 8003bf4:	24000024 	.word	0x24000024

08003bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	@ 0x24
 8003bfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bfe:	4bb3      	ldr	r3, [pc, #716]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c06:	2b18      	cmp	r3, #24
 8003c08:	f200 8155 	bhi.w	8003eb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003eb7 	.word	0x08003eb7
 8003c1c:	08003eb7 	.word	0x08003eb7
 8003c20:	08003eb7 	.word	0x08003eb7
 8003c24:	08003eb7 	.word	0x08003eb7
 8003c28:	08003eb7 	.word	0x08003eb7
 8003c2c:	08003eb7 	.word	0x08003eb7
 8003c30:	08003eb7 	.word	0x08003eb7
 8003c34:	08003c9f 	.word	0x08003c9f
 8003c38:	08003eb7 	.word	0x08003eb7
 8003c3c:	08003eb7 	.word	0x08003eb7
 8003c40:	08003eb7 	.word	0x08003eb7
 8003c44:	08003eb7 	.word	0x08003eb7
 8003c48:	08003eb7 	.word	0x08003eb7
 8003c4c:	08003eb7 	.word	0x08003eb7
 8003c50:	08003eb7 	.word	0x08003eb7
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003eb7 	.word	0x08003eb7
 8003c5c:	08003eb7 	.word	0x08003eb7
 8003c60:	08003eb7 	.word	0x08003eb7
 8003c64:	08003eb7 	.word	0x08003eb7
 8003c68:	08003eb7 	.word	0x08003eb7
 8003c6c:	08003eb7 	.word	0x08003eb7
 8003c70:	08003eb7 	.word	0x08003eb7
 8003c74:	08003cab 	.word	0x08003cab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c78:	4b94      	ldr	r3, [pc, #592]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c84:	4b91      	ldr	r3, [pc, #580]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	4a90      	ldr	r2, [pc, #576]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c96:	e111      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c98:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c9a:	61bb      	str	r3, [r7, #24]
      break;
 8003c9c:	e10e      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ca0:	61bb      	str	r3, [r7, #24]
      break;
 8003ca2:	e10b      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ca6:	61bb      	str	r3, [r7, #24]
      break;
 8003ca8:	e108      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003caa:	4b88      	ldr	r3, [pc, #544]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cb4:	4b85      	ldr	r3, [pc, #532]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003cc0:	4b82      	ldr	r3, [pc, #520]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003cca:	4b80      	ldr	r3, [pc, #512]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cce:	08db      	lsrs	r3, r3, #3
 8003cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80e1 	beq.w	8003eb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	f000 8083 	beq.w	8003dfc <HAL_RCC_GetSysClockFreq+0x204>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	f200 80a1 	bhi.w	8003e40 <HAL_RCC_GetSysClockFreq+0x248>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x114>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d056      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d0a:	e099      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d02d      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d18:	4b6c      	ldr	r3, [pc, #432]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	08db      	lsrs	r3, r3, #3
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	4a6b      	ldr	r2, [pc, #428]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d42:	4b62      	ldr	r3, [pc, #392]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d72:	e087      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003ee0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b51      	ldr	r3, [pc, #324]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003db6:	e065      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	4b40      	ldr	r3, [pc, #256]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dfa:	e043      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ee8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e3e:	e021      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e84:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	0a5b      	lsrs	r3, r3, #9
 8003e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e8e:	3301      	adds	r3, #1
 8003e90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea8:	ee17 3a90 	vmov	r3, s15
 8003eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003eae:	e005      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
      break;
 8003eb4:	e002      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003eb6:	4b07      	ldr	r3, [pc, #28]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003eb8:	61bb      	str	r3, [r7, #24]
      break;
 8003eba:	bf00      	nop
  }

  return sysclockfreq;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3724      	adds	r7, #36	@ 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	03d09000 	.word	0x03d09000
 8003ed4:	003d0900 	.word	0x003d0900
 8003ed8:	017d7840 	.word	0x017d7840
 8003edc:	46000000 	.word	0x46000000
 8003ee0:	4c742400 	.word	0x4c742400
 8003ee4:	4a742400 	.word	0x4a742400
 8003ee8:	4bbebc20 	.word	0x4bbebc20

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ef2:	f7ff fe81 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	490f      	ldr	r1, [pc, #60]	@ (8003f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f04:	5ccb      	ldrb	r3, [r1, r3]
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f10:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	4a09      	ldr	r2, [pc, #36]	@ (8003f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	fa22 f303 	lsr.w	r3, r2, r3
 8003f26:	4a07      	ldr	r2, [pc, #28]	@ (8003f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f2a:	4a07      	ldr	r2, [pc, #28]	@ (8003f48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f30:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	0800b6c0 	.word	0x0800b6c0
 8003f44:	24000004 	.word	0x24000004
 8003f48:	24000000 	.word	0x24000000

08003f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f50:	f7ff ffcc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4904      	ldr	r1, [pc, #16]	@ (8003f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	58024400 	.word	0x58024400
 8003f74:	0800b6c0 	.word	0x0800b6c0

08003f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f7c:	f7ff ffb6 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4904      	ldr	r1, [pc, #16]	@ (8003fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	0800b6c0 	.word	0x0800b6c0

08003fa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b0ca      	sub	sp, #296	@ 0x128
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003fc8:	2500      	movs	r5, #0
 8003fca:	ea54 0305 	orrs.w	r3, r4, r5
 8003fce:	d049      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fda:	d02f      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003fdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fe0:	d828      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003fe2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fe6:	d01a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fec:	d822      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff6:	d007      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ff8:	e01c      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffa:	4bb8      	ldr	r3, [pc, #736]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	4ab7      	ldr	r2, [pc, #732]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004004:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004006:	e01a      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	3308      	adds	r3, #8
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fc8f 	bl	8005934 <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800401c:	e00f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	3328      	adds	r3, #40	@ 0x28
 8004024:	2102      	movs	r1, #2
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fd36 	bl	8005a98 <RCCEx_PLL3_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004032:	e004      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800403c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004046:	4ba5      	ldr	r3, [pc, #660]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004052:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004054:	4aa1      	ldr	r2, [pc, #644]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004056:	430b      	orrs	r3, r1
 8004058:	6513      	str	r3, [r2, #80]	@ 0x50
 800405a:	e003      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004070:	f04f 0900 	mov.w	r9, #0
 8004074:	ea58 0309 	orrs.w	r3, r8, r9
 8004078:	d047      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	2b04      	cmp	r3, #4
 8004082:	d82a      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004084:	a201      	add	r2, pc, #4	@ (adr r2, 800408c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040a1 	.word	0x080040a1
 8004090:	080040af 	.word	0x080040af
 8004094:	080040c5 	.word	0x080040c5
 8004098:	080040e3 	.word	0x080040e3
 800409c:	080040e3 	.word	0x080040e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a0:	4b8e      	ldr	r3, [pc, #568]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	4a8d      	ldr	r2, [pc, #564]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ac:	e01a      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	3308      	adds	r3, #8
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fc3c 	bl	8005934 <RCCEx_PLL2_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040c2:	e00f      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	3328      	adds	r3, #40	@ 0x28
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fce3 	bl	8005a98 <RCCEx_PLL3_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040d8:	e004      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80040e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ec:	4b7b      	ldr	r3, [pc, #492]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f0:	f023 0107 	bic.w	r1, r3, #7
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fa:	4a78      	ldr	r2, [pc, #480]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004116:	f04f 0b00 	mov.w	fp, #0
 800411a:	ea5a 030b 	orrs.w	r3, sl, fp
 800411e:	d04c      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412a:	d030      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800412c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004130:	d829      	bhi.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004132:	2bc0      	cmp	r3, #192	@ 0xc0
 8004134:	d02d      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004136:	2bc0      	cmp	r3, #192	@ 0xc0
 8004138:	d825      	bhi.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800413a:	2b80      	cmp	r3, #128	@ 0x80
 800413c:	d018      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800413e:	2b80      	cmp	r3, #128	@ 0x80
 8004140:	d821      	bhi.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	d007      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800414a:	e01c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414c:	4b63      	ldr	r3, [pc, #396]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	4a62      	ldr	r2, [pc, #392]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004158:	e01c      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	3308      	adds	r3, #8
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f001 fbe6 	bl	8005934 <RCCEx_PLL2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800416e:	e011      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004174:	3328      	adds	r3, #40	@ 0x28
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fc8d 	bl	8005a98 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004184:	e006      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800418c:	e002      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800419c:	4b4f      	ldr	r3, [pc, #316]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800419e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041aa:	4a4c      	ldr	r2, [pc, #304]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80041c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80041d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d053      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041e6:	d035      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80041e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041ec:	d82e      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80041f2:	d031      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80041f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80041f8:	d828      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041fe:	d01a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004204:	d822      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800420a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800420e:	d007      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004210:	e01c      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004212:	4b32      	ldr	r3, [pc, #200]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	4a31      	ldr	r2, [pc, #196]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800421c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800421e:	e01c      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	3308      	adds	r3, #8
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f001 fb83 	bl	8005934 <RCCEx_PLL2_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004234:	e011      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	3328      	adds	r3, #40	@ 0x28
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fc2a 	bl	8005a98 <RCCEx_PLL3_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800424a:	e006      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004252:	e002      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004262:	4b1e      	ldr	r3, [pc, #120]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004266:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004272:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004274:	430b      	orrs	r3, r1
 8004276:	6593      	str	r3, [r2, #88]	@ 0x58
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800428e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004292:	2300      	movs	r3, #0
 8004294:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004298:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800429c:	460b      	mov	r3, r1
 800429e:	4313      	orrs	r3, r2
 80042a0:	d056      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ae:	d038      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80042b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042b4:	d831      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042ba:	d034      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80042bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042c0:	d82b      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042c6:	d01d      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80042c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042cc:	d825      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d006      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80042d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80042d8:	e01f      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e0:	4ba2      	ldr	r3, [pc, #648]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	4aa1      	ldr	r2, [pc, #644]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042ec:	e01c      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	3308      	adds	r3, #8
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 fb1c 	bl	8005934 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004302:	e011      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004308:	3328      	adds	r3, #40	@ 0x28
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f001 fbc3 	bl	8005a98 <RCCEx_PLL3_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004330:	4b8e      	ldr	r3, [pc, #568]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004340:	4a8a      	ldr	r2, [pc, #552]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004342:	430b      	orrs	r3, r1
 8004344:	6593      	str	r3, [r2, #88]	@ 0x58
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800435c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004366:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d03a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004376:	2b30      	cmp	r3, #48	@ 0x30
 8004378:	d01f      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800437a:	2b30      	cmp	r3, #48	@ 0x30
 800437c:	d819      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800437e:	2b20      	cmp	r3, #32
 8004380:	d00c      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004382:	2b20      	cmp	r3, #32
 8004384:	d815      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d019      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800438a:	2b10      	cmp	r3, #16
 800438c:	d111      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438e:	4b77      	ldr	r3, [pc, #476]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	4a76      	ldr	r2, [pc, #472]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004398:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800439a:	e011      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a0:	3308      	adds	r3, #8
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fac5 	bl	8005934 <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043c8:	4b68      	ldr	r3, [pc, #416]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d6:	4a65      	ldr	r2, [pc, #404]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d8:	430b      	orrs	r3, r1
 80043da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043dc:	e003      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80043f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80043fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d051      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004410:	d035      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004416:	d82e      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004418:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800441c:	d031      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800441e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004422:	d828      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004428:	d01a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442e:	d822      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004438:	d007      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800443a:	e01c      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443c:	4b4b      	ldr	r3, [pc, #300]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004440:	4a4a      	ldr	r2, [pc, #296]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004448:	e01c      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	3308      	adds	r3, #8
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f001 fa6e 	bl	8005934 <RCCEx_PLL2_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800445e:	e011      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004464:	3328      	adds	r3, #40	@ 0x28
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f001 fb15 	bl	8005a98 <RCCEx_PLL3_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004474:	e006      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800447c:	e002      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800448c:	4b37      	ldr	r3, [pc, #220]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449a:	4a34      	ldr	r2, [pc, #208]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800449c:	430b      	orrs	r3, r1
 800449e:	6513      	str	r3, [r2, #80]	@ 0x50
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80044b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80044c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80044c4:	460b      	mov	r3, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	d056      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80044ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d4:	d033      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80044d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044da:	d82c      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044e0:	d02f      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80044e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044e6:	d826      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044ec:	d02b      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80044ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044f2:	d820      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044f8:	d012      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80044fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044fe:	d81a      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d022      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	d115      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	3308      	adds	r3, #8
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f001 fa0e 	bl	8005934 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800451e:	e015      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	3328      	adds	r3, #40	@ 0x28
 8004526:	2101      	movs	r1, #1
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fab5 	bl	8005a98 <RCCEx_PLL3_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800453e:	bf00      	nop
 8004540:	e004      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800454a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004554:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004558:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004562:	4a02      	ldr	r2, [pc, #8]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6513      	str	r3, [r2, #80]	@ 0x50
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800456a:	bf00      	nop
 800456c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004588:	2300      	movs	r3, #0
 800458a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800458e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d055      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a4:	d033      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80045a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045aa:	d82c      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b0:	d02f      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80045b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b6:	d826      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045bc:	d02b      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80045be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045c2:	d820      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c8:	d012      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80045ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045ce:	d81a      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d022      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80045d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d8:	d115      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	3308      	adds	r3, #8
 80045e0:	2101      	movs	r1, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 f9a6 	bl	8005934 <RCCEx_PLL2_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045ee:	e015      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	3328      	adds	r3, #40	@ 0x28
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 fa4d 	bl	8005a98 <RCCEx_PLL3_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004604:	e00a      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800460e:	bf00      	nop
 8004610:	e004      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800461a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800461c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004624:	4ba3      	ldr	r3, [pc, #652]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004628:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004630:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004634:	4a9f      	ldr	r2, [pc, #636]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004636:	430b      	orrs	r3, r1
 8004638:	6593      	str	r3, [r2, #88]	@ 0x58
 800463a:	e003      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800465a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d037      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800466e:	d00e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004674:	d816      	bhi.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800467a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800467e:	d111      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004680:	4b8c      	ldr	r3, [pc, #560]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	4a8b      	ldr	r2, [pc, #556]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800468a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800468c:	e00f      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	3308      	adds	r3, #8
 8004694:	2101      	movs	r1, #1
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f94c 	bl	8005934 <RCCEx_PLL2_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80046ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046b6:	4b7f      	ldr	r3, [pc, #508]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	4a7b      	ldr	r2, [pc, #492]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80046ca:	e003      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80046e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80046ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	d039      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d81c      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004741 	.word	0x08004741
 8004708:	08004715 	.word	0x08004715
 800470c:	08004723 	.word	0x08004723
 8004710:	08004741 	.word	0x08004741
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004714:	4b67      	ldr	r3, [pc, #412]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	4a66      	ldr	r2, [pc, #408]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800471a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004720:	e00f      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	3308      	adds	r3, #8
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f001 f902 	bl	8005934 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004736:	e004      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800474a:	4b5a      	ldr	r3, [pc, #360]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800474c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474e:	f023 0103 	bic.w	r1, r3, #3
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004758:	4a56      	ldr	r2, [pc, #344]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800475a:	430b      	orrs	r3, r1
 800475c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004774:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800477e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	f000 809f 	beq.w	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800478a:	4b4b      	ldr	r3, [pc, #300]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a4a      	ldr	r2, [pc, #296]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004794:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004796:	f7fc fd4f 	bl	8001238 <HAL_GetTick>
 800479a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800479e:	e00b      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a0:	f7fc fd4a 	bl	8001238 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b64      	cmp	r3, #100	@ 0x64
 80047ae:	d903      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b8:	4b3f      	ldr	r3, [pc, #252]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ed      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80047c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d179      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047cc:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047d8:	4053      	eors	r3, r2
 80047da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d015      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e2:	4b34      	ldr	r3, [pc, #208]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047ee:	4b31      	ldr	r3, [pc, #196]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	4a30      	ldr	r2, [pc, #192]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047fa:	4b2e      	ldr	r3, [pc, #184]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	4a2d      	ldr	r2, [pc, #180]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004804:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004806:	4a2b      	ldr	r2, [pc, #172]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004808:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800480c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800480e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004812:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481a:	d118      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fc fd0c 	bl	8001238 <HAL_GetTick>
 8004820:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004824:	e00d      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fc fd07 	bl	8001238 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004830:	1ad2      	subs	r2, r2, r3
 8004832:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004836:	429a      	cmp	r2, r3
 8004838:	d903      	bls.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004840:	e005      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004842:	4b1c      	ldr	r3, [pc, #112]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0eb      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800484e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004852:	2b00      	cmp	r3, #0
 8004854:	d129      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800485e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004866:	d10e      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004868:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004878:	091a      	lsrs	r2, r3, #4
 800487a:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800487c:	4013      	ands	r3, r2
 800487e:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004880:	430b      	orrs	r3, r1
 8004882:	6113      	str	r3, [r2, #16]
 8004884:	e005      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004886:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	4a0a      	ldr	r2, [pc, #40]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800488c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004890:	6113      	str	r3, [r2, #16]
 8004892:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004894:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800489e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a2:	4a04      	ldr	r2, [pc, #16]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a8:	e00e      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80048b2:	e009      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80048b4:	58024400 	.word	0x58024400
 80048b8:	58024800 	.word	0x58024800
 80048bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f002 0301 	and.w	r3, r2, #1
 80048d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048d8:	2300      	movs	r3, #0
 80048da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f000 8089 	beq.w	80049fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048f0:	2b28      	cmp	r3, #40	@ 0x28
 80048f2:	d86b      	bhi.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80048f4:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	080049d5 	.word	0x080049d5
 8004900:	080049cd 	.word	0x080049cd
 8004904:	080049cd 	.word	0x080049cd
 8004908:	080049cd 	.word	0x080049cd
 800490c:	080049cd 	.word	0x080049cd
 8004910:	080049cd 	.word	0x080049cd
 8004914:	080049cd 	.word	0x080049cd
 8004918:	080049cd 	.word	0x080049cd
 800491c:	080049a1 	.word	0x080049a1
 8004920:	080049cd 	.word	0x080049cd
 8004924:	080049cd 	.word	0x080049cd
 8004928:	080049cd 	.word	0x080049cd
 800492c:	080049cd 	.word	0x080049cd
 8004930:	080049cd 	.word	0x080049cd
 8004934:	080049cd 	.word	0x080049cd
 8004938:	080049cd 	.word	0x080049cd
 800493c:	080049b7 	.word	0x080049b7
 8004940:	080049cd 	.word	0x080049cd
 8004944:	080049cd 	.word	0x080049cd
 8004948:	080049cd 	.word	0x080049cd
 800494c:	080049cd 	.word	0x080049cd
 8004950:	080049cd 	.word	0x080049cd
 8004954:	080049cd 	.word	0x080049cd
 8004958:	080049cd 	.word	0x080049cd
 800495c:	080049d5 	.word	0x080049d5
 8004960:	080049cd 	.word	0x080049cd
 8004964:	080049cd 	.word	0x080049cd
 8004968:	080049cd 	.word	0x080049cd
 800496c:	080049cd 	.word	0x080049cd
 8004970:	080049cd 	.word	0x080049cd
 8004974:	080049cd 	.word	0x080049cd
 8004978:	080049cd 	.word	0x080049cd
 800497c:	080049d5 	.word	0x080049d5
 8004980:	080049cd 	.word	0x080049cd
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049cd 	.word	0x080049cd
 800498c:	080049cd 	.word	0x080049cd
 8004990:	080049cd 	.word	0x080049cd
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049cd 	.word	0x080049cd
 800499c:	080049d5 	.word	0x080049d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a4:	3308      	adds	r3, #8
 80049a6:	2101      	movs	r1, #1
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 ffc3 	bl	8005934 <RCCEx_PLL2_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049b4:	e00f      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ba:	3328      	adds	r3, #40	@ 0x28
 80049bc:	2101      	movs	r1, #1
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 f86a 	bl	8005a98 <RCCEx_PLL3_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049ca:	e004      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80049d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049de:	4bbf      	ldr	r3, [pc, #764]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ec:	4abb      	ldr	r2, [pc, #748]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049ee:	430b      	orrs	r3, r1
 80049f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80049f2:	e003      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f002 0302 	and.w	r3, r2, #2
 8004a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d041      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a22:	2b05      	cmp	r3, #5
 8004a24:	d824      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004a26:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a79 	.word	0x08004a79
 8004a30:	08004a45 	.word	0x08004a45
 8004a34:	08004a5b 	.word	0x08004a5b
 8004a38:	08004a79 	.word	0x08004a79
 8004a3c:	08004a79 	.word	0x08004a79
 8004a40:	08004a79 	.word	0x08004a79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a48:	3308      	adds	r3, #8
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 ff71 	bl	8005934 <RCCEx_PLL2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a58:	e00f      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	3328      	adds	r3, #40	@ 0x28
 8004a60:	2101      	movs	r1, #1
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 f818 	bl	8005a98 <RCCEx_PLL3_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a6e:	e004      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a82:	4b96      	ldr	r3, [pc, #600]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	f023 0107 	bic.w	r1, r3, #7
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a90:	4a92      	ldr	r2, [pc, #584]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a96:	e003      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f002 0304 	and.w	r3, r2, #4
 8004aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ab6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d044      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	d825      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004acc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004aed 	.word	0x08004aed
 8004adc:	08004b03 	.word	0x08004b03
 8004ae0:	08004b21 	.word	0x08004b21
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004b21 	.word	0x08004b21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af0:	3308      	adds	r3, #8
 8004af2:	2101      	movs	r1, #1
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 ff1d 	bl	8005934 <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b00:	e00f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b06:	3328      	adds	r3, #40	@ 0x28
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 ffc4 	bl	8005a98 <RCCEx_PLL3_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	f023 0107 	bic.w	r1, r3, #7
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3a:	4a68      	ldr	r2, [pc, #416]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f002 0320 	and.w	r3, r2, #32
 8004b56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d055      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b76:	d033      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b7c:	d82c      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b82:	d02f      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b88:	d826      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b8e:	d02b      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004b90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b94:	d820      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b9a:	d012      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ba0:	d81a      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d022      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004baa:	d115      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 febd 	bl	8005934 <RCCEx_PLL2_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bc0:	e015      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc6:	3328      	adds	r3, #40	@ 0x28
 8004bc8:	2102      	movs	r1, #2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 ff64 	bl	8005a98 <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bd6:	e00a      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bde:	e006      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004be0:	bf00      	nop
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bf6:	4b39      	ldr	r3, [pc, #228]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c06:	4a35      	ldr	r2, [pc, #212]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c0c:	e003      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c26:	2300      	movs	r3, #0
 8004c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004c2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4313      	orrs	r3, r2
 8004c34:	d058      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c42:	d033      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004c44:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c48:	d82c      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4e:	d02f      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c54:	d826      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c5a:	d02b      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004c5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c60:	d820      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c66:	d012      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c6c:	d81a      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d022      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c76:	d115      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fe57 	bl	8005934 <RCCEx_PLL2_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c8c:	e015      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c92:	3328      	adds	r3, #40	@ 0x28
 8004c94:	2102      	movs	r1, #2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fefe 	bl	8005a98 <RCCEx_PLL3_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ca2:	e00a      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004caa:	e006      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cac:	bf00      	nop
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cb0:	bf00      	nop
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cc2:	4b06      	ldr	r3, [pc, #24]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cd2:	4a02      	ldr	r2, [pc, #8]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd8:	e006      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cfe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d055      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d10:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d14:	d033      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004d16:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d1a:	d82c      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d20:	d02f      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d26:	d826      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d2c:	d02b      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004d2e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d32:	d820      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d38:	d012      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d3e:	d81a      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d022      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d48:	d115      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4e:	3308      	adds	r3, #8
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fdee 	bl	8005934 <RCCEx_PLL2_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d5e:	e015      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d64:	3328      	adds	r3, #40	@ 0x28
 8004d66:	2102      	movs	r1, #2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fe95 	bl	8005a98 <RCCEx_PLL3_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d74:	e00a      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d7c:	e006      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e004      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d82:	bf00      	nop
 8004d84:	e002      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d94:	4ba1      	ldr	r3, [pc, #644]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d98:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004da4:	4a9d      	ldr	r2, [pc, #628]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004da6:	430b      	orrs	r3, r1
 8004da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004daa:	e003      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f002 0308 	and.w	r3, r2, #8
 8004dc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d01e      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de6:	3328      	adds	r3, #40	@ 0x28
 8004de8:	2102      	movs	r1, #2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fe54 	bl	8005a98 <RCCEx_PLL3_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004dfc:	4b87      	ldr	r3, [pc, #540]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e0c:	4a83      	ldr	r2, [pc, #524]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f002 0310 	and.w	r3, r2, #16
 8004e1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	d01e      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e3e:	d10c      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	3328      	adds	r3, #40	@ 0x28
 8004e46:	2102      	movs	r1, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fe25 	bl	8005a98 <RCCEx_PLL3_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e5a:	4b70      	ldr	r3, [pc, #448]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e6a:	4a6c      	ldr	r2, [pc, #432]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004e7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d03e      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e9c:	d022      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea2:	d81b      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eac:	d00b      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004eae:	e015      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fd3b 	bl	8005934 <RCCEx_PLL2_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ec4:	e00f      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	3328      	adds	r3, #40	@ 0x28
 8004ecc:	2102      	movs	r1, #2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fde2 	bl	8005a98 <RCCEx_PLL3_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004eda:	e004      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eee:	4b4b      	ldr	r3, [pc, #300]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004efe:	4a47      	ldr	r2, [pc, #284]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f04:	e003      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f24:	460b      	mov	r3, r1
 8004f26:	4313      	orrs	r3, r2
 8004f28:	d03b      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f36:	d01f      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f3c:	d818      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f42:	d003      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004f44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f48:	d007      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004f4a:	e011      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4c:	4b33      	ldr	r3, [pc, #204]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	4a32      	ldr	r2, [pc, #200]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f58:	e00f      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	3328      	adds	r3, #40	@ 0x28
 8004f60:	2101      	movs	r1, #1
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fd98 	bl	8005a98 <RCCEx_PLL3_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f6e:	e004      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f76:	e000      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f82:	4b26      	ldr	r3, [pc, #152]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	4a22      	ldr	r2, [pc, #136]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004fae:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	d034      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fcc:	d007      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004fce:	e011      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd0:	4b12      	ldr	r3, [pc, #72]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd4:	4a11      	ldr	r2, [pc, #68]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fdc:	e00e      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fca4 	bl	8005934 <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ff2:	e003      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10d      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005008:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005012:	4a02      	ldr	r2, [pc, #8]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005014:	430b      	orrs	r3, r1
 8005016:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005018:	e006      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800501a:	bf00      	nop
 800501c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005036:	2300      	movs	r3, #0
 8005038:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800503a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800503e:	460b      	mov	r3, r1
 8005040:	4313      	orrs	r3, r2
 8005042:	d00c      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005048:	3328      	adds	r3, #40	@ 0x28
 800504a:	2102      	movs	r1, #2
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fd23 	bl	8005a98 <RCCEx_PLL3_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800506a:	663b      	str	r3, [r7, #96]	@ 0x60
 800506c:	2300      	movs	r3, #0
 800506e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005070:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005074:	460b      	mov	r3, r1
 8005076:	4313      	orrs	r3, r2
 8005078:	d038      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005086:	d018      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005088:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800508c:	d811      	bhi.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800508e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005092:	d014      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005098:	d80b      	bhi.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d011      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800509e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a2:	d106      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a4:	4bc3      	ldr	r3, [pc, #780]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	4ac2      	ldr	r2, [pc, #776]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80050b0:	e008      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050b8:	e004      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050cc:	4bb9      	ldr	r3, [pc, #740]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050dc:	4ab5      	ldr	r2, [pc, #724]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050de:	430b      	orrs	r3, r1
 80050e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80050e2:	e003      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80050f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050fa:	2300      	movs	r3, #0
 80050fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005102:	460b      	mov	r3, r1
 8005104:	4313      	orrs	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005108:	4baa      	ldr	r3, [pc, #680]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800510a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005116:	4aa7      	ldr	r2, [pc, #668]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005118:	430b      	orrs	r3, r1
 800511a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005128:	653b      	str	r3, [r7, #80]	@ 0x50
 800512a:	2300      	movs	r3, #0
 800512c:	657b      	str	r3, [r7, #84]	@ 0x54
 800512e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005132:	460b      	mov	r3, r1
 8005134:	4313      	orrs	r3, r2
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005138:	4b9e      	ldr	r3, [pc, #632]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005144:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005148:	4a9a      	ldr	r2, [pc, #616]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800514a:	430b      	orrs	r3, r1
 800514c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800515a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800515c:	2300      	movs	r3, #0
 800515e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005160:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005164:	460b      	mov	r3, r1
 8005166:	4313      	orrs	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800516a:	4b92      	ldr	r3, [pc, #584]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800516c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800516e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005178:	4a8e      	ldr	r2, [pc, #568]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800517a:	430b      	orrs	r3, r1
 800517c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800518a:	643b      	str	r3, [r7, #64]	@ 0x40
 800518c:	2300      	movs	r3, #0
 800518e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005190:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005194:	460b      	mov	r3, r1
 8005196:	4313      	orrs	r3, r2
 8005198:	d00e      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800519a:	4b86      	ldr	r3, [pc, #536]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	4a85      	ldr	r2, [pc, #532]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051a4:	6113      	str	r3, [r2, #16]
 80051a6:	4b83      	ldr	r3, [pc, #524]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051a8:	6919      	ldr	r1, [r3, #16]
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051b2:	4a80      	ldr	r2, [pc, #512]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80051c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051c6:	2300      	movs	r3, #0
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80051ce:	460b      	mov	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80051d4:	4b77      	ldr	r3, [pc, #476]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80051dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e2:	4a74      	ldr	r2, [pc, #464]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80051f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f6:	2300      	movs	r3, #0
 80051f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80051fe:	460b      	mov	r3, r1
 8005200:	4313      	orrs	r3, r2
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005204:	4b6b      	ldr	r3, [pc, #428]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005208:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005214:	4a67      	ldr	r2, [pc, #412]	@ (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005216:	430b      	orrs	r3, r1
 8005218:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800521a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	2100      	movs	r1, #0
 8005224:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005230:	460b      	mov	r3, r1
 8005232:	4313      	orrs	r3, r2
 8005234:	d011      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523a:	3308      	adds	r3, #8
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fb78 	bl	8005934 <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800524a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	2100      	movs	r1, #0
 8005264:	6239      	str	r1, [r7, #32]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
 800526c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005270:	460b      	mov	r3, r1
 8005272:	4313      	orrs	r3, r2
 8005274:	d011      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527a:	3308      	adds	r3, #8
 800527c:	2101      	movs	r1, #1
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb58 	bl	8005934 <RCCEx_PLL2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	2100      	movs	r1, #0
 80052a4:	61b9      	str	r1, [r7, #24]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052b0:	460b      	mov	r3, r1
 80052b2:	4313      	orrs	r3, r2
 80052b4:	d011      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ba:	3308      	adds	r3, #8
 80052bc:	2102      	movs	r1, #2
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fb38 	bl	8005934 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	2100      	movs	r1, #0
 80052e4:	6139      	str	r1, [r7, #16]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80052f0:	460b      	mov	r3, r1
 80052f2:	4313      	orrs	r3, r2
 80052f4:	d011      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	3328      	adds	r3, #40	@ 0x28
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fbca 	bl	8005a98 <RCCEx_PLL3_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800530a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	2100      	movs	r1, #0
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	d011      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	3328      	adds	r3, #40	@ 0x28
 800533c:	2101      	movs	r1, #1
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fbaa 	bl	8005a98 <RCCEx_PLL3_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	2100      	movs	r1, #0
 8005364:	6039      	str	r1, [r7, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005370:	460b      	mov	r3, r1
 8005372:	4313      	orrs	r3, r2
 8005374:	d011      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	3328      	adds	r3, #40	@ 0x28
 800537c:	2102      	movs	r1, #2
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fb8a 	bl	8005a98 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800539a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80053ae:	46bd      	mov	sp, r7
 80053b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b4:	58024400 	.word	0x58024400

080053b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053bc:	f7fe fd96 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4904      	ldr	r1, [pc, #16]	@ (80053e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	58024400 	.word	0x58024400
 80053e0:	0800b6c0 	.word	0x0800b6c0

080053e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	@ 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80053f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	0b1b      	lsrs	r3, r3, #12
 80053fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005400:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005402:	4b9c      	ldr	r3, [pc, #624]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800540e:	4b99      	ldr	r3, [pc, #612]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	08db      	lsrs	r3, r3, #3
 8005414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8111 	beq.w	8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b02      	cmp	r3, #2
 8005436:	f000 8083 	beq.w	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b02      	cmp	r3, #2
 800543e:	f200 80a1 	bhi.w	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d056      	beq.n	80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800544e:	e099      	b.n	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005450:	4b88      	ldr	r3, [pc, #544]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d02d      	beq.n	80054b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800545c:	4b85      	ldr	r3, [pc, #532]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	08db      	lsrs	r3, r3, #3
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	4a84      	ldr	r2, [pc, #528]	@ (8005678 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b7b      	ldr	r3, [pc, #492]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005496:	ed97 6a03 	vldr	s12, [r7, #12]
 800549a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054b6:	e087      	b.n	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80054c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054da:	ed97 6a03 	vldr	s12, [r7, #12]
 80054de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054fa:	e065      	b.n	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005506:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550e:	4b59      	ldr	r3, [pc, #356]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005522:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553e:	e043      	b.n	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005552:	4b48      	ldr	r3, [pc, #288]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005562:	ed97 6a03 	vldr	s12, [r7, #12]
 8005566:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005582:	e021      	b.n	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005596:	4b37      	ldr	r3, [pc, #220]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80055c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	0a5b      	lsrs	r3, r3, #9
 80055ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ee:	ee17 2a90 	vmov	r2, s15
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80055f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800560c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005610:	edd7 6a07 	vldr	s13, [r7, #28]
 8005614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561c:	ee17 2a90 	vmov	r2, s15
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005624:	4b13      	ldr	r3, [pc, #76]	@ (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	0e1b      	lsrs	r3, r3, #24
 800562a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800563a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800563e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800564a:	ee17 2a90 	vmov	r2, s15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005652:	e008      	b.n	8005666 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	609a      	str	r2, [r3, #8]
}
 8005666:	bf00      	nop
 8005668:	3724      	adds	r7, #36	@ 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	58024400 	.word	0x58024400
 8005678:	03d09000 	.word	0x03d09000
 800567c:	46000000 	.word	0x46000000
 8005680:	4c742400 	.word	0x4c742400
 8005684:	4a742400 	.word	0x4a742400
 8005688:	4bbebc20 	.word	0x4bbebc20

0800568c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800568c:	b480      	push	{r7}
 800568e:	b089      	sub	sp, #36	@ 0x24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005694:	4ba1      	ldr	r3, [pc, #644]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800569e:	4b9f      	ldr	r3, [pc, #636]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	0d1b      	lsrs	r3, r3, #20
 80056a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056aa:	4b9c      	ldr	r3, [pc, #624]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80056b6:	4b99      	ldr	r3, [pc, #612]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	08db      	lsrs	r3, r3, #3
 80056bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	fb02 f303 	mul.w	r3, r2, r3
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8111 	beq.w	80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	f000 8083 	beq.w	80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	f200 80a1 	bhi.w	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d056      	beq.n	80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80056f6:	e099      	b.n	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f8:	4b88      	ldr	r3, [pc, #544]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02d      	beq.n	8005760 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005704:	4b85      	ldr	r3, [pc, #532]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	08db      	lsrs	r3, r3, #3
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	4a84      	ldr	r2, [pc, #528]	@ (8005920 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
 8005714:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572e:	4b7b      	ldr	r3, [pc, #492]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005742:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800575e:	e087      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800576e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005772:	4b6a      	ldr	r3, [pc, #424]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005782:	ed97 6a03 	vldr	s12, [r7, #12]
 8005786:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800578a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057a2:	e065      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800592c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b6:	4b59      	ldr	r3, [pc, #356]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e6:	e043      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fa:	4b48      	ldr	r3, [pc, #288]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580a:	ed97 6a03 	vldr	s12, [r7, #12]
 800580e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800582a:	e021      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800592c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583e:	4b37      	ldr	r3, [pc, #220]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005852:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800586e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005870:	4b2a      	ldr	r3, [pc, #168]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	0a5b      	lsrs	r3, r3, #9
 8005876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800588a:	edd7 6a07 	vldr	s13, [r7, #28]
 800588e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005896:	ee17 2a90 	vmov	r2, s15
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800589e:	4b1f      	ldr	r3, [pc, #124]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c4:	ee17 2a90 	vmov	r2, s15
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80058cc:	4b13      	ldr	r3, [pc, #76]	@ (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d0:	0e1b      	lsrs	r3, r3, #24
 80058d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f2:	ee17 2a90 	vmov	r2, s15
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80058fa:	e008      	b.n	800590e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]
}
 800590e:	bf00      	nop
 8005910:	3724      	adds	r7, #36	@ 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	58024400 	.word	0x58024400
 8005920:	03d09000 	.word	0x03d09000
 8005924:	46000000 	.word	0x46000000
 8005928:	4c742400 	.word	0x4c742400
 800592c:	4a742400 	.word	0x4a742400
 8005930:	4bbebc20 	.word	0x4bbebc20

08005934 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005942:	4b53      	ldr	r3, [pc, #332]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	2b03      	cmp	r3, #3
 800594c:	d101      	bne.n	8005952 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e099      	b.n	8005a86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005952:	4b4f      	ldr	r3, [pc, #316]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a4e      	ldr	r2, [pc, #312]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005958:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800595c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595e:	f7fb fc6b 	bl	8001238 <HAL_GetTick>
 8005962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005964:	e008      	b.n	8005978 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005966:	f7fb fc67 	bl	8001238 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e086      	b.n	8005a86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005978:	4b45      	ldr	r3, [pc, #276]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f0      	bne.n	8005966 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005984:	4b42      	ldr	r3, [pc, #264]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005988:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	031b      	lsls	r3, r3, #12
 8005992:	493f      	ldr	r1, [pc, #252]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005994:	4313      	orrs	r3, r2
 8005996:	628b      	str	r3, [r1, #40]	@ 0x28
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	3b01      	subs	r3, #1
 800599e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	025b      	lsls	r3, r3, #9
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	061b      	lsls	r3, r3, #24
 80059c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059c8:	4931      	ldr	r1, [pc, #196]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059ce:	4b30      	ldr	r3, [pc, #192]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	492d      	ldr	r1, [pc, #180]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	f023 0220 	bic.w	r2, r3, #32
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	4928      	ldr	r1, [pc, #160]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059f2:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f6:	4a26      	ldr	r2, [pc, #152]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059f8:	f023 0310 	bic.w	r3, r3, #16
 80059fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059fe:	4b24      	ldr	r3, [pc, #144]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a02:	4b24      	ldr	r3, [pc, #144]	@ (8005a94 <RCCEx_PLL2_Config+0x160>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	69d2      	ldr	r2, [r2, #28]
 8005a0a:	00d2      	lsls	r2, r2, #3
 8005a0c:	4920      	ldr	r1, [pc, #128]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a12:	4b1f      	ldr	r3, [pc, #124]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	4a1e      	ldr	r2, [pc, #120]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a18:	f043 0310 	orr.w	r3, r3, #16
 8005a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a24:	4b1a      	ldr	r3, [pc, #104]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a28:	4a19      	ldr	r2, [pc, #100]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a30:	e00f      	b.n	8005a52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d106      	bne.n	8005a46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a38:	4b15      	ldr	r3, [pc, #84]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3c:	4a14      	ldr	r2, [pc, #80]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a44:	e005      	b.n	8005a52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a46:	4b12      	ldr	r3, [pc, #72]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	4a11      	ldr	r2, [pc, #68]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a52:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a0e      	ldr	r2, [pc, #56]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a5e:	f7fb fbeb 	bl	8001238 <HAL_GetTick>
 8005a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a64:	e008      	b.n	8005a78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a66:	f7fb fbe7 	bl	8001238 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e006      	b.n	8005a86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
 8005a94:	ffff0007 	.word	0xffff0007

08005a98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005aa6:	4b53      	ldr	r3, [pc, #332]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d101      	bne.n	8005ab6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e099      	b.n	8005bea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a4e      	ldr	r2, [pc, #312]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac2:	f7fb fbb9 	bl	8001238 <HAL_GetTick>
 8005ac6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ac8:	e008      	b.n	8005adc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005aca:	f7fb fbb5 	bl	8001238 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e086      	b.n	8005bea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005adc:	4b45      	ldr	r3, [pc, #276]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ae8:	4b42      	ldr	r3, [pc, #264]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	051b      	lsls	r3, r3, #20
 8005af6:	493f      	ldr	r1, [pc, #252]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	628b      	str	r3, [r1, #40]	@ 0x28
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	025b      	lsls	r3, r3, #9
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	041b      	lsls	r3, r3, #16
 8005b1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	061b      	lsls	r3, r3, #24
 8005b28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b2c:	4931      	ldr	r1, [pc, #196]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b32:	4b30      	ldr	r3, [pc, #192]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	492d      	ldr	r1, [pc, #180]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b44:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	4928      	ldr	r1, [pc, #160]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b56:	4b27      	ldr	r3, [pc, #156]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5a:	4a26      	ldr	r2, [pc, #152]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b62:	4b24      	ldr	r3, [pc, #144]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b66:	4b24      	ldr	r3, [pc, #144]	@ (8005bf8 <RCCEx_PLL3_Config+0x160>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	69d2      	ldr	r2, [r2, #28]
 8005b6e:	00d2      	lsls	r2, r2, #3
 8005b70:	4920      	ldr	r1, [pc, #128]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b76:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b88:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	4a19      	ldr	r2, [pc, #100]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b94:	e00f      	b.n	8005bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d106      	bne.n	8005baa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b9c:	4b15      	ldr	r3, [pc, #84]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	4a14      	ldr	r2, [pc, #80]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005ba2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ba8:	e005      	b.n	8005bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005baa:	4b12      	ldr	r3, [pc, #72]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	4a11      	ldr	r2, [pc, #68]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a0e      	ldr	r2, [pc, #56]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc2:	f7fb fb39 	bl	8001238 <HAL_GetTick>
 8005bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bc8:	e008      	b.n	8005bdc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bca:	f7fb fb35 	bl	8001238 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e006      	b.n	8005bea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	ffff0007 	.word	0xffff0007

08005bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e042      	b.n	8005c94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f83b 	bl	8005c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2224      	movs	r2, #36	@ 0x24
 8005c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fd9a 	bl	8006780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f82f 	bl	8005cb0 <UART_SetConfig>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e01b      	b.n	8005c94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fe19 	bl	80068c4 <UART_CheckIdleState>
 8005c92:	4603      	mov	r3, r0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb4:	b092      	sub	sp, #72	@ 0x48
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4bbe      	ldr	r3, [pc, #760]	@ (8005fd8 <UART_SetConfig+0x328>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4ab3      	ldr	r2, [pc, #716]	@ (8005fdc <UART_SetConfig+0x32c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	4baf      	ldr	r3, [pc, #700]	@ (8005fe0 <UART_SetConfig+0x330>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d36:	f023 010f 	bic.w	r1, r3, #15
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4aa6      	ldr	r2, [pc, #664]	@ (8005fe4 <UART_SetConfig+0x334>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d177      	bne.n	8005e40 <UART_SetConfig+0x190>
 8005d50:	4ba5      	ldr	r3, [pc, #660]	@ (8005fe8 <UART_SetConfig+0x338>)
 8005d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d58:	2b28      	cmp	r3, #40	@ 0x28
 8005d5a:	d86d      	bhi.n	8005e38 <UART_SetConfig+0x188>
 8005d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <UART_SetConfig+0xb4>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005e09 	.word	0x08005e09
 8005d68:	08005e39 	.word	0x08005e39
 8005d6c:	08005e39 	.word	0x08005e39
 8005d70:	08005e39 	.word	0x08005e39
 8005d74:	08005e39 	.word	0x08005e39
 8005d78:	08005e39 	.word	0x08005e39
 8005d7c:	08005e39 	.word	0x08005e39
 8005d80:	08005e39 	.word	0x08005e39
 8005d84:	08005e11 	.word	0x08005e11
 8005d88:	08005e39 	.word	0x08005e39
 8005d8c:	08005e39 	.word	0x08005e39
 8005d90:	08005e39 	.word	0x08005e39
 8005d94:	08005e39 	.word	0x08005e39
 8005d98:	08005e39 	.word	0x08005e39
 8005d9c:	08005e39 	.word	0x08005e39
 8005da0:	08005e39 	.word	0x08005e39
 8005da4:	08005e19 	.word	0x08005e19
 8005da8:	08005e39 	.word	0x08005e39
 8005dac:	08005e39 	.word	0x08005e39
 8005db0:	08005e39 	.word	0x08005e39
 8005db4:	08005e39 	.word	0x08005e39
 8005db8:	08005e39 	.word	0x08005e39
 8005dbc:	08005e39 	.word	0x08005e39
 8005dc0:	08005e39 	.word	0x08005e39
 8005dc4:	08005e21 	.word	0x08005e21
 8005dc8:	08005e39 	.word	0x08005e39
 8005dcc:	08005e39 	.word	0x08005e39
 8005dd0:	08005e39 	.word	0x08005e39
 8005dd4:	08005e39 	.word	0x08005e39
 8005dd8:	08005e39 	.word	0x08005e39
 8005ddc:	08005e39 	.word	0x08005e39
 8005de0:	08005e39 	.word	0x08005e39
 8005de4:	08005e29 	.word	0x08005e29
 8005de8:	08005e39 	.word	0x08005e39
 8005dec:	08005e39 	.word	0x08005e39
 8005df0:	08005e39 	.word	0x08005e39
 8005df4:	08005e39 	.word	0x08005e39
 8005df8:	08005e39 	.word	0x08005e39
 8005dfc:	08005e39 	.word	0x08005e39
 8005e00:	08005e39 	.word	0x08005e39
 8005e04:	08005e31 	.word	0x08005e31
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e222      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e10:	2304      	movs	r3, #4
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e21e      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e21a      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e20:	2310      	movs	r3, #16
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e216      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e28:	2320      	movs	r3, #32
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e212      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e30:	2340      	movs	r3, #64	@ 0x40
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e20e      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e38:	2380      	movs	r3, #128	@ 0x80
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e20a      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a69      	ldr	r2, [pc, #420]	@ (8005fec <UART_SetConfig+0x33c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d130      	bne.n	8005eac <UART_SetConfig+0x1fc>
 8005e4a:	4b67      	ldr	r3, [pc, #412]	@ (8005fe8 <UART_SetConfig+0x338>)
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	2b05      	cmp	r3, #5
 8005e54:	d826      	bhi.n	8005ea4 <UART_SetConfig+0x1f4>
 8005e56:	a201      	add	r2, pc, #4	@ (adr r2, 8005e5c <UART_SetConfig+0x1ac>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005e75 	.word	0x08005e75
 8005e60:	08005e7d 	.word	0x08005e7d
 8005e64:	08005e85 	.word	0x08005e85
 8005e68:	08005e8d 	.word	0x08005e8d
 8005e6c:	08005e95 	.word	0x08005e95
 8005e70:	08005e9d 	.word	0x08005e9d
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e1ec      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e1e8      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e84:	2308      	movs	r3, #8
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e1e4      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e1e0      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e94:	2320      	movs	r3, #32
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e1dc      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005e9c:	2340      	movs	r3, #64	@ 0x40
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e1d8      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005ea4:	2380      	movs	r3, #128	@ 0x80
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e1d4      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8005ff0 <UART_SetConfig+0x340>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d130      	bne.n	8005f18 <UART_SetConfig+0x268>
 8005eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe8 <UART_SetConfig+0x338>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d826      	bhi.n	8005f10 <UART_SetConfig+0x260>
 8005ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec8 <UART_SetConfig+0x218>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005ee1 	.word	0x08005ee1
 8005ecc:	08005ee9 	.word	0x08005ee9
 8005ed0:	08005ef1 	.word	0x08005ef1
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005f01 	.word	0x08005f01
 8005edc:	08005f09 	.word	0x08005f09
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e1b6      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e1b2      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e1ae      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e1aa      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f00:	2320      	movs	r3, #32
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e1a6      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f08:	2340      	movs	r3, #64	@ 0x40
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e1a2      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f10:	2380      	movs	r3, #128	@ 0x80
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e19e      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a35      	ldr	r2, [pc, #212]	@ (8005ff4 <UART_SetConfig+0x344>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d130      	bne.n	8005f84 <UART_SetConfig+0x2d4>
 8005f22:	4b31      	ldr	r3, [pc, #196]	@ (8005fe8 <UART_SetConfig+0x338>)
 8005f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	d826      	bhi.n	8005f7c <UART_SetConfig+0x2cc>
 8005f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <UART_SetConfig+0x284>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f4d 	.word	0x08005f4d
 8005f38:	08005f55 	.word	0x08005f55
 8005f3c:	08005f5d 	.word	0x08005f5d
 8005f40:	08005f65 	.word	0x08005f65
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e180      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e17c      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e178      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e174      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e170      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e16c      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f7c:	2380      	movs	r3, #128	@ 0x80
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e168      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <UART_SetConfig+0x348>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d142      	bne.n	8006014 <UART_SetConfig+0x364>
 8005f8e:	4b16      	ldr	r3, [pc, #88]	@ (8005fe8 <UART_SetConfig+0x338>)
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d838      	bhi.n	800600c <UART_SetConfig+0x35c>
 8005f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <UART_SetConfig+0x2f0>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fb9 	.word	0x08005fb9
 8005fa4:	08005fc1 	.word	0x08005fc1
 8005fa8:	08005fc9 	.word	0x08005fc9
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005ffd 	.word	0x08005ffd
 8005fb4:	08006005 	.word	0x08006005
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e14a      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e146      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e142      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e13e      	b.n	8006256 <UART_SetConfig+0x5a6>
 8005fd8:	cfff69f3 	.word	0xcfff69f3
 8005fdc:	58000c00 	.word	0x58000c00
 8005fe0:	11fff4ff 	.word	0x11fff4ff
 8005fe4:	40011000 	.word	0x40011000
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	40004400 	.word	0x40004400
 8005ff0:	40004800 	.word	0x40004800
 8005ff4:	40004c00 	.word	0x40004c00
 8005ff8:	40005000 	.word	0x40005000
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e128      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006004:	2340      	movs	r3, #64	@ 0x40
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e124      	b.n	8006256 <UART_SetConfig+0x5a6>
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e120      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4acb      	ldr	r2, [pc, #812]	@ (8006348 <UART_SetConfig+0x698>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d176      	bne.n	800610c <UART_SetConfig+0x45c>
 800601e:	4bcb      	ldr	r3, [pc, #812]	@ (800634c <UART_SetConfig+0x69c>)
 8006020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006026:	2b28      	cmp	r3, #40	@ 0x28
 8006028:	d86c      	bhi.n	8006104 <UART_SetConfig+0x454>
 800602a:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <UART_SetConfig+0x380>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	080060d5 	.word	0x080060d5
 8006034:	08006105 	.word	0x08006105
 8006038:	08006105 	.word	0x08006105
 800603c:	08006105 	.word	0x08006105
 8006040:	08006105 	.word	0x08006105
 8006044:	08006105 	.word	0x08006105
 8006048:	08006105 	.word	0x08006105
 800604c:	08006105 	.word	0x08006105
 8006050:	080060dd 	.word	0x080060dd
 8006054:	08006105 	.word	0x08006105
 8006058:	08006105 	.word	0x08006105
 800605c:	08006105 	.word	0x08006105
 8006060:	08006105 	.word	0x08006105
 8006064:	08006105 	.word	0x08006105
 8006068:	08006105 	.word	0x08006105
 800606c:	08006105 	.word	0x08006105
 8006070:	080060e5 	.word	0x080060e5
 8006074:	08006105 	.word	0x08006105
 8006078:	08006105 	.word	0x08006105
 800607c:	08006105 	.word	0x08006105
 8006080:	08006105 	.word	0x08006105
 8006084:	08006105 	.word	0x08006105
 8006088:	08006105 	.word	0x08006105
 800608c:	08006105 	.word	0x08006105
 8006090:	080060ed 	.word	0x080060ed
 8006094:	08006105 	.word	0x08006105
 8006098:	08006105 	.word	0x08006105
 800609c:	08006105 	.word	0x08006105
 80060a0:	08006105 	.word	0x08006105
 80060a4:	08006105 	.word	0x08006105
 80060a8:	08006105 	.word	0x08006105
 80060ac:	08006105 	.word	0x08006105
 80060b0:	080060f5 	.word	0x080060f5
 80060b4:	08006105 	.word	0x08006105
 80060b8:	08006105 	.word	0x08006105
 80060bc:	08006105 	.word	0x08006105
 80060c0:	08006105 	.word	0x08006105
 80060c4:	08006105 	.word	0x08006105
 80060c8:	08006105 	.word	0x08006105
 80060cc:	08006105 	.word	0x08006105
 80060d0:	080060fd 	.word	0x080060fd
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e0bc      	b.n	8006256 <UART_SetConfig+0x5a6>
 80060dc:	2304      	movs	r3, #4
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e0b8      	b.n	8006256 <UART_SetConfig+0x5a6>
 80060e4:	2308      	movs	r3, #8
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e0b4      	b.n	8006256 <UART_SetConfig+0x5a6>
 80060ec:	2310      	movs	r3, #16
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e0b0      	b.n	8006256 <UART_SetConfig+0x5a6>
 80060f4:	2320      	movs	r3, #32
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e0ac      	b.n	8006256 <UART_SetConfig+0x5a6>
 80060fc:	2340      	movs	r3, #64	@ 0x40
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e0a8      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006104:	2380      	movs	r3, #128	@ 0x80
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e0a4      	b.n	8006256 <UART_SetConfig+0x5a6>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a8f      	ldr	r2, [pc, #572]	@ (8006350 <UART_SetConfig+0x6a0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d130      	bne.n	8006178 <UART_SetConfig+0x4c8>
 8006116:	4b8d      	ldr	r3, [pc, #564]	@ (800634c <UART_SetConfig+0x69c>)
 8006118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	2b05      	cmp	r3, #5
 8006120:	d826      	bhi.n	8006170 <UART_SetConfig+0x4c0>
 8006122:	a201      	add	r2, pc, #4	@ (adr r2, 8006128 <UART_SetConfig+0x478>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	08006141 	.word	0x08006141
 800612c:	08006149 	.word	0x08006149
 8006130:	08006151 	.word	0x08006151
 8006134:	08006159 	.word	0x08006159
 8006138:	08006161 	.word	0x08006161
 800613c:	08006169 	.word	0x08006169
 8006140:	2300      	movs	r3, #0
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e086      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006148:	2304      	movs	r3, #4
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e082      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006150:	2308      	movs	r3, #8
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e07e      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006158:	2310      	movs	r3, #16
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e07a      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006160:	2320      	movs	r3, #32
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e076      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006168:	2340      	movs	r3, #64	@ 0x40
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e072      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006170:	2380      	movs	r3, #128	@ 0x80
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e06e      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a75      	ldr	r2, [pc, #468]	@ (8006354 <UART_SetConfig+0x6a4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d130      	bne.n	80061e4 <UART_SetConfig+0x534>
 8006182:	4b72      	ldr	r3, [pc, #456]	@ (800634c <UART_SetConfig+0x69c>)
 8006184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b05      	cmp	r3, #5
 800618c:	d826      	bhi.n	80061dc <UART_SetConfig+0x52c>
 800618e:	a201      	add	r2, pc, #4	@ (adr r2, 8006194 <UART_SetConfig+0x4e4>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061ad 	.word	0x080061ad
 8006198:	080061b5 	.word	0x080061b5
 800619c:	080061bd 	.word	0x080061bd
 80061a0:	080061c5 	.word	0x080061c5
 80061a4:	080061cd 	.word	0x080061cd
 80061a8:	080061d5 	.word	0x080061d5
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e050      	b.n	8006256 <UART_SetConfig+0x5a6>
 80061b4:	2304      	movs	r3, #4
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e04c      	b.n	8006256 <UART_SetConfig+0x5a6>
 80061bc:	2308      	movs	r3, #8
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e048      	b.n	8006256 <UART_SetConfig+0x5a6>
 80061c4:	2310      	movs	r3, #16
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e044      	b.n	8006256 <UART_SetConfig+0x5a6>
 80061cc:	2320      	movs	r3, #32
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e040      	b.n	8006256 <UART_SetConfig+0x5a6>
 80061d4:	2340      	movs	r3, #64	@ 0x40
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e03c      	b.n	8006256 <UART_SetConfig+0x5a6>
 80061dc:	2380      	movs	r3, #128	@ 0x80
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e038      	b.n	8006256 <UART_SetConfig+0x5a6>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5b      	ldr	r2, [pc, #364]	@ (8006358 <UART_SetConfig+0x6a8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d130      	bne.n	8006250 <UART_SetConfig+0x5a0>
 80061ee:	4b57      	ldr	r3, [pc, #348]	@ (800634c <UART_SetConfig+0x69c>)
 80061f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d826      	bhi.n	8006248 <UART_SetConfig+0x598>
 80061fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <UART_SetConfig+0x550>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006219 	.word	0x08006219
 8006204:	08006221 	.word	0x08006221
 8006208:	08006229 	.word	0x08006229
 800620c:	08006231 	.word	0x08006231
 8006210:	08006239 	.word	0x08006239
 8006214:	08006241 	.word	0x08006241
 8006218:	2302      	movs	r3, #2
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e01a      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006220:	2304      	movs	r3, #4
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e016      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006228:	2308      	movs	r3, #8
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e012      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006230:	2310      	movs	r3, #16
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e00e      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006238:	2320      	movs	r3, #32
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e00a      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006240:	2340      	movs	r3, #64	@ 0x40
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e006      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006248:	2380      	movs	r3, #128	@ 0x80
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e002      	b.n	8006256 <UART_SetConfig+0x5a6>
 8006250:	2380      	movs	r3, #128	@ 0x80
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a3f      	ldr	r2, [pc, #252]	@ (8006358 <UART_SetConfig+0x6a8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	f040 80f8 	bne.w	8006452 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006262:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006266:	2b20      	cmp	r3, #32
 8006268:	dc46      	bgt.n	80062f8 <UART_SetConfig+0x648>
 800626a:	2b02      	cmp	r3, #2
 800626c:	f2c0 8082 	blt.w	8006374 <UART_SetConfig+0x6c4>
 8006270:	3b02      	subs	r3, #2
 8006272:	2b1e      	cmp	r3, #30
 8006274:	d87e      	bhi.n	8006374 <UART_SetConfig+0x6c4>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <UART_SetConfig+0x5cc>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	080062ff 	.word	0x080062ff
 8006280:	08006375 	.word	0x08006375
 8006284:	08006307 	.word	0x08006307
 8006288:	08006375 	.word	0x08006375
 800628c:	08006375 	.word	0x08006375
 8006290:	08006375 	.word	0x08006375
 8006294:	08006317 	.word	0x08006317
 8006298:	08006375 	.word	0x08006375
 800629c:	08006375 	.word	0x08006375
 80062a0:	08006375 	.word	0x08006375
 80062a4:	08006375 	.word	0x08006375
 80062a8:	08006375 	.word	0x08006375
 80062ac:	08006375 	.word	0x08006375
 80062b0:	08006375 	.word	0x08006375
 80062b4:	08006327 	.word	0x08006327
 80062b8:	08006375 	.word	0x08006375
 80062bc:	08006375 	.word	0x08006375
 80062c0:	08006375 	.word	0x08006375
 80062c4:	08006375 	.word	0x08006375
 80062c8:	08006375 	.word	0x08006375
 80062cc:	08006375 	.word	0x08006375
 80062d0:	08006375 	.word	0x08006375
 80062d4:	08006375 	.word	0x08006375
 80062d8:	08006375 	.word	0x08006375
 80062dc:	08006375 	.word	0x08006375
 80062e0:	08006375 	.word	0x08006375
 80062e4:	08006375 	.word	0x08006375
 80062e8:	08006375 	.word	0x08006375
 80062ec:	08006375 	.word	0x08006375
 80062f0:	08006375 	.word	0x08006375
 80062f4:	08006367 	.word	0x08006367
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d037      	beq.n	800636c <UART_SetConfig+0x6bc>
 80062fc:	e03a      	b.n	8006374 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062fe:	f7ff f85b 	bl	80053b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006304:	e03c      	b.n	8006380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff f86a 	bl	80053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006314:	e034      	b.n	8006380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006316:	f107 0318 	add.w	r3, r7, #24
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff f9b6 	bl	800568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006324:	e02c      	b.n	8006380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006326:	4b09      	ldr	r3, [pc, #36]	@ (800634c <UART_SetConfig+0x69c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006332:	4b06      	ldr	r3, [pc, #24]	@ (800634c <UART_SetConfig+0x69c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	08db      	lsrs	r3, r3, #3
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	4a07      	ldr	r2, [pc, #28]	@ (800635c <UART_SetConfig+0x6ac>)
 800633e:	fa22 f303 	lsr.w	r3, r2, r3
 8006342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006344:	e01c      	b.n	8006380 <UART_SetConfig+0x6d0>
 8006346:	bf00      	nop
 8006348:	40011400 	.word	0x40011400
 800634c:	58024400 	.word	0x58024400
 8006350:	40007800 	.word	0x40007800
 8006354:	40007c00 	.word	0x40007c00
 8006358:	58000c00 	.word	0x58000c00
 800635c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006360:	4b9d      	ldr	r3, [pc, #628]	@ (80065d8 <UART_SetConfig+0x928>)
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006364:	e00c      	b.n	8006380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006366:	4b9d      	ldr	r3, [pc, #628]	@ (80065dc <UART_SetConfig+0x92c>)
 8006368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636a:	e009      	b.n	8006380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006372:	e005      	b.n	8006380 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800637e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 81de 	beq.w	8006744 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	4a94      	ldr	r2, [pc, #592]	@ (80065e0 <UART_SetConfig+0x930>)
 800638e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006392:	461a      	mov	r2, r3
 8006394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006396:	fbb3 f3f2 	udiv	r3, r3, r2
 800639a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d305      	bcc.n	80063b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d903      	bls.n	80063c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063be:	e1c1      	b.n	8006744 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c2:	2200      	movs	r2, #0
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	60fa      	str	r2, [r7, #12]
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	4a84      	ldr	r2, [pc, #528]	@ (80065e0 <UART_SetConfig+0x930>)
 80063ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2200      	movs	r2, #0
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063e2:	f7f9 ffcd 	bl	8000380 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4610      	mov	r0, r2
 80063ec:	4619      	mov	r1, r3
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	020b      	lsls	r3, r1, #8
 80063f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063fc:	0202      	lsls	r2, r0, #8
 80063fe:	6979      	ldr	r1, [r7, #20]
 8006400:	6849      	ldr	r1, [r1, #4]
 8006402:	0849      	lsrs	r1, r1, #1
 8006404:	2000      	movs	r0, #0
 8006406:	460c      	mov	r4, r1
 8006408:	4605      	mov	r5, r0
 800640a:	eb12 0804 	adds.w	r8, r2, r4
 800640e:	eb43 0905 	adc.w	r9, r3, r5
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	469a      	mov	sl, r3
 800641a:	4693      	mov	fp, r2
 800641c:	4652      	mov	r2, sl
 800641e:	465b      	mov	r3, fp
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	f7f9 ffac 	bl	8000380 <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4613      	mov	r3, r2
 800642e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006436:	d308      	bcc.n	800644a <UART_SetConfig+0x79a>
 8006438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800643e:	d204      	bcs.n	800644a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006446:	60da      	str	r2, [r3, #12]
 8006448:	e17c      	b.n	8006744 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006450:	e178      	b.n	8006744 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800645a:	f040 80c5 	bne.w	80065e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800645e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006462:	2b20      	cmp	r3, #32
 8006464:	dc48      	bgt.n	80064f8 <UART_SetConfig+0x848>
 8006466:	2b00      	cmp	r3, #0
 8006468:	db7b      	blt.n	8006562 <UART_SetConfig+0x8b2>
 800646a:	2b20      	cmp	r3, #32
 800646c:	d879      	bhi.n	8006562 <UART_SetConfig+0x8b2>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <UART_SetConfig+0x7c4>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	080064ff 	.word	0x080064ff
 8006478:	08006507 	.word	0x08006507
 800647c:	08006563 	.word	0x08006563
 8006480:	08006563 	.word	0x08006563
 8006484:	0800650f 	.word	0x0800650f
 8006488:	08006563 	.word	0x08006563
 800648c:	08006563 	.word	0x08006563
 8006490:	08006563 	.word	0x08006563
 8006494:	0800651f 	.word	0x0800651f
 8006498:	08006563 	.word	0x08006563
 800649c:	08006563 	.word	0x08006563
 80064a0:	08006563 	.word	0x08006563
 80064a4:	08006563 	.word	0x08006563
 80064a8:	08006563 	.word	0x08006563
 80064ac:	08006563 	.word	0x08006563
 80064b0:	08006563 	.word	0x08006563
 80064b4:	0800652f 	.word	0x0800652f
 80064b8:	08006563 	.word	0x08006563
 80064bc:	08006563 	.word	0x08006563
 80064c0:	08006563 	.word	0x08006563
 80064c4:	08006563 	.word	0x08006563
 80064c8:	08006563 	.word	0x08006563
 80064cc:	08006563 	.word	0x08006563
 80064d0:	08006563 	.word	0x08006563
 80064d4:	08006563 	.word	0x08006563
 80064d8:	08006563 	.word	0x08006563
 80064dc:	08006563 	.word	0x08006563
 80064e0:	08006563 	.word	0x08006563
 80064e4:	08006563 	.word	0x08006563
 80064e8:	08006563 	.word	0x08006563
 80064ec:	08006563 	.word	0x08006563
 80064f0:	08006563 	.word	0x08006563
 80064f4:	08006555 	.word	0x08006555
 80064f8:	2b40      	cmp	r3, #64	@ 0x40
 80064fa:	d02e      	beq.n	800655a <UART_SetConfig+0x8aa>
 80064fc:	e031      	b.n	8006562 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064fe:	f7fd fd25 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 8006502:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006504:	e033      	b.n	800656e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006506:	f7fd fd37 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 800650a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800650c:	e02f      	b.n	800656e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe ff66 	bl	80053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800651c:	e027      	b.n	800656e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800651e:	f107 0318 	add.w	r3, r7, #24
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff f8b2 	bl	800568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800652c:	e01f      	b.n	800656e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800652e:	4b2d      	ldr	r3, [pc, #180]	@ (80065e4 <UART_SetConfig+0x934>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800653a:	4b2a      	ldr	r3, [pc, #168]	@ (80065e4 <UART_SetConfig+0x934>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	08db      	lsrs	r3, r3, #3
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	4a24      	ldr	r2, [pc, #144]	@ (80065d8 <UART_SetConfig+0x928>)
 8006546:	fa22 f303 	lsr.w	r3, r2, r3
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800654c:	e00f      	b.n	800656e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800654e:	4b22      	ldr	r3, [pc, #136]	@ (80065d8 <UART_SetConfig+0x928>)
 8006550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006552:	e00c      	b.n	800656e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006554:	4b21      	ldr	r3, [pc, #132]	@ (80065dc <UART_SetConfig+0x92c>)
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006558:	e009      	b.n	800656e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006560:	e005      	b.n	800656e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800656c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800656e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80e7 	beq.w	8006744 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	4a19      	ldr	r2, [pc, #100]	@ (80065e0 <UART_SetConfig+0x930>)
 800657c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006580:	461a      	mov	r2, r3
 8006582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006584:	fbb3 f3f2 	udiv	r3, r3, r2
 8006588:	005a      	lsls	r2, r3, #1
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	441a      	add	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	d916      	bls.n	80065d0 <UART_SetConfig+0x920>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a8:	d212      	bcs.n	80065d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f023 030f 	bic.w	r3, r3, #15
 80065b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	b29a      	uxth	r2, r3
 80065c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065c2:	4313      	orrs	r3, r2
 80065c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e0b9      	b.n	8006744 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065d6:	e0b5      	b.n	8006744 <UART_SetConfig+0xa94>
 80065d8:	03d09000 	.word	0x03d09000
 80065dc:	003d0900 	.word	0x003d0900
 80065e0:	0800b6dc 	.word	0x0800b6dc
 80065e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80065e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	dc49      	bgt.n	8006684 <UART_SetConfig+0x9d4>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	db7c      	blt.n	80066ee <UART_SetConfig+0xa3e>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d87a      	bhi.n	80066ee <UART_SetConfig+0xa3e>
 80065f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <UART_SetConfig+0x950>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	0800668b 	.word	0x0800668b
 8006604:	08006693 	.word	0x08006693
 8006608:	080066ef 	.word	0x080066ef
 800660c:	080066ef 	.word	0x080066ef
 8006610:	0800669b 	.word	0x0800669b
 8006614:	080066ef 	.word	0x080066ef
 8006618:	080066ef 	.word	0x080066ef
 800661c:	080066ef 	.word	0x080066ef
 8006620:	080066ab 	.word	0x080066ab
 8006624:	080066ef 	.word	0x080066ef
 8006628:	080066ef 	.word	0x080066ef
 800662c:	080066ef 	.word	0x080066ef
 8006630:	080066ef 	.word	0x080066ef
 8006634:	080066ef 	.word	0x080066ef
 8006638:	080066ef 	.word	0x080066ef
 800663c:	080066ef 	.word	0x080066ef
 8006640:	080066bb 	.word	0x080066bb
 8006644:	080066ef 	.word	0x080066ef
 8006648:	080066ef 	.word	0x080066ef
 800664c:	080066ef 	.word	0x080066ef
 8006650:	080066ef 	.word	0x080066ef
 8006654:	080066ef 	.word	0x080066ef
 8006658:	080066ef 	.word	0x080066ef
 800665c:	080066ef 	.word	0x080066ef
 8006660:	080066ef 	.word	0x080066ef
 8006664:	080066ef 	.word	0x080066ef
 8006668:	080066ef 	.word	0x080066ef
 800666c:	080066ef 	.word	0x080066ef
 8006670:	080066ef 	.word	0x080066ef
 8006674:	080066ef 	.word	0x080066ef
 8006678:	080066ef 	.word	0x080066ef
 800667c:	080066ef 	.word	0x080066ef
 8006680:	080066e1 	.word	0x080066e1
 8006684:	2b40      	cmp	r3, #64	@ 0x40
 8006686:	d02e      	beq.n	80066e6 <UART_SetConfig+0xa36>
 8006688:	e031      	b.n	80066ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668a:	f7fd fc5f 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 800668e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006690:	e033      	b.n	80066fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006692:	f7fd fc71 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 8006696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006698:	e02f      	b.n	80066fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800669a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe fea0 	bl	80053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a8:	e027      	b.n	80066fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066aa:	f107 0318 	add.w	r3, r7, #24
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe ffec 	bl	800568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066b8:	e01f      	b.n	80066fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006770 <UART_SetConfig+0xac0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066c6:	4b2a      	ldr	r3, [pc, #168]	@ (8006770 <UART_SetConfig+0xac0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	08db      	lsrs	r3, r3, #3
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	4a28      	ldr	r2, [pc, #160]	@ (8006774 <UART_SetConfig+0xac4>)
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066d8:	e00f      	b.n	80066fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80066da:	4b26      	ldr	r3, [pc, #152]	@ (8006774 <UART_SetConfig+0xac4>)
 80066dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066de:	e00c      	b.n	80066fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066e0:	4b25      	ldr	r3, [pc, #148]	@ (8006778 <UART_SetConfig+0xac8>)
 80066e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066e4:	e009      	b.n	80066fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ec:	e005      	b.n	80066fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066f8:	bf00      	nop
    }

    if (pclk != 0U)
 80066fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d021      	beq.n	8006744 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	4a1d      	ldr	r2, [pc, #116]	@ (800677c <UART_SetConfig+0xacc>)
 8006706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800670a:	461a      	mov	r2, r3
 800670c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	441a      	add	r2, r3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006726:	2b0f      	cmp	r3, #15
 8006728:	d909      	bls.n	800673e <UART_SetConfig+0xa8e>
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006730:	d205      	bcs.n	800673e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006734:	b29a      	uxth	r2, r3
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60da      	str	r2, [r3, #12]
 800673c:	e002      	b.n	8006744 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2201      	movs	r2, #1
 8006748:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2201      	movs	r2, #1
 8006750:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2200      	movs	r2, #0
 8006758:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2200      	movs	r2, #0
 800675e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006760:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006764:	4618      	mov	r0, r3
 8006766:	3748      	adds	r7, #72	@ 0x48
 8006768:	46bd      	mov	sp, r7
 800676a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
 8006774:	03d09000 	.word	0x03d09000
 8006778:	003d0900 	.word	0x003d0900
 800677c:	0800b6dc 	.word	0x0800b6dc

08006780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01a      	beq.n	8006896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800687e:	d10a      	bne.n	8006896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	605a      	str	r2, [r3, #4]
  }
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b098      	sub	sp, #96	@ 0x60
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068d4:	f7fa fcb0 	bl	8001238 <HAL_GetTick>
 80068d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d12f      	bne.n	8006948 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068f0:	2200      	movs	r2, #0
 80068f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f88e 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d022      	beq.n	8006948 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006916:	653b      	str	r3, [r7, #80]	@ 0x50
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	461a      	mov	r2, r3
 800691e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006920:	647b      	str	r3, [r7, #68]	@ 0x44
 8006922:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800692e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e6      	bne.n	8006902 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e063      	b.n	8006a10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b04      	cmp	r3, #4
 8006954:	d149      	bne.n	80069ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006956:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800695e:	2200      	movs	r2, #0
 8006960:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f857 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d03c      	beq.n	80069ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	623b      	str	r3, [r7, #32]
   return(result);
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800698e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006990:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800699c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e6      	bne.n	8006970 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3308      	adds	r3, #8
 80069a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c2:	61fa      	str	r2, [r7, #28]
 80069c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	69b9      	ldr	r1, [r7, #24]
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	617b      	str	r3, [r7, #20]
   return(result);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e5      	bne.n	80069a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e012      	b.n	8006a10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3758      	adds	r7, #88	@ 0x58
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a28:	e04f      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d04b      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fa fc01 	bl	8001238 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e04e      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d037      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b80      	cmp	r3, #128	@ 0x80
 8006a5e:	d034      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b40      	cmp	r3, #64	@ 0x40
 8006a64:	d031      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d110      	bne.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2208      	movs	r2, #8
 8006a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f839 	bl	8006af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2208      	movs	r2, #8
 8006a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e029      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa4:	d111      	bne.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f81f 	bl	8006af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00f      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	bf0c      	ite	eq
 8006ada:	2301      	moveq	r3, #1
 8006adc:	2300      	movne	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d0a0      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b095      	sub	sp, #84	@ 0x54
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	4b1e      	ldr	r3, [pc, #120]	@ (8006bbc <UART_EndRxTransfer+0xc8>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d118      	bne.n	8006b9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f023 0310 	bic.w	r3, r3, #16
 8006b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6979      	ldr	r1, [r7, #20]
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	613b      	str	r3, [r7, #16]
   return(result);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e6      	bne.n	8006b6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006bb0:	bf00      	nop
 8006bb2:	3754      	adds	r7, #84	@ 0x54
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	effffffe 	.word	0xeffffffe

08006bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	f107 001c 	add.w	r0, r7, #28
 8006bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d121      	bne.n	8006c1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	4b2c      	ldr	r3, [pc, #176]	@ (8006c9c <USB_CoreInit+0xdc>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d105      	bne.n	8006c12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 faf6 	bl	8008204 <USB_CoreReset>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
 8006c1c:	e01b      	b.n	8006c56 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 faea 	bl	8008204 <USB_CoreReset>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c48:	e005      	b.n	8006c56 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c56:	7fbb      	ldrb	r3, [r7, #30]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d116      	bne.n	8006c8a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <USB_CoreInit+0xe0>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f043 0206 	orr.w	r2, r3, #6
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c96:	b004      	add	sp, #16
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	ffbdffbf 	.word	0xffbdffbf
 8006ca0:	03ee0000 	.word	0x03ee0000

08006ca4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d165      	bne.n	8006d84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4a41      	ldr	r2, [pc, #260]	@ (8006dc0 <USB_SetTurnaroundTime+0x11c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d906      	bls.n	8006cce <USB_SetTurnaroundTime+0x2a>
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4a40      	ldr	r2, [pc, #256]	@ (8006dc4 <USB_SetTurnaroundTime+0x120>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d202      	bcs.n	8006cce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cc8:	230f      	movs	r3, #15
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e062      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	4a3c      	ldr	r2, [pc, #240]	@ (8006dc4 <USB_SetTurnaroundTime+0x120>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d306      	bcc.n	8006ce4 <USB_SetTurnaroundTime+0x40>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8006dc8 <USB_SetTurnaroundTime+0x124>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d202      	bcs.n	8006ce4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cde:	230e      	movs	r3, #14
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	e057      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4a38      	ldr	r2, [pc, #224]	@ (8006dc8 <USB_SetTurnaroundTime+0x124>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d306      	bcc.n	8006cfa <USB_SetTurnaroundTime+0x56>
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4a37      	ldr	r2, [pc, #220]	@ (8006dcc <USB_SetTurnaroundTime+0x128>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d202      	bcs.n	8006cfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006cf4:	230d      	movs	r3, #13
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	e04c      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4a33      	ldr	r2, [pc, #204]	@ (8006dcc <USB_SetTurnaroundTime+0x128>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d306      	bcc.n	8006d10 <USB_SetTurnaroundTime+0x6c>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4a32      	ldr	r2, [pc, #200]	@ (8006dd0 <USB_SetTurnaroundTime+0x12c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d802      	bhi.n	8006d10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	e041      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4a2f      	ldr	r2, [pc, #188]	@ (8006dd0 <USB_SetTurnaroundTime+0x12c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d906      	bls.n	8006d26 <USB_SetTurnaroundTime+0x82>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd4 <USB_SetTurnaroundTime+0x130>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d802      	bhi.n	8006d26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d20:	230b      	movs	r3, #11
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e036      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd4 <USB_SetTurnaroundTime+0x130>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d906      	bls.n	8006d3c <USB_SetTurnaroundTime+0x98>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4a29      	ldr	r2, [pc, #164]	@ (8006dd8 <USB_SetTurnaroundTime+0x134>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d802      	bhi.n	8006d3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d36:	230a      	movs	r3, #10
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e02b      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4a26      	ldr	r2, [pc, #152]	@ (8006dd8 <USB_SetTurnaroundTime+0x134>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d906      	bls.n	8006d52 <USB_SetTurnaroundTime+0xae>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4a25      	ldr	r2, [pc, #148]	@ (8006ddc <USB_SetTurnaroundTime+0x138>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d202      	bcs.n	8006d52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d4c:	2309      	movs	r3, #9
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e020      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	4a21      	ldr	r2, [pc, #132]	@ (8006ddc <USB_SetTurnaroundTime+0x138>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d306      	bcc.n	8006d68 <USB_SetTurnaroundTime+0xc4>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4a20      	ldr	r2, [pc, #128]	@ (8006de0 <USB_SetTurnaroundTime+0x13c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d802      	bhi.n	8006d68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d62:	2308      	movs	r3, #8
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e015      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8006de0 <USB_SetTurnaroundTime+0x13c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d906      	bls.n	8006d7e <USB_SetTurnaroundTime+0xda>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <USB_SetTurnaroundTime+0x140>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d202      	bcs.n	8006d7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d78:	2307      	movs	r3, #7
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e00a      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d7e:	2306      	movs	r3, #6
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e007      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d8a:	2309      	movs	r3, #9
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e001      	b.n	8006d94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d90:	2309      	movs	r3, #9
 8006d92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	029b      	lsls	r3, r3, #10
 8006da8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006dac:	431a      	orrs	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	00d8acbf 	.word	0x00d8acbf
 8006dc4:	00e4e1c0 	.word	0x00e4e1c0
 8006dc8:	00f42400 	.word	0x00f42400
 8006dcc:	01067380 	.word	0x01067380
 8006dd0:	011a499f 	.word	0x011a499f
 8006dd4:	01312cff 	.word	0x01312cff
 8006dd8:	014ca43f 	.word	0x014ca43f
 8006ddc:	016e3600 	.word	0x016e3600
 8006de0:	01a6ab1f 	.word	0x01a6ab1f
 8006de4:	01e84800 	.word	0x01e84800

08006de8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f043 0201 	orr.w	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f023 0201 	bic.w	r2, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d115      	bne.n	8006e7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e5a:	200a      	movs	r0, #10
 8006e5c:	f7fa f9f8 	bl	8001250 <HAL_Delay>
      ms += 10U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	330a      	adds	r3, #10
 8006e64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 f93b 	bl	80080e2 <USB_GetMode>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d01e      	beq.n	8006eb0 <USB_SetCurrentMode+0x84>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e76:	d9f0      	bls.n	8006e5a <USB_SetCurrentMode+0x2e>
 8006e78:	e01a      	b.n	8006eb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d115      	bne.n	8006eac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e8c:	200a      	movs	r0, #10
 8006e8e:	f7fa f9df 	bl	8001250 <HAL_Delay>
      ms += 10U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	330a      	adds	r3, #10
 8006e96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f922 	bl	80080e2 <USB_GetMode>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <USB_SetCurrentMode+0x84>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ea8:	d9f0      	bls.n	8006e8c <USB_SetCurrentMode+0x60>
 8006eaa:	e001      	b.n	8006eb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e005      	b.n	8006ebc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2bc8      	cmp	r3, #200	@ 0xc8
 8006eb4:	d101      	bne.n	8006eba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b086      	sub	sp, #24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	e009      	b.n	8006ef8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	3340      	adds	r3, #64	@ 0x40
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b0e      	cmp	r3, #14
 8006efc:	d9f2      	bls.n	8006ee4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006efe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d11c      	bne.n	8006f40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f14:	f043 0302 	orr.w	r3, r3, #2
 8006f18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e005      	b.n	8006f4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f52:	461a      	mov	r2, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d10d      	bne.n	8006f7c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f68:	2100      	movs	r1, #0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f968 	bl	8007240 <USB_SetDevSpeed>
 8006f70:	e008      	b.n	8006f84 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f72:	2101      	movs	r1, #1
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f963 	bl	8007240 <USB_SetDevSpeed>
 8006f7a:	e003      	b.n	8006f84 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f7c:	2103      	movs	r1, #3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f95e 	bl	8007240 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f84:	2110      	movs	r1, #16
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f8fa 	bl	8007180 <USB_FlushTxFifo>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f924 	bl	80071e4 <USB_FlushRxFifo>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fac:	461a      	mov	r2, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	e043      	b.n	8007058 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fe6:	d118      	bne.n	800701a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10a      	bne.n	8007004 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	e013      	b.n	800702c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007010:	461a      	mov	r2, r3
 8007012:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	e008      	b.n	800702c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007026:	461a      	mov	r2, r3
 8007028:	2300      	movs	r3, #0
 800702a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007038:	461a      	mov	r2, r3
 800703a:	2300      	movs	r3, #0
 800703c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704a:	461a      	mov	r2, r3
 800704c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007050:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3301      	adds	r3, #1
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800705c:	461a      	mov	r2, r3
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4293      	cmp	r3, r2
 8007062:	d3b5      	bcc.n	8006fd0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007064:	2300      	movs	r3, #0
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	e043      	b.n	80070f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800707c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007080:	d118      	bne.n	80070b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007094:	461a      	mov	r2, r3
 8007096:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	e013      	b.n	80070c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070aa:	461a      	mov	r2, r3
 80070ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e008      	b.n	80070c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c0:	461a      	mov	r2, r3
 80070c2:	2300      	movs	r3, #0
 80070c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070d2:	461a      	mov	r2, r3
 80070d4:	2300      	movs	r3, #0
 80070d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e4:	461a      	mov	r2, r3
 80070e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	3301      	adds	r3, #1
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070f6:	461a      	mov	r2, r3
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d3b5      	bcc.n	800706a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800710c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007110:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800711e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007120:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f043 0210 	orr.w	r2, r3, #16
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699a      	ldr	r2, [r3, #24]
 8007138:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <USB_DevInit+0x2b4>)
 800713a:	4313      	orrs	r3, r2
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007140:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	f043 0208 	orr.w	r2, r3, #8
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007154:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007158:	2b01      	cmp	r3, #1
 800715a:	d105      	bne.n	8007168 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699a      	ldr	r2, [r3, #24]
 8007160:	4b06      	ldr	r3, [pc, #24]	@ (800717c <USB_DevInit+0x2b8>)
 8007162:	4313      	orrs	r3, r2
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007174:	b004      	add	sp, #16
 8007176:	4770      	bx	lr
 8007178:	803c3800 	.word	0x803c3800
 800717c:	40000004 	.word	0x40000004

08007180 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800719a:	d901      	bls.n	80071a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e01b      	b.n	80071d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	daf2      	bge.n	800718e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	019b      	lsls	r3, r3, #6
 80071b0:	f043 0220 	orr.w	r2, r3, #32
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071c4:	d901      	bls.n	80071ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e006      	b.n	80071d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d0f0      	beq.n	80071b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071fc:	d901      	bls.n	8007202 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e018      	b.n	8007234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	daf2      	bge.n	80071f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2210      	movs	r2, #16
 8007212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007220:	d901      	bls.n	8007226 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e006      	b.n	8007234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b10      	cmp	r3, #16
 8007230:	d0f0      	beq.n	8007214 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007260:	4313      	orrs	r3, r2
 8007262:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007272:	b480      	push	{r7}
 8007274:	b087      	sub	sp, #28
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 0306 	and.w	r3, r3, #6
 800728a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d102      	bne.n	8007298 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]
 8007296:	e00a      	b.n	80072ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b02      	cmp	r3, #2
 800729c:	d002      	beq.n	80072a4 <USB_GetDevSpeed+0x32>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b06      	cmp	r3, #6
 80072a2:	d102      	bne.n	80072aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072a4:	2302      	movs	r3, #2
 80072a6:	75fb      	strb	r3, [r7, #23]
 80072a8:	e001      	b.n	80072ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072aa:	230f      	movs	r3, #15
 80072ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d139      	bne.n	800734c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	2101      	movs	r1, #1
 80072ea:	fa01 f303 	lsl.w	r3, r1, r3
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d153      	bne.n	80073b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	791b      	ldrb	r3, [r3, #4]
 800732a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800732c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	059b      	lsls	r3, r3, #22
 8007332:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007334:	431a      	orrs	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	0159      	lsls	r1, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	440b      	add	r3, r1
 800733e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007342:	4619      	mov	r1, r3
 8007344:	4b20      	ldr	r3, [pc, #128]	@ (80073c8 <USB_ActivateEndpoint+0x10c>)
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]
 800734a:	e035      	b.n	80073b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	2101      	movs	r1, #1
 800735e:	fa01 f303 	lsl.w	r3, r1, r3
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	68f9      	ldr	r1, [r7, #12]
 8007366:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800736a:	4313      	orrs	r3, r2
 800736c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d119      	bne.n	80073b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	791b      	ldrb	r3, [r3, #4]
 800739e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073a0:	430b      	orrs	r3, r1
 80073a2:	431a      	orrs	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	0159      	lsls	r1, r3, #5
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	440b      	add	r3, r1
 80073ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b0:	4619      	mov	r1, r3
 80073b2:	4b05      	ldr	r3, [pc, #20]	@ (80073c8 <USB_ActivateEndpoint+0x10c>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	10008000 	.word	0x10008000

080073cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d161      	bne.n	80074ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073fe:	d11f      	bne.n	8007440 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	440a      	add	r2, r1
 8007416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800741a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800741e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800743a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800743e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007446:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	2101      	movs	r1, #1
 8007452:	fa01 f303 	lsl.w	r3, r1, r3
 8007456:	b29b      	uxth	r3, r3
 8007458:	43db      	mvns	r3, r3
 800745a:	68f9      	ldr	r1, [r7, #12]
 800745c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007460:	4013      	ands	r3, r2
 8007462:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	2101      	movs	r1, #1
 8007476:	fa01 f303 	lsl.w	r3, r1, r3
 800747a:	b29b      	uxth	r3, r3
 800747c:	43db      	mvns	r3, r3
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007484:	4013      	ands	r3, r2
 8007486:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	0159      	lsls	r1, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	440b      	add	r3, r1
 800749e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a2:	4619      	mov	r1, r3
 80074a4:	4b35      	ldr	r3, [pc, #212]	@ (800757c <USB_DeactivateEndpoint+0x1b0>)
 80074a6:	4013      	ands	r3, r2
 80074a8:	600b      	str	r3, [r1, #0]
 80074aa:	e060      	b.n	800756e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074c2:	d11f      	bne.n	8007504 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f303 	lsl.w	r3, r1, r3
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	43db      	mvns	r3, r3
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007524:	4013      	ands	r3, r2
 8007526:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800752e:	69da      	ldr	r2, [r3, #28]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	2101      	movs	r1, #1
 800753a:	fa01 f303 	lsl.w	r3, r1, r3
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	43db      	mvns	r3, r3
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007548:	4013      	ands	r3, r2
 800754a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	0159      	lsls	r1, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	440b      	add	r3, r1
 8007562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007566:	4619      	mov	r1, r3
 8007568:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <USB_DeactivateEndpoint+0x1b4>)
 800756a:	4013      	ands	r3, r2
 800756c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	ec337800 	.word	0xec337800
 8007580:	eff37800 	.word	0xeff37800

08007584 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	@ 0x28
 8007588:	af02      	add	r7, sp, #8
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	f040 8181 	bne.w	80078a8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d132      	bne.n	8007614 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	0159      	lsls	r1, r3, #5
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	440b      	add	r3, r1
 80075c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c8:	4619      	mov	r1, r3
 80075ca:	4ba5      	ldr	r3, [pc, #660]	@ (8007860 <USB_EPStartXfer+0x2dc>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	69fa      	ldr	r2, [r7, #28]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	0159      	lsls	r1, r3, #5
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	440b      	add	r3, r1
 8007606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800760a:	4619      	mov	r1, r3
 800760c:	4b95      	ldr	r3, [pc, #596]	@ (8007864 <USB_EPStartXfer+0x2e0>)
 800760e:	4013      	ands	r3, r2
 8007610:	610b      	str	r3, [r1, #16]
 8007612:	e092      	b.n	800773a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	0159      	lsls	r1, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	440b      	add	r3, r1
 800762a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762e:	4619      	mov	r1, r3
 8007630:	4b8c      	ldr	r3, [pc, #560]	@ (8007864 <USB_EPStartXfer+0x2e0>)
 8007632:	4013      	ands	r3, r2
 8007634:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	0159      	lsls	r1, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	440b      	add	r3, r1
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	4619      	mov	r1, r3
 8007652:	4b83      	ldr	r3, [pc, #524]	@ (8007860 <USB_EPStartXfer+0x2dc>)
 8007654:	4013      	ands	r3, r2
 8007656:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d11a      	bne.n	8007694 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	429a      	cmp	r2, r3
 8007668:	d903      	bls.n	8007672 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800768c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007690:	6113      	str	r3, [r2, #16]
 8007692:	e01b      	b.n	80076cc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6919      	ldr	r1, [r3, #16]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	440b      	add	r3, r1
 80076ac:	1e59      	subs	r1, r3, #1
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80076b6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076b8:	4b6b      	ldr	r3, [pc, #428]	@ (8007868 <USB_EPStartXfer+0x2e4>)
 80076ba:	400b      	ands	r3, r1
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	0148      	lsls	r0, r1, #5
 80076c0:	69f9      	ldr	r1, [r7, #28]
 80076c2:	4401      	add	r1, r0
 80076c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076c8:	4313      	orrs	r3, r2
 80076ca:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e2:	69b9      	ldr	r1, [r7, #24]
 80076e4:	0148      	lsls	r0, r1, #5
 80076e6:	69f9      	ldr	r1, [r7, #28]
 80076e8:	4401      	add	r1, r0
 80076ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076ee:	4313      	orrs	r3, r2
 80076f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d11f      	bne.n	800773a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007714:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007718:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007734:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007738:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d14b      	bne.n	80077d8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d009      	beq.n	800775c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007754:	461a      	mov	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	791b      	ldrb	r3, [r3, #4]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d128      	bne.n	80077b6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d110      	bne.n	8007796 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800778e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	e00f      	b.n	80077b6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69ba      	ldr	r2, [r7, #24]
 80077a6:	0151      	lsls	r1, r2, #5
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	440a      	add	r2, r1
 80077ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e16a      	b.n	8007aae <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	0151      	lsls	r1, r2, #5
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	440a      	add	r2, r1
 80077ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	791b      	ldrb	r3, [r3, #4]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d015      	beq.n	800782c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8152 	beq.w	8007aae <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	2101      	movs	r1, #1
 800781c:	fa01 f303 	lsl.w	r3, r1, r3
 8007820:	69f9      	ldr	r1, [r7, #28]
 8007822:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007826:	4313      	orrs	r3, r2
 8007828:	634b      	str	r3, [r1, #52]	@ 0x34
 800782a:	e140      	b.n	8007aae <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d117      	bne.n	800786c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007856:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	e016      	b.n	800788c <USB_EPStartXfer+0x308>
 800785e:	bf00      	nop
 8007860:	e007ffff 	.word	0xe007ffff
 8007864:	fff80000 	.word	0xfff80000
 8007868:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800788a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	68d9      	ldr	r1, [r3, #12]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	b298      	uxth	r0, r3
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	4603      	mov	r3, r0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f9b9 	bl	8007c18 <USB_WritePacket>
 80078a6:	e102      	b.n	8007aae <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	0159      	lsls	r1, r3, #5
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	440b      	add	r3, r1
 80078be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c2:	4619      	mov	r1, r3
 80078c4:	4b7c      	ldr	r3, [pc, #496]	@ (8007ab8 <USB_EPStartXfer+0x534>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	0159      	lsls	r1, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	440b      	add	r3, r1
 80078e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e4:	4619      	mov	r1, r3
 80078e6:	4b75      	ldr	r3, [pc, #468]	@ (8007abc <USB_EPStartXfer+0x538>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d12f      	bne.n	8007952 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007916:	691a      	ldr	r2, [r3, #16]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007920:	69b9      	ldr	r1, [r7, #24]
 8007922:	0148      	lsls	r0, r1, #5
 8007924:	69f9      	ldr	r1, [r7, #28]
 8007926:	4401      	add	r1, r0
 8007928:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800792c:	4313      	orrs	r3, r2
 800792e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	440a      	add	r2, r1
 8007946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800794a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800794e:	6113      	str	r3, [r2, #16]
 8007950:	e05f      	b.n	8007a12 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d123      	bne.n	80079a2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007970:	69b9      	ldr	r1, [r7, #24]
 8007972:	0148      	lsls	r0, r1, #5
 8007974:	69f9      	ldr	r1, [r7, #28]
 8007976:	4401      	add	r1, r0
 8007978:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800797c:	4313      	orrs	r3, r2
 800797e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800799a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800799e:	6113      	str	r3, [r2, #16]
 80079a0:	e037      	b.n	8007a12 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	4413      	add	r3, r2
 80079ac:	1e5a      	subs	r2, r3, #1
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	8afa      	ldrh	r2, [r7, #22]
 80079be:	fb03 f202 	mul.w	r2, r3, r2
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	8afb      	ldrh	r3, [r7, #22]
 80079d6:	04d9      	lsls	r1, r3, #19
 80079d8:	4b39      	ldr	r3, [pc, #228]	@ (8007ac0 <USB_EPStartXfer+0x53c>)
 80079da:	400b      	ands	r3, r1
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	0148      	lsls	r0, r1, #5
 80079e0:	69f9      	ldr	r1, [r7, #28]
 80079e2:	4401      	add	r1, r0
 80079e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079e8:	4313      	orrs	r3, r2
 80079ea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a02:	69b9      	ldr	r1, [r7, #24]
 8007a04:	0148      	lsls	r0, r1, #5
 8007a06:	69f9      	ldr	r1, [r7, #28]
 8007a08:	4401      	add	r1, r0
 8007a0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d10d      	bne.n	8007a34 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d009      	beq.n	8007a34 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	68d9      	ldr	r1, [r3, #12]
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a30:	460a      	mov	r2, r1
 8007a32:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	791b      	ldrb	r3, [r3, #4]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d128      	bne.n	8007a8e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d110      	bne.n	8007a6e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	e00f      	b.n	8007a8e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a8c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aa8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007aac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3720      	adds	r7, #32
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	fff80000 	.word	0xfff80000
 8007abc:	e007ffff 	.word	0xe007ffff
 8007ac0:	1ff80000 	.word	0x1ff80000

08007ac4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d14a      	bne.n	8007b78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007af6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007afa:	f040 8086 	bne.w	8007c0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	7812      	ldrb	r2, [r2, #0]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	7812      	ldrb	r2, [r2, #0]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d902      	bls.n	8007b5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
          break;
 8007b5a:	e056      	b.n	8007c0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b74:	d0e7      	beq.n	8007b46 <USB_EPStopXfer+0x82>
 8007b76:	e048      	b.n	8007c0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b90:	d13b      	bne.n	8007c0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	7812      	ldrb	r2, [r2, #0]
 8007ba6:	0151      	lsls	r1, r2, #5
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	440a      	add	r2, r1
 8007bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007bb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	7812      	ldrb	r2, [r2, #0]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d902      	bls.n	8007bf0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
          break;
 8007bee:	e00c      	b.n	8007c0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c08:	d0e7      	beq.n	8007bda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b089      	sub	sp, #36	@ 0x24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	4611      	mov	r1, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	460b      	mov	r3, r1
 8007c28:	71fb      	strb	r3, [r7, #7]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d123      	bne.n	8007c86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c3e:	88bb      	ldrh	r3, [r7, #4]
 8007c40:	3303      	adds	r3, #3
 8007c42:	089b      	lsrs	r3, r3, #2
 8007c44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
 8007c4a:	e018      	b.n	8007c7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	031a      	lsls	r2, r3, #12
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c58:	461a      	mov	r2, r3
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	3301      	adds	r3, #1
 8007c64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	3301      	adds	r3, #1
 8007c76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	61bb      	str	r3, [r7, #24]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d3e2      	bcc.n	8007c4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3724      	adds	r7, #36	@ 0x24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b08b      	sub	sp, #44	@ 0x2c
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	089b      	lsrs	r3, r3, #2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007cb2:	88fb      	ldrh	r3, [r7, #6]
 8007cb4:	f003 0303 	and.w	r3, r3, #3
 8007cb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007cba:	2300      	movs	r3, #0
 8007cbc:	623b      	str	r3, [r7, #32]
 8007cbe:	e014      	b.n	8007cea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cca:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	3301      	adds	r3, #1
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	3301      	adds	r3, #1
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	623b      	str	r3, [r7, #32]
 8007cea:	6a3a      	ldr	r2, [r7, #32]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d3e6      	bcc.n	8007cc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007cf2:	8bfb      	ldrh	r3, [r7, #30]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01e      	beq.n	8007d36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d02:	461a      	mov	r2, r3
 8007d04:	f107 0310 	add.w	r3, r7, #16
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1c:	701a      	strb	r2, [r3, #0]
      i++;
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	3301      	adds	r3, #1
 8007d22:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	3301      	adds	r3, #1
 8007d28:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007d2a:	8bfb      	ldrh	r3, [r7, #30]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d30:	8bfb      	ldrh	r3, [r7, #30]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1ea      	bne.n	8007d0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	372c      	adds	r7, #44	@ 0x2c
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d12c      	bne.n	8007dba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	db12      	blt.n	8007d98 <USB_EPSetStall+0x54>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00f      	beq.n	8007d98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	0151      	lsls	r1, r2, #5
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	440a      	add	r2, r1
 8007dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007db2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	e02b      	b.n	8007e12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	db12      	blt.n	8007df2 <USB_EPSetStall+0xae>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00f      	beq.n	8007df2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007df0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	0151      	lsls	r1, r2, #5
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	440a      	add	r2, r1
 8007e08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d128      	bne.n	8007e8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	791b      	ldrb	r3, [r3, #4]
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d003      	beq.n	8007e6c <USB_EPClearStall+0x4c>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	791b      	ldrb	r3, [r3, #4]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d138      	bne.n	8007ede <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	e027      	b.n	8007ede <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007eac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d003      	beq.n	8007ebe <USB_EPClearStall+0x9e>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	791b      	ldrb	r3, [r3, #4]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d10f      	bne.n	8007ede <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007edc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f0a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007f0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007f20:	68f9      	ldr	r1, [r7, #12]
 8007f22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f26:	4313      	orrs	r3, r2
 8007f28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f66:	f023 0302 	bic.w	r3, r3, #2
 8007f6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fa8:	f043 0302 	orr.w	r3, r3, #2
 8007fac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	4013      	ands	r3, r2
 8008004:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	0c1b      	lsrs	r3, r3, #16
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008016:	b480      	push	{r7}
 8008018:	b085      	sub	sp, #20
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	4013      	ands	r3, r2
 8008038:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	b29b      	uxth	r3, r3
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	4013      	ands	r3, r2
 8008076:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008078:	68bb      	ldr	r3, [r7, #8]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008086:	b480      	push	{r7}
 8008088:	b087      	sub	sp, #28
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	fa22 f303 	lsr.w	r3, r2, r3
 80080b6:	01db      	lsls	r3, r3, #7
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4013      	ands	r3, r2
 80080d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080d4:	68bb      	ldr	r3, [r7, #8]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f003 0301 	and.w	r3, r3, #1
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
	...

08008100 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811a:	4619      	mov	r1, r3
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <USB_ActivateSetup+0x44>)
 800811e:	4013      	ands	r3, r2
 8008120:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008134:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	fffff800 	.word	0xfffff800

08008148 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	460b      	mov	r3, r1
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	333c      	adds	r3, #60	@ 0x3c
 800815e:	3304      	adds	r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	4a26      	ldr	r2, [pc, #152]	@ (8008200 <USB_EP0_OutStart+0xb8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d90a      	bls.n	8008182 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800817c:	d101      	bne.n	8008182 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e037      	b.n	80081f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008188:	461a      	mov	r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800819c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081b0:	f043 0318 	orr.w	r3, r3, #24
 80081b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80081c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80081ca:	7afb      	ldrb	r3, [r7, #11]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d10f      	bne.n	80081f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80081ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	4f54300a 	.word	0x4f54300a

08008204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800821c:	d901      	bls.n	8008222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e01b      	b.n	800825a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	daf2      	bge.n	8008210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f043 0201 	orr.w	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008246:	d901      	bls.n	800824c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e006      	b.n	800825a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b01      	cmp	r3, #1
 8008256:	d0f0      	beq.n	800823a <USB_CoreReset+0x36>

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008274:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008278:	f002 fcfe 	bl	800ac78 <USBD_static_malloc>
 800827c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d109      	bne.n	8008298 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	32b0      	adds	r2, #176	@ 0xb0
 800828e:	2100      	movs	r1, #0
 8008290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008294:	2302      	movs	r3, #2
 8008296:	e0d4      	b.n	8008442 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008298:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800829c:	2100      	movs	r1, #0
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f002 fd4e 	bl	800ad40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32b0      	adds	r2, #176	@ 0xb0
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	32b0      	adds	r2, #176	@ 0xb0
 80082be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7c1b      	ldrb	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d138      	bne.n	8008342 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082d0:	4b5e      	ldr	r3, [pc, #376]	@ (800844c <USBD_CDC_Init+0x1e4>)
 80082d2:	7819      	ldrb	r1, [r3, #0]
 80082d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082d8:	2202      	movs	r2, #2
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f002 fba9 	bl	800aa32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082e0:	4b5a      	ldr	r3, [pc, #360]	@ (800844c <USBD_CDC_Init+0x1e4>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	f003 020f 	and.w	r2, r3, #15
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	3324      	adds	r3, #36	@ 0x24
 80082f6:	2201      	movs	r2, #1
 80082f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082fa:	4b55      	ldr	r3, [pc, #340]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 80082fc:	7819      	ldrb	r1, [r3, #0]
 80082fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008302:	2202      	movs	r2, #2
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f002 fb94 	bl	800aa32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800830a:	4b51      	ldr	r3, [pc, #324]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	f003 020f 	and.w	r2, r3, #15
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008322:	2201      	movs	r2, #1
 8008324:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008326:	4b4b      	ldr	r3, [pc, #300]	@ (8008454 <USBD_CDC_Init+0x1ec>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	f003 020f 	and.w	r2, r3, #15
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	3326      	adds	r3, #38	@ 0x26
 800833c:	2210      	movs	r2, #16
 800833e:	801a      	strh	r2, [r3, #0]
 8008340:	e035      	b.n	80083ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008342:	4b42      	ldr	r3, [pc, #264]	@ (800844c <USBD_CDC_Init+0x1e4>)
 8008344:	7819      	ldrb	r1, [r3, #0]
 8008346:	2340      	movs	r3, #64	@ 0x40
 8008348:	2202      	movs	r2, #2
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f002 fb71 	bl	800aa32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008350:	4b3e      	ldr	r3, [pc, #248]	@ (800844c <USBD_CDC_Init+0x1e4>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 020f 	and.w	r2, r3, #15
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	3324      	adds	r3, #36	@ 0x24
 8008366:	2201      	movs	r2, #1
 8008368:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800836a:	4b39      	ldr	r3, [pc, #228]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 800836c:	7819      	ldrb	r1, [r3, #0]
 800836e:	2340      	movs	r3, #64	@ 0x40
 8008370:	2202      	movs	r2, #2
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f002 fb5d 	bl	800aa32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008378:	4b35      	ldr	r3, [pc, #212]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	f003 020f 	and.w	r2, r3, #15
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008390:	2201      	movs	r2, #1
 8008392:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008394:	4b2f      	ldr	r3, [pc, #188]	@ (8008454 <USBD_CDC_Init+0x1ec>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	f003 020f 	and.w	r2, r3, #15
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	3326      	adds	r3, #38	@ 0x26
 80083aa:	2210      	movs	r2, #16
 80083ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083ae:	4b29      	ldr	r3, [pc, #164]	@ (8008454 <USBD_CDC_Init+0x1ec>)
 80083b0:	7819      	ldrb	r1, [r3, #0]
 80083b2:	2308      	movs	r3, #8
 80083b4:	2203      	movs	r2, #3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f002 fb3b 	bl	800aa32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80083bc:	4b25      	ldr	r3, [pc, #148]	@ (8008454 <USBD_CDC_Init+0x1ec>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f003 020f 	and.w	r2, r3, #15
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	440b      	add	r3, r1
 80083d0:	3324      	adds	r3, #36	@ 0x24
 80083d2:	2201      	movs	r2, #1
 80083d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	33b0      	adds	r3, #176	@ 0xb0
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800840c:	2302      	movs	r3, #2
 800840e:	e018      	b.n	8008442 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	7c1b      	ldrb	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008418:	4b0d      	ldr	r3, [pc, #52]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 800841a:	7819      	ldrb	r1, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f002 fbf2 	bl	800ac10 <USBD_LL_PrepareReceive>
 800842c:	e008      	b.n	8008440 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800842e:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 8008430:	7819      	ldrb	r1, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008438:	2340      	movs	r3, #64	@ 0x40
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f002 fbe8 	bl	800ac10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	240000b3 	.word	0x240000b3
 8008450:	240000b4 	.word	0x240000b4
 8008454:	240000b5 	.word	0x240000b5

08008458 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008464:	4b3a      	ldr	r3, [pc, #232]	@ (8008550 <USBD_CDC_DeInit+0xf8>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f002 fb07 	bl	800aa7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008470:	4b37      	ldr	r3, [pc, #220]	@ (8008550 <USBD_CDC_DeInit+0xf8>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	f003 020f 	and.w	r2, r3, #15
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	3324      	adds	r3, #36	@ 0x24
 8008486:	2200      	movs	r2, #0
 8008488:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800848a:	4b32      	ldr	r3, [pc, #200]	@ (8008554 <USBD_CDC_DeInit+0xfc>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f002 faf4 	bl	800aa7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008496:	4b2f      	ldr	r3, [pc, #188]	@ (8008554 <USBD_CDC_DeInit+0xfc>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f003 020f 	and.w	r2, r3, #15
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80084ae:	2200      	movs	r2, #0
 80084b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80084b2:	4b29      	ldr	r3, [pc, #164]	@ (8008558 <USBD_CDC_DeInit+0x100>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f002 fae0 	bl	800aa7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80084be:	4b26      	ldr	r3, [pc, #152]	@ (8008558 <USBD_CDC_DeInit+0x100>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 020f 	and.w	r2, r3, #15
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	3324      	adds	r3, #36	@ 0x24
 80084d4:	2200      	movs	r2, #0
 80084d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80084d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008558 <USBD_CDC_DeInit+0x100>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	f003 020f 	and.w	r2, r3, #15
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	3326      	adds	r3, #38	@ 0x26
 80084ee:	2200      	movs	r2, #0
 80084f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	32b0      	adds	r2, #176	@ 0xb0
 80084fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01f      	beq.n	8008544 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	33b0      	adds	r3, #176	@ 0xb0
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	32b0      	adds	r2, #176	@ 0xb0
 8008522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008526:	4618      	mov	r0, r3
 8008528:	f002 fbb4 	bl	800ac94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32b0      	adds	r2, #176	@ 0xb0
 8008536:	2100      	movs	r1, #0
 8008538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	240000b3 	.word	0x240000b3
 8008554:	240000b4 	.word	0x240000b4
 8008558:	240000b5 	.word	0x240000b5

0800855c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	32b0      	adds	r2, #176	@ 0xb0
 8008570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008574:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008588:	2303      	movs	r3, #3
 800858a:	e0bf      	b.n	800870c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008594:	2b00      	cmp	r3, #0
 8008596:	d050      	beq.n	800863a <USBD_CDC_Setup+0xde>
 8008598:	2b20      	cmp	r3, #32
 800859a:	f040 80af 	bne.w	80086fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	88db      	ldrh	r3, [r3, #6]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d03a      	beq.n	800861c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da1b      	bge.n	80085e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	33b0      	adds	r3, #176	@ 0xb0
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80085c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	88d2      	ldrh	r2, [r2, #6]
 80085cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	88db      	ldrh	r3, [r3, #6]
 80085d2:	2b07      	cmp	r3, #7
 80085d4:	bf28      	it	cs
 80085d6:	2307      	movcs	r3, #7
 80085d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	89fa      	ldrh	r2, [r7, #14]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fdbd 	bl	800a160 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80085e6:	e090      	b.n	800870a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	785a      	ldrb	r2, [r3, #1]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	88db      	ldrh	r3, [r3, #6]
 80085f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80085f8:	d803      	bhi.n	8008602 <USBD_CDC_Setup+0xa6>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	88db      	ldrh	r3, [r3, #6]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	e000      	b.n	8008604 <USBD_CDC_Setup+0xa8>
 8008602:	2240      	movs	r2, #64	@ 0x40
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800860a:	6939      	ldr	r1, [r7, #16]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008612:	461a      	mov	r2, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fdcf 	bl	800a1b8 <USBD_CtlPrepareRx>
      break;
 800861a:	e076      	b.n	800870a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	33b0      	adds	r3, #176	@ 0xb0
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	7850      	ldrb	r0, [r2, #1]
 8008632:	2200      	movs	r2, #0
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	4798      	blx	r3
      break;
 8008638:	e067      	b.n	800870a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	2b0b      	cmp	r3, #11
 8008640:	d851      	bhi.n	80086e6 <USBD_CDC_Setup+0x18a>
 8008642:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <USBD_CDC_Setup+0xec>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008679 	.word	0x08008679
 800864c:	080086f5 	.word	0x080086f5
 8008650:	080086e7 	.word	0x080086e7
 8008654:	080086e7 	.word	0x080086e7
 8008658:	080086e7 	.word	0x080086e7
 800865c:	080086e7 	.word	0x080086e7
 8008660:	080086e7 	.word	0x080086e7
 8008664:	080086e7 	.word	0x080086e7
 8008668:	080086e7 	.word	0x080086e7
 800866c:	080086e7 	.word	0x080086e7
 8008670:	080086a3 	.word	0x080086a3
 8008674:	080086cd 	.word	0x080086cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b03      	cmp	r3, #3
 8008682:	d107      	bne.n	8008694 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008684:	f107 030a 	add.w	r3, r7, #10
 8008688:	2202      	movs	r2, #2
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 fd67 	bl	800a160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008692:	e032      	b.n	80086fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 fce5 	bl	800a066 <USBD_CtlError>
            ret = USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	75fb      	strb	r3, [r7, #23]
          break;
 80086a0:	e02b      	b.n	80086fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d107      	bne.n	80086be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80086ae:	f107 030d 	add.w	r3, r7, #13
 80086b2:	2201      	movs	r2, #1
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 fd52 	bl	800a160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086bc:	e01d      	b.n	80086fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fcd0 	bl	800a066 <USBD_CtlError>
            ret = USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	75fb      	strb	r3, [r7, #23]
          break;
 80086ca:	e016      	b.n	80086fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d00f      	beq.n	80086f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 fcc3 	bl	800a066 <USBD_CtlError>
            ret = USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80086e4:	e008      	b.n	80086f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 fcbc 	bl	800a066 <USBD_CtlError>
          ret = USBD_FAIL;
 80086ee:	2303      	movs	r3, #3
 80086f0:	75fb      	strb	r3, [r7, #23]
          break;
 80086f2:	e002      	b.n	80086fa <USBD_CDC_Setup+0x19e>
          break;
 80086f4:	bf00      	nop
 80086f6:	e008      	b.n	800870a <USBD_CDC_Setup+0x1ae>
          break;
 80086f8:	bf00      	nop
      }
      break;
 80086fa:	e006      	b.n	800870a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fcb1 	bl	800a066 <USBD_CtlError>
      ret = USBD_FAIL;
 8008704:	2303      	movs	r3, #3
 8008706:	75fb      	strb	r3, [r7, #23]
      break;
 8008708:	bf00      	nop
  }

  return (uint8_t)ret;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008726:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32b0      	adds	r2, #176	@ 0xb0
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	e065      	b.n	800880a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	32b0      	adds	r2, #176	@ 0xb0
 8008748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	f003 020f 	and.w	r2, r3, #15
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	3318      	adds	r3, #24
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d02f      	beq.n	80087c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	f003 020f 	and.w	r2, r3, #15
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	3318      	adds	r3, #24
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	f003 010f 	and.w	r1, r3, #15
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	460b      	mov	r3, r1
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	440b      	add	r3, r1
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4403      	add	r3, r0
 8008790:	331c      	adds	r3, #28
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	fbb2 f1f3 	udiv	r1, r2, r3
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d112      	bne.n	80087c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087a2:	78fb      	ldrb	r3, [r7, #3]
 80087a4:	f003 020f 	and.w	r2, r3, #15
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	3318      	adds	r3, #24
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80087ba:	78f9      	ldrb	r1, [r7, #3]
 80087bc:	2300      	movs	r3, #0
 80087be:	2200      	movs	r2, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f002 fa04 	bl	800abce <USBD_LL_Transmit>
 80087c6:	e01f      	b.n	8008808 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	33b0      	adds	r3, #176	@ 0xb0
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d010      	beq.n	8008808 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	33b0      	adds	r3, #176	@ 0xb0
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	32b0      	adds	r2, #176	@ 0xb0
 8008828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32b0      	adds	r2, #176	@ 0xb0
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008840:	2303      	movs	r3, #3
 8008842:	e01a      	b.n	800887a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f002 fa02 	bl	800ac52 <USBD_LL_GetRxDataSize>
 800884e:	4602      	mov	r2, r0
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	33b0      	adds	r3, #176	@ 0xb0
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008874:	4611      	mov	r1, r2
 8008876:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	32b0      	adds	r2, #176	@ 0xb0
 8008894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008898:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e024      	b.n	80088ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	33b0      	adds	r3, #176	@ 0xb0
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d019      	beq.n	80088ec <USBD_CDC_EP0_RxReady+0x6a>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80088be:	2bff      	cmp	r3, #255	@ 0xff
 80088c0:	d014      	beq.n	80088ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	33b0      	adds	r3, #176	@ 0xb0
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80088da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	22ff      	movs	r2, #255	@ 0xff
 80088e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008900:	2182      	movs	r1, #130	@ 0x82
 8008902:	4818      	ldr	r0, [pc, #96]	@ (8008964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008904:	f000 fd4f 	bl	80093a6 <USBD_GetEpDesc>
 8008908:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800890a:	2101      	movs	r1, #1
 800890c:	4815      	ldr	r0, [pc, #84]	@ (8008964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800890e:	f000 fd4a 	bl	80093a6 <USBD_GetEpDesc>
 8008912:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008914:	2181      	movs	r1, #129	@ 0x81
 8008916:	4813      	ldr	r0, [pc, #76]	@ (8008964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008918:	f000 fd45 	bl	80093a6 <USBD_GetEpDesc>
 800891c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2210      	movs	r2, #16
 8008928:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d006      	beq.n	800893e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	2200      	movs	r2, #0
 8008934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008938:	711a      	strb	r2, [r3, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d006      	beq.n	8008952 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800894c:	711a      	strb	r2, [r3, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2243      	movs	r2, #67	@ 0x43
 8008956:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008958:	4b02      	ldr	r3, [pc, #8]	@ (8008964 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	24000070 	.word	0x24000070

08008968 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008970:	2182      	movs	r1, #130	@ 0x82
 8008972:	4818      	ldr	r0, [pc, #96]	@ (80089d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008974:	f000 fd17 	bl	80093a6 <USBD_GetEpDesc>
 8008978:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800897a:	2101      	movs	r1, #1
 800897c:	4815      	ldr	r0, [pc, #84]	@ (80089d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800897e:	f000 fd12 	bl	80093a6 <USBD_GetEpDesc>
 8008982:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008984:	2181      	movs	r1, #129	@ 0x81
 8008986:	4813      	ldr	r0, [pc, #76]	@ (80089d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008988:	f000 fd0d 	bl	80093a6 <USBD_GetEpDesc>
 800898c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2210      	movs	r2, #16
 8008998:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d006      	beq.n	80089ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2200      	movs	r2, #0
 80089a4:	711a      	strb	r2, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f042 0202 	orr.w	r2, r2, #2
 80089ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d006      	beq.n	80089c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	711a      	strb	r2, [r3, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f042 0202 	orr.w	r2, r2, #2
 80089c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2243      	movs	r2, #67	@ 0x43
 80089c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089c8:	4b02      	ldr	r3, [pc, #8]	@ (80089d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	24000070 	.word	0x24000070

080089d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089e0:	2182      	movs	r1, #130	@ 0x82
 80089e2:	4818      	ldr	r0, [pc, #96]	@ (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089e4:	f000 fcdf 	bl	80093a6 <USBD_GetEpDesc>
 80089e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089ea:	2101      	movs	r1, #1
 80089ec:	4815      	ldr	r0, [pc, #84]	@ (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089ee:	f000 fcda 	bl	80093a6 <USBD_GetEpDesc>
 80089f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089f4:	2181      	movs	r1, #129	@ 0x81
 80089f6:	4813      	ldr	r0, [pc, #76]	@ (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089f8:	f000 fcd5 	bl	80093a6 <USBD_GetEpDesc>
 80089fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2210      	movs	r2, #16
 8008a08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a18:	711a      	strb	r2, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a2c:	711a      	strb	r2, [r3, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2243      	movs	r2, #67	@ 0x43
 8008a36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a38:	4b02      	ldr	r3, [pc, #8]	@ (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	24000070 	.word	0x24000070

08008a48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	220a      	movs	r2, #10
 8008a54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a56:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	2400002c 	.word	0x2400002c

08008a68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e009      	b.n	8008a90 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	33b0      	adds	r3, #176	@ 0xb0
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	32b0      	adds	r2, #176	@ 0xb0
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e008      	b.n	8008ad4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	32b0      	adds	r2, #176	@ 0xb0
 8008af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e004      	b.n	8008b0e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
	...

08008b1c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	32b0      	adds	r2, #176	@ 0xb0
 8008b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b32:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b34:	2301      	movs	r3, #1
 8008b36:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e025      	b.n	8008b8e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d11f      	bne.n	8008b8c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008b54:	4b10      	ldr	r3, [pc, #64]	@ (8008b98 <USBD_CDC_TransmitPacket+0x7c>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 020f 	and.w	r2, r3, #15
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4403      	add	r3, r0
 8008b6e:	3318      	adds	r3, #24
 8008b70:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008b72:	4b09      	ldr	r3, [pc, #36]	@ (8008b98 <USBD_CDC_TransmitPacket+0x7c>)
 8008b74:	7819      	ldrb	r1, [r3, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f002 f823 	bl	800abce <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	240000b3 	.word	0x240000b3

08008b9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32b0      	adds	r2, #176	@ 0xb0
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	32b0      	adds	r2, #176	@ 0xb0
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e018      	b.n	8008bfc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7c1b      	ldrb	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c04 <USBD_CDC_ReceivePacket+0x68>)
 8008bd4:	7819      	ldrb	r1, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f002 f815 	bl	800ac10 <USBD_LL_PrepareReceive>
 8008be6:	e008      	b.n	8008bfa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008be8:	4b06      	ldr	r3, [pc, #24]	@ (8008c04 <USBD_CDC_ReceivePacket+0x68>)
 8008bea:	7819      	ldrb	r1, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bf2:	2340      	movs	r3, #64	@ 0x40
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f002 f80b 	bl	800ac10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	240000b4 	.word	0x240000b4

08008c08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e01f      	b.n	8008c60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	79fa      	ldrb	r2, [r7, #7]
 8008c52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f001 fe81 	bl	800a95c <USBD_LL_Init>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e025      	b.n	8008ccc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	32ae      	adds	r2, #174	@ 0xae
 8008c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00f      	beq.n	8008cbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	32ae      	adds	r2, #174	@ 0xae
 8008ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cac:	f107 020e 	add.w	r2, r7, #14
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fe8d 	bl	800a9fc <USBD_LL_Start>
 8008ce2:	4603      	mov	r3, r0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cf4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d009      	beq.n	8008d30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	78fa      	ldrb	r2, [r7, #3]
 8008d26:	4611      	mov	r1, r2
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4798      	blx	r3
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	4611      	mov	r1, r2
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d60:	2303      	movs	r3, #3
 8008d62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 f936 	bl	8009ff2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d94:	461a      	mov	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008da2:	f003 031f 	and.w	r3, r3, #31
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d01a      	beq.n	8008de0 <USBD_LL_SetupStage+0x72>
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d822      	bhi.n	8008df4 <USBD_LL_SetupStage+0x86>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <USBD_LL_SetupStage+0x4a>
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d00a      	beq.n	8008dcc <USBD_LL_SetupStage+0x5e>
 8008db6:	e01d      	b.n	8008df4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb63 	bl	800948c <USBD_StdDevReq>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dca:	e020      	b.n	8008e0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fbcb 	bl	8009570 <USBD_StdItfReq>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8008dde:	e016      	b.n	8008e0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fc2d 	bl	8009648 <USBD_StdEPReq>
 8008dee:	4603      	mov	r3, r0
 8008df0:	73fb      	strb	r3, [r7, #15]
      break;
 8008df2:	e00c      	b.n	8008e0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dfa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 fe5a 	bl	800aabc <USBD_LL_StallEP>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e0c:	bf00      	nop
  }

  return ret;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	460b      	mov	r3, r1
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d16e      	bne.n	8008f0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	f040 8098 	bne.w	8008f74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d913      	bls.n	8008e78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	1ad2      	subs	r2, r2, r3
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	4293      	cmp	r3, r2
 8008e68:	bf28      	it	cs
 8008e6a:	4613      	movcs	r3, r2
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f001 f9be 	bl	800a1f2 <USBD_CtlContinueRx>
 8008e76:	e07d      	b.n	8008f74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e7e:	f003 031f 	and.w	r3, r3, #31
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d014      	beq.n	8008eb0 <USBD_LL_DataOutStage+0x98>
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d81d      	bhi.n	8008ec6 <USBD_LL_DataOutStage+0xae>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <USBD_LL_DataOutStage+0x7c>
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d003      	beq.n	8008e9a <USBD_LL_DataOutStage+0x82>
 8008e92:	e018      	b.n	8008ec6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	75bb      	strb	r3, [r7, #22]
            break;
 8008e98:	e018      	b.n	8008ecc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 fa64 	bl	8009372 <USBD_CoreFindIF>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75bb      	strb	r3, [r7, #22]
            break;
 8008eae:	e00d      	b.n	8008ecc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	4619      	mov	r1, r3
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fa66 	bl	800938c <USBD_CoreFindEP>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ec4:	e002      	b.n	8008ecc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75bb      	strb	r3, [r7, #22]
            break;
 8008eca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ecc:	7dbb      	ldrb	r3, [r7, #22]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d119      	bne.n	8008f06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d113      	bne.n	8008f06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ede:	7dba      	ldrb	r2, [r7, #22]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	32ae      	adds	r2, #174	@ 0xae
 8008ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00b      	beq.n	8008f06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008eee:	7dba      	ldrb	r2, [r7, #22]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ef6:	7dba      	ldrb	r2, [r7, #22]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	32ae      	adds	r2, #174	@ 0xae
 8008efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f001 f984 	bl	800a214 <USBD_CtlSendStatus>
 8008f0c:	e032      	b.n	8008f74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
 8008f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	4619      	mov	r1, r3
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fa37 	bl	800938c <USBD_CoreFindEP>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f22:	7dbb      	ldrb	r3, [r7, #22]
 8008f24:	2bff      	cmp	r3, #255	@ 0xff
 8008f26:	d025      	beq.n	8008f74 <USBD_LL_DataOutStage+0x15c>
 8008f28:	7dbb      	ldrb	r3, [r7, #22]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d122      	bne.n	8008f74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d117      	bne.n	8008f6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f3a:	7dba      	ldrb	r2, [r7, #22]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	32ae      	adds	r2, #174	@ 0xae
 8008f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00f      	beq.n	8008f6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f4a:	7dba      	ldrb	r2, [r7, #22]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f52:	7dba      	ldrb	r2, [r7, #22]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	32ae      	adds	r2, #174	@ 0xae
 8008f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	7afa      	ldrb	r2, [r7, #11]
 8008f60:	4611      	mov	r1, r2
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	e000      	b.n	8008f76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b086      	sub	sp, #24
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	460b      	mov	r3, r1
 8008f88:	607a      	str	r2, [r7, #4]
 8008f8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f8c:	7afb      	ldrb	r3, [r7, #11]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d16f      	bne.n	8009072 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3314      	adds	r3, #20
 8008f96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d15a      	bne.n	8009058 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	689a      	ldr	r2, [r3, #8]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d914      	bls.n	8008fd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	689a      	ldr	r2, [r3, #8]
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	1ad2      	subs	r2, r2, r3
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f001 f8e6 	bl	800a196 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2200      	movs	r2, #0
 8008fce:	2100      	movs	r1, #0
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f001 fe1d 	bl	800ac10 <USBD_LL_PrepareReceive>
 8008fd6:	e03f      	b.n	8009058 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d11c      	bne.n	800901e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d316      	bcc.n	800901e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d20f      	bcs.n	800901e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ffe:	2200      	movs	r2, #0
 8009000:	2100      	movs	r1, #0
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f001 f8c7 	bl	800a196 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009010:	2300      	movs	r3, #0
 8009012:	2200      	movs	r2, #0
 8009014:	2100      	movs	r1, #0
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f001 fdfa 	bl	800ac10 <USBD_LL_PrepareReceive>
 800901c:	e01c      	b.n	8009058 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d10f      	bne.n	800904a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d009      	beq.n	800904a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800904a:	2180      	movs	r1, #128	@ 0x80
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f001 fd35 	bl	800aabc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f001 f8f1 	bl	800a23a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d03a      	beq.n	80090d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff fe42 	bl	8008cec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009070:	e032      	b.n	80090d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009078:	b2db      	uxtb	r3, r3
 800907a:	4619      	mov	r1, r3
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 f985 	bl	800938c <USBD_CoreFindEP>
 8009082:	4603      	mov	r3, r0
 8009084:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	2bff      	cmp	r3, #255	@ 0xff
 800908a:	d025      	beq.n	80090d8 <USBD_LL_DataInStage+0x15a>
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d122      	bne.n	80090d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b03      	cmp	r3, #3
 800909c:	d11c      	bne.n	80090d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800909e:	7dfa      	ldrb	r2, [r7, #23]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	32ae      	adds	r2, #174	@ 0xae
 80090a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d014      	beq.n	80090d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80090ae:	7dfa      	ldrb	r2, [r7, #23]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090b6:	7dfa      	ldrb	r2, [r7, #23]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	32ae      	adds	r2, #174	@ 0xae
 80090bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	7afa      	ldrb	r2, [r7, #11]
 80090c4:	4611      	mov	r1, r2
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	4798      	blx	r3
 80090ca:	4603      	mov	r3, r0
 80090cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090ce:	7dbb      	ldrb	r3, [r7, #22]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090d4:	7dbb      	ldrb	r3, [r7, #22]
 80090d6:	e000      	b.n	80090da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911a:	2b00      	cmp	r3, #0
 800911c:	d014      	beq.n	8009148 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00e      	beq.n	8009148 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6852      	ldr	r2, [r2, #4]
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	4611      	mov	r1, r2
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	4798      	blx	r3
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009144:	2303      	movs	r3, #3
 8009146:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009148:	2340      	movs	r3, #64	@ 0x40
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 fc6f 	bl	800aa32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2240      	movs	r2, #64	@ 0x40
 8009160:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009164:	2340      	movs	r3, #64	@ 0x40
 8009166:	2200      	movs	r2, #0
 8009168:	2180      	movs	r1, #128	@ 0x80
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fc61 	bl	800aa32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2240      	movs	r2, #64	@ 0x40
 800917a:	621a      	str	r2, [r3, #32]

  return ret;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	78fa      	ldrb	r2, [r7, #3]
 8009196:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d006      	beq.n	80091c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2204      	movs	r2, #4
 80091cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d106      	bne.n	8009200 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b03      	cmp	r3, #3
 8009220:	d110      	bne.n	8009244 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	32ae      	adds	r2, #174	@ 0xae
 8009264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	e01c      	b.n	80092aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b03      	cmp	r3, #3
 800927a:	d115      	bne.n	80092a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	32ae      	adds	r2, #174	@ 0xae
 8009286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32ae      	adds	r2, #174	@ 0xae
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	4611      	mov	r1, r2
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	32ae      	adds	r2, #174	@ 0xae
 80092c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e01c      	b.n	800930e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d115      	bne.n	800930c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	32ae      	adds	r2, #174	@ 0xae
 80092ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00b      	beq.n	800930c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	32ae      	adds	r2, #174	@ 0xae
 80092fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	4611      	mov	r1, r2
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00e      	beq.n	8009368 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	6852      	ldr	r2, [r2, #4]
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	4611      	mov	r1, r2
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	4798      	blx	r3
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009364:	2303      	movs	r3, #3
 8009366:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800937e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009398:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b086      	sub	sp, #24
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d91f      	bls.n	800940c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093d2:	e013      	b.n	80093fc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093d4:	f107 030a 	add.w	r3, r7, #10
 80093d8:	4619      	mov	r1, r3
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f000 f81b 	bl	8009416 <USBD_GetNextDesc>
 80093e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	d108      	bne.n	80093fc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	789b      	ldrb	r3, [r3, #2]
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d008      	beq.n	800940a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093f8:	2300      	movs	r3, #0
 80093fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	885b      	ldrh	r3, [r3, #2]
 8009400:	b29a      	uxth	r2, r3
 8009402:	897b      	ldrh	r3, [r7, #10]
 8009404:	429a      	cmp	r2, r3
 8009406:	d8e5      	bhi.n	80093d4 <USBD_GetEpDesc+0x2e>
 8009408:	e000      	b.n	800940c <USBD_GetEpDesc+0x66>
          break;
 800940a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800940c:	693b      	ldr	r3, [r7, #16]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009416:	b480      	push	{r7}
 8009418:	b085      	sub	sp, #20
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	7812      	ldrb	r2, [r2, #0]
 800942c:	4413      	add	r3, r2
 800942e:	b29a      	uxth	r2, r3
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4413      	add	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009440:	68fb      	ldr	r3, [r7, #12]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800944e:	b480      	push	{r7}
 8009450:	b087      	sub	sp, #28
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	3301      	adds	r3, #1
 8009464:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800946c:	8a3b      	ldrh	r3, [r7, #16]
 800946e:	021b      	lsls	r3, r3, #8
 8009470:	b21a      	sxth	r2, r3
 8009472:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009476:	4313      	orrs	r3, r2
 8009478:	b21b      	sxth	r3, r3
 800947a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800947c:	89fb      	ldrh	r3, [r7, #14]
}
 800947e:	4618      	mov	r0, r3
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094a2:	2b40      	cmp	r3, #64	@ 0x40
 80094a4:	d005      	beq.n	80094b2 <USBD_StdDevReq+0x26>
 80094a6:	2b40      	cmp	r3, #64	@ 0x40
 80094a8:	d857      	bhi.n	800955a <USBD_StdDevReq+0xce>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00f      	beq.n	80094ce <USBD_StdDevReq+0x42>
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	d153      	bne.n	800955a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	32ae      	adds	r2, #174	@ 0xae
 80094bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]
      break;
 80094cc:	e04a      	b.n	8009564 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	2b09      	cmp	r3, #9
 80094d4:	d83b      	bhi.n	800954e <USBD_StdDevReq+0xc2>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <USBD_StdDevReq+0x50>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	08009531 	.word	0x08009531
 80094e0:	08009545 	.word	0x08009545
 80094e4:	0800954f 	.word	0x0800954f
 80094e8:	0800953b 	.word	0x0800953b
 80094ec:	0800954f 	.word	0x0800954f
 80094f0:	0800950f 	.word	0x0800950f
 80094f4:	08009505 	.word	0x08009505
 80094f8:	0800954f 	.word	0x0800954f
 80094fc:	08009527 	.word	0x08009527
 8009500:	08009519 	.word	0x08009519
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa3c 	bl	8009984 <USBD_GetDescriptor>
          break;
 800950c:	e024      	b.n	8009558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fbcb 	bl	8009cac <USBD_SetAddress>
          break;
 8009516:	e01f      	b.n	8009558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fc0a 	bl	8009d34 <USBD_SetConfig>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
          break;
 8009524:	e018      	b.n	8009558 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fcad 	bl	8009e88 <USBD_GetConfig>
          break;
 800952e:	e013      	b.n	8009558 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fcde 	bl	8009ef4 <USBD_GetStatus>
          break;
 8009538:	e00e      	b.n	8009558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fd0d 	bl	8009f5c <USBD_SetFeature>
          break;
 8009542:	e009      	b.n	8009558 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fd31 	bl	8009fae <USBD_ClrFeature>
          break;
 800954c:	e004      	b.n	8009558 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fd88 	bl	800a066 <USBD_CtlError>
          break;
 8009556:	bf00      	nop
      }
      break;
 8009558:	e004      	b.n	8009564 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fd82 	bl	800a066 <USBD_CtlError>
      break;
 8009562:	bf00      	nop
  }

  return ret;
 8009564:	7bfb      	ldrb	r3, [r7, #15]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop

08009570 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009586:	2b40      	cmp	r3, #64	@ 0x40
 8009588:	d005      	beq.n	8009596 <USBD_StdItfReq+0x26>
 800958a:	2b40      	cmp	r3, #64	@ 0x40
 800958c:	d852      	bhi.n	8009634 <USBD_StdItfReq+0xc4>
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <USBD_StdItfReq+0x26>
 8009592:	2b20      	cmp	r3, #32
 8009594:	d14e      	bne.n	8009634 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800959c:	b2db      	uxtb	r3, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d840      	bhi.n	8009626 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	889b      	ldrh	r3, [r3, #4]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d836      	bhi.n	800961c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	889b      	ldrh	r3, [r3, #4]
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff fedb 	bl	8009372 <USBD_CoreFindIF>
 80095bc:	4603      	mov	r3, r0
 80095be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2bff      	cmp	r3, #255	@ 0xff
 80095c4:	d01d      	beq.n	8009602 <USBD_StdItfReq+0x92>
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d11a      	bne.n	8009602 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095cc:	7bba      	ldrb	r2, [r7, #14]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	32ae      	adds	r2, #174	@ 0xae
 80095d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00f      	beq.n	80095fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095dc:	7bba      	ldrb	r2, [r7, #14]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095e4:	7bba      	ldrb	r2, [r7, #14]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	32ae      	adds	r2, #174	@ 0xae
 80095ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
 80095f6:	4603      	mov	r3, r0
 80095f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095fa:	e004      	b.n	8009606 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095fc:	2303      	movs	r3, #3
 80095fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009600:	e001      	b.n	8009606 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009602:	2303      	movs	r3, #3
 8009604:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	88db      	ldrh	r3, [r3, #6]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d110      	bne.n	8009630 <USBD_StdItfReq+0xc0>
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10d      	bne.n	8009630 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fdfd 	bl	800a214 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800961a:	e009      	b.n	8009630 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fd21 	bl	800a066 <USBD_CtlError>
          break;
 8009624:	e004      	b.n	8009630 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fd1c 	bl	800a066 <USBD_CtlError>
          break;
 800962e:	e000      	b.n	8009632 <USBD_StdItfReq+0xc2>
          break;
 8009630:	bf00      	nop
      }
      break;
 8009632:	e004      	b.n	800963e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fd15 	bl	800a066 <USBD_CtlError>
      break;
 800963c:	bf00      	nop
  }

  return ret;
 800963e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	889b      	ldrh	r3, [r3, #4]
 800965a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009664:	2b40      	cmp	r3, #64	@ 0x40
 8009666:	d007      	beq.n	8009678 <USBD_StdEPReq+0x30>
 8009668:	2b40      	cmp	r3, #64	@ 0x40
 800966a:	f200 817f 	bhi.w	800996c <USBD_StdEPReq+0x324>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d02a      	beq.n	80096c8 <USBD_StdEPReq+0x80>
 8009672:	2b20      	cmp	r3, #32
 8009674:	f040 817a 	bne.w	800996c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff fe85 	bl	800938c <USBD_CoreFindEP>
 8009682:	4603      	mov	r3, r0
 8009684:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009686:	7b7b      	ldrb	r3, [r7, #13]
 8009688:	2bff      	cmp	r3, #255	@ 0xff
 800968a:	f000 8174 	beq.w	8009976 <USBD_StdEPReq+0x32e>
 800968e:	7b7b      	ldrb	r3, [r7, #13]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f040 8170 	bne.w	8009976 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009696:	7b7a      	ldrb	r2, [r7, #13]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800969e:	7b7a      	ldrb	r2, [r7, #13]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	32ae      	adds	r2, #174	@ 0xae
 80096a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8163 	beq.w	8009976 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80096b0:	7b7a      	ldrb	r2, [r7, #13]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	32ae      	adds	r2, #174	@ 0xae
 80096b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096c6:	e156      	b.n	8009976 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	785b      	ldrb	r3, [r3, #1]
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d008      	beq.n	80096e2 <USBD_StdEPReq+0x9a>
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	f300 8145 	bgt.w	8009960 <USBD_StdEPReq+0x318>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 809b 	beq.w	8009812 <USBD_StdEPReq+0x1ca>
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d03c      	beq.n	800975a <USBD_StdEPReq+0x112>
 80096e0:	e13e      	b.n	8009960 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d002      	beq.n	80096f4 <USBD_StdEPReq+0xac>
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	d016      	beq.n	8009720 <USBD_StdEPReq+0xd8>
 80096f2:	e02c      	b.n	800974e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00d      	beq.n	8009716 <USBD_StdEPReq+0xce>
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b80      	cmp	r3, #128	@ 0x80
 80096fe:	d00a      	beq.n	8009716 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 f9d9 	bl	800aabc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800970a:	2180      	movs	r1, #128	@ 0x80
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 f9d5 	bl	800aabc <USBD_LL_StallEP>
 8009712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009714:	e020      	b.n	8009758 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fca4 	bl	800a066 <USBD_CtlError>
              break;
 800971e:	e01b      	b.n	8009758 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	885b      	ldrh	r3, [r3, #2]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10e      	bne.n	8009746 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00b      	beq.n	8009746 <USBD_StdEPReq+0xfe>
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	2b80      	cmp	r3, #128	@ 0x80
 8009732:	d008      	beq.n	8009746 <USBD_StdEPReq+0xfe>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	88db      	ldrh	r3, [r3, #6]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d104      	bne.n	8009746 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f001 f9bb 	bl	800aabc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fd64 	bl	800a214 <USBD_CtlSendStatus>

              break;
 800974c:	e004      	b.n	8009758 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fc88 	bl	800a066 <USBD_CtlError>
              break;
 8009756:	bf00      	nop
          }
          break;
 8009758:	e107      	b.n	800996a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b02      	cmp	r3, #2
 8009764:	d002      	beq.n	800976c <USBD_StdEPReq+0x124>
 8009766:	2b03      	cmp	r3, #3
 8009768:	d016      	beq.n	8009798 <USBD_StdEPReq+0x150>
 800976a:	e04b      	b.n	8009804 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00d      	beq.n	800978e <USBD_StdEPReq+0x146>
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	2b80      	cmp	r3, #128	@ 0x80
 8009776:	d00a      	beq.n	800978e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 f99d 	bl	800aabc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009782:	2180      	movs	r1, #128	@ 0x80
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f999 	bl	800aabc <USBD_LL_StallEP>
 800978a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800978c:	e040      	b.n	8009810 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fc68 	bl	800a066 <USBD_CtlError>
              break;
 8009796:	e03b      	b.n	8009810 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	885b      	ldrh	r3, [r3, #2]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d136      	bne.n	800980e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d004      	beq.n	80097b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 f9a3 	bl	800aafa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fd2d 	bl	800a214 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7ff fde4 	bl	800938c <USBD_CoreFindEP>
 80097c4:	4603      	mov	r3, r0
 80097c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097c8:	7b7b      	ldrb	r3, [r7, #13]
 80097ca:	2bff      	cmp	r3, #255	@ 0xff
 80097cc:	d01f      	beq.n	800980e <USBD_StdEPReq+0x1c6>
 80097ce:	7b7b      	ldrb	r3, [r7, #13]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d11c      	bne.n	800980e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097d4:	7b7a      	ldrb	r2, [r7, #13]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097dc:	7b7a      	ldrb	r2, [r7, #13]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	32ae      	adds	r2, #174	@ 0xae
 80097e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d010      	beq.n	800980e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097ec:	7b7a      	ldrb	r2, [r7, #13]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	32ae      	adds	r2, #174	@ 0xae
 80097f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009802:	e004      	b.n	800980e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fc2d 	bl	800a066 <USBD_CtlError>
              break;
 800980c:	e000      	b.n	8009810 <USBD_StdEPReq+0x1c8>
              break;
 800980e:	bf00      	nop
          }
          break;
 8009810:	e0ab      	b.n	800996a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b02      	cmp	r3, #2
 800981c:	d002      	beq.n	8009824 <USBD_StdEPReq+0x1dc>
 800981e:	2b03      	cmp	r3, #3
 8009820:	d032      	beq.n	8009888 <USBD_StdEPReq+0x240>
 8009822:	e097      	b.n	8009954 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <USBD_StdEPReq+0x1f2>
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b80      	cmp	r3, #128	@ 0x80
 800982e:	d004      	beq.n	800983a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fc17 	bl	800a066 <USBD_CtlError>
                break;
 8009838:	e091      	b.n	800995e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800983a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800983e:	2b00      	cmp	r3, #0
 8009840:	da0b      	bge.n	800985a <USBD_StdEPReq+0x212>
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	3310      	adds	r3, #16
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	4413      	add	r3, r2
 8009856:	3304      	adds	r3, #4
 8009858:	e00b      	b.n	8009872 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009860:	4613      	mov	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	4413      	add	r3, r2
 8009870:	3304      	adds	r3, #4
 8009872:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2202      	movs	r2, #2
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fc6d 	bl	800a160 <USBD_CtlSendData>
              break;
 8009886:	e06a      	b.n	800995e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800988c:	2b00      	cmp	r3, #0
 800988e:	da11      	bge.n	80098b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	f003 020f 	and.w	r2, r3, #15
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	3324      	adds	r3, #36	@ 0x24
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d117      	bne.n	80098da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fbda 	bl	800a066 <USBD_CtlError>
                  break;
 80098b2:	e054      	b.n	800995e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	f003 020f 	and.w	r2, r3, #15
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d104      	bne.n	80098da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fbc7 	bl	800a066 <USBD_CtlError>
                  break;
 80098d8:	e041      	b.n	800995e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da0b      	bge.n	80098fa <USBD_StdEPReq+0x2b2>
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	3310      	adds	r3, #16
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	4413      	add	r3, r2
 80098f6:	3304      	adds	r3, #4
 80098f8:	e00b      	b.n	8009912 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009900:	4613      	mov	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	4413      	add	r3, r2
 8009910:	3304      	adds	r3, #4
 8009912:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <USBD_StdEPReq+0x2d8>
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	2b80      	cmp	r3, #128	@ 0x80
 800991e:	d103      	bne.n	8009928 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	e00e      	b.n	8009946 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 f903 	bl	800ab38 <USBD_LL_IsStallEP>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d003      	beq.n	8009940 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2201      	movs	r2, #1
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e002      	b.n	8009946 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2202      	movs	r2, #2
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fc07 	bl	800a160 <USBD_CtlSendData>
              break;
 8009952:	e004      	b.n	800995e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fb85 	bl	800a066 <USBD_CtlError>
              break;
 800995c:	bf00      	nop
          }
          break;
 800995e:	e004      	b.n	800996a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fb7f 	bl	800a066 <USBD_CtlError>
          break;
 8009968:	bf00      	nop
      }
      break;
 800996a:	e005      	b.n	8009978 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fb79 	bl	800a066 <USBD_CtlError>
      break;
 8009974:	e000      	b.n	8009978 <USBD_StdEPReq+0x330>
      break;
 8009976:	bf00      	nop
  }

  return ret;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	885b      	ldrh	r3, [r3, #2]
 800999e:	0a1b      	lsrs	r3, r3, #8
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	3b01      	subs	r3, #1
 80099a4:	2b0e      	cmp	r3, #14
 80099a6:	f200 8152 	bhi.w	8009c4e <USBD_GetDescriptor+0x2ca>
 80099aa:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <USBD_GetDescriptor+0x2c>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	08009a21 	.word	0x08009a21
 80099b4:	08009a39 	.word	0x08009a39
 80099b8:	08009a79 	.word	0x08009a79
 80099bc:	08009c4f 	.word	0x08009c4f
 80099c0:	08009c4f 	.word	0x08009c4f
 80099c4:	08009bef 	.word	0x08009bef
 80099c8:	08009c1b 	.word	0x08009c1b
 80099cc:	08009c4f 	.word	0x08009c4f
 80099d0:	08009c4f 	.word	0x08009c4f
 80099d4:	08009c4f 	.word	0x08009c4f
 80099d8:	08009c4f 	.word	0x08009c4f
 80099dc:	08009c4f 	.word	0x08009c4f
 80099e0:	08009c4f 	.word	0x08009c4f
 80099e4:	08009c4f 	.word	0x08009c4f
 80099e8:	080099ed 	.word	0x080099ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00b      	beq.n	8009a10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	7c12      	ldrb	r2, [r2, #16]
 8009a04:	f107 0108 	add.w	r1, r7, #8
 8009a08:	4610      	mov	r0, r2
 8009a0a:	4798      	blx	r3
 8009a0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a0e:	e126      	b.n	8009c5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fb27 	bl	800a066 <USBD_CtlError>
        err++;
 8009a18:	7afb      	ldrb	r3, [r7, #11]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	72fb      	strb	r3, [r7, #11]
      break;
 8009a1e:	e11e      	b.n	8009c5e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	7c12      	ldrb	r2, [r2, #16]
 8009a2c:	f107 0108 	add.w	r1, r7, #8
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	60f8      	str	r0, [r7, #12]
      break;
 8009a36:	e112      	b.n	8009c5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	7c1b      	ldrb	r3, [r3, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10d      	bne.n	8009a5c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a48:	f107 0208 	add.w	r2, r7, #8
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4798      	blx	r3
 8009a50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3301      	adds	r3, #1
 8009a56:	2202      	movs	r2, #2
 8009a58:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a5a:	e100      	b.n	8009c5e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	f107 0208 	add.w	r2, r7, #8
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4798      	blx	r3
 8009a6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3301      	adds	r3, #1
 8009a72:	2202      	movs	r2, #2
 8009a74:	701a      	strb	r2, [r3, #0]
      break;
 8009a76:	e0f2      	b.n	8009c5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	885b      	ldrh	r3, [r3, #2]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b05      	cmp	r3, #5
 8009a80:	f200 80ac 	bhi.w	8009bdc <USBD_GetDescriptor+0x258>
 8009a84:	a201      	add	r2, pc, #4	@ (adr r2, 8009a8c <USBD_GetDescriptor+0x108>)
 8009a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8a:	bf00      	nop
 8009a8c:	08009aa5 	.word	0x08009aa5
 8009a90:	08009ad9 	.word	0x08009ad9
 8009a94:	08009b0d 	.word	0x08009b0d
 8009a98:	08009b41 	.word	0x08009b41
 8009a9c:	08009b75 	.word	0x08009b75
 8009aa0:	08009ba9 	.word	0x08009ba9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac6:	e091      	b.n	8009bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 facb 	bl	800a066 <USBD_CtlError>
            err++;
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad6:	e089      	b.n	8009bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afa:	e077      	b.n	8009bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fab1 	bl	800a066 <USBD_CtlError>
            err++;
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	3301      	adds	r3, #1
 8009b08:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0a:	e06f      	b.n	8009bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	7c12      	ldrb	r2, [r2, #16]
 8009b24:	f107 0108 	add.w	r1, r7, #8
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
 8009b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2e:	e05d      	b.n	8009bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa97 	bl	800a066 <USBD_CtlError>
            err++;
 8009b38:	7afb      	ldrb	r3, [r7, #11]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3e:	e055      	b.n	8009bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	7c12      	ldrb	r2, [r2, #16]
 8009b58:	f107 0108 	add.w	r1, r7, #8
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4798      	blx	r3
 8009b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b62:	e043      	b.n	8009bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa7d 	bl	800a066 <USBD_CtlError>
            err++;
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	72fb      	strb	r3, [r7, #11]
          break;
 8009b72:	e03b      	b.n	8009bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	7c12      	ldrb	r2, [r2, #16]
 8009b8c:	f107 0108 	add.w	r1, r7, #8
 8009b90:	4610      	mov	r0, r2
 8009b92:	4798      	blx	r3
 8009b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b96:	e029      	b.n	8009bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fa63 	bl	800a066 <USBD_CtlError>
            err++;
 8009ba0:	7afb      	ldrb	r3, [r7, #11]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ba6:	e021      	b.n	8009bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	7c12      	ldrb	r2, [r2, #16]
 8009bc0:	f107 0108 	add.w	r1, r7, #8
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bca:	e00f      	b.n	8009bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa49 	bl	800a066 <USBD_CtlError>
            err++;
 8009bd4:	7afb      	ldrb	r3, [r7, #11]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bda:	e007      	b.n	8009bec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa41 	bl	800a066 <USBD_CtlError>
          err++;
 8009be4:	7afb      	ldrb	r3, [r7, #11]
 8009be6:	3301      	adds	r3, #1
 8009be8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009bea:	bf00      	nop
      }
      break;
 8009bec:	e037      	b.n	8009c5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	7c1b      	ldrb	r3, [r3, #16]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bfe:	f107 0208 	add.w	r2, r7, #8
 8009c02:	4610      	mov	r0, r2
 8009c04:	4798      	blx	r3
 8009c06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c08:	e029      	b.n	8009c5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fa2a 	bl	800a066 <USBD_CtlError>
        err++;
 8009c12:	7afb      	ldrb	r3, [r7, #11]
 8009c14:	3301      	adds	r3, #1
 8009c16:	72fb      	strb	r3, [r7, #11]
      break;
 8009c18:	e021      	b.n	8009c5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	7c1b      	ldrb	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10d      	bne.n	8009c3e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2a:	f107 0208 	add.w	r2, r7, #8
 8009c2e:	4610      	mov	r0, r2
 8009c30:	4798      	blx	r3
 8009c32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	2207      	movs	r2, #7
 8009c3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c3c:	e00f      	b.n	8009c5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fa10 	bl	800a066 <USBD_CtlError>
        err++;
 8009c46:	7afb      	ldrb	r3, [r7, #11]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c4c:	e007      	b.n	8009c5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fa08 	bl	800a066 <USBD_CtlError>
      err++;
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c5c:	bf00      	nop
  }

  if (err != 0U)
 8009c5e:	7afb      	ldrb	r3, [r7, #11]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d11e      	bne.n	8009ca2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	88db      	ldrh	r3, [r3, #6]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d016      	beq.n	8009c9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009c6c:	893b      	ldrh	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00e      	beq.n	8009c90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	88da      	ldrh	r2, [r3, #6]
 8009c76:	893b      	ldrh	r3, [r7, #8]
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	bf28      	it	cs
 8009c7c:	4613      	movcs	r3, r2
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c82:	893b      	ldrh	r3, [r7, #8]
 8009c84:	461a      	mov	r2, r3
 8009c86:	68f9      	ldr	r1, [r7, #12]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fa69 	bl	800a160 <USBD_CtlSendData>
 8009c8e:	e009      	b.n	8009ca4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f9e7 	bl	800a066 <USBD_CtlError>
 8009c98:	e004      	b.n	8009ca4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 faba 	bl	800a214 <USBD_CtlSendStatus>
 8009ca0:	e000      	b.n	8009ca4 <USBD_GetDescriptor+0x320>
    return;
 8009ca2:	bf00      	nop
  }
}
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop

08009cac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	889b      	ldrh	r3, [r3, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d131      	bne.n	8009d22 <USBD_SetAddress+0x76>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	88db      	ldrh	r3, [r3, #6]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d12d      	bne.n	8009d22 <USBD_SetAddress+0x76>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	885b      	ldrh	r3, [r3, #2]
 8009cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ccc:	d829      	bhi.n	8009d22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	885b      	ldrh	r3, [r3, #2]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	d104      	bne.n	8009cf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f9bc 	bl	800a066 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cee:	e01d      	b.n	8009d2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7bfa      	ldrb	r2, [r7, #15]
 8009cf4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 ff47 	bl	800ab90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fa86 	bl	800a214 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2202      	movs	r2, #2
 8009d12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d16:	e009      	b.n	8009d2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d20:	e004      	b.n	8009d2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f99e 	bl	800a066 <USBD_CtlError>
  }
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	885b      	ldrh	r3, [r3, #2]
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	4b4e      	ldr	r3, [pc, #312]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009d4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d905      	bls.n	8009d60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f985 	bl	800a066 <USBD_CtlError>
    return USBD_FAIL;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e08c      	b.n	8009e7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d002      	beq.n	8009d72 <USBD_SetConfig+0x3e>
 8009d6c:	2b03      	cmp	r3, #3
 8009d6e:	d029      	beq.n	8009dc4 <USBD_SetConfig+0x90>
 8009d70:	e075      	b.n	8009e5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d72:	4b44      	ldr	r3, [pc, #272]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d020      	beq.n	8009dbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d7a:	4b42      	ldr	r3, [pc, #264]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d84:	4b3f      	ldr	r3, [pc, #252]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7fe ffb9 	bl	8008d02 <USBD_SetClassConfig>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d008      	beq.n	8009dac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f962 	bl	800a066 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2202      	movs	r2, #2
 8009da6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009daa:	e065      	b.n	8009e78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fa31 	bl	800a214 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2203      	movs	r2, #3
 8009db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009dba:	e05d      	b.n	8009e78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fa29 	bl	800a214 <USBD_CtlSendStatus>
      break;
 8009dc2:	e059      	b.n	8009e78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d112      	bne.n	8009df2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dde:	4b29      	ldr	r3, [pc, #164]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7fe ffa8 	bl	8008d3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fa12 	bl	800a214 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009df0:	e042      	b.n	8009e78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009df2:	4b24      	ldr	r3, [pc, #144]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d02a      	beq.n	8009e56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7fe ff96 	bl	8008d3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e18:	4b1a      	ldr	r3, [pc, #104]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7fe ff6f 	bl	8008d02 <USBD_SetClassConfig>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00f      	beq.n	8009e4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f918 	bl	800a066 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7fe ff7b 	bl	8008d3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009e4c:	e014      	b.n	8009e78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f9e0 	bl	800a214 <USBD_CtlSendStatus>
      break;
 8009e54:	e010      	b.n	8009e78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f9dc 	bl	800a214 <USBD_CtlSendStatus>
      break;
 8009e5c:	e00c      	b.n	8009e78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f900 	bl	800a066 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e66:	4b07      	ldr	r3, [pc, #28]	@ (8009e84 <USBD_SetConfig+0x150>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7fe ff64 	bl	8008d3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e72:	2303      	movs	r3, #3
 8009e74:	73fb      	strb	r3, [r7, #15]
      break;
 8009e76:	bf00      	nop
  }

  return ret;
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	24000240 	.word	0x24000240

08009e88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	88db      	ldrh	r3, [r3, #6]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d004      	beq.n	8009ea4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f8e2 	bl	800a066 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ea2:	e023      	b.n	8009eec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	dc02      	bgt.n	8009eb6 <USBD_GetConfig+0x2e>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dc03      	bgt.n	8009ebc <USBD_GetConfig+0x34>
 8009eb4:	e015      	b.n	8009ee2 <USBD_GetConfig+0x5a>
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d00b      	beq.n	8009ed2 <USBD_GetConfig+0x4a>
 8009eba:	e012      	b.n	8009ee2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f948 	bl	800a160 <USBD_CtlSendData>
        break;
 8009ed0:	e00c      	b.n	8009eec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f940 	bl	800a160 <USBD_CtlSendData>
        break;
 8009ee0:	e004      	b.n	8009eec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f8be 	bl	800a066 <USBD_CtlError>
        break;
 8009eea:	bf00      	nop
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	3b01      	subs	r3, #1
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d81e      	bhi.n	8009f4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	88db      	ldrh	r3, [r3, #6]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d004      	beq.n	8009f1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f8a5 	bl	800a066 <USBD_CtlError>
        break;
 8009f1c:	e01a      	b.n	8009f54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	f043 0202 	orr.w	r2, r3, #2
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	2202      	movs	r2, #2
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f90c 	bl	800a160 <USBD_CtlSendData>
      break;
 8009f48:	e004      	b.n	8009f54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f88a 	bl	800a066 <USBD_CtlError>
      break;
 8009f52:	bf00      	nop
  }
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	885b      	ldrh	r3, [r3, #2]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d107      	bne.n	8009f7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f94c 	bl	800a214 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f7c:	e013      	b.n	8009fa6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	885b      	ldrh	r3, [r3, #2]
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d10b      	bne.n	8009f9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	889b      	ldrh	r3, [r3, #4]
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f93c 	bl	800a214 <USBD_CtlSendStatus>
}
 8009f9c:	e003      	b.n	8009fa6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f860 	bl	800a066 <USBD_CtlError>
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d80b      	bhi.n	8009fde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	885b      	ldrh	r3, [r3, #2]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d10c      	bne.n	8009fe8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f91c 	bl	800a214 <USBD_CtlSendStatus>
      }
      break;
 8009fdc:	e004      	b.n	8009fe8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f840 	bl	800a066 <USBD_CtlError>
      break;
 8009fe6:	e000      	b.n	8009fea <USBD_ClrFeature+0x3c>
      break;
 8009fe8:	bf00      	nop
  }
}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	781a      	ldrb	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3301      	adds	r3, #1
 800a00c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	781a      	ldrb	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3301      	adds	r3, #1
 800a01a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7ff fa16 	bl	800944e <SWAPBYTE>
 800a022:	4603      	mov	r3, r0
 800a024:	461a      	mov	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3301      	adds	r3, #1
 800a02e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3301      	adds	r3, #1
 800a034:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7ff fa09 	bl	800944e <SWAPBYTE>
 800a03c:	4603      	mov	r3, r0
 800a03e:	461a      	mov	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3301      	adds	r3, #1
 800a048:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3301      	adds	r3, #1
 800a04e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7ff f9fc 	bl	800944e <SWAPBYTE>
 800a056:	4603      	mov	r3, r0
 800a058:	461a      	mov	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	80da      	strh	r2, [r3, #6]
}
 800a05e:	bf00      	nop
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a070:	2180      	movs	r1, #128	@ 0x80
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fd22 	bl	800aabc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a078:	2100      	movs	r1, #0
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fd1e 	bl	800aabc <USBD_LL_StallEP>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a094:	2300      	movs	r3, #0
 800a096:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d042      	beq.n	800a124 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a0a2:	6938      	ldr	r0, [r7, #16]
 800a0a4:	f000 f842 	bl	800a12c <USBD_GetLen>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0b2:	d808      	bhi.n	800a0c6 <USBD_GetString+0x3e>
 800a0b4:	6938      	ldr	r0, [r7, #16]
 800a0b6:	f000 f839 	bl	800a12c <USBD_GetLen>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	3301      	adds	r3, #1
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	e001      	b.n	800a0ca <USBD_GetString+0x42>
 800a0c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	7812      	ldrb	r2, [r2, #0]
 800a0d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0f0:	e013      	b.n	800a11a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	3301      	adds	r3, #1
 800a102:	613b      	str	r3, [r7, #16]
    idx++;
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	3301      	adds	r3, #1
 800a108:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	4413      	add	r3, r2
 800a110:	2200      	movs	r2, #0
 800a112:	701a      	strb	r2, [r3, #0]
    idx++;
 800a114:	7dfb      	ldrb	r3, [r7, #23]
 800a116:	3301      	adds	r3, #1
 800a118:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e7      	bne.n	800a0f2 <USBD_GetString+0x6a>
 800a122:	e000      	b.n	800a126 <USBD_GetString+0x9e>
    return;
 800a124:	bf00      	nop
  }
}
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a13c:	e005      	b.n	800a14a <USBD_GetLen+0x1e>
  {
    len++;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	3301      	adds	r3, #1
 800a142:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	3301      	adds	r3, #1
 800a148:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1f5      	bne.n	800a13e <USBD_GetLen+0x12>
  }

  return len;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2202      	movs	r2, #2
 800a170:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	2100      	movs	r1, #0
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 fd21 	bl	800abce <USBD_LL_Transmit>

  return USBD_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	60b9      	str	r1, [r7, #8]
 800a1a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 fd10 	bl	800abce <USBD_LL_Transmit>

  return USBD_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2203      	movs	r2, #3
 800a1c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 fd14 	bl	800ac10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	2100      	movs	r1, #0
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 fd03 	bl	800ac10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2204      	movs	r2, #4
 800a220:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a224:	2300      	movs	r3, #0
 800a226:	2200      	movs	r2, #0
 800a228:	2100      	movs	r1, #0
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fccf 	bl	800abce <USBD_LL_Transmit>

  return USBD_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b082      	sub	sp, #8
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2205      	movs	r2, #5
 800a246:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a24a:	2300      	movs	r3, #0
 800a24c:	2200      	movs	r2, #0
 800a24e:	2100      	movs	r1, #0
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fcdd 	bl	800ac10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a264:	2200      	movs	r2, #0
 800a266:	4913      	ldr	r1, [pc, #76]	@ (800a2b4 <MX_USB_DEVICE_Init+0x54>)
 800a268:	4813      	ldr	r0, [pc, #76]	@ (800a2b8 <MX_USB_DEVICE_Init+0x58>)
 800a26a:	f7fe fccd 	bl	8008c08 <USBD_Init>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a274:	f7f6 fcd2 	bl	8000c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a278:	4910      	ldr	r1, [pc, #64]	@ (800a2bc <MX_USB_DEVICE_Init+0x5c>)
 800a27a:	480f      	ldr	r0, [pc, #60]	@ (800a2b8 <MX_USB_DEVICE_Init+0x58>)
 800a27c:	f7fe fcf4 	bl	8008c68 <USBD_RegisterClass>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a286:	f7f6 fcc9 	bl	8000c1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a28a:	490d      	ldr	r1, [pc, #52]	@ (800a2c0 <MX_USB_DEVICE_Init+0x60>)
 800a28c:	480a      	ldr	r0, [pc, #40]	@ (800a2b8 <MX_USB_DEVICE_Init+0x58>)
 800a28e:	f7fe fbeb 	bl	8008a68 <USBD_CDC_RegisterInterface>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a298:	f7f6 fcc0 	bl	8000c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a29c:	4806      	ldr	r0, [pc, #24]	@ (800a2b8 <MX_USB_DEVICE_Init+0x58>)
 800a29e:	f7fe fd19 	bl	8008cd4 <USBD_Start>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2a8:	f7f6 fcb8 	bl	8000c1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a2ac:	f7f8 fe84 	bl	8002fb8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2b0:	bf00      	nop
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	240000cc 	.word	0x240000cc
 800a2b8:	24000244 	.word	0x24000244
 800a2bc:	24000038 	.word	0x24000038
 800a2c0:	240000b8 	.word	0x240000b8

0800a2c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4905      	ldr	r1, [pc, #20]	@ (800a2e0 <CDC_Init_FS+0x1c>)
 800a2cc:	4805      	ldr	r0, [pc, #20]	@ (800a2e4 <CDC_Init_FS+0x20>)
 800a2ce:	f7fe fbe5 	bl	8008a9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a2d2:	4905      	ldr	r1, [pc, #20]	@ (800a2e8 <CDC_Init_FS+0x24>)
 800a2d4:	4803      	ldr	r0, [pc, #12]	@ (800a2e4 <CDC_Init_FS+0x20>)
 800a2d6:	f7fe fc03 	bl	8008ae0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a2da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	24000d20 	.word	0x24000d20
 800a2e4:	24000244 	.word	0x24000244
 800a2e8:	24000520 	.word	0x24000520

0800a2ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a2f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	6039      	str	r1, [r7, #0]
 800a306:	71fb      	strb	r3, [r7, #7]
 800a308:	4613      	mov	r3, r2
 800a30a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	2b23      	cmp	r3, #35	@ 0x23
 800a310:	d84a      	bhi.n	800a3a8 <CDC_Control_FS+0xac>
 800a312:	a201      	add	r2, pc, #4	@ (adr r2, 800a318 <CDC_Control_FS+0x1c>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a3a9 	.word	0x0800a3a9
 800a31c:	0800a3a9 	.word	0x0800a3a9
 800a320:	0800a3a9 	.word	0x0800a3a9
 800a324:	0800a3a9 	.word	0x0800a3a9
 800a328:	0800a3a9 	.word	0x0800a3a9
 800a32c:	0800a3a9 	.word	0x0800a3a9
 800a330:	0800a3a9 	.word	0x0800a3a9
 800a334:	0800a3a9 	.word	0x0800a3a9
 800a338:	0800a3a9 	.word	0x0800a3a9
 800a33c:	0800a3a9 	.word	0x0800a3a9
 800a340:	0800a3a9 	.word	0x0800a3a9
 800a344:	0800a3a9 	.word	0x0800a3a9
 800a348:	0800a3a9 	.word	0x0800a3a9
 800a34c:	0800a3a9 	.word	0x0800a3a9
 800a350:	0800a3a9 	.word	0x0800a3a9
 800a354:	0800a3a9 	.word	0x0800a3a9
 800a358:	0800a3a9 	.word	0x0800a3a9
 800a35c:	0800a3a9 	.word	0x0800a3a9
 800a360:	0800a3a9 	.word	0x0800a3a9
 800a364:	0800a3a9 	.word	0x0800a3a9
 800a368:	0800a3a9 	.word	0x0800a3a9
 800a36c:	0800a3a9 	.word	0x0800a3a9
 800a370:	0800a3a9 	.word	0x0800a3a9
 800a374:	0800a3a9 	.word	0x0800a3a9
 800a378:	0800a3a9 	.word	0x0800a3a9
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	0800a3a9 	.word	0x0800a3a9
 800a384:	0800a3a9 	.word	0x0800a3a9
 800a388:	0800a3a9 	.word	0x0800a3a9
 800a38c:	0800a3a9 	.word	0x0800a3a9
 800a390:	0800a3a9 	.word	0x0800a3a9
 800a394:	0800a3a9 	.word	0x0800a3a9
 800a398:	0800a3a9 	.word	0x0800a3a9
 800a39c:	0800a3a9 	.word	0x0800a3a9
 800a3a0:	0800a3a9 	.word	0x0800a3a9
 800a3a4:	0800a3a9 	.word	0x0800a3a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3a8:	bf00      	nop
  }

  return (USBD_OK);
 800a3aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	4805      	ldr	r0, [pc, #20]	@ (800a3dc <CDC_Receive_FS+0x24>)
 800a3c6:	f7fe fb8b 	bl	8008ae0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a3ca:	4804      	ldr	r0, [pc, #16]	@ (800a3dc <CDC_Receive_FS+0x24>)
 800a3cc:	f7fe fbe6 	bl	8008b9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a3d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	24000244 	.word	0x24000244

0800a3e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a428 <CDC_Transmit_FS+0x48>)
 800a3f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a402:	2301      	movs	r3, #1
 800a404:	e00b      	b.n	800a41e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a406:	887b      	ldrh	r3, [r7, #2]
 800a408:	461a      	mov	r2, r3
 800a40a:	6879      	ldr	r1, [r7, #4]
 800a40c:	4806      	ldr	r0, [pc, #24]	@ (800a428 <CDC_Transmit_FS+0x48>)
 800a40e:	f7fe fb45 	bl	8008a9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a412:	4805      	ldr	r0, [pc, #20]	@ (800a428 <CDC_Transmit_FS+0x48>)
 800a414:	f7fe fb82 	bl	8008b1c <USBD_CDC_TransmitPacket>
 800a418:	4603      	mov	r3, r0
 800a41a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	24000244 	.word	0x24000244

0800a42c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	4613      	mov	r3, r2
 800a438:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a43e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a442:	4618      	mov	r0, r3
 800a444:	371c      	adds	r7, #28
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
	...

0800a450 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	6039      	str	r1, [r7, #0]
 800a45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2212      	movs	r2, #18
 800a460:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a462:	4b03      	ldr	r3, [pc, #12]	@ (800a470 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	240000ec 	.word	0x240000ec

0800a474 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	6039      	str	r1, [r7, #0]
 800a47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	2204      	movs	r2, #4
 800a484:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a486:	4b03      	ldr	r3, [pc, #12]	@ (800a494 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	24000100 	.word	0x24000100

0800a498 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	6039      	str	r1, [r7, #0]
 800a4a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d105      	bne.n	800a4b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	4907      	ldr	r1, [pc, #28]	@ (800a4cc <USBD_FS_ProductStrDescriptor+0x34>)
 800a4ae:	4808      	ldr	r0, [pc, #32]	@ (800a4d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4b0:	f7ff fdea 	bl	800a088 <USBD_GetString>
 800a4b4:	e004      	b.n	800a4c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	4904      	ldr	r1, [pc, #16]	@ (800a4cc <USBD_FS_ProductStrDescriptor+0x34>)
 800a4ba:	4805      	ldr	r0, [pc, #20]	@ (800a4d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4bc:	f7ff fde4 	bl	800a088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4c0:	4b02      	ldr	r3, [pc, #8]	@ (800a4cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	24001520 	.word	0x24001520
 800a4d0:	0800b678 	.word	0x0800b678

0800a4d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	6039      	str	r1, [r7, #0]
 800a4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	4904      	ldr	r1, [pc, #16]	@ (800a4f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4e4:	4804      	ldr	r0, [pc, #16]	@ (800a4f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4e6:	f7ff fdcf 	bl	800a088 <USBD_GetString>
  return USBD_StrDesc;
 800a4ea:	4b02      	ldr	r3, [pc, #8]	@ (800a4f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	24001520 	.word	0x24001520
 800a4f8:	0800b690 	.word	0x0800b690

0800a4fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	6039      	str	r1, [r7, #0]
 800a506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	221a      	movs	r2, #26
 800a50c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a50e:	f000 f843 	bl	800a598 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a512:	4b02      	ldr	r3, [pc, #8]	@ (800a51c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	24000104 	.word	0x24000104

0800a520 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	6039      	str	r1, [r7, #0]
 800a52a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d105      	bne.n	800a53e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	4907      	ldr	r1, [pc, #28]	@ (800a554 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a536:	4808      	ldr	r0, [pc, #32]	@ (800a558 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a538:	f7ff fda6 	bl	800a088 <USBD_GetString>
 800a53c:	e004      	b.n	800a548 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	4904      	ldr	r1, [pc, #16]	@ (800a554 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a542:	4805      	ldr	r0, [pc, #20]	@ (800a558 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a544:	f7ff fda0 	bl	800a088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a548:	4b02      	ldr	r3, [pc, #8]	@ (800a554 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	24001520 	.word	0x24001520
 800a558:	0800b6a4 	.word	0x0800b6a4

0800a55c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d105      	bne.n	800a57a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	4907      	ldr	r1, [pc, #28]	@ (800a590 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a572:	4808      	ldr	r0, [pc, #32]	@ (800a594 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a574:	f7ff fd88 	bl	800a088 <USBD_GetString>
 800a578:	e004      	b.n	800a584 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	4904      	ldr	r1, [pc, #16]	@ (800a590 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a57e:	4805      	ldr	r0, [pc, #20]	@ (800a594 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a580:	f7ff fd82 	bl	800a088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a584:	4b02      	ldr	r3, [pc, #8]	@ (800a590 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a586:	4618      	mov	r0, r3
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	24001520 	.word	0x24001520
 800a594:	0800b6b0 	.word	0x0800b6b0

0800a598 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a59e:	4b0f      	ldr	r3, [pc, #60]	@ (800a5dc <Get_SerialNum+0x44>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e0 <Get_SerialNum+0x48>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e4 <Get_SerialNum+0x4c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d009      	beq.n	800a5d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5be:	2208      	movs	r2, #8
 800a5c0:	4909      	ldr	r1, [pc, #36]	@ (800a5e8 <Get_SerialNum+0x50>)
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 f814 	bl	800a5f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	4908      	ldr	r1, [pc, #32]	@ (800a5ec <Get_SerialNum+0x54>)
 800a5cc:	68b8      	ldr	r0, [r7, #8]
 800a5ce:	f000 f80f 	bl	800a5f0 <IntToUnicode>
  }
}
 800a5d2:	bf00      	nop
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	1ff1e800 	.word	0x1ff1e800
 800a5e0:	1ff1e804 	.word	0x1ff1e804
 800a5e4:	1ff1e808 	.word	0x1ff1e808
 800a5e8:	24000106 	.word	0x24000106
 800a5ec:	24000116 	.word	0x24000116

0800a5f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a602:	2300      	movs	r3, #0
 800a604:	75fb      	strb	r3, [r7, #23]
 800a606:	e027      	b.n	800a658 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	0f1b      	lsrs	r3, r3, #28
 800a60c:	2b09      	cmp	r3, #9
 800a60e:	d80b      	bhi.n	800a628 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	0f1b      	lsrs	r3, r3, #28
 800a614:	b2da      	uxtb	r2, r3
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	4619      	mov	r1, r3
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	440b      	add	r3, r1
 800a620:	3230      	adds	r2, #48	@ 0x30
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	e00a      	b.n	800a63e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	0f1b      	lsrs	r3, r3, #28
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	4619      	mov	r1, r3
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	440b      	add	r3, r1
 800a638:	3237      	adds	r2, #55	@ 0x37
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	011b      	lsls	r3, r3, #4
 800a642:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	3301      	adds	r3, #1
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	4413      	add	r3, r2
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	3301      	adds	r3, #1
 800a656:	75fb      	strb	r3, [r7, #23]
 800a658:	7dfa      	ldrb	r2, [r7, #23]
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d3d3      	bcc.n	800a608 <IntToUnicode+0x18>
  }
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	371c      	adds	r7, #28
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
	...

0800a670 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b0ba      	sub	sp, #232	@ 0xe8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a678:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	609a      	str	r2, [r3, #8]
 800a684:	60da      	str	r2, [r3, #12]
 800a686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a688:	f107 0310 	add.w	r3, r7, #16
 800a68c:	22c0      	movs	r2, #192	@ 0xc0
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f000 fb55 	bl	800ad40 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a34      	ldr	r2, [pc, #208]	@ (800a76c <HAL_PCD_MspInit+0xfc>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d161      	bne.n	800a764 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a6a0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a6a4:	f04f 0300 	mov.w	r3, #0
 800a6a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a6ac:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a6b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a6b4:	f107 0310 	add.w	r3, r7, #16
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7f9 fc73 	bl	8003fa4 <HAL_RCCEx_PeriphCLKConfig>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800a6c4:	f7f6 faaa 	bl	8000c1c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a6c8:	f7f8 fc76 	bl	8002fb8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6cc:	4b28      	ldr	r3, [pc, #160]	@ (800a770 <HAL_PCD_MspInit+0x100>)
 800a6ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6d2:	4a27      	ldr	r2, [pc, #156]	@ (800a770 <HAL_PCD_MspInit+0x100>)
 800a6d4:	f043 0301 	orr.w	r3, r3, #1
 800a6d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a6dc:	4b24      	ldr	r3, [pc, #144]	@ (800a770 <HAL_PCD_MspInit+0x100>)
 800a6de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a6ea:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800a6ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6fe:	2300      	movs	r3, #0
 800a700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a704:	230a      	movs	r3, #10
 800a706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a70a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a70e:	4619      	mov	r1, r3
 800a710:	4818      	ldr	r0, [pc, #96]	@ (800a774 <HAL_PCD_MspInit+0x104>)
 800a712:	f7f6 ff61 	bl	80015d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a71a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a71e:	2300      	movs	r3, #0
 800a720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a724:	2300      	movs	r3, #0
 800a726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a72a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a72e:	4619      	mov	r1, r3
 800a730:	4810      	ldr	r0, [pc, #64]	@ (800a774 <HAL_PCD_MspInit+0x104>)
 800a732:	f7f6 ff51 	bl	80015d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a736:	4b0e      	ldr	r3, [pc, #56]	@ (800a770 <HAL_PCD_MspInit+0x100>)
 800a738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a73c:	4a0c      	ldr	r2, [pc, #48]	@ (800a770 <HAL_PCD_MspInit+0x100>)
 800a73e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a742:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a746:	4b0a      	ldr	r3, [pc, #40]	@ (800a770 <HAL_PCD_MspInit+0x100>)
 800a748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a74c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a750:	60bb      	str	r3, [r7, #8]
 800a752:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a754:	2200      	movs	r2, #0
 800a756:	2100      	movs	r1, #0
 800a758:	2065      	movs	r0, #101	@ 0x65
 800a75a:	f7f6 fe84 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a75e:	2065      	movs	r0, #101	@ 0x65
 800a760:	f7f6 fe9b 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a764:	bf00      	nop
 800a766:	37e8      	adds	r7, #232	@ 0xe8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	40080000 	.word	0x40080000
 800a770:	58024400 	.word	0x58024400
 800a774:	58020000 	.word	0x58020000

0800a778 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f7fe faed 	bl	8008d6e <USBD_LL_SetupStage>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a7ae:	78fa      	ldrb	r2, [r7, #3]
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	440b      	add	r3, r1
 800a7bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	78fb      	ldrb	r3, [r7, #3]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f7fe fb27 	bl	8008e18 <USBD_LL_DataOutStage>
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a7e4:	78fa      	ldrb	r2, [r7, #3]
 800a7e6:	6879      	ldr	r1, [r7, #4]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	3320      	adds	r3, #32
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	78fb      	ldrb	r3, [r7, #3]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	f7fe fbc0 	bl	8008f7e <USBD_LL_DataInStage>
}
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe fcfa 	bl	800920e <USBD_LL_SOF>
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a82a:	2301      	movs	r3, #1
 800a82c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	79db      	ldrb	r3, [r3, #7]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d102      	bne.n	800a83c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]
 800a83a:	e008      	b.n	800a84e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	79db      	ldrb	r3, [r3, #7]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d102      	bne.n	800a84a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a844:	2301      	movs	r3, #1
 800a846:	73fb      	strb	r3, [r7, #15]
 800a848:	e001      	b.n	800a84e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a84a:	f7f6 f9e7 	bl	8000c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a854:	7bfa      	ldrb	r2, [r7, #15]
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fc94 	bl	8009186 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe fc3c 	bl	80090e2 <USBD_LL_Reset>
}
 800a86a:	bf00      	nop
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a882:	4618      	mov	r0, r3
 800a884:	f7fe fc8f 	bl	80091a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6812      	ldr	r2, [r2, #0]
 800a896:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a89a:	f043 0301 	orr.w	r3, r3, #1
 800a89e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	7adb      	ldrb	r3, [r3, #11]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d005      	beq.n	800a8b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8a8:	4b04      	ldr	r3, [pc, #16]	@ (800a8bc <HAL_PCD_SuspendCallback+0x48>)
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	4a03      	ldr	r2, [pc, #12]	@ (800a8bc <HAL_PCD_SuspendCallback+0x48>)
 800a8ae:	f043 0306 	orr.w	r3, r3, #6
 800a8b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8b4:	bf00      	nop
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	e000ed00 	.word	0xe000ed00

0800a8c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fc85 	bl	80091de <USBD_LL_Resume>
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8ee:	78fa      	ldrb	r2, [r7, #3]
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe fcdd 	bl	80092b2 <USBD_LL_IsoOUTIncomplete>
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	460b      	mov	r3, r1
 800a90a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a912:	78fa      	ldrb	r2, [r7, #3]
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe fc99 	bl	800924e <USBD_LL_IsoINIncomplete>
}
 800a91c:	bf00      	nop
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fcef 	bl	8009316 <USBD_LL_DevConnected>
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fcec 	bl	800932c <USBD_LL_DevDisconnected>
}
 800a954:	bf00      	nop
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d13e      	bne.n	800a9ea <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a96c:	4a21      	ldr	r2, [pc, #132]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a1f      	ldr	r2, [pc, #124]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a978:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a97c:	4b1d      	ldr	r3, [pc, #116]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a97e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9f8 <USBD_LL_Init+0x9c>)
 800a980:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800a982:	4b1c      	ldr	r3, [pc, #112]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a984:	2209      	movs	r2, #9
 800a986:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a988:	4b1a      	ldr	r3, [pc, #104]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a98a:	2202      	movs	r2, #2
 800a98c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a98e:	4b19      	ldr	r3, [pc, #100]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a990:	2200      	movs	r2, #0
 800a992:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a994:	4b17      	ldr	r3, [pc, #92]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a996:	2202      	movs	r2, #2
 800a998:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a99a:	4b16      	ldr	r3, [pc, #88]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a99c:	2201      	movs	r2, #1
 800a99e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a9a0:	4b14      	ldr	r3, [pc, #80]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a9a6:	4b13      	ldr	r3, [pc, #76]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800a9ac:	4b11      	ldr	r3, [pc, #68]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a9b2:	4b10      	ldr	r3, [pc, #64]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a9b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a9be:	480d      	ldr	r0, [pc, #52]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9c0:	f7f7 f802 	bl	80019c8 <HAL_PCD_Init>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a9ca:	f7f6 f927 	bl	8000c1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a9ce:	2180      	movs	r1, #128	@ 0x80
 800a9d0:	4808      	ldr	r0, [pc, #32]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9d2:	f7f8 fa56 	bl	8002e82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a9d6:	2240      	movs	r2, #64	@ 0x40
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4806      	ldr	r0, [pc, #24]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9dc:	f7f8 fa0a 	bl	8002df4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a9e0:	2280      	movs	r2, #128	@ 0x80
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	4803      	ldr	r0, [pc, #12]	@ (800a9f4 <USBD_LL_Init+0x98>)
 800a9e6:	f7f8 fa05 	bl	8002df4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	24001720 	.word	0x24001720
 800a9f8:	40080000 	.word	0x40080000

0800a9fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7f7 f8e4 	bl	8001be0 <HAL_PCD_Start>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 f942 	bl	800aca8 <USBD_Get_USB_Status>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	461a      	mov	r2, r3
 800aa40:	4603      	mov	r3, r0
 800aa42:	70fb      	strb	r3, [r7, #3]
 800aa44:	460b      	mov	r3, r1
 800aa46:	70bb      	strb	r3, [r7, #2]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa5a:	78bb      	ldrb	r3, [r7, #2]
 800aa5c:	883a      	ldrh	r2, [r7, #0]
 800aa5e:	78f9      	ldrb	r1, [r7, #3]
 800aa60:	f7f7 fde5 	bl	800262e <HAL_PCD_EP_Open>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f91c 	bl	800aca8 <USBD_Get_USB_Status>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7f7 fe2e 	bl	80026fe <HAL_PCD_EP_Close>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f8fd 	bl	800aca8 <USBD_Get_USB_Status>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	4611      	mov	r1, r2
 800aada:	4618      	mov	r0, r3
 800aadc:	f7f7 fee6 	bl	80028ac <HAL_PCD_EP_SetStall>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 f8de 	bl	800aca8 <USBD_Get_USB_Status>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	460b      	mov	r3, r1
 800ab04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab14:	78fa      	ldrb	r2, [r7, #3]
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7f7 ff2a 	bl	8002972 <HAL_PCD_EP_ClrStall>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 f8bf 	bl	800aca8 <USBD_Get_USB_Status>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	da0b      	bge.n	800ab6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab54:	78fb      	ldrb	r3, [r7, #3]
 800ab56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab5a:	68f9      	ldr	r1, [r7, #12]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	4413      	add	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	440b      	add	r3, r1
 800ab66:	3316      	adds	r3, #22
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	e00b      	b.n	800ab84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab72:	68f9      	ldr	r1, [r7, #12]
 800ab74:	4613      	mov	r3, r2
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	4413      	add	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	440b      	add	r3, r1
 800ab7e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ab82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abaa:	78fa      	ldrb	r2, [r7, #3]
 800abac:	4611      	mov	r1, r2
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f7 fd19 	bl	80025e6 <HAL_PCD_SetAddress>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f874 	bl	800aca8 <USBD_Get_USB_Status>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b086      	sub	sp, #24
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	60f8      	str	r0, [r7, #12]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
 800abda:	460b      	mov	r3, r1
 800abdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800abec:	7af9      	ldrb	r1, [r7, #11]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	f7f7 fe21 	bl	8002838 <HAL_PCD_EP_Transmit>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfa:	7dfb      	ldrb	r3, [r7, #23]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 f853 	bl	800aca8 <USBD_Get_USB_Status>
 800ac02:	4603      	mov	r3, r0
 800ac04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac06:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	607a      	str	r2, [r7, #4]
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac2e:	7af9      	ldrb	r1, [r7, #11]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	f7f7 fdad 	bl	8002792 <HAL_PCD_EP_Receive>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3c:	7dfb      	ldrb	r3, [r7, #23]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f832 	bl	800aca8 <USBD_Get_USB_Status>
 800ac44:	4603      	mov	r3, r0
 800ac46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac48:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac64:	78fa      	ldrb	r2, [r7, #3]
 800ac66:	4611      	mov	r1, r2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7f7 fdcd 	bl	8002808 <HAL_PCD_EP_GetRxCount>
 800ac6e:	4603      	mov	r3, r0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac80:	4b03      	ldr	r3, [pc, #12]	@ (800ac90 <USBD_static_malloc+0x18>)
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	24001c04 	.word	0x24001c04

0800ac94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	4603      	mov	r3, r0
 800acb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	2b03      	cmp	r3, #3
 800acba:	d817      	bhi.n	800acec <USBD_Get_USB_Status+0x44>
 800acbc:	a201      	add	r2, pc, #4	@ (adr r2, 800acc4 <USBD_Get_USB_Status+0x1c>)
 800acbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc2:	bf00      	nop
 800acc4:	0800acd5 	.word	0x0800acd5
 800acc8:	0800acdb 	.word	0x0800acdb
 800accc:	0800ace1 	.word	0x0800ace1
 800acd0:	0800ace7 	.word	0x0800ace7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	73fb      	strb	r3, [r7, #15]
    break;
 800acd8:	e00b      	b.n	800acf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acda:	2303      	movs	r3, #3
 800acdc:	73fb      	strb	r3, [r7, #15]
    break;
 800acde:	e008      	b.n	800acf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ace0:	2301      	movs	r3, #1
 800ace2:	73fb      	strb	r3, [r7, #15]
    break;
 800ace4:	e005      	b.n	800acf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ace6:	2303      	movs	r3, #3
 800ace8:	73fb      	strb	r3, [r7, #15]
    break;
 800acea:	e002      	b.n	800acf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acec:	2303      	movs	r3, #3
 800acee:	73fb      	strb	r3, [r7, #15]
    break;
 800acf0:	bf00      	nop
  }
  return usb_status;
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <siprintf>:
 800ad00:	b40e      	push	{r1, r2, r3}
 800ad02:	b500      	push	{lr}
 800ad04:	b09c      	sub	sp, #112	@ 0x70
 800ad06:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad08:	9002      	str	r0, [sp, #8]
 800ad0a:	9006      	str	r0, [sp, #24]
 800ad0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad10:	4809      	ldr	r0, [pc, #36]	@ (800ad38 <siprintf+0x38>)
 800ad12:	9107      	str	r1, [sp, #28]
 800ad14:	9104      	str	r1, [sp, #16]
 800ad16:	4909      	ldr	r1, [pc, #36]	@ (800ad3c <siprintf+0x3c>)
 800ad18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1c:	9105      	str	r1, [sp, #20]
 800ad1e:	6800      	ldr	r0, [r0, #0]
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	a902      	add	r1, sp, #8
 800ad24:	f000 f994 	bl	800b050 <_svfiprintf_r>
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]
 800ad2e:	b01c      	add	sp, #112	@ 0x70
 800ad30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad34:	b003      	add	sp, #12
 800ad36:	4770      	bx	lr
 800ad38:	24000120 	.word	0x24000120
 800ad3c:	ffff0208 	.word	0xffff0208

0800ad40 <memset>:
 800ad40:	4402      	add	r2, r0
 800ad42:	4603      	mov	r3, r0
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d100      	bne.n	800ad4a <memset+0xa>
 800ad48:	4770      	bx	lr
 800ad4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad4e:	e7f9      	b.n	800ad44 <memset+0x4>

0800ad50 <__errno>:
 800ad50:	4b01      	ldr	r3, [pc, #4]	@ (800ad58 <__errno+0x8>)
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	24000120 	.word	0x24000120

0800ad5c <__libc_init_array>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ad94 <__libc_init_array+0x38>)
 800ad60:	4c0d      	ldr	r4, [pc, #52]	@ (800ad98 <__libc_init_array+0x3c>)
 800ad62:	1b64      	subs	r4, r4, r5
 800ad64:	10a4      	asrs	r4, r4, #2
 800ad66:	2600      	movs	r6, #0
 800ad68:	42a6      	cmp	r6, r4
 800ad6a:	d109      	bne.n	800ad80 <__libc_init_array+0x24>
 800ad6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ad9c <__libc_init_array+0x40>)
 800ad6e:	4c0c      	ldr	r4, [pc, #48]	@ (800ada0 <__libc_init_array+0x44>)
 800ad70:	f000 fc66 	bl	800b640 <_init>
 800ad74:	1b64      	subs	r4, r4, r5
 800ad76:	10a4      	asrs	r4, r4, #2
 800ad78:	2600      	movs	r6, #0
 800ad7a:	42a6      	cmp	r6, r4
 800ad7c:	d105      	bne.n	800ad8a <__libc_init_array+0x2e>
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad84:	4798      	blx	r3
 800ad86:	3601      	adds	r6, #1
 800ad88:	e7ee      	b.n	800ad68 <__libc_init_array+0xc>
 800ad8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad8e:	4798      	blx	r3
 800ad90:	3601      	adds	r6, #1
 800ad92:	e7f2      	b.n	800ad7a <__libc_init_array+0x1e>
 800ad94:	0800b730 	.word	0x0800b730
 800ad98:	0800b730 	.word	0x0800b730
 800ad9c:	0800b730 	.word	0x0800b730
 800ada0:	0800b734 	.word	0x0800b734

0800ada4 <__retarget_lock_acquire_recursive>:
 800ada4:	4770      	bx	lr

0800ada6 <__retarget_lock_release_recursive>:
 800ada6:	4770      	bx	lr

0800ada8 <_free_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4605      	mov	r5, r0
 800adac:	2900      	cmp	r1, #0
 800adae:	d041      	beq.n	800ae34 <_free_r+0x8c>
 800adb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb4:	1f0c      	subs	r4, r1, #4
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	bfb8      	it	lt
 800adba:	18e4      	addlt	r4, r4, r3
 800adbc:	f000 f8e0 	bl	800af80 <__malloc_lock>
 800adc0:	4a1d      	ldr	r2, [pc, #116]	@ (800ae38 <_free_r+0x90>)
 800adc2:	6813      	ldr	r3, [r2, #0]
 800adc4:	b933      	cbnz	r3, 800add4 <_free_r+0x2c>
 800adc6:	6063      	str	r3, [r4, #4]
 800adc8:	6014      	str	r4, [r2, #0]
 800adca:	4628      	mov	r0, r5
 800adcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add0:	f000 b8dc 	b.w	800af8c <__malloc_unlock>
 800add4:	42a3      	cmp	r3, r4
 800add6:	d908      	bls.n	800adea <_free_r+0x42>
 800add8:	6820      	ldr	r0, [r4, #0]
 800adda:	1821      	adds	r1, r4, r0
 800addc:	428b      	cmp	r3, r1
 800adde:	bf01      	itttt	eq
 800ade0:	6819      	ldreq	r1, [r3, #0]
 800ade2:	685b      	ldreq	r3, [r3, #4]
 800ade4:	1809      	addeq	r1, r1, r0
 800ade6:	6021      	streq	r1, [r4, #0]
 800ade8:	e7ed      	b.n	800adc6 <_free_r+0x1e>
 800adea:	461a      	mov	r2, r3
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	b10b      	cbz	r3, 800adf4 <_free_r+0x4c>
 800adf0:	42a3      	cmp	r3, r4
 800adf2:	d9fa      	bls.n	800adea <_free_r+0x42>
 800adf4:	6811      	ldr	r1, [r2, #0]
 800adf6:	1850      	adds	r0, r2, r1
 800adf8:	42a0      	cmp	r0, r4
 800adfa:	d10b      	bne.n	800ae14 <_free_r+0x6c>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	4401      	add	r1, r0
 800ae00:	1850      	adds	r0, r2, r1
 800ae02:	4283      	cmp	r3, r0
 800ae04:	6011      	str	r1, [r2, #0]
 800ae06:	d1e0      	bne.n	800adca <_free_r+0x22>
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	6053      	str	r3, [r2, #4]
 800ae0e:	4408      	add	r0, r1
 800ae10:	6010      	str	r0, [r2, #0]
 800ae12:	e7da      	b.n	800adca <_free_r+0x22>
 800ae14:	d902      	bls.n	800ae1c <_free_r+0x74>
 800ae16:	230c      	movs	r3, #12
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	e7d6      	b.n	800adca <_free_r+0x22>
 800ae1c:	6820      	ldr	r0, [r4, #0]
 800ae1e:	1821      	adds	r1, r4, r0
 800ae20:	428b      	cmp	r3, r1
 800ae22:	bf04      	itt	eq
 800ae24:	6819      	ldreq	r1, [r3, #0]
 800ae26:	685b      	ldreq	r3, [r3, #4]
 800ae28:	6063      	str	r3, [r4, #4]
 800ae2a:	bf04      	itt	eq
 800ae2c:	1809      	addeq	r1, r1, r0
 800ae2e:	6021      	streq	r1, [r4, #0]
 800ae30:	6054      	str	r4, [r2, #4]
 800ae32:	e7ca      	b.n	800adca <_free_r+0x22>
 800ae34:	bd38      	pop	{r3, r4, r5, pc}
 800ae36:	bf00      	nop
 800ae38:	24001f68 	.word	0x24001f68

0800ae3c <sbrk_aligned>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	4e0f      	ldr	r6, [pc, #60]	@ (800ae7c <sbrk_aligned+0x40>)
 800ae40:	460c      	mov	r4, r1
 800ae42:	6831      	ldr	r1, [r6, #0]
 800ae44:	4605      	mov	r5, r0
 800ae46:	b911      	cbnz	r1, 800ae4e <sbrk_aligned+0x12>
 800ae48:	f000 fba6 	bl	800b598 <_sbrk_r>
 800ae4c:	6030      	str	r0, [r6, #0]
 800ae4e:	4621      	mov	r1, r4
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 fba1 	bl	800b598 <_sbrk_r>
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	d103      	bne.n	800ae62 <sbrk_aligned+0x26>
 800ae5a:	f04f 34ff 	mov.w	r4, #4294967295
 800ae5e:	4620      	mov	r0, r4
 800ae60:	bd70      	pop	{r4, r5, r6, pc}
 800ae62:	1cc4      	adds	r4, r0, #3
 800ae64:	f024 0403 	bic.w	r4, r4, #3
 800ae68:	42a0      	cmp	r0, r4
 800ae6a:	d0f8      	beq.n	800ae5e <sbrk_aligned+0x22>
 800ae6c:	1a21      	subs	r1, r4, r0
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f000 fb92 	bl	800b598 <_sbrk_r>
 800ae74:	3001      	adds	r0, #1
 800ae76:	d1f2      	bne.n	800ae5e <sbrk_aligned+0x22>
 800ae78:	e7ef      	b.n	800ae5a <sbrk_aligned+0x1e>
 800ae7a:	bf00      	nop
 800ae7c:	24001f64 	.word	0x24001f64

0800ae80 <_malloc_r>:
 800ae80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae84:	1ccd      	adds	r5, r1, #3
 800ae86:	f025 0503 	bic.w	r5, r5, #3
 800ae8a:	3508      	adds	r5, #8
 800ae8c:	2d0c      	cmp	r5, #12
 800ae8e:	bf38      	it	cc
 800ae90:	250c      	movcc	r5, #12
 800ae92:	2d00      	cmp	r5, #0
 800ae94:	4606      	mov	r6, r0
 800ae96:	db01      	blt.n	800ae9c <_malloc_r+0x1c>
 800ae98:	42a9      	cmp	r1, r5
 800ae9a:	d904      	bls.n	800aea6 <_malloc_r+0x26>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	6033      	str	r3, [r6, #0]
 800aea0:	2000      	movs	r0, #0
 800aea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af7c <_malloc_r+0xfc>
 800aeaa:	f000 f869 	bl	800af80 <__malloc_lock>
 800aeae:	f8d8 3000 	ldr.w	r3, [r8]
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	bb44      	cbnz	r4, 800af08 <_malloc_r+0x88>
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f7ff ffbf 	bl	800ae3c <sbrk_aligned>
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	4604      	mov	r4, r0
 800aec2:	d158      	bne.n	800af76 <_malloc_r+0xf6>
 800aec4:	f8d8 4000 	ldr.w	r4, [r8]
 800aec8:	4627      	mov	r7, r4
 800aeca:	2f00      	cmp	r7, #0
 800aecc:	d143      	bne.n	800af56 <_malloc_r+0xd6>
 800aece:	2c00      	cmp	r4, #0
 800aed0:	d04b      	beq.n	800af6a <_malloc_r+0xea>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	4639      	mov	r1, r7
 800aed6:	4630      	mov	r0, r6
 800aed8:	eb04 0903 	add.w	r9, r4, r3
 800aedc:	f000 fb5c 	bl	800b598 <_sbrk_r>
 800aee0:	4581      	cmp	r9, r0
 800aee2:	d142      	bne.n	800af6a <_malloc_r+0xea>
 800aee4:	6821      	ldr	r1, [r4, #0]
 800aee6:	1a6d      	subs	r5, r5, r1
 800aee8:	4629      	mov	r1, r5
 800aeea:	4630      	mov	r0, r6
 800aeec:	f7ff ffa6 	bl	800ae3c <sbrk_aligned>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d03a      	beq.n	800af6a <_malloc_r+0xea>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	442b      	add	r3, r5
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	f8d8 3000 	ldr.w	r3, [r8]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	bb62      	cbnz	r2, 800af5c <_malloc_r+0xdc>
 800af02:	f8c8 7000 	str.w	r7, [r8]
 800af06:	e00f      	b.n	800af28 <_malloc_r+0xa8>
 800af08:	6822      	ldr	r2, [r4, #0]
 800af0a:	1b52      	subs	r2, r2, r5
 800af0c:	d420      	bmi.n	800af50 <_malloc_r+0xd0>
 800af0e:	2a0b      	cmp	r2, #11
 800af10:	d917      	bls.n	800af42 <_malloc_r+0xc2>
 800af12:	1961      	adds	r1, r4, r5
 800af14:	42a3      	cmp	r3, r4
 800af16:	6025      	str	r5, [r4, #0]
 800af18:	bf18      	it	ne
 800af1a:	6059      	strne	r1, [r3, #4]
 800af1c:	6863      	ldr	r3, [r4, #4]
 800af1e:	bf08      	it	eq
 800af20:	f8c8 1000 	streq.w	r1, [r8]
 800af24:	5162      	str	r2, [r4, r5]
 800af26:	604b      	str	r3, [r1, #4]
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 f82f 	bl	800af8c <__malloc_unlock>
 800af2e:	f104 000b 	add.w	r0, r4, #11
 800af32:	1d23      	adds	r3, r4, #4
 800af34:	f020 0007 	bic.w	r0, r0, #7
 800af38:	1ac2      	subs	r2, r0, r3
 800af3a:	bf1c      	itt	ne
 800af3c:	1a1b      	subne	r3, r3, r0
 800af3e:	50a3      	strne	r3, [r4, r2]
 800af40:	e7af      	b.n	800aea2 <_malloc_r+0x22>
 800af42:	6862      	ldr	r2, [r4, #4]
 800af44:	42a3      	cmp	r3, r4
 800af46:	bf0c      	ite	eq
 800af48:	f8c8 2000 	streq.w	r2, [r8]
 800af4c:	605a      	strne	r2, [r3, #4]
 800af4e:	e7eb      	b.n	800af28 <_malloc_r+0xa8>
 800af50:	4623      	mov	r3, r4
 800af52:	6864      	ldr	r4, [r4, #4]
 800af54:	e7ae      	b.n	800aeb4 <_malloc_r+0x34>
 800af56:	463c      	mov	r4, r7
 800af58:	687f      	ldr	r7, [r7, #4]
 800af5a:	e7b6      	b.n	800aeca <_malloc_r+0x4a>
 800af5c:	461a      	mov	r2, r3
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	42a3      	cmp	r3, r4
 800af62:	d1fb      	bne.n	800af5c <_malloc_r+0xdc>
 800af64:	2300      	movs	r3, #0
 800af66:	6053      	str	r3, [r2, #4]
 800af68:	e7de      	b.n	800af28 <_malloc_r+0xa8>
 800af6a:	230c      	movs	r3, #12
 800af6c:	6033      	str	r3, [r6, #0]
 800af6e:	4630      	mov	r0, r6
 800af70:	f000 f80c 	bl	800af8c <__malloc_unlock>
 800af74:	e794      	b.n	800aea0 <_malloc_r+0x20>
 800af76:	6005      	str	r5, [r0, #0]
 800af78:	e7d6      	b.n	800af28 <_malloc_r+0xa8>
 800af7a:	bf00      	nop
 800af7c:	24001f68 	.word	0x24001f68

0800af80 <__malloc_lock>:
 800af80:	4801      	ldr	r0, [pc, #4]	@ (800af88 <__malloc_lock+0x8>)
 800af82:	f7ff bf0f 	b.w	800ada4 <__retarget_lock_acquire_recursive>
 800af86:	bf00      	nop
 800af88:	24001f60 	.word	0x24001f60

0800af8c <__malloc_unlock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	@ (800af94 <__malloc_unlock+0x8>)
 800af8e:	f7ff bf0a 	b.w	800ada6 <__retarget_lock_release_recursive>
 800af92:	bf00      	nop
 800af94:	24001f60 	.word	0x24001f60

0800af98 <__ssputs_r>:
 800af98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af9c:	688e      	ldr	r6, [r1, #8]
 800af9e:	461f      	mov	r7, r3
 800afa0:	42be      	cmp	r6, r7
 800afa2:	680b      	ldr	r3, [r1, #0]
 800afa4:	4682      	mov	sl, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	4690      	mov	r8, r2
 800afaa:	d82d      	bhi.n	800b008 <__ssputs_r+0x70>
 800afac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afb4:	d026      	beq.n	800b004 <__ssputs_r+0x6c>
 800afb6:	6965      	ldr	r5, [r4, #20]
 800afb8:	6909      	ldr	r1, [r1, #16]
 800afba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afbe:	eba3 0901 	sub.w	r9, r3, r1
 800afc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afc6:	1c7b      	adds	r3, r7, #1
 800afc8:	444b      	add	r3, r9
 800afca:	106d      	asrs	r5, r5, #1
 800afcc:	429d      	cmp	r5, r3
 800afce:	bf38      	it	cc
 800afd0:	461d      	movcc	r5, r3
 800afd2:	0553      	lsls	r3, r2, #21
 800afd4:	d527      	bpl.n	800b026 <__ssputs_r+0x8e>
 800afd6:	4629      	mov	r1, r5
 800afd8:	f7ff ff52 	bl	800ae80 <_malloc_r>
 800afdc:	4606      	mov	r6, r0
 800afde:	b360      	cbz	r0, 800b03a <__ssputs_r+0xa2>
 800afe0:	6921      	ldr	r1, [r4, #16]
 800afe2:	464a      	mov	r2, r9
 800afe4:	f000 fae8 	bl	800b5b8 <memcpy>
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aff2:	81a3      	strh	r3, [r4, #12]
 800aff4:	6126      	str	r6, [r4, #16]
 800aff6:	6165      	str	r5, [r4, #20]
 800aff8:	444e      	add	r6, r9
 800affa:	eba5 0509 	sub.w	r5, r5, r9
 800affe:	6026      	str	r6, [r4, #0]
 800b000:	60a5      	str	r5, [r4, #8]
 800b002:	463e      	mov	r6, r7
 800b004:	42be      	cmp	r6, r7
 800b006:	d900      	bls.n	800b00a <__ssputs_r+0x72>
 800b008:	463e      	mov	r6, r7
 800b00a:	6820      	ldr	r0, [r4, #0]
 800b00c:	4632      	mov	r2, r6
 800b00e:	4641      	mov	r1, r8
 800b010:	f000 faa8 	bl	800b564 <memmove>
 800b014:	68a3      	ldr	r3, [r4, #8]
 800b016:	1b9b      	subs	r3, r3, r6
 800b018:	60a3      	str	r3, [r4, #8]
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	4433      	add	r3, r6
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	2000      	movs	r0, #0
 800b022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b026:	462a      	mov	r2, r5
 800b028:	f000 fad4 	bl	800b5d4 <_realloc_r>
 800b02c:	4606      	mov	r6, r0
 800b02e:	2800      	cmp	r0, #0
 800b030:	d1e0      	bne.n	800aff4 <__ssputs_r+0x5c>
 800b032:	6921      	ldr	r1, [r4, #16]
 800b034:	4650      	mov	r0, sl
 800b036:	f7ff feb7 	bl	800ada8 <_free_r>
 800b03a:	230c      	movs	r3, #12
 800b03c:	f8ca 3000 	str.w	r3, [sl]
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e7e9      	b.n	800b022 <__ssputs_r+0x8a>
	...

0800b050 <_svfiprintf_r>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	4698      	mov	r8, r3
 800b056:	898b      	ldrh	r3, [r1, #12]
 800b058:	061b      	lsls	r3, r3, #24
 800b05a:	b09d      	sub	sp, #116	@ 0x74
 800b05c:	4607      	mov	r7, r0
 800b05e:	460d      	mov	r5, r1
 800b060:	4614      	mov	r4, r2
 800b062:	d510      	bpl.n	800b086 <_svfiprintf_r+0x36>
 800b064:	690b      	ldr	r3, [r1, #16]
 800b066:	b973      	cbnz	r3, 800b086 <_svfiprintf_r+0x36>
 800b068:	2140      	movs	r1, #64	@ 0x40
 800b06a:	f7ff ff09 	bl	800ae80 <_malloc_r>
 800b06e:	6028      	str	r0, [r5, #0]
 800b070:	6128      	str	r0, [r5, #16]
 800b072:	b930      	cbnz	r0, 800b082 <_svfiprintf_r+0x32>
 800b074:	230c      	movs	r3, #12
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	b01d      	add	sp, #116	@ 0x74
 800b07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b082:	2340      	movs	r3, #64	@ 0x40
 800b084:	616b      	str	r3, [r5, #20]
 800b086:	2300      	movs	r3, #0
 800b088:	9309      	str	r3, [sp, #36]	@ 0x24
 800b08a:	2320      	movs	r3, #32
 800b08c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b090:	f8cd 800c 	str.w	r8, [sp, #12]
 800b094:	2330      	movs	r3, #48	@ 0x30
 800b096:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b234 <_svfiprintf_r+0x1e4>
 800b09a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b09e:	f04f 0901 	mov.w	r9, #1
 800b0a2:	4623      	mov	r3, r4
 800b0a4:	469a      	mov	sl, r3
 800b0a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0aa:	b10a      	cbz	r2, 800b0b0 <_svfiprintf_r+0x60>
 800b0ac:	2a25      	cmp	r2, #37	@ 0x25
 800b0ae:	d1f9      	bne.n	800b0a4 <_svfiprintf_r+0x54>
 800b0b0:	ebba 0b04 	subs.w	fp, sl, r4
 800b0b4:	d00b      	beq.n	800b0ce <_svfiprintf_r+0x7e>
 800b0b6:	465b      	mov	r3, fp
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f7ff ff6b 	bl	800af98 <__ssputs_r>
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	f000 80a7 	beq.w	800b216 <_svfiprintf_r+0x1c6>
 800b0c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ca:	445a      	add	r2, fp
 800b0cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 809f 	beq.w	800b216 <_svfiprintf_r+0x1c6>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f04f 32ff 	mov.w	r2, #4294967295
 800b0de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0e2:	f10a 0a01 	add.w	sl, sl, #1
 800b0e6:	9304      	str	r3, [sp, #16]
 800b0e8:	9307      	str	r3, [sp, #28]
 800b0ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0f0:	4654      	mov	r4, sl
 800b0f2:	2205      	movs	r2, #5
 800b0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f8:	484e      	ldr	r0, [pc, #312]	@ (800b234 <_svfiprintf_r+0x1e4>)
 800b0fa:	f7f5 f8f1 	bl	80002e0 <memchr>
 800b0fe:	9a04      	ldr	r2, [sp, #16]
 800b100:	b9d8      	cbnz	r0, 800b13a <_svfiprintf_r+0xea>
 800b102:	06d0      	lsls	r0, r2, #27
 800b104:	bf44      	itt	mi
 800b106:	2320      	movmi	r3, #32
 800b108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b10c:	0711      	lsls	r1, r2, #28
 800b10e:	bf44      	itt	mi
 800b110:	232b      	movmi	r3, #43	@ 0x2b
 800b112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b116:	f89a 3000 	ldrb.w	r3, [sl]
 800b11a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b11c:	d015      	beq.n	800b14a <_svfiprintf_r+0xfa>
 800b11e:	9a07      	ldr	r2, [sp, #28]
 800b120:	4654      	mov	r4, sl
 800b122:	2000      	movs	r0, #0
 800b124:	f04f 0c0a 	mov.w	ip, #10
 800b128:	4621      	mov	r1, r4
 800b12a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b12e:	3b30      	subs	r3, #48	@ 0x30
 800b130:	2b09      	cmp	r3, #9
 800b132:	d94b      	bls.n	800b1cc <_svfiprintf_r+0x17c>
 800b134:	b1b0      	cbz	r0, 800b164 <_svfiprintf_r+0x114>
 800b136:	9207      	str	r2, [sp, #28]
 800b138:	e014      	b.n	800b164 <_svfiprintf_r+0x114>
 800b13a:	eba0 0308 	sub.w	r3, r0, r8
 800b13e:	fa09 f303 	lsl.w	r3, r9, r3
 800b142:	4313      	orrs	r3, r2
 800b144:	9304      	str	r3, [sp, #16]
 800b146:	46a2      	mov	sl, r4
 800b148:	e7d2      	b.n	800b0f0 <_svfiprintf_r+0xa0>
 800b14a:	9b03      	ldr	r3, [sp, #12]
 800b14c:	1d19      	adds	r1, r3, #4
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	9103      	str	r1, [sp, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	bfbb      	ittet	lt
 800b156:	425b      	neglt	r3, r3
 800b158:	f042 0202 	orrlt.w	r2, r2, #2
 800b15c:	9307      	strge	r3, [sp, #28]
 800b15e:	9307      	strlt	r3, [sp, #28]
 800b160:	bfb8      	it	lt
 800b162:	9204      	strlt	r2, [sp, #16]
 800b164:	7823      	ldrb	r3, [r4, #0]
 800b166:	2b2e      	cmp	r3, #46	@ 0x2e
 800b168:	d10a      	bne.n	800b180 <_svfiprintf_r+0x130>
 800b16a:	7863      	ldrb	r3, [r4, #1]
 800b16c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b16e:	d132      	bne.n	800b1d6 <_svfiprintf_r+0x186>
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	1d1a      	adds	r2, r3, #4
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	9203      	str	r2, [sp, #12]
 800b178:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b17c:	3402      	adds	r4, #2
 800b17e:	9305      	str	r3, [sp, #20]
 800b180:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b244 <_svfiprintf_r+0x1f4>
 800b184:	7821      	ldrb	r1, [r4, #0]
 800b186:	2203      	movs	r2, #3
 800b188:	4650      	mov	r0, sl
 800b18a:	f7f5 f8a9 	bl	80002e0 <memchr>
 800b18e:	b138      	cbz	r0, 800b1a0 <_svfiprintf_r+0x150>
 800b190:	9b04      	ldr	r3, [sp, #16]
 800b192:	eba0 000a 	sub.w	r0, r0, sl
 800b196:	2240      	movs	r2, #64	@ 0x40
 800b198:	4082      	lsls	r2, r0
 800b19a:	4313      	orrs	r3, r2
 800b19c:	3401      	adds	r4, #1
 800b19e:	9304      	str	r3, [sp, #16]
 800b1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a4:	4824      	ldr	r0, [pc, #144]	@ (800b238 <_svfiprintf_r+0x1e8>)
 800b1a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1aa:	2206      	movs	r2, #6
 800b1ac:	f7f5 f898 	bl	80002e0 <memchr>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d036      	beq.n	800b222 <_svfiprintf_r+0x1d2>
 800b1b4:	4b21      	ldr	r3, [pc, #132]	@ (800b23c <_svfiprintf_r+0x1ec>)
 800b1b6:	bb1b      	cbnz	r3, 800b200 <_svfiprintf_r+0x1b0>
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	3307      	adds	r3, #7
 800b1bc:	f023 0307 	bic.w	r3, r3, #7
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	9303      	str	r3, [sp, #12]
 800b1c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c6:	4433      	add	r3, r6
 800b1c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ca:	e76a      	b.n	800b0a2 <_svfiprintf_r+0x52>
 800b1cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	e7a8      	b.n	800b128 <_svfiprintf_r+0xd8>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	3401      	adds	r4, #1
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	f04f 0c0a 	mov.w	ip, #10
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e8:	3a30      	subs	r2, #48	@ 0x30
 800b1ea:	2a09      	cmp	r2, #9
 800b1ec:	d903      	bls.n	800b1f6 <_svfiprintf_r+0x1a6>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0c6      	beq.n	800b180 <_svfiprintf_r+0x130>
 800b1f2:	9105      	str	r1, [sp, #20]
 800b1f4:	e7c4      	b.n	800b180 <_svfiprintf_r+0x130>
 800b1f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e7f0      	b.n	800b1e2 <_svfiprintf_r+0x192>
 800b200:	ab03      	add	r3, sp, #12
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	462a      	mov	r2, r5
 800b206:	4b0e      	ldr	r3, [pc, #56]	@ (800b240 <_svfiprintf_r+0x1f0>)
 800b208:	a904      	add	r1, sp, #16
 800b20a:	4638      	mov	r0, r7
 800b20c:	f3af 8000 	nop.w
 800b210:	1c42      	adds	r2, r0, #1
 800b212:	4606      	mov	r6, r0
 800b214:	d1d6      	bne.n	800b1c4 <_svfiprintf_r+0x174>
 800b216:	89ab      	ldrh	r3, [r5, #12]
 800b218:	065b      	lsls	r3, r3, #25
 800b21a:	f53f af2d 	bmi.w	800b078 <_svfiprintf_r+0x28>
 800b21e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b220:	e72c      	b.n	800b07c <_svfiprintf_r+0x2c>
 800b222:	ab03      	add	r3, sp, #12
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	462a      	mov	r2, r5
 800b228:	4b05      	ldr	r3, [pc, #20]	@ (800b240 <_svfiprintf_r+0x1f0>)
 800b22a:	a904      	add	r1, sp, #16
 800b22c:	4638      	mov	r0, r7
 800b22e:	f000 f879 	bl	800b324 <_printf_i>
 800b232:	e7ed      	b.n	800b210 <_svfiprintf_r+0x1c0>
 800b234:	0800b6f4 	.word	0x0800b6f4
 800b238:	0800b6fe 	.word	0x0800b6fe
 800b23c:	00000000 	.word	0x00000000
 800b240:	0800af99 	.word	0x0800af99
 800b244:	0800b6fa 	.word	0x0800b6fa

0800b248 <_printf_common>:
 800b248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	4616      	mov	r6, r2
 800b24e:	4698      	mov	r8, r3
 800b250:	688a      	ldr	r2, [r1, #8]
 800b252:	690b      	ldr	r3, [r1, #16]
 800b254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b258:	4293      	cmp	r3, r2
 800b25a:	bfb8      	it	lt
 800b25c:	4613      	movlt	r3, r2
 800b25e:	6033      	str	r3, [r6, #0]
 800b260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b264:	4607      	mov	r7, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b10a      	cbz	r2, 800b26e <_printf_common+0x26>
 800b26a:	3301      	adds	r3, #1
 800b26c:	6033      	str	r3, [r6, #0]
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	0699      	lsls	r1, r3, #26
 800b272:	bf42      	ittt	mi
 800b274:	6833      	ldrmi	r3, [r6, #0]
 800b276:	3302      	addmi	r3, #2
 800b278:	6033      	strmi	r3, [r6, #0]
 800b27a:	6825      	ldr	r5, [r4, #0]
 800b27c:	f015 0506 	ands.w	r5, r5, #6
 800b280:	d106      	bne.n	800b290 <_printf_common+0x48>
 800b282:	f104 0a19 	add.w	sl, r4, #25
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	6832      	ldr	r2, [r6, #0]
 800b28a:	1a9b      	subs	r3, r3, r2
 800b28c:	42ab      	cmp	r3, r5
 800b28e:	dc26      	bgt.n	800b2de <_printf_common+0x96>
 800b290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b294:	6822      	ldr	r2, [r4, #0]
 800b296:	3b00      	subs	r3, #0
 800b298:	bf18      	it	ne
 800b29a:	2301      	movne	r3, #1
 800b29c:	0692      	lsls	r2, r2, #26
 800b29e:	d42b      	bmi.n	800b2f8 <_printf_common+0xb0>
 800b2a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2a4:	4641      	mov	r1, r8
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	47c8      	blx	r9
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d01e      	beq.n	800b2ec <_printf_common+0xa4>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	6922      	ldr	r2, [r4, #16]
 800b2b2:	f003 0306 	and.w	r3, r3, #6
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	bf02      	ittt	eq
 800b2ba:	68e5      	ldreq	r5, [r4, #12]
 800b2bc:	6833      	ldreq	r3, [r6, #0]
 800b2be:	1aed      	subeq	r5, r5, r3
 800b2c0:	68a3      	ldr	r3, [r4, #8]
 800b2c2:	bf0c      	ite	eq
 800b2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2c8:	2500      	movne	r5, #0
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	bfc4      	itt	gt
 800b2ce:	1a9b      	subgt	r3, r3, r2
 800b2d0:	18ed      	addgt	r5, r5, r3
 800b2d2:	2600      	movs	r6, #0
 800b2d4:	341a      	adds	r4, #26
 800b2d6:	42b5      	cmp	r5, r6
 800b2d8:	d11a      	bne.n	800b310 <_printf_common+0xc8>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e008      	b.n	800b2f0 <_printf_common+0xa8>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	4641      	mov	r1, r8
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	47c8      	blx	r9
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d103      	bne.n	800b2f4 <_printf_common+0xac>
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f4:	3501      	adds	r5, #1
 800b2f6:	e7c6      	b.n	800b286 <_printf_common+0x3e>
 800b2f8:	18e1      	adds	r1, r4, r3
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	2030      	movs	r0, #48	@ 0x30
 800b2fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b302:	4422      	add	r2, r4
 800b304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b30c:	3302      	adds	r3, #2
 800b30e:	e7c7      	b.n	800b2a0 <_printf_common+0x58>
 800b310:	2301      	movs	r3, #1
 800b312:	4622      	mov	r2, r4
 800b314:	4641      	mov	r1, r8
 800b316:	4638      	mov	r0, r7
 800b318:	47c8      	blx	r9
 800b31a:	3001      	adds	r0, #1
 800b31c:	d0e6      	beq.n	800b2ec <_printf_common+0xa4>
 800b31e:	3601      	adds	r6, #1
 800b320:	e7d9      	b.n	800b2d6 <_printf_common+0x8e>
	...

0800b324 <_printf_i>:
 800b324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	7e0f      	ldrb	r7, [r1, #24]
 800b32a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b32c:	2f78      	cmp	r7, #120	@ 0x78
 800b32e:	4691      	mov	r9, r2
 800b330:	4680      	mov	r8, r0
 800b332:	460c      	mov	r4, r1
 800b334:	469a      	mov	sl, r3
 800b336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b33a:	d807      	bhi.n	800b34c <_printf_i+0x28>
 800b33c:	2f62      	cmp	r7, #98	@ 0x62
 800b33e:	d80a      	bhi.n	800b356 <_printf_i+0x32>
 800b340:	2f00      	cmp	r7, #0
 800b342:	f000 80d2 	beq.w	800b4ea <_printf_i+0x1c6>
 800b346:	2f58      	cmp	r7, #88	@ 0x58
 800b348:	f000 80b9 	beq.w	800b4be <_printf_i+0x19a>
 800b34c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b354:	e03a      	b.n	800b3cc <_printf_i+0xa8>
 800b356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b35a:	2b15      	cmp	r3, #21
 800b35c:	d8f6      	bhi.n	800b34c <_printf_i+0x28>
 800b35e:	a101      	add	r1, pc, #4	@ (adr r1, 800b364 <_printf_i+0x40>)
 800b360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b364:	0800b3bd 	.word	0x0800b3bd
 800b368:	0800b3d1 	.word	0x0800b3d1
 800b36c:	0800b34d 	.word	0x0800b34d
 800b370:	0800b34d 	.word	0x0800b34d
 800b374:	0800b34d 	.word	0x0800b34d
 800b378:	0800b34d 	.word	0x0800b34d
 800b37c:	0800b3d1 	.word	0x0800b3d1
 800b380:	0800b34d 	.word	0x0800b34d
 800b384:	0800b34d 	.word	0x0800b34d
 800b388:	0800b34d 	.word	0x0800b34d
 800b38c:	0800b34d 	.word	0x0800b34d
 800b390:	0800b4d1 	.word	0x0800b4d1
 800b394:	0800b3fb 	.word	0x0800b3fb
 800b398:	0800b48b 	.word	0x0800b48b
 800b39c:	0800b34d 	.word	0x0800b34d
 800b3a0:	0800b34d 	.word	0x0800b34d
 800b3a4:	0800b4f3 	.word	0x0800b4f3
 800b3a8:	0800b34d 	.word	0x0800b34d
 800b3ac:	0800b3fb 	.word	0x0800b3fb
 800b3b0:	0800b34d 	.word	0x0800b34d
 800b3b4:	0800b34d 	.word	0x0800b34d
 800b3b8:	0800b493 	.word	0x0800b493
 800b3bc:	6833      	ldr	r3, [r6, #0]
 800b3be:	1d1a      	adds	r2, r3, #4
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6032      	str	r2, [r6, #0]
 800b3c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e09d      	b.n	800b50c <_printf_i+0x1e8>
 800b3d0:	6833      	ldr	r3, [r6, #0]
 800b3d2:	6820      	ldr	r0, [r4, #0]
 800b3d4:	1d19      	adds	r1, r3, #4
 800b3d6:	6031      	str	r1, [r6, #0]
 800b3d8:	0606      	lsls	r6, r0, #24
 800b3da:	d501      	bpl.n	800b3e0 <_printf_i+0xbc>
 800b3dc:	681d      	ldr	r5, [r3, #0]
 800b3de:	e003      	b.n	800b3e8 <_printf_i+0xc4>
 800b3e0:	0645      	lsls	r5, r0, #25
 800b3e2:	d5fb      	bpl.n	800b3dc <_printf_i+0xb8>
 800b3e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3e8:	2d00      	cmp	r5, #0
 800b3ea:	da03      	bge.n	800b3f4 <_printf_i+0xd0>
 800b3ec:	232d      	movs	r3, #45	@ 0x2d
 800b3ee:	426d      	negs	r5, r5
 800b3f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f4:	4859      	ldr	r0, [pc, #356]	@ (800b55c <_printf_i+0x238>)
 800b3f6:	230a      	movs	r3, #10
 800b3f8:	e011      	b.n	800b41e <_printf_i+0xfa>
 800b3fa:	6821      	ldr	r1, [r4, #0]
 800b3fc:	6833      	ldr	r3, [r6, #0]
 800b3fe:	0608      	lsls	r0, r1, #24
 800b400:	f853 5b04 	ldr.w	r5, [r3], #4
 800b404:	d402      	bmi.n	800b40c <_printf_i+0xe8>
 800b406:	0649      	lsls	r1, r1, #25
 800b408:	bf48      	it	mi
 800b40a:	b2ad      	uxthmi	r5, r5
 800b40c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b40e:	4853      	ldr	r0, [pc, #332]	@ (800b55c <_printf_i+0x238>)
 800b410:	6033      	str	r3, [r6, #0]
 800b412:	bf14      	ite	ne
 800b414:	230a      	movne	r3, #10
 800b416:	2308      	moveq	r3, #8
 800b418:	2100      	movs	r1, #0
 800b41a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b41e:	6866      	ldr	r6, [r4, #4]
 800b420:	60a6      	str	r6, [r4, #8]
 800b422:	2e00      	cmp	r6, #0
 800b424:	bfa2      	ittt	ge
 800b426:	6821      	ldrge	r1, [r4, #0]
 800b428:	f021 0104 	bicge.w	r1, r1, #4
 800b42c:	6021      	strge	r1, [r4, #0]
 800b42e:	b90d      	cbnz	r5, 800b434 <_printf_i+0x110>
 800b430:	2e00      	cmp	r6, #0
 800b432:	d04b      	beq.n	800b4cc <_printf_i+0x1a8>
 800b434:	4616      	mov	r6, r2
 800b436:	fbb5 f1f3 	udiv	r1, r5, r3
 800b43a:	fb03 5711 	mls	r7, r3, r1, r5
 800b43e:	5dc7      	ldrb	r7, [r0, r7]
 800b440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b444:	462f      	mov	r7, r5
 800b446:	42bb      	cmp	r3, r7
 800b448:	460d      	mov	r5, r1
 800b44a:	d9f4      	bls.n	800b436 <_printf_i+0x112>
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d10b      	bne.n	800b468 <_printf_i+0x144>
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	07df      	lsls	r7, r3, #31
 800b454:	d508      	bpl.n	800b468 <_printf_i+0x144>
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	6861      	ldr	r1, [r4, #4]
 800b45a:	4299      	cmp	r1, r3
 800b45c:	bfde      	ittt	le
 800b45e:	2330      	movle	r3, #48	@ 0x30
 800b460:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b464:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b468:	1b92      	subs	r2, r2, r6
 800b46a:	6122      	str	r2, [r4, #16]
 800b46c:	f8cd a000 	str.w	sl, [sp]
 800b470:	464b      	mov	r3, r9
 800b472:	aa03      	add	r2, sp, #12
 800b474:	4621      	mov	r1, r4
 800b476:	4640      	mov	r0, r8
 800b478:	f7ff fee6 	bl	800b248 <_printf_common>
 800b47c:	3001      	adds	r0, #1
 800b47e:	d14a      	bne.n	800b516 <_printf_i+0x1f2>
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	b004      	add	sp, #16
 800b486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	f043 0320 	orr.w	r3, r3, #32
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	4833      	ldr	r0, [pc, #204]	@ (800b560 <_printf_i+0x23c>)
 800b494:	2778      	movs	r7, #120	@ 0x78
 800b496:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	6831      	ldr	r1, [r6, #0]
 800b49e:	061f      	lsls	r7, r3, #24
 800b4a0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4a4:	d402      	bmi.n	800b4ac <_printf_i+0x188>
 800b4a6:	065f      	lsls	r7, r3, #25
 800b4a8:	bf48      	it	mi
 800b4aa:	b2ad      	uxthmi	r5, r5
 800b4ac:	6031      	str	r1, [r6, #0]
 800b4ae:	07d9      	lsls	r1, r3, #31
 800b4b0:	bf44      	itt	mi
 800b4b2:	f043 0320 	orrmi.w	r3, r3, #32
 800b4b6:	6023      	strmi	r3, [r4, #0]
 800b4b8:	b11d      	cbz	r5, 800b4c2 <_printf_i+0x19e>
 800b4ba:	2310      	movs	r3, #16
 800b4bc:	e7ac      	b.n	800b418 <_printf_i+0xf4>
 800b4be:	4827      	ldr	r0, [pc, #156]	@ (800b55c <_printf_i+0x238>)
 800b4c0:	e7e9      	b.n	800b496 <_printf_i+0x172>
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	f023 0320 	bic.w	r3, r3, #32
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	e7f6      	b.n	800b4ba <_printf_i+0x196>
 800b4cc:	4616      	mov	r6, r2
 800b4ce:	e7bd      	b.n	800b44c <_printf_i+0x128>
 800b4d0:	6833      	ldr	r3, [r6, #0]
 800b4d2:	6825      	ldr	r5, [r4, #0]
 800b4d4:	6961      	ldr	r1, [r4, #20]
 800b4d6:	1d18      	adds	r0, r3, #4
 800b4d8:	6030      	str	r0, [r6, #0]
 800b4da:	062e      	lsls	r6, r5, #24
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	d501      	bpl.n	800b4e4 <_printf_i+0x1c0>
 800b4e0:	6019      	str	r1, [r3, #0]
 800b4e2:	e002      	b.n	800b4ea <_printf_i+0x1c6>
 800b4e4:	0668      	lsls	r0, r5, #25
 800b4e6:	d5fb      	bpl.n	800b4e0 <_printf_i+0x1bc>
 800b4e8:	8019      	strh	r1, [r3, #0]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	6123      	str	r3, [r4, #16]
 800b4ee:	4616      	mov	r6, r2
 800b4f0:	e7bc      	b.n	800b46c <_printf_i+0x148>
 800b4f2:	6833      	ldr	r3, [r6, #0]
 800b4f4:	1d1a      	adds	r2, r3, #4
 800b4f6:	6032      	str	r2, [r6, #0]
 800b4f8:	681e      	ldr	r6, [r3, #0]
 800b4fa:	6862      	ldr	r2, [r4, #4]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	4630      	mov	r0, r6
 800b500:	f7f4 feee 	bl	80002e0 <memchr>
 800b504:	b108      	cbz	r0, 800b50a <_printf_i+0x1e6>
 800b506:	1b80      	subs	r0, r0, r6
 800b508:	6060      	str	r0, [r4, #4]
 800b50a:	6863      	ldr	r3, [r4, #4]
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	2300      	movs	r3, #0
 800b510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b514:	e7aa      	b.n	800b46c <_printf_i+0x148>
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	4632      	mov	r2, r6
 800b51a:	4649      	mov	r1, r9
 800b51c:	4640      	mov	r0, r8
 800b51e:	47d0      	blx	sl
 800b520:	3001      	adds	r0, #1
 800b522:	d0ad      	beq.n	800b480 <_printf_i+0x15c>
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	079b      	lsls	r3, r3, #30
 800b528:	d413      	bmi.n	800b552 <_printf_i+0x22e>
 800b52a:	68e0      	ldr	r0, [r4, #12]
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	4298      	cmp	r0, r3
 800b530:	bfb8      	it	lt
 800b532:	4618      	movlt	r0, r3
 800b534:	e7a6      	b.n	800b484 <_printf_i+0x160>
 800b536:	2301      	movs	r3, #1
 800b538:	4632      	mov	r2, r6
 800b53a:	4649      	mov	r1, r9
 800b53c:	4640      	mov	r0, r8
 800b53e:	47d0      	blx	sl
 800b540:	3001      	adds	r0, #1
 800b542:	d09d      	beq.n	800b480 <_printf_i+0x15c>
 800b544:	3501      	adds	r5, #1
 800b546:	68e3      	ldr	r3, [r4, #12]
 800b548:	9903      	ldr	r1, [sp, #12]
 800b54a:	1a5b      	subs	r3, r3, r1
 800b54c:	42ab      	cmp	r3, r5
 800b54e:	dcf2      	bgt.n	800b536 <_printf_i+0x212>
 800b550:	e7eb      	b.n	800b52a <_printf_i+0x206>
 800b552:	2500      	movs	r5, #0
 800b554:	f104 0619 	add.w	r6, r4, #25
 800b558:	e7f5      	b.n	800b546 <_printf_i+0x222>
 800b55a:	bf00      	nop
 800b55c:	0800b705 	.word	0x0800b705
 800b560:	0800b716 	.word	0x0800b716

0800b564 <memmove>:
 800b564:	4288      	cmp	r0, r1
 800b566:	b510      	push	{r4, lr}
 800b568:	eb01 0402 	add.w	r4, r1, r2
 800b56c:	d902      	bls.n	800b574 <memmove+0x10>
 800b56e:	4284      	cmp	r4, r0
 800b570:	4623      	mov	r3, r4
 800b572:	d807      	bhi.n	800b584 <memmove+0x20>
 800b574:	1e43      	subs	r3, r0, #1
 800b576:	42a1      	cmp	r1, r4
 800b578:	d008      	beq.n	800b58c <memmove+0x28>
 800b57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b582:	e7f8      	b.n	800b576 <memmove+0x12>
 800b584:	4402      	add	r2, r0
 800b586:	4601      	mov	r1, r0
 800b588:	428a      	cmp	r2, r1
 800b58a:	d100      	bne.n	800b58e <memmove+0x2a>
 800b58c:	bd10      	pop	{r4, pc}
 800b58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b596:	e7f7      	b.n	800b588 <memmove+0x24>

0800b598 <_sbrk_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d06      	ldr	r5, [pc, #24]	@ (800b5b4 <_sbrk_r+0x1c>)
 800b59c:	2300      	movs	r3, #0
 800b59e:	4604      	mov	r4, r0
 800b5a0:	4608      	mov	r0, r1
 800b5a2:	602b      	str	r3, [r5, #0]
 800b5a4:	f7f5 fb9a 	bl	8000cdc <_sbrk>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_sbrk_r+0x1a>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_sbrk_r+0x1a>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	24001f5c 	.word	0x24001f5c

0800b5b8 <memcpy>:
 800b5b8:	440a      	add	r2, r1
 800b5ba:	4291      	cmp	r1, r2
 800b5bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5c0:	d100      	bne.n	800b5c4 <memcpy+0xc>
 800b5c2:	4770      	bx	lr
 800b5c4:	b510      	push	{r4, lr}
 800b5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	d1f9      	bne.n	800b5c6 <memcpy+0xe>
 800b5d2:	bd10      	pop	{r4, pc}

0800b5d4 <_realloc_r>:
 800b5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d8:	4680      	mov	r8, r0
 800b5da:	4615      	mov	r5, r2
 800b5dc:	460c      	mov	r4, r1
 800b5de:	b921      	cbnz	r1, 800b5ea <_realloc_r+0x16>
 800b5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	f7ff bc4b 	b.w	800ae80 <_malloc_r>
 800b5ea:	b92a      	cbnz	r2, 800b5f8 <_realloc_r+0x24>
 800b5ec:	f7ff fbdc 	bl	800ada8 <_free_r>
 800b5f0:	2400      	movs	r4, #0
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f8:	f000 f81a 	bl	800b630 <_malloc_usable_size_r>
 800b5fc:	4285      	cmp	r5, r0
 800b5fe:	4606      	mov	r6, r0
 800b600:	d802      	bhi.n	800b608 <_realloc_r+0x34>
 800b602:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b606:	d8f4      	bhi.n	800b5f2 <_realloc_r+0x1e>
 800b608:	4629      	mov	r1, r5
 800b60a:	4640      	mov	r0, r8
 800b60c:	f7ff fc38 	bl	800ae80 <_malloc_r>
 800b610:	4607      	mov	r7, r0
 800b612:	2800      	cmp	r0, #0
 800b614:	d0ec      	beq.n	800b5f0 <_realloc_r+0x1c>
 800b616:	42b5      	cmp	r5, r6
 800b618:	462a      	mov	r2, r5
 800b61a:	4621      	mov	r1, r4
 800b61c:	bf28      	it	cs
 800b61e:	4632      	movcs	r2, r6
 800b620:	f7ff ffca 	bl	800b5b8 <memcpy>
 800b624:	4621      	mov	r1, r4
 800b626:	4640      	mov	r0, r8
 800b628:	f7ff fbbe 	bl	800ada8 <_free_r>
 800b62c:	463c      	mov	r4, r7
 800b62e:	e7e0      	b.n	800b5f2 <_realloc_r+0x1e>

0800b630 <_malloc_usable_size_r>:
 800b630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b634:	1f18      	subs	r0, r3, #4
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfbc      	itt	lt
 800b63a:	580b      	ldrlt	r3, [r1, r0]
 800b63c:	18c0      	addlt	r0, r0, r3
 800b63e:	4770      	bx	lr

0800b640 <_init>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	bf00      	nop
 800b644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b646:	bc08      	pop	{r3}
 800b648:	469e      	mov	lr, r3
 800b64a:	4770      	bx	lr

0800b64c <_fini>:
 800b64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64e:	bf00      	nop
 800b650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b652:	bc08      	pop	{r3}
 800b654:	469e      	mov	lr, r3
 800b656:	4770      	bx	lr
