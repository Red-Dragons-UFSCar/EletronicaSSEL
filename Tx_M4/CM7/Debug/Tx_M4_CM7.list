
Tx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b410  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800b6b0  0800b6b0  0000c6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7a4  0800b7a4  0000d170  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7a4  0800b7a4  0000c7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7ac  0800b7ac  0000d170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7ac  0800b7ac  0000c7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7b0  0800b7b0  0000c7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  24000000  0800b7b4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e20  24000170  0800b924  0000d170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001f90  0800b924  0000df90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acc9  00000000  00000000  0000d19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c74  00000000  00000000  00027e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e55  00000000  00000000  0002cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cdc6  00000000  00000000  0002dc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9fe  00000000  00000000  0006a9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f533  00000000  00000000  000863e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020591c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  00205960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0020ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000170 	.word	0x24000170
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b698 	.word	0x0800b698

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000174 	.word	0x24000174
 80002dc:	0800b698 	.word	0x0800b698

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <get_M4>:

// pointer to shared_data struct (inter-core buffers and status)
volatile struct shared_data * const xfr_ptr = (struct shared_data *)0x38001000;

int * get_M4() // get data from M4 to M7 buffer
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
	static int buffer[9]; // buffer to receive data
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <get_M4+0x5c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d11d      	bne.n	80007e8 <get_M4+0x4c>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <get_M4+0x5c>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 9; n++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	e011      	b.n	80007dc <get_M4+0x40>
		{
			buffer[n] = xfr_ptr->M4toM7[n]; // transfer data
 80007b8:	4a0f      	ldr	r2, [pc, #60]	@ (80007f8 <get_M4+0x5c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	490e      	ldr	r1, [pc, #56]	@ (80007fc <get_M4+0x60>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			xfr_ptr->M4toM7[n] = 0; // clear M4 to M7 buffer
 80007ca:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <get_M4+0x5c>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
		for(int n = 0; n < 9; n++)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3301      	adds	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b08      	cmp	r3, #8
 80007e0:	ddea      	ble.n	80007b8 <get_M4+0x1c>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 80007e2:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <get_M4+0x5c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
	}
	return buffer; // return the buffer (pointer)
 80007e8:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <get_M4+0x60>)
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	38001000 	.word	0x38001000
 80007fc:	2400019c 	.word	0x2400019c

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000802:	b0c1      	sub	sp, #260	@ 0x104
 8000804:	af08      	add	r7, sp, #32
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000806:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800080a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800080e:	bf00      	nop
 8000810:	4b87      	ldr	r3, [pc, #540]	@ (8000a30 <main+0x230>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d006      	beq.n	800082a <main+0x2a>
 800081c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000826:	2b00      	cmp	r3, #0
 8000828:	dcf2      	bgt.n	8000810 <main+0x10>
  if ( timeout < 0 )
 800082a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x36>
  {
  Error_Handler();
 8000832:	f000 fa1f 	bl	8000c74 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fca5 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f903 	bl	8000a44 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800083e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a30 <main+0x230>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000844:	4a7a      	ldr	r2, [pc, #488]	@ (8000a30 <main+0x230>)
 8000846:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800084a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084e:	4b78      	ldr	r3, [pc, #480]	@ (8000a30 <main+0x230>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697b      	ldr	r3, [r7, #20]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800085c:	2000      	movs	r0, #0
 800085e:	f001 f8b1 	bl	80019c4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f001 f8c7 	bl	80019f8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800086a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800086e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000872:	bf00      	nop
 8000874:	4b6e      	ldr	r3, [pc, #440]	@ (8000a30 <main+0x230>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d106      	bne.n	800088e <main+0x8e>
 8000880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000884:	1e5a      	subs	r2, r3, #1
 8000886:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800088a:	2b00      	cmp	r3, #0
 800088c:	dcf2      	bgt.n	8000874 <main+0x74>
if ( timeout < 0 )
 800088e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000892:	2b00      	cmp	r3, #0
 8000894:	da01      	bge.n	800089a <main+0x9a>
{
Error_Handler();
 8000896:	f000 f9ed 	bl	8000c74 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f000 f953 	bl	8000b44 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800089e:	f009 fd0b 	bl	800a2b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 faa6 	bl	8000df4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 faa3 	bl	8000df4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008ae:	2002      	movs	r0, #2
 80008b0:	f000 faa0 	bl	8000df4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008b4:	2101      	movs	r1, #1
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fb12 	bl	8000ee0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008bc:	4b5d      	ldr	r3, [pc, #372]	@ (8000a34 <main+0x234>)
 80008be:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008c4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a34 <main+0x234>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000a34 <main+0x234>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008d0:	4b58      	ldr	r3, [pc, #352]	@ (8000a34 <main+0x234>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008d6:	4b57      	ldr	r3, [pc, #348]	@ (8000a34 <main+0x234>)
 80008d8:	2200      	movs	r2, #0
 80008da:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008dc:	4955      	ldr	r1, [pc, #340]	@ (8000a34 <main+0x234>)
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 fb8e 	bl	8001000 <BSP_COM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <main+0xee>
  {
    Error_Handler();
 80008ea:	f000 f9c3 	bl	8000c74 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  xfr_ptr->sts_4to7 = 0;
 80008ee:	4b52      	ldr	r3, [pc, #328]	@ (8000a38 <main+0x238>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
  xfr_ptr->sts_7to4 = 0;
 80008f4:	4b50      	ldr	r3, [pc, #320]	@ (8000a38 <main+0x238>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	705a      	strb	r2, [r3, #1]
  int *xfr_data;
  char message[100] = {'\0'};
 80008fa:	2300      	movs	r3, #0
 80008fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80008fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000902:	2260      	movs	r2, #96	@ 0x60
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00a fa46 	bl	800ad98 <memset>
  int Retorno[9] = {20,20,20,0,0,0,0,0,0};//Correntes (3 robos), Latência (3 Robos), Perda de Pacote (3 Robos)
 800090c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a3c <main+0x23c>)
 800090e:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000912:	461d      	mov	r5, r3
 8000914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	6023      	str	r3, [r4, #0]
  int Software[12] = {0,0,0,0,0,0,0,0,0,0,0,0}; //((vel)*4Rodas)*3Robos
 8000920:	f107 0318 	add.w	r3, r7, #24
 8000924:	2230      	movs	r2, #48	@ 0x30
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f00a fa35 	bl	800ad98 <memset>
  while (1)
  {
	  if(xfr_ptr->sts_4to7 == 1){
 800092e:	4b42      	ldr	r3, [pc, #264]	@ (8000a38 <main+0x238>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b01      	cmp	r3, #1
 8000936:	d103      	bne.n	8000940 <main+0x140>
		xfr_data = get_M4();
 8000938:	f7ff ff30 	bl	800079c <get_M4>
 800093c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
	  }
	  for(uint8_t i=0; i<9;i++){
 8000940:	2300      	movs	r3, #0
 8000942:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8000946:	e014      	b.n	8000972 <main+0x172>
		Retorno[i] = xfr_data[i];
 8000948:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000952:	441a      	add	r2, r3
 8000954:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000958:	6812      	ldr	r2, [r2, #0]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	33d0      	adds	r3, #208	@ 0xd0
 800095e:	f107 0110 	add.w	r1, r7, #16
 8000962:	440b      	add	r3, r1
 8000964:	f843 2c98 	str.w	r2, [r3, #-152]
	  for(uint8_t i=0; i<9;i++){
 8000968:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800096c:	3301      	adds	r3, #1
 800096e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8000972:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000976:	2b08      	cmp	r3, #8
 8000978:	d9e6      	bls.n	8000948 <main+0x148>
	  }
	CDC_Receive_FS(Software,sizeof(Software));
 800097a:	f107 0318 	add.w	r3, r7, #24
 800097e:	2130      	movs	r1, #48	@ 0x30
 8000980:	4618      	mov	r0, r3
 8000982:	f009 fd45 	bl	800a410 <CDC_Receive_FS>
	sprintf(message, "oi %d %d %d %d %d %d %d %d %d\n",Retorno[0],Retorno[1],Retorno[2],Retorno[3],Retorno[4],Retorno[5],Retorno[6],Retorno[7],Retorno[8],Retorno[9]);
 8000986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000990:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000992:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000994:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 800099a:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 800099c:	6ebe      	ldr	r6, [r7, #104]	@ 0x68
 800099e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80009a0:	f107 0c6c 	add.w	ip, r7, #108	@ 0x6c
 80009a4:	9007      	str	r0, [sp, #28]
 80009a6:	9606      	str	r6, [sp, #24]
 80009a8:	9505      	str	r5, [sp, #20]
 80009aa:	9404      	str	r4, [sp, #16]
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	9003      	str	r0, [sp, #12]
 80009b0:	9102      	str	r1, [sp, #8]
 80009b2:	9201      	str	r2, [sp, #4]
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4921      	ldr	r1, [pc, #132]	@ (8000a40 <main+0x240>)
 80009bc:	4660      	mov	r0, ip
 80009be:	f00a f9cb 	bl	800ad58 <siprintf>
	CDC_Transmit_FS(message,sizeof(message));
 80009c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009c6:	2164      	movs	r1, #100	@ 0x64
 80009c8:	4618      	mov	r0, r3
 80009ca:	f009 fd35 	bl	800a438 <CDC_Transmit_FS>
	if(xfr_ptr->sts_7to4 == 0){
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <main+0x238>)
 80009d0:	785b      	ldrb	r3, [r3, #1]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <main+0x1de>
		 xfr_ptr->sts_7to4 = 1;
 80009d8:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <main+0x238>)
 80009da:	2201      	movs	r2, #1
 80009dc:	705a      	strb	r2, [r3, #1]
	 }

	if(xfr_ptr->sts_7to4 == 0){
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <main+0x238>)
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d11e      	bne.n	8000a26 <main+0x226>
			 for(int n = 0; n < 12; n++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80009ee:	e013      	b.n	8000a18 <main+0x218>
			 	xfr_ptr->M7toM4[n] = Software[n];
 80009f0:	4911      	ldr	r1, [pc, #68]	@ (8000a38 <main+0x238>)
 80009f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	33d0      	adds	r3, #208	@ 0xd0
 80009fa:	f107 0210 	add.w	r2, r7, #16
 80009fe:	4413      	add	r3, r2
 8000a00:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 8000a04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a08:	330a      	adds	r3, #10
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 for(int n = 0; n < 12; n++){
 8000a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a12:	3301      	adds	r3, #1
 8000a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000a18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a1c:	2b0b      	cmp	r3, #11
 8000a1e:	dde7      	ble.n	80009f0 <main+0x1f0>
			 	}
			 xfr_ptr->sts_7to4 =1;
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <main+0x238>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	705a      	strb	r2, [r3, #1]
		 }


	HAL_Delay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fc3e 	bl	80012a8 <HAL_Delay>
	  if(xfr_ptr->sts_4to7 == 1){
 8000a2c:	e77f      	b.n	800092e <main+0x12e>
 8000a2e:	bf00      	nop
 8000a30:	58024400 	.word	0x58024400
 8000a34:	2400018c 	.word	0x2400018c
 8000a38:	38001000 	.word	0x38001000
 8000a3c:	0800b6d0 	.word	0x0800b6d0
 8000a40:	0800b6b0 	.word	0x0800b6b0

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b09c      	sub	sp, #112	@ 0x70
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4e:	224c      	movs	r2, #76	@ 0x4c
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00a f9a0 	bl	800ad98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00a f99a 	bl	800ad98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a64:	2004      	movs	r0, #4
 8000a66:	f002 fa79 	bl	8002f5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b33      	ldr	r3, [pc, #204]	@ (8000b3c <SystemClock_Config+0xf8>)
 8000a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a72:	4a32      	ldr	r2, [pc, #200]	@ (8000b3c <SystemClock_Config+0xf8>)
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a7a:	4b30      	ldr	r3, [pc, #192]	@ (8000b3c <SystemClock_Config+0xf8>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <SystemClock_Config+0xfc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000b40 <SystemClock_Config+0xfc>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <SystemClock_Config+0xfc>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa0:	bf00      	nop
 8000aa2:	4b27      	ldr	r3, [pc, #156]	@ (8000b40 <SystemClock_Config+0xfc>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aae:	d1f8      	bne.n	8000aa2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2322      	movs	r3, #34	@ 0x22
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2340      	movs	r3, #64	@ 0x40
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000acc:	2319      	movs	r3, #25
 8000ace:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000adc:	230c      	movs	r3, #12
 8000ade:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 fa9f 	bl	8003030 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000af8:	f000 f8bc 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	233f      	movs	r3, #63	@ 0x3f
 8000afe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2303      	movs	r3, #3
 8000b02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0c:	2340      	movs	r3, #64	@ 0x40
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b10:	2340      	movs	r3, #64	@ 0x40
 8000b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b1a:	2340      	movs	r3, #64	@ 0x40
 8000b1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2104      	movs	r1, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fede 	bl	80038e4 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b2e:	f000 f8a1 	bl	8000c74 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3770      	adds	r7, #112	@ 0x70
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	58000400 	.word	0x58000400
 8000b40:	58024800 	.word	0x58024800

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b41      	ldr	r3, [pc, #260]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	4a3f      	ldr	r2, [pc, #252]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b39      	ldr	r3, [pc, #228]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	4a38      	ldr	r2, [pc, #224]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b88:	4b35      	ldr	r3, [pc, #212]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b32      	ldr	r3, [pc, #200]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	4a30      	ldr	r2, [pc, #192]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bba:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc4:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <MX_GPIO_Init+0x11c>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bd2:	2332      	movs	r3, #50	@ 0x32
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be2:	230b      	movs	r3, #11
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	481d      	ldr	r0, [pc, #116]	@ (8000c64 <MX_GPIO_Init+0x120>)
 8000bee:	f000 fd1f 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bf2:	2386      	movs	r3, #134	@ 0x86
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4816      	ldr	r0, [pc, #88]	@ (8000c68 <MX_GPIO_Init+0x124>)
 8000c0e:	f000 fd0f 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480f      	ldr	r0, [pc, #60]	@ (8000c6c <MX_GPIO_Init+0x128>)
 8000c30:	f000 fcfe 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c34:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c46:	230b      	movs	r3, #11
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_GPIO_Init+0x12c>)
 8000c52:	f000 fced 	bl	8001630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58020800 	.word	0x58020800
 8000c68:	58020000 	.word	0x58020000
 8000c6c:	58020400 	.word	0x58020400
 8000c70:	58021800 	.word	0x58021800

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_MspInit+0x30>)
 8000c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c8c:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x30>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x30>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	58024400 	.word	0x58024400

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0a:	f000 faad 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f954 	bl	8000fc4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <OTG_FS_IRQHandler+0x10>)
 8000d26:	f000 ffbc 	bl	8001ca2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	24001744 	.word	0x24001744

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	@ (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f00a f820 	bl	800ada8 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	24080000 	.word	0x24080000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	240001c0 	.word	0x240001c0
 8000d9c:	24001f90 	.word	0x24001f90

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da4:	f7ff fc64 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f009 fff1 	bl	800adb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fd15 	bl	8000800 <main>
  bx  lr
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ddc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000de0:	24000170 	.word	0x24000170
  ldr r2, =_sidata
 8000de4:	0800b7b4 	.word	0x0800b7b4
  ldr r2, =_sbss
 8000de8:	24000170 	.word	0x24000170
  ldr r4, =_ebss
 8000dec:	24001f90 	.word	0x24001f90

08000df0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC3_IRQHandler>
	...

08000df4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	@ 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d009      	beq.n	8000e1c <BSP_LED_Init+0x28>
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d006      	beq.n	8000e1c <BSP_LED_Init+0x28>
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d003      	beq.n	8000e1c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e14:	f06f 0301 	mvn.w	r3, #1
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e1a:	e055      	b.n	8000ec8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10f      	bne.n	8000e42 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000e22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e32:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	e021      	b.n	8000e86 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10f      	bne.n	8000e68 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000e48:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4e:	4a21      	ldr	r2, [pc, #132]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	e00e      	b.n	8000e86 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	4a19      	ldr	r2, [pc, #100]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <BSP_LED_Init+0xe0>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4a13      	ldr	r2, [pc, #76]	@ (8000ed8 <BSP_LED_Init+0xe4>)
 8000e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e8e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000edc <BSP_LED_Init+0xe8>)
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	f107 0218 	add.w	r2, r7, #24
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fbc0 	bl	8001630 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <BSP_LED_Init+0xe8>)
 8000eb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <BSP_LED_Init+0xe4>)
 8000ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f000 fd64 	bl	8001990 <HAL_GPIO_WritePin>
  }

  return ret;
 8000ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3730      	adds	r7, #48	@ 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	0800b74c 	.word	0x0800b74c
 8000edc:	2400000c 	.word	0x2400000c

08000ee0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <BSP_PB_Init+0xcc>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <BSP_PB_Init+0xcc>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f00:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <BSP_PB_Init+0xcc>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000f0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f12:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000f14:	2302      	movs	r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <BSP_PB_Init+0xd0>)
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fb7b 	bl	8001630 <HAL_GPIO_Init>
 8000f3a:	e031      	b.n	8000fa0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f40:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb0 <BSP_PB_Init+0xd0>)
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	f107 020c 	add.w	r2, r7, #12
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fb6d 	bl	8001630 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4a16      	ldr	r2, [pc, #88]	@ (8000fb4 <BSP_PB_Init+0xd4>)
 8000f5c:	441a      	add	r2, r3
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4915      	ldr	r1, [pc, #84]	@ (8000fb8 <BSP_PB_Init+0xd8>)
 8000f62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4610      	mov	r0, r2
 8000f6a:	f000 fb10 	bl	800158e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4a10      	ldr	r2, [pc, #64]	@ (8000fb4 <BSP_PB_Init+0xd4>)
 8000f74:	1898      	adds	r0, r3, r2
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a10      	ldr	r2, [pc, #64]	@ (8000fbc <BSP_PB_Init+0xdc>)
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	f000 fae5 	bl	8001550 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f86:	2028      	movs	r0, #40	@ 0x28
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <BSP_PB_Init+0xe0>)
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	f000 fa93 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f98:	2328      	movs	r3, #40	@ 0x28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 faa9 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	24000018 	.word	0x24000018
 8000fb4:	240001c4 	.word	0x240001c4
 8000fb8:	0800b754 	.word	0x0800b754
 8000fbc:	2400001c 	.word	0x2400001c
 8000fc0:	24000020 	.word	0x24000020

08000fc4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <BSP_PB_IRQHandler+0x20>)
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 faee 	bl	80015b8 <HAL_EXTI_IRQHandler>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	240001c4 	.word	0x240001c4

08000fe8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001016:	f06f 0301 	mvn.w	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e018      	b.n	8001050 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2294      	movs	r2, #148	@ 0x94
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <BSP_COM_Init+0x5c>)
 8001028:	4413      	add	r3, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f852 	bl	80010d4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2294      	movs	r2, #148	@ 0x94
 8001034:	fb02 f303 	mul.w	r3, r2, r3
 8001038:	4a08      	ldr	r2, [pc, #32]	@ (800105c <BSP_COM_Init+0x5c>)
 800103a:	4413      	add	r3, r2
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f80e 	bl	8001060 <MX_USART3_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800104a:	f06f 0303 	mvn.w	r3, #3
 800104e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001050:	68fb      	ldr	r3, [r7, #12]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	240001cc 	.word	0x240001cc

08001060 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <MX_USART3_Init+0x60>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	220c      	movs	r2, #12
 800107e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	895b      	ldrh	r3, [r3, #10]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	891b      	ldrh	r3, [r3, #8]
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	899b      	ldrh	r3, [r3, #12]
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010ac:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f004 fdd0 	bl	8005c54 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	24000008 	.word	0x24000008

080010c4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff ff8d 	bl	8000fe8 <BSP_PB_Callback>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <COM1_MspInit+0xa8>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e2:	4a26      	ldr	r2, [pc, #152]	@ (800117c <COM1_MspInit+0xa8>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ec:	4b23      	ldr	r3, [pc, #140]	@ (800117c <COM1_MspInit+0xa8>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010fa:	4b20      	ldr	r3, [pc, #128]	@ (800117c <COM1_MspInit+0xa8>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a1e      	ldr	r2, [pc, #120]	@ (800117c <COM1_MspInit+0xa8>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <COM1_MspInit+0xa8>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <COM1_MspInit+0xa8>)
 800111a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <COM1_MspInit+0xa8>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001124:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <COM1_MspInit+0xa8>)
 800112a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800112e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800113a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001144:	2301      	movs	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001148:	2307      	movs	r3, #7
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	480b      	ldr	r0, [pc, #44]	@ (8001180 <COM1_MspInit+0xac>)
 8001154:	f000 fa6c 	bl	8001630 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800115c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001162:	2307      	movs	r3, #7
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <COM1_MspInit+0xac>)
 800116e:	f000 fa5f 	bl	8001630 <HAL_GPIO_Init>
}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	@ 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	58024400 	.word	0x58024400
 8001180:	58020c00 	.word	0x58020c00

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118a:	2003      	movs	r0, #3
 800118c:	f000 f98c 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001190:	f002 fd5e 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8001194:	4602      	mov	r2, r0
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <HAL_Init+0x68>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	4913      	ldr	r1, [pc, #76]	@ (80011f0 <HAL_Init+0x6c>)
 80011a2:	5ccb      	ldrb	r3, [r1, r3]
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <HAL_Init+0x68>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <HAL_Init+0x6c>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <HAL_Init+0x70>)
 80011c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c8:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <HAL_Init+0x74>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f814 	bl	80011fc <HAL_InitTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e002      	b.n	80011e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011de:	f7ff fd4f 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58024400 	.word	0x58024400
 80011f0:	0800b73c 	.word	0x0800b73c
 80011f4:	24000004 	.word	0x24000004
 80011f8:	24000000 	.word	0x24000000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e021      	b.n	8001254 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_InitTick+0x64>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_InitTick+0x60>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f971 	bl	800150e <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f93b 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	@ (8001264 <HAL_InitTick+0x68>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	24000028 	.word	0x24000028
 8001260:	24000000 	.word	0x24000000
 8001264:	24000024 	.word	0x24000024

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	24000028 	.word	0x24000028
 800128c:	24000260 	.word	0x24000260

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	24000260 	.word	0x24000260

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	24000028 	.word	0x24000028

080012f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_GetREVID+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0c1b      	lsrs	r3, r3, #16
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	5c001000 	.word	0x5c001000

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <__NVIC_SetPriorityGrouping+0x40>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	4313      	orrs	r3, r2
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <__NVIC_SetPriorityGrouping+0x40>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	05fa0000 	.word	0x05fa0000

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	@ (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff40 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff33 	bl	800136c <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa4 	bl	8001464 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <HAL_GetCurrentCPUID+0x24>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	2b07      	cmp	r3, #7
 8001538:	d101      	bne.n	800153e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800153a:	2303      	movs	r3, #3
 800153c:	e000      	b.n	8001540 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800153e:	2301      	movs	r3, #1
  }
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	460b      	mov	r3, r1
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e00a      	b.n	8001582 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d103      	bne.n	800157a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	605a      	str	r2, [r3, #4]
      break;
 8001578:	e002      	b.n	8001580 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
      break;
 800157e:	bf00      	nop
  }

  return status;
 8001580:	7dfb      	ldrb	r3, [r7, #23]
}
 8001582:	4618      	mov	r0, r3
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e003      	b.n	80015aa <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80015a8:	2300      	movs	r3, #0
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0c1b      	lsrs	r3, r3, #16
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2201      	movs	r2, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80015dc:	f7ff ffa4 	bl	8001528 <HAL_GetCurrentCPUID>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d105      	bne.n	80015f2 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	011a      	lsls	r2, r3, #4
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_EXTI_IRQHandler+0x70>)
 80015ec:	4413      	add	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e004      	b.n	80015fc <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	011a      	lsls	r2, r3, #4
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_EXTI_IRQHandler+0x74>)
 80015f8:	4413      	add	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4013      	ands	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4798      	blx	r3
    }
  }
}
 8001620:	bf00      	nop
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58000088 	.word	0x58000088
 800162c:	580000c8 	.word	0x580000c8

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800163e:	4b89      	ldr	r3, [pc, #548]	@ (8001864 <HAL_GPIO_Init+0x234>)
 8001640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001642:	e194      	b.n	800196e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8186 	beq.w	8001968 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d005      	beq.n	8001674 <HAL_GPIO_Init+0x44>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d130      	bne.n	80016d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016aa:	2201      	movs	r2, #1
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 0201 	and.w	r2, r3, #1
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d017      	beq.n	8001712 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d123      	bne.n	8001766 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	69b9      	ldr	r1, [r7, #24]
 8001762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0203 	and.w	r2, r3, #3
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80e0 	beq.w	8001968 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <HAL_GPIO_Init+0x238>)
 80017aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001868 <HAL_GPIO_Init+0x238>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <HAL_GPIO_Init+0x238>)
 80017ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a29      	ldr	r2, [pc, #164]	@ (800186c <HAL_GPIO_Init+0x23c>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a20      	ldr	r2, [pc, #128]	@ (8001870 <HAL_GPIO_Init+0x240>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d052      	beq.n	8001898 <HAL_GPIO_Init+0x268>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001874 <HAL_GPIO_Init+0x244>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d031      	beq.n	800185e <HAL_GPIO_Init+0x22e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001878 <HAL_GPIO_Init+0x248>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d02b      	beq.n	800185a <HAL_GPIO_Init+0x22a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <HAL_GPIO_Init+0x24c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d025      	beq.n	8001856 <HAL_GPIO_Init+0x226>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1c      	ldr	r2, [pc, #112]	@ (8001880 <HAL_GPIO_Init+0x250>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01f      	beq.n	8001852 <HAL_GPIO_Init+0x222>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1b      	ldr	r2, [pc, #108]	@ (8001884 <HAL_GPIO_Init+0x254>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x21e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1a      	ldr	r2, [pc, #104]	@ (8001888 <HAL_GPIO_Init+0x258>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x21a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a19      	ldr	r2, [pc, #100]	@ (800188c <HAL_GPIO_Init+0x25c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x216>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <HAL_GPIO_Init+0x260>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x212>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a17      	ldr	r2, [pc, #92]	@ (8001894 <HAL_GPIO_Init+0x264>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x20e>
 800183a:	2309      	movs	r3, #9
 800183c:	e02d      	b.n	800189a <HAL_GPIO_Init+0x26a>
 800183e:	230a      	movs	r3, #10
 8001840:	e02b      	b.n	800189a <HAL_GPIO_Init+0x26a>
 8001842:	2308      	movs	r3, #8
 8001844:	e029      	b.n	800189a <HAL_GPIO_Init+0x26a>
 8001846:	2307      	movs	r3, #7
 8001848:	e027      	b.n	800189a <HAL_GPIO_Init+0x26a>
 800184a:	2306      	movs	r3, #6
 800184c:	e025      	b.n	800189a <HAL_GPIO_Init+0x26a>
 800184e:	2305      	movs	r3, #5
 8001850:	e023      	b.n	800189a <HAL_GPIO_Init+0x26a>
 8001852:	2304      	movs	r3, #4
 8001854:	e021      	b.n	800189a <HAL_GPIO_Init+0x26a>
 8001856:	2303      	movs	r3, #3
 8001858:	e01f      	b.n	800189a <HAL_GPIO_Init+0x26a>
 800185a:	2302      	movs	r3, #2
 800185c:	e01d      	b.n	800189a <HAL_GPIO_Init+0x26a>
 800185e:	2301      	movs	r3, #1
 8001860:	e01b      	b.n	800189a <HAL_GPIO_Init+0x26a>
 8001862:	bf00      	nop
 8001864:	58000080 	.word	0x58000080
 8001868:	58024400 	.word	0x58024400
 800186c:	58000400 	.word	0x58000400
 8001870:	58020000 	.word	0x58020000
 8001874:	58020400 	.word	0x58020400
 8001878:	58020800 	.word	0x58020800
 800187c:	58020c00 	.word	0x58020c00
 8001880:	58021000 	.word	0x58021000
 8001884:	58021400 	.word	0x58021400
 8001888:	58021800 	.word	0x58021800
 800188c:	58021c00 	.word	0x58021c00
 8001890:	58022000 	.word	0x58022000
 8001894:	58022400 	.word	0x58022400
 8001898:	2300      	movs	r3, #0
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	f002 0203 	and.w	r2, r2, #3
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	4093      	lsls	r3, r2
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018aa:	4938      	ldr	r1, [pc, #224]	@ (800198c <HAL_GPIO_Init+0x35c>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800190c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	3301      	adds	r3, #1
 800196c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	f47f ae63 	bne.w	8001644 <HAL_GPIO_Init+0x14>
  }
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	@ 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	58000400 	.word	0x58000400

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019ac:	e003      	b.n	80019b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	041a      	lsls	r2, r3, #16
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	619a      	str	r2, [r3, #24]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80019cc:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <HAL_HSEM_FastTake+0x2c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3320      	adds	r3, #32
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	4a07      	ldr	r2, [pc, #28]	@ (80019f4 <HAL_HSEM_FastTake+0x30>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	58026400 	.word	0x58026400
 80019f4:	80000300 	.word	0x80000300

080019f8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a02:	4906      	ldr	r1, [pc, #24]	@ (8001a1c <HAL_HSEM_Release+0x24>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	58026400 	.word	0x58026400

08001a20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0fe      	b.n	8001c30 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f008 fe3e 	bl	800a6c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f005 fa02 	bl	8006e62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7c1a      	ldrb	r2, [r3, #16]
 8001a66:	f88d 2000 	strb.w	r2, [sp]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6e:	f005 f8d3 	bl	8006c18 <USB_CoreInit>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0d5      	b.n	8001c30 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f005 f9fa 	bl	8006e84 <USB_SetCurrentMode>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0c6      	b.n	8001c30 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e04a      	b.n	8001b3e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3315      	adds	r3, #21
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	3314      	adds	r3, #20
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	b298      	uxth	r0, r3
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	332e      	adds	r3, #46	@ 0x2e
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	3318      	adds	r3, #24
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	331c      	adds	r3, #28
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3320      	adds	r3, #32
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	3324      	adds	r3, #36	@ 0x24
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3af      	bcc.n	8001aa8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e044      	b.n	8001bd8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	791b      	ldrb	r3, [r3, #4]
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3b5      	bcc.n	8001b4e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7c1a      	ldrb	r2, [r3, #16]
 8001bea:	f88d 2000 	strb.w	r2, [sp]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf2:	f005 f993 	bl	8006f1c <USB_DevInit>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e013      	b.n	8001c30 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7b1b      	ldrb	r3, [r3, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f001 f96c 	bl	8002efc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f006 f9d2 	bl	8007fd2 <USB_DevDisconnect>

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_PCD_Start+0x1c>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e022      	b.n	8001c9a <HAL_PCD_Start+0x62>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f005 f8dd 	bl	8006e40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f006 f980 	bl	8007f90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ca2:	b590      	push	{r4, r7, lr}
 8001ca4:	b08d      	sub	sp, #52	@ 0x34
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f006 fa3e 	bl	800813a <USB_GetMode>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 84b9 	bne.w	8002638 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f006 f9a2 	bl	8008014 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 84af 	beq.w	8002636 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f006 f98f 	bl	8008014 <USB_ReadInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d107      	bne.n	8001d10 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f002 0202 	and.w	r2, r2, #2
 8001d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f006 f97d 	bl	8008014 <USB_ReadInterrupts>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d161      	bne.n	8001de8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0210 	bic.w	r2, r2, #16
 8001d32:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	3304      	adds	r3, #4
 8001d52:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	0c5b      	lsrs	r3, r3, #17
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d124      	bne.n	8001daa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d035      	beq.n	8001dd8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6a38      	ldr	r0, [r7, #32]
 8001d80:	f005 ffb4 	bl	8007cec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d90:	441a      	add	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001da2:	441a      	add	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	615a      	str	r2, [r3, #20]
 8001da8:	e016      	b.n	8001dd8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	0c5b      	lsrs	r3, r3, #17
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d110      	bne.n	8001dd8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6a38      	ldr	r0, [r7, #32]
 8001dc2:	f005 ff93 	bl	8007cec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dd2:	441a      	add	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0210 	orr.w	r2, r2, #16
 8001de6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f006 f911 	bl	8008014 <USB_ReadInterrupts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001df8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001dfc:	f040 80a7 	bne.w	8001f4e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f006 f916 	bl	800803a <USB_ReadDevAllOutEpInterrupt>
 8001e0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001e10:	e099      	b.n	8001f46 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 808e 	beq.w	8001f3a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f006 f93a 	bl	80080a2 <USB_ReadDevOutEPInterrupt>
 8001e2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e46:	461a      	mov	r2, r3
 8001e48:	2301      	movs	r3, #1
 8001e4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fece 	bl	8002bf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 ffa4 	bl	8002dc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2310      	movs	r3, #16
 8001e92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d030      	beq.n	8001f00 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea6:	2b80      	cmp	r3, #128	@ 0x80
 8001ea8:	d109      	bne.n	8001ebe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001eb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ebc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	78db      	ldrb	r3, [r3, #3]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d108      	bne.n	8001eee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f008 fd23 	bl	800a934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001efa:	461a      	mov	r2, r3
 8001efc:	2302      	movs	r3, #2
 8001efe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f16:	461a      	mov	r2, r3
 8001f18:	2320      	movs	r3, #32
 8001f1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f32:	461a      	mov	r2, r3
 8001f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f38:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f47f af62 	bne.w	8001e12 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f006 f85e 	bl	8008014 <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f62:	f040 80db 	bne.w	800211c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f006 f87f 	bl	800806e <USB_ReadDevAllInEpInterrupt>
 8001f70:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001f76:	e0cd      	b.n	8002114 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80c2 	beq.w	8002108 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f006 f8a5 	bl	80080de <USB_ReadDevInEPInterrupt>
 8001f94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d057      	beq.n	8002050 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69f9      	ldr	r1, [r7, #28]
 8001fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	799b      	ldrb	r3, [r3, #6]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d132      	bne.n	8002044 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3320      	adds	r3, #32
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4403      	add	r3, r0
 8001ffe:	331c      	adds	r3, #28
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4419      	add	r1, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4403      	add	r3, r0
 8002012:	3320      	adds	r3, #32
 8002014:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	2b00      	cmp	r3, #0
 800201a:	d113      	bne.n	8002044 <HAL_PCD_IRQHandler+0x3a2>
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3324      	adds	r3, #36	@ 0x24
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800203c:	461a      	mov	r2, r3
 800203e:	2101      	movs	r1, #1
 8002040:	f006 f8ae 	bl	80081a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4619      	mov	r1, r3
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f008 fbed 	bl	800a82a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002066:	461a      	mov	r2, r3
 8002068:	2308      	movs	r3, #8
 800206a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002082:	461a      	mov	r2, r3
 8002084:	2310      	movs	r3, #16
 8002086:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800209e:	461a      	mov	r2, r3
 80020a0:	2340      	movs	r3, #64	@ 0x40
 80020a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d023      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80020ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020b0:	6a38      	ldr	r0, [r7, #32]
 80020b2:	f005 f891 	bl	80071d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80020b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3310      	adds	r3, #16
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	3304      	adds	r3, #4
 80020c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	78db      	ldrb	r3, [r3, #3]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2200      	movs	r2, #0
 80020d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	4619      	mov	r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f008 fc3a 	bl	800a958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020f0:	461a      	mov	r2, r3
 80020f2:	2302      	movs	r3, #2
 80020f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fce8 	bl	8002ad8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	3301      	adds	r3, #1
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800210e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	f47f af2e 	bne.w	8001f78 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f005 ff77 	bl	8008014 <USB_ReadInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800212c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002130:	d122      	bne.n	8002178 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800214c:	2b01      	cmp	r3, #1
 800214e:	d108      	bne.n	8002162 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002158:	2100      	movs	r1, #0
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fef2 	bl	8002f44 <HAL_PCDEx_LPM_Callback>
 8002160:	e002      	b.n	8002168 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f008 fbd8 	bl	800a918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f005 ff49 	bl	8008014 <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800218c:	d112      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f008 fb94 	bl	800a8cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80021b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 ff2b 	bl	8008014 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021c8:	d121      	bne.n	800220e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80021d8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d111      	bne.n	8002208 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	f003 020f 	and.w	r2, r3, #15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80021fe:	2101      	movs	r1, #1
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fe9f 	bl	8002f44 <HAL_PCDEx_LPM_Callback>
 8002206:	e002      	b.n	800220e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f008 fb5f 	bl	800a8cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f005 fefe 	bl	8008014 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002222:	f040 80b7 	bne.w	8002394 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2110      	movs	r1, #16
 8002240:	4618      	mov	r0, r3
 8002242:	f004 ffc9 	bl	80071d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800224a:	e046      	b.n	80022da <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800224c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002258:	461a      	mov	r2, r3
 800225a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800225e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002270:	0151      	lsls	r1, r2, #5
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	440a      	add	r2, r1
 8002276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800227a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800227e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800228c:	461a      	mov	r2, r3
 800228e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002292:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022a4:	0151      	lsls	r1, r2, #5
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	440a      	add	r2, r1
 80022aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80022ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80022b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022c4:	0151      	lsls	r1, r2, #5
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	440a      	add	r2, r1
 80022ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80022ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80022d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d6:	3301      	adds	r3, #1
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	791b      	ldrb	r3, [r3, #4]
 80022de:	461a      	mov	r2, r3
 80022e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d3b2      	bcc.n	800224c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80022f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7bdb      	ldrb	r3, [r3, #15]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002312:	f043 030b 	orr.w	r3, r3, #11
 8002316:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002328:	f043 030b 	orr.w	r3, r3, #11
 800232c:	6453      	str	r3, [r2, #68]	@ 0x44
 800232e:	e015      	b.n	800235c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800233e:	4619      	mov	r1, r3
 8002340:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002344:	4313      	orrs	r3, r2
 8002346:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002356:	f043 030b 	orr.w	r3, r3, #11
 800235a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800236a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800236e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800237e:	461a      	mov	r2, r3
 8002380:	f005 ff0e 	bl	80081a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f005 fe3b 	bl	8008014 <USB_ReadInterrupts>
 800239e:	4603      	mov	r3, r0
 80023a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023a8:	d123      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 fed2 	bl	8008158 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 ff86 	bl	80072ca <USB_GetDevSpeed>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681c      	ldr	r4, [r3, #0]
 80023ca:	f001 fdbb 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 80023ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023d4:	461a      	mov	r2, r3
 80023d6:	4620      	mov	r0, r4
 80023d8:	f004 fc90 	bl	8006cfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f008 fa4c 	bl	800a87a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80023f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f005 fe0c 	bl	8008014 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b08      	cmp	r3, #8
 8002404:	d10a      	bne.n	800241c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f008 fa29 	bl	800a85e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f002 0208 	and.w	r2, r2, #8
 800241a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f005 fdf7 	bl	8008014 <USB_ReadInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242c:	2b80      	cmp	r3, #128	@ 0x80
 800242e:	d123      	bne.n	8002478 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800243c:	2301      	movs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002440:	e014      	b.n	800246c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d105      	bne.n	8002466 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fb08 	bl	8002a76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	3301      	adds	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	791b      	ldrb	r3, [r3, #4]
 8002470:	461a      	mov	r2, r3
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	4293      	cmp	r3, r2
 8002476:	d3e4      	bcc.n	8002442 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f005 fdc9 	bl	8008014 <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800248c:	d13c      	bne.n	8002508 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800248e:	2301      	movs	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
 8002492:	e02b      	b.n	80024ec <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3318      	adds	r3, #24
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d115      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da12      	bge.n	80024e6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3317      	adds	r3, #23
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fac8 	bl	8002a76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	3301      	adds	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	461a      	mov	r2, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d3cd      	bcc.n	8002494 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f005 fd81 	bl	8008014 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800251c:	d156      	bne.n	80025cc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800251e:	2301      	movs	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	@ 0x24
 8002522:	e045      	b.n	80025b0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d12e      	bne.n	80025aa <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800254c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	da2b      	bge.n	80025aa <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800255e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002562:	429a      	cmp	r2, r3
 8002564:	d121      	bne.n	80025aa <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025a6:	6053      	str	r3, [r2, #4]
            break;
 80025a8:	e008      	b.n	80025bc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	3301      	adds	r3, #1
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	791b      	ldrb	r3, [r3, #4]
 80025b4:	461a      	mov	r2, r3
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d3b3      	bcc.n	8002524 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80025ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f005 fd1f 	bl	8008014 <USB_ReadInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e0:	d10a      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f008 f9ca 	bl	800a97c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80025f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f005 fd09 	bl	8008014 <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b04      	cmp	r3, #4
 800260a:	d115      	bne.n	8002638 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f008 f9ba 	bl	800a998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	430a      	orrs	r2, r1
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	e000      	b.n	8002638 <HAL_PCD_IRQHandler+0x996>
      return;
 8002636:	bf00      	nop
    }
  }
}
 8002638:	3734      	adds	r7, #52	@ 0x34
 800263a:	46bd      	mov	sp, r7
 800263c:	bd90      	pop	{r4, r7, pc}

0800263e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_PCD_SetAddress+0x1a>
 8002654:	2302      	movs	r3, #2
 8002656:	e012      	b.n	800267e <HAL_PCD_SetAddress+0x40>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f005 fc68 	bl	8007f44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	4608      	mov	r0, r1
 8002690:	4611      	mov	r1, r2
 8002692:	461a      	mov	r2, r3
 8002694:	4603      	mov	r3, r0
 8002696:	70fb      	strb	r3, [r7, #3]
 8002698:	460b      	mov	r3, r1
 800269a:	803b      	strh	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da0f      	bge.n	80026cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3310      	adds	r3, #16
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	705a      	strb	r2, [r3, #1]
 80026ca:	e00f      	b.n	80026ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026f8:	883a      	ldrh	r2, [r7, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	78ba      	ldrb	r2, [r7, #2]
 8002702:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d004      	beq.n	8002716 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002716:	78bb      	ldrb	r3, [r7, #2]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d102      	bne.n	8002722 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_PCD_EP_Open+0xaa>
 800272c:	2302      	movs	r3, #2
 800272e:	e00e      	b.n	800274e <HAL_PCD_EP_Open+0xc8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fde8 	bl	8007314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800274c:	7afb      	ldrb	r3, [r7, #11]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002766:	2b00      	cmp	r3, #0
 8002768:	da0f      	bge.n	800278a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 020f 	and.w	r2, r3, #15
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	3310      	adds	r3, #16
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	705a      	strb	r2, [r3, #1]
 8002788:	e00f      	b.n	80027aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_PCD_EP_Close+0x6e>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e00e      	b.n	80027e2 <HAL_PCD_EP_Close+0x8c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fe26 	bl	8007424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	460b      	mov	r3, r1
 80027f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2200      	movs	r2, #0
 8002824:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	b2da      	uxtb	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	799b      	ldrb	r3, [r3, #6]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	799b      	ldrb	r3, [r3, #6]
 800284e:	461a      	mov	r2, r3
 8002850:	6979      	ldr	r1, [r7, #20]
 8002852:	f004 fec3 	bl	80075dc <USB_EPStartXfer>

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3310      	adds	r3, #16
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2201      	movs	r2, #1
 80028ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	799b      	ldrb	r3, [r3, #6]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d102      	bne.n	80028ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	799b      	ldrb	r3, [r3, #6]
 80028f2:	461a      	mov	r2, r3
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	f004 fe71 	bl	80075dc <USB_EPStartXfer>

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	7912      	ldrb	r2, [r2, #4]
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e04f      	b.n	80029c2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002926:	2b00      	cmp	r3, #0
 8002928:	da0f      	bge.n	800294a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	3310      	adds	r3, #16
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	705a      	strb	r2, [r3, #1]
 8002948:	e00d      	b.n	8002966 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_PCD_EP_SetStall+0x82>
 8002982:	2302      	movs	r3, #2
 8002984:	e01d      	b.n	80029c2 <HAL_PCD_EP_SetStall+0xbe>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	f005 fa01 	bl	8007d9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7999      	ldrb	r1, [r3, #6]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029b2:	461a      	mov	r2, r3
 80029b4:	f005 fbf4 	bl	80081a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	7912      	ldrb	r2, [r2, #4]
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e042      	b.n	8002a6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da0f      	bge.n	8002a10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	f003 020f 	and.w	r2, r3, #15
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	3310      	adds	r3, #16
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	705a      	strb	r2, [r3, #1]
 8002a0e:	e00f      	b.n	8002a30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 020f 	and.w	r2, r3, #15
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	3304      	adds	r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_PCD_EP_ClrStall+0x86>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e00e      	b.n	8002a6e <HAL_PCD_EP_ClrStall+0xa4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f005 fa0a 	bl	8007e78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da0c      	bge.n	8002aa4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	3310      	adds	r3, #16
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e00c      	b.n	8002abe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	f003 020f 	and.w	r2, r3, #15
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f005 f829 	bl	8007b1c <USB_EPStopXfer>
 8002aca:	4603      	mov	r3, r0
 8002acc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ace:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	@ 0x28
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	3310      	adds	r3, #16
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	3304      	adds	r3, #4
 8002afe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d901      	bls.n	8002b10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e06b      	b.n	8002be8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d902      	bls.n	8002b2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3303      	adds	r3, #3
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b34:	e02a      	b.n	8002b8c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d902      	bls.n	8002b52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3303      	adds	r3, #3
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68d9      	ldr	r1, [r3, #12]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f005 f87e 	bl	8007c70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	441a      	add	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d809      	bhi.n	8002bb6 <PCD_WriteEmptyTxFifo+0xde>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d203      	bcs.n	8002bb6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1bf      	bne.n	8002b36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d811      	bhi.n	8002be6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	2201      	movs	r2, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	6939      	ldr	r1, [r7, #16]
 8002bde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002be2:	4013      	ands	r3, r2
 8002be4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	333c      	adds	r3, #60	@ 0x3c
 8002c08:	3304      	adds	r3, #4
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	799b      	ldrb	r3, [r3, #6]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d17b      	bne.n	8002d1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	4a61      	ldr	r2, [pc, #388]	@ (8002db8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	f240 80b9 	bls.w	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80b3 	beq.w	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c52:	461a      	mov	r2, r3
 8002c54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c58:	6093      	str	r3, [r2, #8]
 8002c5a:	e0a7      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	2320      	movs	r3, #32
 8002c76:	6093      	str	r3, [r2, #8]
 8002c78:	e098      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 8093 	bne.w	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	4a4b      	ldr	r2, [pc, #300]	@ (8002db8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d90f      	bls.n	8002cae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002caa:	6093      	str	r3, [r2, #8]
 8002cac:	e07e      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	0159      	lsls	r1, r3, #5
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	440b      	add	r3, r1
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d114      	bne.n	8002d10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f005 fa50 	bl	80081a0 <USB_EP0_OutStart>
 8002d00:	e006      	b.n	8002d10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	441a      	add	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f007 fd6c 	bl	800a7f4 <HAL_PCD_DataOutStageCallback>
 8002d1c:	e046      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	4a26      	ldr	r2, [pc, #152]	@ (8002dbc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d124      	bne.n	8002d70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d42:	6093      	str	r3, [r2, #8]
 8002d44:	e032      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2320      	movs	r3, #32
 8002d60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f007 fd43 	bl	800a7f4 <HAL_PCD_DataOutStageCallback>
 8002d6e:	e01d      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d114      	bne.n	8002da0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d108      	bne.n	8002da0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f005 fa00 	bl	80081a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f007 fd24 	bl	800a7f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	4f54300a 	.word	0x4f54300a
 8002dbc:	4f54310a 	.word	0x4f54310a

08002dc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	333c      	adds	r3, #60	@ 0x3c
 8002dd8:	3304      	adds	r3, #4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d90e      	bls.n	8002e14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f007 fcdb 	bl	800a7d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d90c      	bls.n	8002e3c <PCD_EP_OutSetupPacket_int+0x7c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	799b      	ldrb	r3, [r3, #6]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e34:	461a      	mov	r2, r3
 8002e36:	2101      	movs	r1, #1
 8002e38:	f005 f9b2 	bl	80081a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	4f54300a 	.word	0x4f54300a

08002e4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70fb      	strb	r3, [r7, #3]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d107      	bne.n	8002e7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e6a:	883b      	ldrh	r3, [r7, #0]
 8002e6c:	0419      	lsls	r1, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e78:	e028      	b.n	8002ecc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4413      	add	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e00d      	b.n	8002eaa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	3340      	adds	r3, #64	@ 0x40
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d3ec      	bcc.n	8002e8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002eb4:	883b      	ldrh	r3, [r7, #0]
 8002eb6:	0418      	lsls	r0, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	4302      	orrs	r2, r0
 8002ec4:	3340      	adds	r3, #64	@ 0x40
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f2a:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	10000003 	.word	0x10000003

08002f44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f64:	4b29      	ldr	r3, [pc, #164]	@ (800300c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	2b06      	cmp	r3, #6
 8002f6e:	d00a      	beq.n	8002f86 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f70:	4b26      	ldr	r3, [pc, #152]	@ (800300c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d001      	beq.n	8002f82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e040      	b.n	8003004 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e03e      	b.n	8003004 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f86:	4b21      	ldr	r3, [pc, #132]	@ (800300c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002f8e:	491f      	ldr	r1, [pc, #124]	@ (800300c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f96:	f7fe f97b 	bl	8001290 <HAL_GetTick>
 8002f9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f9c:	e009      	b.n	8002fb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f9e:	f7fe f977 	bl	8001290 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fac:	d901      	bls.n	8002fb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e028      	b.n	8003004 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fb2:	4b16      	ldr	r3, [pc, #88]	@ (800300c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b1e      	cmp	r3, #30
 8002fc4:	d008      	beq.n	8002fd8 <HAL_PWREx_ConfigSupply+0x7c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fca:	d005      	beq.n	8002fd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b1d      	cmp	r3, #29
 8002fd0:	d002      	beq.n	8002fd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b2d      	cmp	r3, #45	@ 0x2d
 8002fd6:	d114      	bne.n	8003002 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002fd8:	f7fe f95a 	bl	8001290 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002fde:	e009      	b.n	8002ff4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fe0:	f7fe f956 	bl	8001290 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fee:	d901      	bls.n	8002ff4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e007      	b.n	8003004 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ff4:	4b05      	ldr	r3, [pc, #20]	@ (800300c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003000:	d1ee      	bne.n	8002fe0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	58024800 	.word	0x58024800

08003010 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a04      	ldr	r2, [pc, #16]	@ (800302c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800301a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	58024800 	.word	0x58024800

08003030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	@ 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	f000 bc48 	b.w	80038d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8088 	beq.w	8003162 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	4b99      	ldr	r3, [pc, #612]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800305a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800305c:	4b96      	ldr	r3, [pc, #600]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	2b10      	cmp	r3, #16
 8003066:	d007      	beq.n	8003078 <HAL_RCC_OscConfig+0x48>
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306a:	2b18      	cmp	r3, #24
 800306c:	d111      	bne.n	8003092 <HAL_RCC_OscConfig+0x62>
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	4b8f      	ldr	r3, [pc, #572]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d06d      	beq.n	8003160 <HAL_RCC_OscConfig+0x130>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d169      	bne.n	8003160 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f000 bc21 	b.w	80038d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x7a>
 800309c:	4b86      	ldr	r3, [pc, #536]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a85      	ldr	r2, [pc, #532]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x9c>
 80030b2:	4b81      	ldr	r3, [pc, #516]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a80      	ldr	r2, [pc, #512]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b7e      	ldr	r3, [pc, #504]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7d      	ldr	r2, [pc, #500]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 80030d6:	4b78      	ldr	r3, [pc, #480]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a77      	ldr	r2, [pc, #476]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b75      	ldr	r3, [pc, #468]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a74      	ldr	r2, [pc, #464]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030f0:	4b71      	ldr	r3, [pc, #452]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a70      	ldr	r2, [pc, #448]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b6e      	ldr	r3, [pc, #440]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6d      	ldr	r2, [pc, #436]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe f8be 	bl	8001290 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe f8ba 	bl	8001290 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e3d4      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800312a:	4b63      	ldr	r3, [pc, #396]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xe8>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe f8aa 	bl	8001290 <HAL_GetTick>
 800313c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe f8a6 	bl	8001290 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	@ 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e3c0      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003152:	4b59      	ldr	r3, [pc, #356]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x110>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80ca 	beq.w	8003304 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003170:	4b51      	ldr	r3, [pc, #324]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003178:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800317a:	4b4f      	ldr	r3, [pc, #316]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_RCC_OscConfig+0x166>
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2b18      	cmp	r3, #24
 800318a:	d156      	bne.n	800323a <HAL_RCC_OscConfig+0x20a>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d151      	bne.n	800323a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003196:	4b48      	ldr	r3, [pc, #288]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x17e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e392      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031ae:	4b42      	ldr	r3, [pc, #264]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0219 	bic.w	r2, r3, #25
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	493f      	ldr	r1, [pc, #252]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe f866 	bl	8001290 <HAL_GetTick>
 80031c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe f862 	bl	8001290 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e37c      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031da:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	f7fe f883 	bl	80012f0 <HAL_GetREVID>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d817      	bhi.n	8003224 <HAL_RCC_OscConfig+0x1f4>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d108      	bne.n	800320e <HAL_RCC_OscConfig+0x1de>
 80031fc:	4b2e      	ldr	r3, [pc, #184]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003204:	4a2c      	ldr	r2, [pc, #176]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800320a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320c:	e07a      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	031b      	lsls	r3, r3, #12
 800321c:	4926      	ldr	r1, [pc, #152]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003222:	e06f      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	4921      	ldr	r1, [pc, #132]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003238:	e064      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d047      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003242:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0219 	bic.w	r2, r3, #25
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	491a      	ldr	r1, [pc, #104]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe f81c 	bl	8001290 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325c:	f7fe f818 	bl	8001290 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e332      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800326e:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	f7fe f839 	bl	80012f0 <HAL_GetREVID>
 800327e:	4603      	mov	r3, r0
 8003280:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003284:	4293      	cmp	r3, r2
 8003286:	d819      	bhi.n	80032bc <HAL_RCC_OscConfig+0x28c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d108      	bne.n	80032a2 <HAL_RCC_OscConfig+0x272>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003298:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 800329a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329e:	6053      	str	r3, [r2, #4]
 80032a0:	e030      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
 80032a2:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	031b      	lsls	r3, r3, #12
 80032b0:	4901      	ldr	r1, [pc, #4]	@ (80032b8 <HAL_RCC_OscConfig+0x288>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
 80032b6:	e025      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
 80032b8:	58024400 	.word	0x58024400
 80032bc:	4b9a      	ldr	r3, [pc, #616]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	4997      	ldr	r1, [pc, #604]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e018      	b.n	8003304 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b95      	ldr	r3, [pc, #596]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a94      	ldr	r2, [pc, #592]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fd ffd7 	bl	8001290 <HAL_GetTick>
 80032e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fd ffd3 	bl	8001290 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e2ed      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032f8:	4b8b      	ldr	r3, [pc, #556]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a9 	beq.w	8003464 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4b85      	ldr	r3, [pc, #532]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800331a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800331c:	4b82      	ldr	r3, [pc, #520]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d007      	beq.n	8003338 <HAL_RCC_OscConfig+0x308>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b18      	cmp	r3, #24
 800332c:	d13a      	bne.n	80033a4 <HAL_RCC_OscConfig+0x374>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d135      	bne.n	80033a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003338:	4b7b      	ldr	r3, [pc, #492]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x320>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b80      	cmp	r3, #128	@ 0x80
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e2c1      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003350:	f7fd ffce 	bl	80012f0 <HAL_GetREVID>
 8003354:	4603      	mov	r3, r0
 8003356:	f241 0203 	movw	r2, #4099	@ 0x1003
 800335a:	4293      	cmp	r3, r2
 800335c:	d817      	bhi.n	800338e <HAL_RCC_OscConfig+0x35e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2b20      	cmp	r3, #32
 8003364:	d108      	bne.n	8003378 <HAL_RCC_OscConfig+0x348>
 8003366:	4b70      	ldr	r3, [pc, #448]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800336e:	4a6e      	ldr	r2, [pc, #440]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003370:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003374:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003376:	e075      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003378:	4b6b      	ldr	r3, [pc, #428]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	069b      	lsls	r3, r3, #26
 8003386:	4968      	ldr	r1, [pc, #416]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800338c:	e06a      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800338e:	4b66      	ldr	r3, [pc, #408]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	061b      	lsls	r3, r3, #24
 800339c:	4962      	ldr	r1, [pc, #392]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033a2:	e05f      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d042      	beq.n	8003432 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd ff6a 	bl	8001290 <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033c0:	f7fd ff66 	bl	8001290 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e280      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033d2:	4b55      	ldr	r3, [pc, #340]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033de:	f7fd ff87 	bl	80012f0 <HAL_GetREVID>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d817      	bhi.n	800341c <HAL_RCC_OscConfig+0x3ec>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d108      	bne.n	8003406 <HAL_RCC_OscConfig+0x3d6>
 80033f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80033fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80033fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003402:	6053      	str	r3, [r2, #4]
 8003404:	e02e      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
 8003406:	4b48      	ldr	r3, [pc, #288]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	069b      	lsls	r3, r3, #26
 8003414:	4944      	ldr	r1, [pc, #272]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
 800341a:	e023      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
 800341c:	4b42      	ldr	r3, [pc, #264]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	493f      	ldr	r1, [pc, #252]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800342c:	4313      	orrs	r3, r2
 800342e:	60cb      	str	r3, [r1, #12]
 8003430:	e018      	b.n	8003464 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003432:	4b3d      	ldr	r3, [pc, #244]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3c      	ldr	r2, [pc, #240]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 8003438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fd ff27 	bl	8001290 <HAL_GetTick>
 8003442:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003446:	f7fd ff23 	bl	8001290 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e23d      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003458:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d036      	beq.n	80034de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d019      	beq.n	80034ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003478:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347c:	4a2a      	ldr	r2, [pc, #168]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fd ff04 	bl	8001290 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fd ff00 	bl	8001290 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e21a      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800349e:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x45c>
 80034aa:	e018      	b.n	80034de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fd feea 	bl	8001290 <HAL_GetTick>
 80034bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fd fee6 	bl	8001290 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e200      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034d2:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d039      	beq.n	800355e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01c      	beq.n	800352c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 80034f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034fe:	f7fd fec7 	bl	8001290 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003506:	f7fd fec3 	bl	8001290 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1dd      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <HAL_RCC_OscConfig+0x4f8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x4d6>
 8003524:	e01b      	b.n	800355e <HAL_RCC_OscConfig+0x52e>
 8003526:	bf00      	nop
 8003528:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800352c:	4b9b      	ldr	r3, [pc, #620]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a9a      	ldr	r2, [pc, #616]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003536:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003538:	f7fd feaa 	bl	8001290 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003540:	f7fd fea6 	bl	8001290 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e1c0      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003552:	4b92      	ldr	r3, [pc, #584]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8081 	beq.w	800366e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800356c:	4b8c      	ldr	r3, [pc, #560]	@ (80037a0 <HAL_RCC_OscConfig+0x770>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a8b      	ldr	r2, [pc, #556]	@ (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003578:	f7fd fe8a 	bl	8001290 <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003580:	f7fd fe86 	bl	8001290 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	@ 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1a0      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003592:	4b83      	ldr	r3, [pc, #524]	@ (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x584>
 80035a6:	4b7d      	ldr	r3, [pc, #500]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a7c      	ldr	r2, [pc, #496]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b2:	e02d      	b.n	8003610 <HAL_RCC_OscConfig+0x5e0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5a6>
 80035bc:	4b77      	ldr	r3, [pc, #476]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	4a76      	ldr	r2, [pc, #472]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c8:	4b74      	ldr	r3, [pc, #464]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035cc:	4a73      	ldr	r2, [pc, #460]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035ce:	f023 0304 	bic.w	r3, r3, #4
 80035d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d4:	e01c      	b.n	8003610 <HAL_RCC_OscConfig+0x5e0>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x5c8>
 80035de:	4b6f      	ldr	r3, [pc, #444]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	4a6e      	ldr	r2, [pc, #440]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ea:	4b6c      	ldr	r3, [pc, #432]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ee:	4a6b      	ldr	r2, [pc, #428]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0x5e0>
 80035f8:	4b68      	ldr	r3, [pc, #416]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fc:	4a67      	ldr	r2, [pc, #412]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	6713      	str	r3, [r2, #112]	@ 0x70
 8003604:	4b65      	ldr	r3, [pc, #404]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	4a64      	ldr	r2, [pc, #400]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800360a:	f023 0304 	bic.w	r3, r3, #4
 800360e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fd fe3a 	bl	8001290 <HAL_GetTick>
 800361c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fd fe36 	bl	8001290 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e14e      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003636:	4b59      	ldr	r3, [pc, #356]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ee      	beq.n	8003620 <HAL_RCC_OscConfig+0x5f0>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fd fe24 	bl	8001290 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fd fe20 	bl	8001290 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e138      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003662:	4b4e      	ldr	r3, [pc, #312]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ee      	bne.n	800364c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 812d 	beq.w	80038d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003678:	4b48      	ldr	r3, [pc, #288]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003680:	2b18      	cmp	r3, #24
 8003682:	f000 80bd 	beq.w	8003800 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	2b02      	cmp	r3, #2
 800368c:	f040 809e 	bne.w	80037cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b42      	ldr	r3, [pc, #264]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a41      	ldr	r2, [pc, #260]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd fdf8 	bl	8001290 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fd fdf4 	bl	8001290 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e10e      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036b6:	4b39      	ldr	r3, [pc, #228]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c2:	4b36      	ldr	r3, [pc, #216]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80036c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036c6:	4b37      	ldr	r3, [pc, #220]	@ (80037a4 <HAL_RCC_OscConfig+0x774>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	430a      	orrs	r2, r1
 80036d6:	4931      	ldr	r1, [pc, #196]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	628b      	str	r3, [r1, #40]	@ 0x28
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	3b01      	subs	r3, #1
 80036e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	3b01      	subs	r3, #1
 80036ec:	025b      	lsls	r3, r3, #9
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	3b01      	subs	r3, #1
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	3b01      	subs	r3, #1
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800370c:	4923      	ldr	r1, [pc, #140]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003712:	4b22      	ldr	r3, [pc, #136]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003716:	4a21      	ldr	r2, [pc, #132]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800371e:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003722:	4b21      	ldr	r3, [pc, #132]	@ (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800372a:	00d2      	lsls	r2, r2, #3
 800372c:	491b      	ldr	r1, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003732:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	f023 020c 	bic.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4917      	ldr	r1, [pc, #92]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003744:	4b15      	ldr	r3, [pc, #84]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	f023 0202 	bic.w	r2, r3, #2
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	4912      	ldr	r1, [pc, #72]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003756:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	4a10      	ldr	r2, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003762:	4b0e      	ldr	r3, [pc, #56]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800376e:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800377a:	4b08      	ldr	r3, [pc, #32]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	4a07      	ldr	r2, [pc, #28]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003786:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <HAL_RCC_OscConfig+0x76c>)
 800378c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fd fd7d 	bl	8001290 <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003798:	e011      	b.n	80037be <HAL_RCC_OscConfig+0x78e>
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
 80037a0:	58024800 	.word	0x58024800
 80037a4:	fffffc0c 	.word	0xfffffc0c
 80037a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fd fd70 	bl	8001290 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e08a      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037be:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x77c>
 80037ca:	e082      	b.n	80038d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b43      	ldr	r3, [pc, #268]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a42      	ldr	r2, [pc, #264]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80037d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd fd5a 	bl	8001290 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fd fd56 	bl	8001290 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e070      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037f2:	4b3a      	ldr	r3, [pc, #232]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x7b0>
 80037fe:	e068      	b.n	80038d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003806:	4b35      	ldr	r3, [pc, #212]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	2b01      	cmp	r3, #1
 8003812:	d031      	beq.n	8003878 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0203 	and.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d12a      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d122      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d11a      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	0a5b      	lsrs	r3, r3, #9
 8003846:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d111      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d108      	bne.n	8003878 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e02b      	b.n	80038d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800387c:	4b17      	ldr	r3, [pc, #92]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 800387e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003886:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	429a      	cmp	r2, r3
 8003890:	d01f      	beq.n	80038d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003892:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 8003894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003896:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800389e:	f7fd fcf7 	bl	8001290 <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80038a4:	bf00      	nop
 80038a6:	f7fd fcf3 	bl	8001290 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d0f9      	beq.n	80038a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038b2:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80038b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038b6:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <HAL_RCC_OscConfig+0x8b0>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038be:	00d2      	lsls	r2, r2, #3
 80038c0:	4906      	ldr	r1, [pc, #24]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038c6:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <HAL_RCC_OscConfig+0x8ac>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3730      	adds	r7, #48	@ 0x30
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	58024400 	.word	0x58024400
 80038e0:	ffff0007 	.word	0xffff0007

080038e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e19c      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b87      	ldr	r3, [pc, #540]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 020f 	bic.w	r2, r3, #15
 800390e:	4985      	ldr	r1, [pc, #532]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b83      	ldr	r3, [pc, #524]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e184      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	4b7b      	ldr	r3, [pc, #492]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003940:	429a      	cmp	r2, r3
 8003942:	d908      	bls.n	8003956 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003944:	4b78      	ldr	r3, [pc, #480]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	4975      	ldr	r1, [pc, #468]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003952:	4313      	orrs	r3, r2
 8003954:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d010      	beq.n	8003984 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	4b70      	ldr	r3, [pc, #448]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800396e:	429a      	cmp	r2, r3
 8003970:	d908      	bls.n	8003984 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003972:	4b6d      	ldr	r3, [pc, #436]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	496a      	ldr	r1, [pc, #424]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003980:	4313      	orrs	r3, r2
 8003982:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	4b64      	ldr	r3, [pc, #400]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800399c:	429a      	cmp	r2, r3
 800399e:	d908      	bls.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039a0:	4b61      	ldr	r3, [pc, #388]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	495e      	ldr	r1, [pc, #376]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	4b59      	ldr	r3, [pc, #356]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d908      	bls.n	80039e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ce:	4b56      	ldr	r3, [pc, #344]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4953      	ldr	r1, [pc, #332]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d010      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d908      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f023 020f 	bic.w	r2, r3, #15
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4947      	ldr	r1, [pc, #284]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d055      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a1a:	4b43      	ldr	r3, [pc, #268]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4940      	ldr	r1, [pc, #256]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a34:	4b3c      	ldr	r3, [pc, #240]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d121      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0f6      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a4c:	4b36      	ldr	r3, [pc, #216]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d115      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0ea      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a64:	4b30      	ldr	r3, [pc, #192]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0de      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a74:	4b2c      	ldr	r3, [pc, #176]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0d6      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a84:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f023 0207 	bic.w	r2, r3, #7
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4925      	ldr	r1, [pc, #148]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a96:	f7fd fbfb 	bl	8001290 <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9e:	f7fd fbf7 	bl	8001290 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e0be      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d1eb      	bne.n	8003a9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d208      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae2:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	490e      	ldr	r1, [pc, #56]	@ (8003b28 <HAL_RCC_ClockConfig+0x244>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d214      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 020f 	bic.w	r2, r3, #15
 8003b0a:	4906      	ldr	r1, [pc, #24]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b04      	ldr	r3, [pc, #16]	@ (8003b24 <HAL_RCC_ClockConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e086      	b.n	8003c32 <HAL_RCC_ClockConfig+0x34e>
 8003b24:	52002000 	.word	0x52002000
 8003b28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d208      	bcs.n	8003b5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b48:	4b3c      	ldr	r3, [pc, #240]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	4939      	ldr	r1, [pc, #228]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d010      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	4b34      	ldr	r3, [pc, #208]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d208      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b76:	4b31      	ldr	r3, [pc, #196]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	492e      	ldr	r1, [pc, #184]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	4b28      	ldr	r3, [pc, #160]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d208      	bcs.n	8003bb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ba4:	4b25      	ldr	r3, [pc, #148]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4922      	ldr	r1, [pc, #136]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d010      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d208      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4917      	ldr	r1, [pc, #92]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003be4:	f000 f834 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b14      	ldr	r3, [pc, #80]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	4912      	ldr	r1, [pc, #72]	@ (8003c40 <HAL_RCC_ClockConfig+0x35c>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c02:	4b0e      	ldr	r3, [pc, #56]	@ (8003c3c <HAL_RCC_ClockConfig+0x358>)
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c40 <HAL_RCC_ClockConfig+0x35c>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
 8003c18:	4a0a      	ldr	r2, [pc, #40]	@ (8003c44 <HAL_RCC_ClockConfig+0x360>)
 8003c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c48 <HAL_RCC_ClockConfig+0x364>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <HAL_RCC_ClockConfig+0x368>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fd fae8 	bl	80011fc <HAL_InitTick>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	58024400 	.word	0x58024400
 8003c40:	0800b73c 	.word	0x0800b73c
 8003c44:	24000004 	.word	0x24000004
 8003c48:	24000000 	.word	0x24000000
 8003c4c:	24000024 	.word	0x24000024

08003c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	@ 0x24
 8003c54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c56:	4bb3      	ldr	r3, [pc, #716]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c5e:	2b18      	cmp	r3, #24
 8003c60:	f200 8155 	bhi.w	8003f0e <HAL_RCC_GetSysClockFreq+0x2be>
 8003c64:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003cd1 	.word	0x08003cd1
 8003c70:	08003f0f 	.word	0x08003f0f
 8003c74:	08003f0f 	.word	0x08003f0f
 8003c78:	08003f0f 	.word	0x08003f0f
 8003c7c:	08003f0f 	.word	0x08003f0f
 8003c80:	08003f0f 	.word	0x08003f0f
 8003c84:	08003f0f 	.word	0x08003f0f
 8003c88:	08003f0f 	.word	0x08003f0f
 8003c8c:	08003cf7 	.word	0x08003cf7
 8003c90:	08003f0f 	.word	0x08003f0f
 8003c94:	08003f0f 	.word	0x08003f0f
 8003c98:	08003f0f 	.word	0x08003f0f
 8003c9c:	08003f0f 	.word	0x08003f0f
 8003ca0:	08003f0f 	.word	0x08003f0f
 8003ca4:	08003f0f 	.word	0x08003f0f
 8003ca8:	08003f0f 	.word	0x08003f0f
 8003cac:	08003cfd 	.word	0x08003cfd
 8003cb0:	08003f0f 	.word	0x08003f0f
 8003cb4:	08003f0f 	.word	0x08003f0f
 8003cb8:	08003f0f 	.word	0x08003f0f
 8003cbc:	08003f0f 	.word	0x08003f0f
 8003cc0:	08003f0f 	.word	0x08003f0f
 8003cc4:	08003f0f 	.word	0x08003f0f
 8003cc8:	08003f0f 	.word	0x08003f0f
 8003ccc:	08003d03 	.word	0x08003d03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cd0:	4b94      	ldr	r3, [pc, #592]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cdc:	4b91      	ldr	r3, [pc, #580]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	4a90      	ldr	r2, [pc, #576]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003cee:	e111      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cf2:	61bb      	str	r3, [r7, #24]
      break;
 8003cf4:	e10e      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003cf6:	4b8d      	ldr	r3, [pc, #564]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cf8:	61bb      	str	r3, [r7, #24]
      break;
 8003cfa:	e10b      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cfe:	61bb      	str	r3, [r7, #24]
      break;
 8003d00:	e108      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d02:	4b88      	ldr	r3, [pc, #544]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d0c:	4b85      	ldr	r3, [pc, #532]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d18:	4b82      	ldr	r3, [pc, #520]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d22:	4b80      	ldr	r3, [pc, #512]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d26:	08db      	lsrs	r3, r3, #3
 8003d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80e1 	beq.w	8003f08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	f000 8083 	beq.w	8003e54 <HAL_RCC_GetSysClockFreq+0x204>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	f200 80a1 	bhi.w	8003e98 <HAL_RCC_GetSysClockFreq+0x248>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x114>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d056      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d62:	e099      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d64:	4b6f      	ldr	r3, [pc, #444]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02d      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d70:	4b6c      	ldr	r3, [pc, #432]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	08db      	lsrs	r3, r3, #3
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	4a6b      	ldr	r2, [pc, #428]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9a:	4b62      	ldr	r3, [pc, #392]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003dca:	e087      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003f38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dde:	4b51      	ldr	r3, [pc, #324]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e0e:	e065      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e52:	e043      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003f40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e66:	4b2f      	ldr	r3, [pc, #188]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e96:	e021      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ebe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003eda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	0a5b      	lsrs	r3, r3, #9
 8003ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f00:	ee17 3a90 	vmov	r3, s15
 8003f04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003f06:	e005      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
      break;
 8003f0c:	e002      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003f0e:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f10:	61bb      	str	r3, [r7, #24]
      break;
 8003f12:	bf00      	nop
  }

  return sysclockfreq;
 8003f14:	69bb      	ldr	r3, [r7, #24]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3724      	adds	r7, #36	@ 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	58024400 	.word	0x58024400
 8003f28:	03d09000 	.word	0x03d09000
 8003f2c:	003d0900 	.word	0x003d0900
 8003f30:	017d7840 	.word	0x017d7840
 8003f34:	46000000 	.word	0x46000000
 8003f38:	4c742400 	.word	0x4c742400
 8003f3c:	4a742400 	.word	0x4a742400
 8003f40:	4bbebc20 	.word	0x4bbebc20

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f4a:	f7ff fe81 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	490f      	ldr	r1, [pc, #60]	@ (8003f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f5c:	5ccb      	ldrb	r3, [r1, r3]
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	fa22 f303 	lsr.w	r3, r2, r3
 8003f66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	4a09      	ldr	r2, [pc, #36]	@ (8003f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7e:	4a07      	ldr	r2, [pc, #28]	@ (8003f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003f80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f82:	4a07      	ldr	r2, [pc, #28]	@ (8003fa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f88:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	58024400 	.word	0x58024400
 8003f98:	0800b73c 	.word	0x0800b73c
 8003f9c:	24000004 	.word	0x24000004
 8003fa0:	24000000 	.word	0x24000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003fa8:	f7ff ffcc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4904      	ldr	r1, [pc, #16]	@ (8003fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	0800b73c 	.word	0x0800b73c

08003fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003fd4:	f7ff ffb6 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4904      	ldr	r1, [pc, #16]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	0800b73c 	.word	0x0800b73c

08003ffc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004000:	b0ca      	sub	sp, #296	@ 0x128
 8004002:	af00      	add	r7, sp, #0
 8004004:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004008:	2300      	movs	r3, #0
 800400a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004020:	2500      	movs	r5, #0
 8004022:	ea54 0305 	orrs.w	r3, r4, r5
 8004026:	d049      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800402e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004032:	d02f      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004034:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004038:	d828      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800403a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800403e:	d01a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004040:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004044:	d822      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800404e:	d007      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004050:	e01c      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004052:	4bb8      	ldr	r3, [pc, #736]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	4ab7      	ldr	r2, [pc, #732]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800405e:	e01a      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004064:	3308      	adds	r3, #8
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f001 fc8f 	bl	800598c <RCCEx_PLL2_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004074:	e00f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	3328      	adds	r3, #40	@ 0x28
 800407c:	2102      	movs	r1, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f001 fd36 	bl	8005af0 <RCCEx_PLL3_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800408a:	e004      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800409e:	4ba5      	ldr	r3, [pc, #660]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ac:	4aa1      	ldr	r2, [pc, #644]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040ae:	430b      	orrs	r3, r1
 80040b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80040b2:	e003      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80040c8:	f04f 0900 	mov.w	r9, #0
 80040cc:	ea58 0309 	orrs.w	r3, r8, r9
 80040d0:	d047      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d82a      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80040dc:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	080040f9 	.word	0x080040f9
 80040e8:	08004107 	.word	0x08004107
 80040ec:	0800411d 	.word	0x0800411d
 80040f0:	0800413b 	.word	0x0800413b
 80040f4:	0800413b 	.word	0x0800413b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f8:	4b8e      	ldr	r3, [pc, #568]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	4a8d      	ldr	r2, [pc, #564]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004104:	e01a      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	3308      	adds	r3, #8
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fc3c 	bl	800598c <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800411a:	e00f      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	3328      	adds	r3, #40	@ 0x28
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fce3 	bl	8005af0 <RCCEx_PLL3_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004130:	e004      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004138:	e000      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800413a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004144:	4b7b      	ldr	r3, [pc, #492]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004148:	f023 0107 	bic.w	r1, r3, #7
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	4a78      	ldr	r2, [pc, #480]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004154:	430b      	orrs	r3, r1
 8004156:	6513      	str	r3, [r2, #80]	@ 0x50
 8004158:	e003      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800416e:	f04f 0b00 	mov.w	fp, #0
 8004172:	ea5a 030b 	orrs.w	r3, sl, fp
 8004176:	d04c      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004182:	d030      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004188:	d829      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800418a:	2bc0      	cmp	r3, #192	@ 0xc0
 800418c:	d02d      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800418e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004190:	d825      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004192:	2b80      	cmp	r3, #128	@ 0x80
 8004194:	d018      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d821      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d007      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80041a2:	e01c      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a4:	4b63      	ldr	r3, [pc, #396]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	4a62      	ldr	r2, [pc, #392]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041b0:	e01c      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	3308      	adds	r3, #8
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 fbe6 	bl	800598c <RCCEx_PLL2_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041c6:	e011      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	3328      	adds	r3, #40	@ 0x28
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 fc8d 	bl	8005af0 <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	4a4c      	ldr	r2, [pc, #304]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6513      	str	r3, [r2, #80]	@ 0x50
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800421e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004222:	2300      	movs	r3, #0
 8004224:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004228:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d053      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800423a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800423e:	d035      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004240:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004244:	d82e      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004246:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800424a:	d031      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800424c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004250:	d828      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004256:	d01a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800425c:	d822      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004266:	d007      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004268:	e01c      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426a:	4b32      	ldr	r3, [pc, #200]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	4a31      	ldr	r2, [pc, #196]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004276:	e01c      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427c:	3308      	adds	r3, #8
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fb83 	bl	800598c <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800428c:	e011      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	3328      	adds	r3, #40	@ 0x28
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f001 fc2a 	bl	8005af0 <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042a2:	e006      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80042ac:	bf00      	nop
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80042b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80042e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80042f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d056      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004302:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004306:	d038      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004308:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800430c:	d831      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800430e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004312:	d034      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004314:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004318:	d82b      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800431a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800431e:	d01d      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004320:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004324:	d825      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800432a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800432e:	d00a      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004330:	e01f      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004338:	4ba2      	ldr	r3, [pc, #648]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	4aa1      	ldr	r2, [pc, #644]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004344:	e01c      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	3308      	adds	r3, #8
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f001 fb1c 	bl	800598c <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800435a:	e011      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	3328      	adds	r3, #40	@ 0x28
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f001 fbc3 	bl	8005af0 <RCCEx_PLL3_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004370:	e006      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004378:	e002      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800437a:	bf00      	nop
 800437c:	e000      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800437e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004388:	4b8e      	ldr	r3, [pc, #568]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004398:	4a8a      	ldr	r2, [pc, #552]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800439a:	430b      	orrs	r3, r1
 800439c:	6593      	str	r3, [r2, #88]	@ 0x58
 800439e:	e003      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80043b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80043b8:	2300      	movs	r3, #0
 80043ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80043be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d03a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	2b30      	cmp	r3, #48	@ 0x30
 80043d0:	d01f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80043d2:	2b30      	cmp	r3, #48	@ 0x30
 80043d4:	d819      	bhi.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d00c      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d815      	bhi.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d019      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d111      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e6:	4b77      	ldr	r3, [pc, #476]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	4a76      	ldr	r2, [pc, #472]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043f2:	e011      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	3308      	adds	r3, #8
 80043fa:	2102      	movs	r1, #2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 fac5 	bl	800598c <RCCEx_PLL2_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004408:	e006      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004410:	e002      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004420:	4b68      	ldr	r3, [pc, #416]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004424:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	4a65      	ldr	r2, [pc, #404]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004430:	430b      	orrs	r3, r1
 8004432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800443a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800444a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004454:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d051      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004468:	d035      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800446a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800446e:	d82e      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004470:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004474:	d031      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004476:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800447a:	d828      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004480:	d01a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004486:	d822      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004490:	d007      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004492:	e01c      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004494:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	4a4a      	ldr	r2, [pc, #296]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800449a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800449e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044a0:	e01c      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	3308      	adds	r3, #8
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fa6e 	bl	800598c <RCCEx_PLL2_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044b6:	e011      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044bc:	3328      	adds	r3, #40	@ 0x28
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fb15 	bl	8005af0 <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044cc:	e006      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044e4:	4b37      	ldr	r3, [pc, #220]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f2:	4a34      	ldr	r2, [pc, #208]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80044f8:	e003      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800450e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004518:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800451c:	460b      	mov	r3, r1
 800451e:	4313      	orrs	r3, r2
 8004520:	d056      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800452c:	d033      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800452e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004532:	d82c      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004534:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004538:	d02f      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800453a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800453e:	d826      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004540:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004544:	d02b      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004546:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800454a:	d820      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800454c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004550:	d012      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004556:	d81a      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d022      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004560:	d115      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	3308      	adds	r3, #8
 8004568:	2101      	movs	r1, #1
 800456a:	4618      	mov	r0, r3
 800456c:	f001 fa0e 	bl	800598c <RCCEx_PLL2_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004576:	e015      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	3328      	adds	r3, #40	@ 0x28
 800457e:	2101      	movs	r1, #1
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fab5 	bl	8005af0 <RCCEx_PLL3_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800458c:	e00a      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004594:	e006      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004596:	bf00      	nop
 8004598:	e004      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800459a:	bf00      	nop
 800459c:	e002      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800459e:	bf00      	nop
 80045a0:	e000      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80045a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ba:	4a02      	ldr	r2, [pc, #8]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045bc:	430b      	orrs	r3, r1
 80045be:	6513      	str	r3, [r2, #80]	@ 0x50
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80045dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	d055      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045fc:	d033      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80045fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004602:	d82c      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004608:	d02f      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800460a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460e:	d826      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004614:	d02b      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004616:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800461a:	d820      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800461c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004620:	d012      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004626:	d81a      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d022      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800462c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004630:	d115      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	3308      	adds	r3, #8
 8004638:	2101      	movs	r1, #1
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f9a6 	bl	800598c <RCCEx_PLL2_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004646:	e015      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	3328      	adds	r3, #40	@ 0x28
 800464e:	2101      	movs	r1, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f001 fa4d 	bl	8005af0 <RCCEx_PLL3_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800465c:	e00a      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004664:	e006      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004666:	bf00      	nop
 8004668:	e004      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800467c:	4ba3      	ldr	r3, [pc, #652]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800467e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004680:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800468c:	4a9f      	ldr	r2, [pc, #636]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800468e:	430b      	orrs	r3, r1
 8004690:	6593      	str	r3, [r2, #88]	@ 0x58
 8004692:	e003      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80046a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ac:	2300      	movs	r3, #0
 80046ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80046b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046b6:	460b      	mov	r3, r1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	d037      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c6:	d00e      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80046c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046cc:	d816      	bhi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d018      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80046d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046d6:	d111      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d8:	4b8c      	ldr	r3, [pc, #560]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	4a8b      	ldr	r2, [pc, #556]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046e4:	e00f      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	3308      	adds	r3, #8
 80046ec:	2101      	movs	r1, #1
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 f94c 	bl	800598c <RCCEx_PLL2_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046fa:	e004      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800470e:	4b7f      	ldr	r3, [pc, #508]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004712:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	4a7b      	ldr	r2, [pc, #492]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800471e:	430b      	orrs	r3, r1
 8004720:	6513      	str	r3, [r2, #80]	@ 0x50
 8004722:	e003      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004742:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d039      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004752:	2b03      	cmp	r3, #3
 8004754:	d81c      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004756:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004799 	.word	0x08004799
 8004760:	0800476d 	.word	0x0800476d
 8004764:	0800477b 	.word	0x0800477b
 8004768:	08004799 	.word	0x08004799
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476c:	4b67      	ldr	r3, [pc, #412]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	4a66      	ldr	r2, [pc, #408]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004778:	e00f      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	3308      	adds	r3, #8
 8004780:	2102      	movs	r1, #2
 8004782:	4618      	mov	r0, r3
 8004784:	f001 f902 	bl	800598c <RCCEx_PLL2_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800478e:	e004      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047a2:	4b5a      	ldr	r3, [pc, #360]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a6:	f023 0103 	bic.w	r1, r3, #3
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b0:	4a56      	ldr	r2, [pc, #344]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047b2:	430b      	orrs	r3, r1
 80047b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047b6:	e003      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80047cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80047da:	460b      	mov	r3, r1
 80047dc:	4313      	orrs	r3, r2
 80047de:	f000 809f 	beq.w	8004920 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ee:	f7fc fd4f 	bl	8001290 <HAL_GetTick>
 80047f2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f6:	e00b      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f8:	f7fc fd4a 	bl	8001290 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b64      	cmp	r3, #100	@ 0x64
 8004806:	d903      	bls.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800480e:	e005      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004810:	4b3f      	ldr	r3, [pc, #252]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ed      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800481c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004820:	2b00      	cmp	r3, #0
 8004822:	d179      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004824:	4b39      	ldr	r3, [pc, #228]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004826:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004830:	4053      	eors	r3, r2
 8004832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d015      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800483a:	4b34      	ldr	r3, [pc, #208]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004842:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004846:	4b31      	ldr	r3, [pc, #196]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	4a30      	ldr	r2, [pc, #192]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004850:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004852:	4b2e      	ldr	r3, [pc, #184]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	4a2d      	ldr	r2, [pc, #180]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800485e:	4a2b      	ldr	r2, [pc, #172]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004864:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800486e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004872:	d118      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fc fd0c 	bl	8001290 <HAL_GetTick>
 8004878:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800487c:	e00d      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fc fd07 	bl	8001290 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004888:	1ad2      	subs	r2, r2, r3
 800488a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800488e:	429a      	cmp	r2, r3
 8004890:	d903      	bls.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004898:	e005      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800489a:	4b1c      	ldr	r3, [pc, #112]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0eb      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d129      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048be:	d10e      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80048c0:	4b12      	ldr	r3, [pc, #72]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048d0:	091a      	lsrs	r2, r3, #4
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	4a0d      	ldr	r2, [pc, #52]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048d8:	430b      	orrs	r3, r1
 80048da:	6113      	str	r3, [r2, #16]
 80048dc:	e005      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	4a0a      	ldr	r2, [pc, #40]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048e8:	6113      	str	r3, [r2, #16]
 80048ea:	4b08      	ldr	r3, [pc, #32]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fa:	4a04      	ldr	r2, [pc, #16]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004900:	e00e      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800490a:	e009      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800490c:	58024400 	.word	0x58024400
 8004910:	58024800 	.word	0x58024800
 8004914:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f002 0301 	and.w	r3, r2, #1
 800492c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004930:	2300      	movs	r3, #0
 8004932:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004936:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800493a:	460b      	mov	r3, r1
 800493c:	4313      	orrs	r3, r2
 800493e:	f000 8089 	beq.w	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004948:	2b28      	cmp	r3, #40	@ 0x28
 800494a:	d86b      	bhi.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800494c:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004a2d 	.word	0x08004a2d
 8004958:	08004a25 	.word	0x08004a25
 800495c:	08004a25 	.word	0x08004a25
 8004960:	08004a25 	.word	0x08004a25
 8004964:	08004a25 	.word	0x08004a25
 8004968:	08004a25 	.word	0x08004a25
 800496c:	08004a25 	.word	0x08004a25
 8004970:	08004a25 	.word	0x08004a25
 8004974:	080049f9 	.word	0x080049f9
 8004978:	08004a25 	.word	0x08004a25
 800497c:	08004a25 	.word	0x08004a25
 8004980:	08004a25 	.word	0x08004a25
 8004984:	08004a25 	.word	0x08004a25
 8004988:	08004a25 	.word	0x08004a25
 800498c:	08004a25 	.word	0x08004a25
 8004990:	08004a25 	.word	0x08004a25
 8004994:	08004a0f 	.word	0x08004a0f
 8004998:	08004a25 	.word	0x08004a25
 800499c:	08004a25 	.word	0x08004a25
 80049a0:	08004a25 	.word	0x08004a25
 80049a4:	08004a25 	.word	0x08004a25
 80049a8:	08004a25 	.word	0x08004a25
 80049ac:	08004a25 	.word	0x08004a25
 80049b0:	08004a25 	.word	0x08004a25
 80049b4:	08004a2d 	.word	0x08004a2d
 80049b8:	08004a25 	.word	0x08004a25
 80049bc:	08004a25 	.word	0x08004a25
 80049c0:	08004a25 	.word	0x08004a25
 80049c4:	08004a25 	.word	0x08004a25
 80049c8:	08004a25 	.word	0x08004a25
 80049cc:	08004a25 	.word	0x08004a25
 80049d0:	08004a25 	.word	0x08004a25
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a25 	.word	0x08004a25
 80049dc:	08004a25 	.word	0x08004a25
 80049e0:	08004a25 	.word	0x08004a25
 80049e4:	08004a25 	.word	0x08004a25
 80049e8:	08004a25 	.word	0x08004a25
 80049ec:	08004a25 	.word	0x08004a25
 80049f0:	08004a25 	.word	0x08004a25
 80049f4:	08004a2d 	.word	0x08004a2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fc:	3308      	adds	r3, #8
 80049fe:	2101      	movs	r1, #1
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 ffc3 	bl	800598c <RCCEx_PLL2_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a0c:	e00f      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a12:	3328      	adds	r3, #40	@ 0x28
 8004a14:	2101      	movs	r1, #1
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f86a 	bl	8005af0 <RCCEx_PLL3_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a22:	e004      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a36:	4bbf      	ldr	r3, [pc, #764]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a44:	4abb      	ldr	r2, [pc, #748]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a46:	430b      	orrs	r3, r1
 8004a48:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a4a:	e003      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f002 0302 	and.w	r3, r2, #2
 8004a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d041      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a7a:	2b05      	cmp	r3, #5
 8004a7c:	d824      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004ad1 	.word	0x08004ad1
 8004a88:	08004a9d 	.word	0x08004a9d
 8004a8c:	08004ab3 	.word	0x08004ab3
 8004a90:	08004ad1 	.word	0x08004ad1
 8004a94:	08004ad1 	.word	0x08004ad1
 8004a98:	08004ad1 	.word	0x08004ad1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 ff71 	bl	800598c <RCCEx_PLL2_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ab0:	e00f      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	3328      	adds	r3, #40	@ 0x28
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 f818 	bl	8005af0 <RCCEx_PLL3_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ac6:	e004      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ace:	e000      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ada:	4b96      	ldr	r3, [pc, #600]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	f023 0107 	bic.w	r1, r3, #7
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ae8:	4a92      	ldr	r2, [pc, #584]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004aea:	430b      	orrs	r3, r1
 8004aec:	6553      	str	r3, [r2, #84]	@ 0x54
 8004aee:	e003      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	f002 0304 	and.w	r3, r2, #4
 8004b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	d044      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b20:	2b05      	cmp	r3, #5
 8004b22:	d825      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b24:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b79 	.word	0x08004b79
 8004b30:	08004b45 	.word	0x08004b45
 8004b34:	08004b5b 	.word	0x08004b5b
 8004b38:	08004b79 	.word	0x08004b79
 8004b3c:	08004b79 	.word	0x08004b79
 8004b40:	08004b79 	.word	0x08004b79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	3308      	adds	r3, #8
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 ff1d 	bl	800598c <RCCEx_PLL2_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b58:	e00f      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5e:	3328      	adds	r3, #40	@ 0x28
 8004b60:	2101      	movs	r1, #1
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ffc4 	bl	8005af0 <RCCEx_PLL3_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b6e:	e004      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b76:	e000      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b82:	4b6c      	ldr	r3, [pc, #432]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b86:	f023 0107 	bic.w	r1, r3, #7
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b92:	4a68      	ldr	r2, [pc, #416]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b98:	e003      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f002 0320 	and.w	r3, r2, #32
 8004bae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d055      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bce:	d033      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bd4:	d82c      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bda:	d02f      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be0:	d826      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004be2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004be6:	d02b      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004be8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bec:	d820      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bf2:	d012      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bf8:	d81a      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d022      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c02:	d115      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	3308      	adds	r3, #8
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 febd 	bl	800598c <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c18:	e015      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	3328      	adds	r3, #40	@ 0x28
 8004c20:	2102      	movs	r1, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 ff64 	bl	8005af0 <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c36:	e006      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c38:	bf00      	nop
 8004c3a:	e004      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c3c:	bf00      	nop
 8004c3e:	e002      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c4e:	4b39      	ldr	r3, [pc, #228]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5e:	4a35      	ldr	r2, [pc, #212]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c64:	e003      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004c84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	d058      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c9a:	d033      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004c9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004ca0:	d82c      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca6:	d02f      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cac:	d826      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004cae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cb2:	d02b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004cb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cb8:	d820      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004cba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cbe:	d012      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc4:	d81a      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d022      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cce:	d115      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fe57 	bl	800598c <RCCEx_PLL2_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ce4:	e015      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cea:	3328      	adds	r3, #40	@ 0x28
 8004cec:	2102      	movs	r1, #2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fefe 	bl	8005af0 <RCCEx_PLL3_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d02:	e006      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d04:	bf00      	nop
 8004d06:	e004      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d08:	bf00      	nop
 8004d0a:	e002      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d0c:	bf00      	nop
 8004d0e:	e000      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10e      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d2a:	4a02      	ldr	r2, [pc, #8]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d30:	e006      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d56:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d055      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d6c:	d033      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004d6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d72:	d82c      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d78:	d02f      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d7e:	d826      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d84:	d02b      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004d86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004d8a:	d820      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d90:	d012      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004d92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d96:	d81a      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d022      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da0:	d115      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	3308      	adds	r3, #8
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fdee 	bl	800598c <RCCEx_PLL2_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004db6:	e015      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbc:	3328      	adds	r3, #40	@ 0x28
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fe95 	bl	8005af0 <RCCEx_PLL3_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dd4:	e006      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dd6:	bf00      	nop
 8004dd8:	e004      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dda:	bf00      	nop
 8004ddc:	e002      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004dde:	bf00      	nop
 8004de0:	e000      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004dec:	4ba1      	ldr	r3, [pc, #644]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004dfc:	4a9d      	ldr	r2, [pc, #628]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e02:	e003      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f002 0308 	and.w	r3, r2, #8
 8004e18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e26:	460b      	mov	r3, r1
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	d01e      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3e:	3328      	adds	r3, #40	@ 0x28
 8004e40:	2102      	movs	r1, #2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fe54 	bl	8005af0 <RCCEx_PLL3_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e54:	4b87      	ldr	r3, [pc, #540]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e64:	4a83      	ldr	r2, [pc, #524]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e66:	430b      	orrs	r3, r1
 8004e68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f002 0310 	and.w	r3, r2, #16
 8004e76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e80:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d01e      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e96:	d10c      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9c:	3328      	adds	r3, #40	@ 0x28
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fe25 	bl	8005af0 <RCCEx_PLL3_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eb2:	4b70      	ldr	r3, [pc, #448]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ec2:	4a6c      	ldr	r2, [pc, #432]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004ed4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ede:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d03e      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef4:	d022      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004ef6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004efa:	d81b      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004f06:	e015      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fd3b 	bl	800598c <RCCEx_PLL2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f1c:	e00f      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f22:	3328      	adds	r3, #40	@ 0x28
 8004f24:	2102      	movs	r1, #2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fde2 	bl	8005af0 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f32:	e004      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f3a:	e000      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f46:	4b4b      	ldr	r3, [pc, #300]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f56:	4a47      	ldr	r2, [pc, #284]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f74:	2300      	movs	r3, #0
 8004f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f78:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d03b      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f8e:	d01f      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f94:	d818      	bhi.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f9a:	d003      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004f9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fa0:	d007      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004fa2:	e011      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa4:	4b33      	ldr	r3, [pc, #204]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	4a32      	ldr	r2, [pc, #200]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fb0:	e00f      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb6:	3328      	adds	r3, #40	@ 0x28
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fd98 	bl	8005af0 <RCCEx_PLL3_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fc6:	e004      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fce:	e000      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fda:	4b26      	ldr	r3, [pc, #152]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	4a22      	ldr	r2, [pc, #136]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fec:	430b      	orrs	r3, r1
 8004fee:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ff0:	e003      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005006:	673b      	str	r3, [r7, #112]	@ 0x70
 8005008:	2300      	movs	r3, #0
 800500a:	677b      	str	r3, [r7, #116]	@ 0x74
 800500c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005010:	460b      	mov	r3, r1
 8005012:	4313      	orrs	r3, r2
 8005014:	d034      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005024:	d007      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005026:	e011      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005028:	4b12      	ldr	r3, [pc, #72]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	4a11      	ldr	r2, [pc, #68]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800502e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005034:	e00e      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503a:	3308      	adds	r3, #8
 800503c:	2102      	movs	r1, #2
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fca4 	bl	800598c <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800504a:	e003      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10d      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800505c:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800505e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005060:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506a:	4a02      	ldr	r2, [pc, #8]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800506c:	430b      	orrs	r3, r1
 800506e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005070:	e006      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005072:	bf00      	nop
 8005074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800507c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800508c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800508e:	2300      	movs	r3, #0
 8005090:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005092:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	d00c      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800509c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a0:	3328      	adds	r3, #40	@ 0x28
 80050a2:	2102      	movs	r1, #2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fd23 	bl	8005af0 <RCCEx_PLL3_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80050c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80050c4:	2300      	movs	r3, #0
 80050c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80050c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80050cc:	460b      	mov	r3, r1
 80050ce:	4313      	orrs	r3, r2
 80050d0:	d038      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050de:	d018      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80050e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050e4:	d811      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80050e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ea:	d014      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80050ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f0:	d80b      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d011      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80050f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050fa:	d106      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050fc:	4bc3      	ldr	r3, [pc, #780]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005100:	4ac2      	ldr	r2, [pc, #776]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005108:	e008      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005110:	e004      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800511a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005124:	4bb9      	ldr	r3, [pc, #740]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005128:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005134:	4ab5      	ldr	r2, [pc, #724]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005136:	430b      	orrs	r3, r1
 8005138:	6553      	str	r3, [r2, #84]	@ 0x54
 800513a:	e003      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005152:	2300      	movs	r3, #0
 8005154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005156:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800515a:	460b      	mov	r3, r1
 800515c:	4313      	orrs	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005160:	4baa      	ldr	r3, [pc, #680]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005164:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516e:	4aa7      	ldr	r2, [pc, #668]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005170:	430b      	orrs	r3, r1
 8005172:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005180:	653b      	str	r3, [r7, #80]	@ 0x50
 8005182:	2300      	movs	r3, #0
 8005184:	657b      	str	r3, [r7, #84]	@ 0x54
 8005186:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005190:	4b9e      	ldr	r3, [pc, #632]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80051a0:	4a9a      	ldr	r2, [pc, #616]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051a2:	430b      	orrs	r3, r1
 80051a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80051b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051b4:	2300      	movs	r3, #0
 80051b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80051bc:	460b      	mov	r3, r1
 80051be:	4313      	orrs	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051c2:	4b92      	ldr	r3, [pc, #584]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d0:	4a8e      	ldr	r2, [pc, #568]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051d2:	430b      	orrs	r3, r1
 80051d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80051e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80051e4:	2300      	movs	r3, #0
 80051e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80051ec:	460b      	mov	r3, r1
 80051ee:	4313      	orrs	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051f2:	4b86      	ldr	r3, [pc, #536]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	4a85      	ldr	r2, [pc, #532]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051fc:	6113      	str	r3, [r2, #16]
 80051fe:	4b83      	ldr	r3, [pc, #524]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005200:	6919      	ldr	r1, [r3, #16]
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800520a:	4a80      	ldr	r2, [pc, #512]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800520c:	430b      	orrs	r3, r1
 800520e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800521c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800521e:	2300      	movs	r3, #0
 8005220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005222:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005226:	460b      	mov	r3, r1
 8005228:	4313      	orrs	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800522c:	4b77      	ldr	r3, [pc, #476]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800522e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005230:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523a:	4a74      	ldr	r2, [pc, #464]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800523c:	430b      	orrs	r3, r1
 800523e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800524c:	633b      	str	r3, [r7, #48]	@ 0x30
 800524e:	2300      	movs	r3, #0
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
 8005252:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800525c:	4b6b      	ldr	r3, [pc, #428]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800525e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005260:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800526c:	4a67      	ldr	r2, [pc, #412]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800526e:	430b      	orrs	r3, r1
 8005270:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	2100      	movs	r1, #0
 800527c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005284:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d011      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005292:	3308      	adds	r3, #8
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fb78 	bl	800598c <RCCEx_PLL2_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	2100      	movs	r1, #0
 80052bc:	6239      	str	r1, [r7, #32]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80052c8:	460b      	mov	r3, r1
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d011      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d2:	3308      	adds	r3, #8
 80052d4:	2101      	movs	r1, #1
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb58 	bl	800598c <RCCEx_PLL2_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	2100      	movs	r1, #0
 80052fc:	61b9      	str	r1, [r7, #24]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005308:	460b      	mov	r3, r1
 800530a:	4313      	orrs	r3, r2
 800530c:	d011      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005312:	3308      	adds	r3, #8
 8005314:	2102      	movs	r1, #2
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fb38 	bl	800598c <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	2100      	movs	r1, #0
 800533c:	6139      	str	r1, [r7, #16]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005348:	460b      	mov	r3, r1
 800534a:	4313      	orrs	r3, r2
 800534c:	d011      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800534e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005352:	3328      	adds	r3, #40	@ 0x28
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fbca 	bl	8005af0 <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800536e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	2100      	movs	r1, #0
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005388:	460b      	mov	r3, r1
 800538a:	4313      	orrs	r3, r2
 800538c:	d011      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005392:	3328      	adds	r3, #40	@ 0x28
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fbaa 	bl	8005af0 <RCCEx_PLL3_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	2100      	movs	r1, #0
 80053bc:	6039      	str	r1, [r7, #0]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d011      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d2:	3328      	adds	r3, #40	@ 0x28
 80053d4:	2102      	movs	r1, #2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fb8a 	bl	8005af0 <RCCEx_PLL3_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80053e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80053f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
}
 8005400:	4618      	mov	r0, r3
 8005402:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005406:	46bd      	mov	sp, r7
 8005408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540c:	58024400 	.word	0x58024400

08005410 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005414:	f7fe fd96 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4904      	ldr	r1, [pc, #16]	@ (8005438 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005426:	5ccb      	ldrb	r3, [r1, r3]
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	58024400 	.word	0x58024400
 8005438:	0800b73c 	.word	0x0800b73c

0800543c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	@ 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005444:	4ba1      	ldr	r3, [pc, #644]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800544e:	4b9f      	ldr	r3, [pc, #636]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005452:	0b1b      	lsrs	r3, r3, #12
 8005454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005458:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800545a:	4b9c      	ldr	r3, [pc, #624]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005466:	4b99      	ldr	r3, [pc, #612]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8111 	beq.w	80056ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b02      	cmp	r3, #2
 800548e:	f000 8083 	beq.w	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b02      	cmp	r3, #2
 8005496:	f200 80a1 	bhi.w	80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d056      	beq.n	8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054a6:	e099      	b.n	80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a8:	4b88      	ldr	r3, [pc, #544]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d02d      	beq.n	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054b4:	4b85      	ldr	r3, [pc, #532]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	4a84      	ldr	r2, [pc, #528]	@ (80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b7b      	ldr	r3, [pc, #492]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800550e:	e087      	b.n	8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b6a      	ldr	r3, [pc, #424]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a03 	vldr	s12, [r7, #12]
 8005536:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005552:	e065      	b.n	8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b59      	ldr	r3, [pc, #356]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a03 	vldr	s12, [r7, #12]
 800557a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005596:	e043      	b.n	8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b48      	ldr	r3, [pc, #288]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80055be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055da:	e021      	b.n	8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ee:	4b37      	ldr	r3, [pc, #220]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005602:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800561e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005620:	4b2a      	ldr	r3, [pc, #168]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	0a5b      	lsrs	r3, r3, #9
 8005626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800563a:	edd7 6a07 	vldr	s13, [r7, #28]
 800563e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005646:	ee17 2a90 	vmov	r2, s15
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800564e:	4b1f      	ldr	r3, [pc, #124]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005660:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005664:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005668:	edd7 6a07 	vldr	s13, [r7, #28]
 800566c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005674:	ee17 2a90 	vmov	r2, s15
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800567c:	4b13      	ldr	r3, [pc, #76]	@ (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800567e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005696:	edd7 6a07 	vldr	s13, [r7, #28]
 800569a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a2:	ee17 2a90 	vmov	r2, s15
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056aa:	e008      	b.n	80056be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
}
 80056be:	bf00      	nop
 80056c0:	3724      	adds	r7, #36	@ 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	58024400 	.word	0x58024400
 80056d0:	03d09000 	.word	0x03d09000
 80056d4:	46000000 	.word	0x46000000
 80056d8:	4c742400 	.word	0x4c742400
 80056dc:	4a742400 	.word	0x4a742400
 80056e0:	4bbebc20 	.word	0x4bbebc20

080056e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	@ 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80056f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	0d1b      	lsrs	r3, r3, #20
 80056fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005700:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005702:	4b9c      	ldr	r3, [pc, #624]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800570e:	4b99      	ldr	r3, [pc, #612]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	08db      	lsrs	r3, r3, #3
 8005714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	fb02 f303 	mul.w	r3, r2, r3
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8111 	beq.w	8005954 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b02      	cmp	r3, #2
 8005736:	f000 8083 	beq.w	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b02      	cmp	r3, #2
 800573e:	f200 80a1 	bhi.w	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d056      	beq.n	80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800574e:	e099      	b.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005750:	4b88      	ldr	r3, [pc, #544]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d02d      	beq.n	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800575c:	4b85      	ldr	r3, [pc, #532]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	4a84      	ldr	r2, [pc, #528]	@ (8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b7b      	ldr	r3, [pc, #492]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a03 	vldr	s12, [r7, #12]
 800579a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80057b6:	e087      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005980 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a03 	vldr	s12, [r7, #12]
 80057de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057fa:	e065      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b59      	ldr	r3, [pc, #356]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005822:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800583e:	e043      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005988 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b48      	ldr	r3, [pc, #288]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a03 	vldr	s12, [r7, #12]
 8005866:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005882:	e021      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b37      	ldr	r3, [pc, #220]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80058c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058cc:	0a5b      	lsrs	r3, r3, #9
 80058ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ee:	ee17 2a90 	vmov	r2, s15
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80058f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	0c1b      	lsrs	r3, r3, #16
 80058fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800590c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005910:	edd7 6a07 	vldr	s13, [r7, #28]
 8005914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591c:	ee17 2a90 	vmov	r2, s15
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005924:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	0e1b      	lsrs	r3, r3, #24
 800592a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800593a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800593e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800594a:	ee17 2a90 	vmov	r2, s15
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	609a      	str	r2, [r3, #8]
}
 8005966:	bf00      	nop
 8005968:	3724      	adds	r7, #36	@ 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
 8005978:	03d09000 	.word	0x03d09000
 800597c:	46000000 	.word	0x46000000
 8005980:	4c742400 	.word	0x4c742400
 8005984:	4a742400 	.word	0x4a742400
 8005988:	4bbebc20 	.word	0x4bbebc20

0800598c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800599a:	4b53      	ldr	r3, [pc, #332]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d101      	bne.n	80059aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e099      	b.n	8005ade <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059aa:	4b4f      	ldr	r3, [pc, #316]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a4e      	ldr	r2, [pc, #312]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b6:	f7fb fc6b 	bl	8001290 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059bc:	e008      	b.n	80059d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059be:	f7fb fc67 	bl	8001290 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e086      	b.n	8005ade <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059d0:	4b45      	ldr	r3, [pc, #276]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f0      	bne.n	80059be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059dc:	4b42      	ldr	r3, [pc, #264]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	493f      	ldr	r1, [pc, #252]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	025b      	lsls	r3, r3, #9
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a20:	4931      	ldr	r1, [pc, #196]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a26:	4b30      	ldr	r3, [pc, #192]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	492d      	ldr	r1, [pc, #180]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a38:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3c:	f023 0220 	bic.w	r2, r3, #32
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4928      	ldr	r1, [pc, #160]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a4a:	4b27      	ldr	r3, [pc, #156]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4e:	4a26      	ldr	r2, [pc, #152]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a50:	f023 0310 	bic.w	r3, r3, #16
 8005a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a56:	4b24      	ldr	r3, [pc, #144]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a5a:	4b24      	ldr	r3, [pc, #144]	@ (8005aec <RCCEx_PLL2_Config+0x160>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	69d2      	ldr	r2, [r2, #28]
 8005a62:	00d2      	lsls	r2, r2, #3
 8005a64:	4920      	ldr	r1, [pc, #128]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	f043 0310 	orr.w	r3, r3, #16
 8005a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a88:	e00f      	b.n	8005aaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d106      	bne.n	8005a9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a90:	4b15      	ldr	r3, [pc, #84]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a94:	4a14      	ldr	r2, [pc, #80]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a9c:	e005      	b.n	8005aaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa2:	4a11      	ldr	r2, [pc, #68]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a0e      	ldr	r2, [pc, #56]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab6:	f7fb fbeb 	bl	8001290 <HAL_GetTick>
 8005aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005abc:	e008      	b.n	8005ad0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005abe:	f7fb fbe7 	bl	8001290 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e006      	b.n	8005ade <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ad0:	4b05      	ldr	r3, [pc, #20]	@ (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	ffff0007 	.word	0xffff0007

08005af0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005afe:	4b53      	ldr	r3, [pc, #332]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d101      	bne.n	8005b0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e099      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4e      	ldr	r2, [pc, #312]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fb fbb9 	bl	8001290 <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b22:	f7fb fbb5 	bl	8001290 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e086      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b34:	4b45      	ldr	r3, [pc, #276]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b40:	4b42      	ldr	r3, [pc, #264]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	493f      	ldr	r1, [pc, #252]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	025b      	lsls	r3, r3, #9
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	061b      	lsls	r3, r3, #24
 8005b80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b84:	4931      	ldr	r1, [pc, #196]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b8a:	4b30      	ldr	r3, [pc, #192]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	492d      	ldr	r1, [pc, #180]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	4928      	ldr	r1, [pc, #160]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bae:	4b27      	ldr	r3, [pc, #156]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	4a26      	ldr	r2, [pc, #152]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bba:	4b24      	ldr	r3, [pc, #144]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bbe:	4b24      	ldr	r3, [pc, #144]	@ (8005c50 <RCCEx_PLL3_Config+0x160>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	69d2      	ldr	r2, [r2, #28]
 8005bc6:	00d2      	lsls	r2, r2, #3
 8005bc8:	4920      	ldr	r1, [pc, #128]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bce:	4b1f      	ldr	r3, [pc, #124]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005be0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	4a19      	ldr	r2, [pc, #100]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005be6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005bea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bec:	e00f      	b.n	8005c0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bf4:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	4a14      	ldr	r2, [pc, #80]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c00:	e005      	b.n	8005c0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c02:	4b12      	ldr	r3, [pc, #72]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	4a11      	ldr	r2, [pc, #68]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a0e      	ldr	r2, [pc, #56]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1a:	f7fb fb39 	bl	8001290 <HAL_GetTick>
 8005c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c20:	e008      	b.n	8005c34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c22:	f7fb fb35 	bl	8001290 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e006      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c34:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	ffff0007 	.word	0xffff0007

08005c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e042      	b.n	8005cec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f83b 	bl	8005cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2224      	movs	r2, #36	@ 0x24
 8005c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fd9a 	bl	80067d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f82f 	bl	8005d08 <UART_SetConfig>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e01b      	b.n	8005cec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fe19 	bl	800691c <UART_CheckIdleState>
 8005cea:	4603      	mov	r3, r0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d0c:	b092      	sub	sp, #72	@ 0x48
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	4bbe      	ldr	r3, [pc, #760]	@ (8006030 <UART_SetConfig+0x328>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4ab3      	ldr	r2, [pc, #716]	@ (8006034 <UART_SetConfig+0x32c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d70:	4313      	orrs	r3, r2
 8005d72:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	4baf      	ldr	r3, [pc, #700]	@ (8006038 <UART_SetConfig+0x330>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8e:	f023 010f 	bic.w	r1, r3, #15
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4aa6      	ldr	r2, [pc, #664]	@ (800603c <UART_SetConfig+0x334>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d177      	bne.n	8005e98 <UART_SetConfig+0x190>
 8005da8:	4ba5      	ldr	r3, [pc, #660]	@ (8006040 <UART_SetConfig+0x338>)
 8005daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005db0:	2b28      	cmp	r3, #40	@ 0x28
 8005db2:	d86d      	bhi.n	8005e90 <UART_SetConfig+0x188>
 8005db4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <UART_SetConfig+0xb4>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005e61 	.word	0x08005e61
 8005dc0:	08005e91 	.word	0x08005e91
 8005dc4:	08005e91 	.word	0x08005e91
 8005dc8:	08005e91 	.word	0x08005e91
 8005dcc:	08005e91 	.word	0x08005e91
 8005dd0:	08005e91 	.word	0x08005e91
 8005dd4:	08005e91 	.word	0x08005e91
 8005dd8:	08005e91 	.word	0x08005e91
 8005ddc:	08005e69 	.word	0x08005e69
 8005de0:	08005e91 	.word	0x08005e91
 8005de4:	08005e91 	.word	0x08005e91
 8005de8:	08005e91 	.word	0x08005e91
 8005dec:	08005e91 	.word	0x08005e91
 8005df0:	08005e91 	.word	0x08005e91
 8005df4:	08005e91 	.word	0x08005e91
 8005df8:	08005e91 	.word	0x08005e91
 8005dfc:	08005e71 	.word	0x08005e71
 8005e00:	08005e91 	.word	0x08005e91
 8005e04:	08005e91 	.word	0x08005e91
 8005e08:	08005e91 	.word	0x08005e91
 8005e0c:	08005e91 	.word	0x08005e91
 8005e10:	08005e91 	.word	0x08005e91
 8005e14:	08005e91 	.word	0x08005e91
 8005e18:	08005e91 	.word	0x08005e91
 8005e1c:	08005e79 	.word	0x08005e79
 8005e20:	08005e91 	.word	0x08005e91
 8005e24:	08005e91 	.word	0x08005e91
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e91 	.word	0x08005e91
 8005e30:	08005e91 	.word	0x08005e91
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005e91 	.word	0x08005e91
 8005e3c:	08005e81 	.word	0x08005e81
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e91 	.word	0x08005e91
 8005e4c:	08005e91 	.word	0x08005e91
 8005e50:	08005e91 	.word	0x08005e91
 8005e54:	08005e91 	.word	0x08005e91
 8005e58:	08005e91 	.word	0x08005e91
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e222      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e21e      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e21a      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e216      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005e80:	2320      	movs	r3, #32
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e212      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005e88:	2340      	movs	r3, #64	@ 0x40
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e20e      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005e90:	2380      	movs	r3, #128	@ 0x80
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e20a      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a69      	ldr	r2, [pc, #420]	@ (8006044 <UART_SetConfig+0x33c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d130      	bne.n	8005f04 <UART_SetConfig+0x1fc>
 8005ea2:	4b67      	ldr	r3, [pc, #412]	@ (8006040 <UART_SetConfig+0x338>)
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	d826      	bhi.n	8005efc <UART_SetConfig+0x1f4>
 8005eae:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <UART_SetConfig+0x1ac>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ecd 	.word	0x08005ecd
 8005eb8:	08005ed5 	.word	0x08005ed5
 8005ebc:	08005edd 	.word	0x08005edd
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08005eed 	.word	0x08005eed
 8005ec8:	08005ef5 	.word	0x08005ef5
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed2:	e1ec      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eda:	e1e8      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005edc:	2308      	movs	r3, #8
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e1e4      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e1e0      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005eec:	2320      	movs	r3, #32
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e1dc      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005ef4:	2340      	movs	r3, #64	@ 0x40
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e1d8      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005efc:	2380      	movs	r3, #128	@ 0x80
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e1d4      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a4f      	ldr	r2, [pc, #316]	@ (8006048 <UART_SetConfig+0x340>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d130      	bne.n	8005f70 <UART_SetConfig+0x268>
 8005f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8006040 <UART_SetConfig+0x338>)
 8005f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d826      	bhi.n	8005f68 <UART_SetConfig+0x260>
 8005f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f20 <UART_SetConfig+0x218>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f39 	.word	0x08005f39
 8005f24:	08005f41 	.word	0x08005f41
 8005f28:	08005f49 	.word	0x08005f49
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f59 	.word	0x08005f59
 8005f34:	08005f61 	.word	0x08005f61
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3e:	e1b6      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005f40:	2304      	movs	r3, #4
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f46:	e1b2      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005f48:	2308      	movs	r3, #8
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4e:	e1ae      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005f50:	2310      	movs	r3, #16
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f56:	e1aa      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005f58:	2320      	movs	r3, #32
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5e:	e1a6      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005f60:	2340      	movs	r3, #64	@ 0x40
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e1a2      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005f68:	2380      	movs	r3, #128	@ 0x80
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e19e      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a35      	ldr	r2, [pc, #212]	@ (800604c <UART_SetConfig+0x344>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d130      	bne.n	8005fdc <UART_SetConfig+0x2d4>
 8005f7a:	4b31      	ldr	r3, [pc, #196]	@ (8006040 <UART_SetConfig+0x338>)
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d826      	bhi.n	8005fd4 <UART_SetConfig+0x2cc>
 8005f86:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <UART_SetConfig+0x284>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fa5 	.word	0x08005fa5
 8005f90:	08005fad 	.word	0x08005fad
 8005f94:	08005fb5 	.word	0x08005fb5
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005faa:	e180      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005fac:	2304      	movs	r3, #4
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb2:	e17c      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fba:	e178      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc2:	e174      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005fc4:	2320      	movs	r3, #32
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fca:	e170      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005fcc:	2340      	movs	r3, #64	@ 0x40
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd2:	e16c      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005fd4:	2380      	movs	r3, #128	@ 0x80
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e168      	b.n	80062ae <UART_SetConfig+0x5a6>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8006050 <UART_SetConfig+0x348>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d142      	bne.n	800606c <UART_SetConfig+0x364>
 8005fe6:	4b16      	ldr	r3, [pc, #88]	@ (8006040 <UART_SetConfig+0x338>)
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d838      	bhi.n	8006064 <UART_SetConfig+0x35c>
 8005ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <UART_SetConfig+0x2f0>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006011 	.word	0x08006011
 8005ffc:	08006019 	.word	0x08006019
 8006000:	08006021 	.word	0x08006021
 8006004:	08006029 	.word	0x08006029
 8006008:	08006055 	.word	0x08006055
 800600c:	0800605d 	.word	0x0800605d
 8006010:	2300      	movs	r3, #0
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006016:	e14a      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006018:	2304      	movs	r3, #4
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601e:	e146      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006020:	2308      	movs	r3, #8
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e142      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006028:	2310      	movs	r3, #16
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602e:	e13e      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006030:	cfff69f3 	.word	0xcfff69f3
 8006034:	58000c00 	.word	0x58000c00
 8006038:	11fff4ff 	.word	0x11fff4ff
 800603c:	40011000 	.word	0x40011000
 8006040:	58024400 	.word	0x58024400
 8006044:	40004400 	.word	0x40004400
 8006048:	40004800 	.word	0x40004800
 800604c:	40004c00 	.word	0x40004c00
 8006050:	40005000 	.word	0x40005000
 8006054:	2320      	movs	r3, #32
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e128      	b.n	80062ae <UART_SetConfig+0x5a6>
 800605c:	2340      	movs	r3, #64	@ 0x40
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e124      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006064:	2380      	movs	r3, #128	@ 0x80
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e120      	b.n	80062ae <UART_SetConfig+0x5a6>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4acb      	ldr	r2, [pc, #812]	@ (80063a0 <UART_SetConfig+0x698>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d176      	bne.n	8006164 <UART_SetConfig+0x45c>
 8006076:	4bcb      	ldr	r3, [pc, #812]	@ (80063a4 <UART_SetConfig+0x69c>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800607e:	2b28      	cmp	r3, #40	@ 0x28
 8006080:	d86c      	bhi.n	800615c <UART_SetConfig+0x454>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <UART_SetConfig+0x380>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	0800612d 	.word	0x0800612d
 800608c:	0800615d 	.word	0x0800615d
 8006090:	0800615d 	.word	0x0800615d
 8006094:	0800615d 	.word	0x0800615d
 8006098:	0800615d 	.word	0x0800615d
 800609c:	0800615d 	.word	0x0800615d
 80060a0:	0800615d 	.word	0x0800615d
 80060a4:	0800615d 	.word	0x0800615d
 80060a8:	08006135 	.word	0x08006135
 80060ac:	0800615d 	.word	0x0800615d
 80060b0:	0800615d 	.word	0x0800615d
 80060b4:	0800615d 	.word	0x0800615d
 80060b8:	0800615d 	.word	0x0800615d
 80060bc:	0800615d 	.word	0x0800615d
 80060c0:	0800615d 	.word	0x0800615d
 80060c4:	0800615d 	.word	0x0800615d
 80060c8:	0800613d 	.word	0x0800613d
 80060cc:	0800615d 	.word	0x0800615d
 80060d0:	0800615d 	.word	0x0800615d
 80060d4:	0800615d 	.word	0x0800615d
 80060d8:	0800615d 	.word	0x0800615d
 80060dc:	0800615d 	.word	0x0800615d
 80060e0:	0800615d 	.word	0x0800615d
 80060e4:	0800615d 	.word	0x0800615d
 80060e8:	08006145 	.word	0x08006145
 80060ec:	0800615d 	.word	0x0800615d
 80060f0:	0800615d 	.word	0x0800615d
 80060f4:	0800615d 	.word	0x0800615d
 80060f8:	0800615d 	.word	0x0800615d
 80060fc:	0800615d 	.word	0x0800615d
 8006100:	0800615d 	.word	0x0800615d
 8006104:	0800615d 	.word	0x0800615d
 8006108:	0800614d 	.word	0x0800614d
 800610c:	0800615d 	.word	0x0800615d
 8006110:	0800615d 	.word	0x0800615d
 8006114:	0800615d 	.word	0x0800615d
 8006118:	0800615d 	.word	0x0800615d
 800611c:	0800615d 	.word	0x0800615d
 8006120:	0800615d 	.word	0x0800615d
 8006124:	0800615d 	.word	0x0800615d
 8006128:	08006155 	.word	0x08006155
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e0bc      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006134:	2304      	movs	r3, #4
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613a:	e0b8      	b.n	80062ae <UART_SetConfig+0x5a6>
 800613c:	2308      	movs	r3, #8
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006142:	e0b4      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006144:	2310      	movs	r3, #16
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614a:	e0b0      	b.n	80062ae <UART_SetConfig+0x5a6>
 800614c:	2320      	movs	r3, #32
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006152:	e0ac      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006154:	2340      	movs	r3, #64	@ 0x40
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615a:	e0a8      	b.n	80062ae <UART_SetConfig+0x5a6>
 800615c:	2380      	movs	r3, #128	@ 0x80
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e0a4      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a8f      	ldr	r2, [pc, #572]	@ (80063a8 <UART_SetConfig+0x6a0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d130      	bne.n	80061d0 <UART_SetConfig+0x4c8>
 800616e:	4b8d      	ldr	r3, [pc, #564]	@ (80063a4 <UART_SetConfig+0x69c>)
 8006170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b05      	cmp	r3, #5
 8006178:	d826      	bhi.n	80061c8 <UART_SetConfig+0x4c0>
 800617a:	a201      	add	r2, pc, #4	@ (adr r2, 8006180 <UART_SetConfig+0x478>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	08006199 	.word	0x08006199
 8006184:	080061a1 	.word	0x080061a1
 8006188:	080061a9 	.word	0x080061a9
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b9 	.word	0x080061b9
 8006194:	080061c1 	.word	0x080061c1
 8006198:	2300      	movs	r3, #0
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619e:	e086      	b.n	80062ae <UART_SetConfig+0x5a6>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a6:	e082      	b.n	80062ae <UART_SetConfig+0x5a6>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ae:	e07e      	b.n	80062ae <UART_SetConfig+0x5a6>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b6:	e07a      	b.n	80062ae <UART_SetConfig+0x5a6>
 80061b8:	2320      	movs	r3, #32
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061be:	e076      	b.n	80062ae <UART_SetConfig+0x5a6>
 80061c0:	2340      	movs	r3, #64	@ 0x40
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c6:	e072      	b.n	80062ae <UART_SetConfig+0x5a6>
 80061c8:	2380      	movs	r3, #128	@ 0x80
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ce:	e06e      	b.n	80062ae <UART_SetConfig+0x5a6>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a75      	ldr	r2, [pc, #468]	@ (80063ac <UART_SetConfig+0x6a4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d130      	bne.n	800623c <UART_SetConfig+0x534>
 80061da:	4b72      	ldr	r3, [pc, #456]	@ (80063a4 <UART_SetConfig+0x69c>)
 80061dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	d826      	bhi.n	8006234 <UART_SetConfig+0x52c>
 80061e6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <UART_SetConfig+0x4e4>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006205 	.word	0x08006205
 80061f0:	0800620d 	.word	0x0800620d
 80061f4:	08006215 	.word	0x08006215
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	08006225 	.word	0x08006225
 8006200:	0800622d 	.word	0x0800622d
 8006204:	2300      	movs	r3, #0
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620a:	e050      	b.n	80062ae <UART_SetConfig+0x5a6>
 800620c:	2304      	movs	r3, #4
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006212:	e04c      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006214:	2308      	movs	r3, #8
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621a:	e048      	b.n	80062ae <UART_SetConfig+0x5a6>
 800621c:	2310      	movs	r3, #16
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006222:	e044      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006224:	2320      	movs	r3, #32
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622a:	e040      	b.n	80062ae <UART_SetConfig+0x5a6>
 800622c:	2340      	movs	r3, #64	@ 0x40
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006232:	e03c      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006234:	2380      	movs	r3, #128	@ 0x80
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623a:	e038      	b.n	80062ae <UART_SetConfig+0x5a6>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a5b      	ldr	r2, [pc, #364]	@ (80063b0 <UART_SetConfig+0x6a8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d130      	bne.n	80062a8 <UART_SetConfig+0x5a0>
 8006246:	4b57      	ldr	r3, [pc, #348]	@ (80063a4 <UART_SetConfig+0x69c>)
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	2b05      	cmp	r3, #5
 8006250:	d826      	bhi.n	80062a0 <UART_SetConfig+0x598>
 8006252:	a201      	add	r2, pc, #4	@ (adr r2, 8006258 <UART_SetConfig+0x550>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	08006271 	.word	0x08006271
 800625c:	08006279 	.word	0x08006279
 8006260:	08006281 	.word	0x08006281
 8006264:	08006289 	.word	0x08006289
 8006268:	08006291 	.word	0x08006291
 800626c:	08006299 	.word	0x08006299
 8006270:	2302      	movs	r3, #2
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006276:	e01a      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627e:	e016      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006286:	e012      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628e:	e00e      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006290:	2320      	movs	r3, #32
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006296:	e00a      	b.n	80062ae <UART_SetConfig+0x5a6>
 8006298:	2340      	movs	r3, #64	@ 0x40
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629e:	e006      	b.n	80062ae <UART_SetConfig+0x5a6>
 80062a0:	2380      	movs	r3, #128	@ 0x80
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a6:	e002      	b.n	80062ae <UART_SetConfig+0x5a6>
 80062a8:	2380      	movs	r3, #128	@ 0x80
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a3f      	ldr	r2, [pc, #252]	@ (80063b0 <UART_SetConfig+0x6a8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	f040 80f8 	bne.w	80064aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062be:	2b20      	cmp	r3, #32
 80062c0:	dc46      	bgt.n	8006350 <UART_SetConfig+0x648>
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	f2c0 8082 	blt.w	80063cc <UART_SetConfig+0x6c4>
 80062c8:	3b02      	subs	r3, #2
 80062ca:	2b1e      	cmp	r3, #30
 80062cc:	d87e      	bhi.n	80063cc <UART_SetConfig+0x6c4>
 80062ce:	a201      	add	r2, pc, #4	@ (adr r2, 80062d4 <UART_SetConfig+0x5cc>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	08006357 	.word	0x08006357
 80062d8:	080063cd 	.word	0x080063cd
 80062dc:	0800635f 	.word	0x0800635f
 80062e0:	080063cd 	.word	0x080063cd
 80062e4:	080063cd 	.word	0x080063cd
 80062e8:	080063cd 	.word	0x080063cd
 80062ec:	0800636f 	.word	0x0800636f
 80062f0:	080063cd 	.word	0x080063cd
 80062f4:	080063cd 	.word	0x080063cd
 80062f8:	080063cd 	.word	0x080063cd
 80062fc:	080063cd 	.word	0x080063cd
 8006300:	080063cd 	.word	0x080063cd
 8006304:	080063cd 	.word	0x080063cd
 8006308:	080063cd 	.word	0x080063cd
 800630c:	0800637f 	.word	0x0800637f
 8006310:	080063cd 	.word	0x080063cd
 8006314:	080063cd 	.word	0x080063cd
 8006318:	080063cd 	.word	0x080063cd
 800631c:	080063cd 	.word	0x080063cd
 8006320:	080063cd 	.word	0x080063cd
 8006324:	080063cd 	.word	0x080063cd
 8006328:	080063cd 	.word	0x080063cd
 800632c:	080063cd 	.word	0x080063cd
 8006330:	080063cd 	.word	0x080063cd
 8006334:	080063cd 	.word	0x080063cd
 8006338:	080063cd 	.word	0x080063cd
 800633c:	080063cd 	.word	0x080063cd
 8006340:	080063cd 	.word	0x080063cd
 8006344:	080063cd 	.word	0x080063cd
 8006348:	080063cd 	.word	0x080063cd
 800634c:	080063bf 	.word	0x080063bf
 8006350:	2b40      	cmp	r3, #64	@ 0x40
 8006352:	d037      	beq.n	80063c4 <UART_SetConfig+0x6bc>
 8006354:	e03a      	b.n	80063cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006356:	f7ff f85b 	bl	8005410 <HAL_RCCEx_GetD3PCLK1Freq>
 800635a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800635c:	e03c      	b.n	80063d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800635e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f86a 	bl	800543c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636c:	e034      	b.n	80063d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800636e:	f107 0318 	add.w	r3, r7, #24
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff f9b6 	bl	80056e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637c:	e02c      	b.n	80063d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800637e:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <UART_SetConfig+0x69c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d016      	beq.n	80063b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800638a:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <UART_SetConfig+0x69c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	08db      	lsrs	r3, r3, #3
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	4a07      	ldr	r2, [pc, #28]	@ (80063b4 <UART_SetConfig+0x6ac>)
 8006396:	fa22 f303 	lsr.w	r3, r2, r3
 800639a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800639c:	e01c      	b.n	80063d8 <UART_SetConfig+0x6d0>
 800639e:	bf00      	nop
 80063a0:	40011400 	.word	0x40011400
 80063a4:	58024400 	.word	0x58024400
 80063a8:	40007800 	.word	0x40007800
 80063ac:	40007c00 	.word	0x40007c00
 80063b0:	58000c00 	.word	0x58000c00
 80063b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b9d      	ldr	r3, [pc, #628]	@ (8006630 <UART_SetConfig+0x928>)
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063bc:	e00c      	b.n	80063d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063be:	4b9d      	ldr	r3, [pc, #628]	@ (8006634 <UART_SetConfig+0x92c>)
 80063c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c2:	e009      	b.n	80063d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ca:	e005      	b.n	80063d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 81de 	beq.w	800679c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	4a94      	ldr	r2, [pc, #592]	@ (8006638 <UART_SetConfig+0x930>)
 80063e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80063f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006400:	429a      	cmp	r2, r3
 8006402:	d305      	bcc.n	8006410 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800640a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800640c:	429a      	cmp	r2, r3
 800640e:	d903      	bls.n	8006418 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006416:	e1c1      	b.n	800679c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641a:	2200      	movs	r2, #0
 800641c:	60bb      	str	r3, [r7, #8]
 800641e:	60fa      	str	r2, [r7, #12]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	4a84      	ldr	r2, [pc, #528]	@ (8006638 <UART_SetConfig+0x930>)
 8006426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800642a:	b29b      	uxth	r3, r3
 800642c:	2200      	movs	r2, #0
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006436:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800643a:	f7f9 ffa1 	bl	8000380 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4610      	mov	r0, r2
 8006444:	4619      	mov	r1, r3
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	020b      	lsls	r3, r1, #8
 8006450:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006454:	0202      	lsls	r2, r0, #8
 8006456:	6979      	ldr	r1, [r7, #20]
 8006458:	6849      	ldr	r1, [r1, #4]
 800645a:	0849      	lsrs	r1, r1, #1
 800645c:	2000      	movs	r0, #0
 800645e:	460c      	mov	r4, r1
 8006460:	4605      	mov	r5, r0
 8006462:	eb12 0804 	adds.w	r8, r2, r4
 8006466:	eb43 0905 	adc.w	r9, r3, r5
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	469a      	mov	sl, r3
 8006472:	4693      	mov	fp, r2
 8006474:	4652      	mov	r2, sl
 8006476:	465b      	mov	r3, fp
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7f9 ff80 	bl	8000380 <__aeabi_uldivmod>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4613      	mov	r3, r2
 8006486:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800648e:	d308      	bcc.n	80064a2 <UART_SetConfig+0x79a>
 8006490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006496:	d204      	bcs.n	80064a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800649e:	60da      	str	r2, [r3, #12]
 80064a0:	e17c      	b.n	800679c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064a8:	e178      	b.n	800679c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b2:	f040 80c5 	bne.w	8006640 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80064b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	dc48      	bgt.n	8006550 <UART_SetConfig+0x848>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	db7b      	blt.n	80065ba <UART_SetConfig+0x8b2>
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d879      	bhi.n	80065ba <UART_SetConfig+0x8b2>
 80064c6:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <UART_SetConfig+0x7c4>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	08006557 	.word	0x08006557
 80064d0:	0800655f 	.word	0x0800655f
 80064d4:	080065bb 	.word	0x080065bb
 80064d8:	080065bb 	.word	0x080065bb
 80064dc:	08006567 	.word	0x08006567
 80064e0:	080065bb 	.word	0x080065bb
 80064e4:	080065bb 	.word	0x080065bb
 80064e8:	080065bb 	.word	0x080065bb
 80064ec:	08006577 	.word	0x08006577
 80064f0:	080065bb 	.word	0x080065bb
 80064f4:	080065bb 	.word	0x080065bb
 80064f8:	080065bb 	.word	0x080065bb
 80064fc:	080065bb 	.word	0x080065bb
 8006500:	080065bb 	.word	0x080065bb
 8006504:	080065bb 	.word	0x080065bb
 8006508:	080065bb 	.word	0x080065bb
 800650c:	08006587 	.word	0x08006587
 8006510:	080065bb 	.word	0x080065bb
 8006514:	080065bb 	.word	0x080065bb
 8006518:	080065bb 	.word	0x080065bb
 800651c:	080065bb 	.word	0x080065bb
 8006520:	080065bb 	.word	0x080065bb
 8006524:	080065bb 	.word	0x080065bb
 8006528:	080065bb 	.word	0x080065bb
 800652c:	080065bb 	.word	0x080065bb
 8006530:	080065bb 	.word	0x080065bb
 8006534:	080065bb 	.word	0x080065bb
 8006538:	080065bb 	.word	0x080065bb
 800653c:	080065bb 	.word	0x080065bb
 8006540:	080065bb 	.word	0x080065bb
 8006544:	080065bb 	.word	0x080065bb
 8006548:	080065bb 	.word	0x080065bb
 800654c:	080065ad 	.word	0x080065ad
 8006550:	2b40      	cmp	r3, #64	@ 0x40
 8006552:	d02e      	beq.n	80065b2 <UART_SetConfig+0x8aa>
 8006554:	e031      	b.n	80065ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006556:	f7fd fd25 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 800655a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800655c:	e033      	b.n	80065c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800655e:	f7fd fd37 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8006562:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006564:	e02f      	b.n	80065c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe ff66 	bl	800543c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006574:	e027      	b.n	80065c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006576:	f107 0318 	add.w	r3, r7, #24
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff f8b2 	bl	80056e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006584:	e01f      	b.n	80065c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006586:	4b2d      	ldr	r3, [pc, #180]	@ (800663c <UART_SetConfig+0x934>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d009      	beq.n	80065a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006592:	4b2a      	ldr	r3, [pc, #168]	@ (800663c <UART_SetConfig+0x934>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	08db      	lsrs	r3, r3, #3
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	4a24      	ldr	r2, [pc, #144]	@ (8006630 <UART_SetConfig+0x928>)
 800659e:	fa22 f303 	lsr.w	r3, r2, r3
 80065a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065a4:	e00f      	b.n	80065c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80065a6:	4b22      	ldr	r3, [pc, #136]	@ (8006630 <UART_SetConfig+0x928>)
 80065a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065aa:	e00c      	b.n	80065c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065ac:	4b21      	ldr	r3, [pc, #132]	@ (8006634 <UART_SetConfig+0x92c>)
 80065ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065b0:	e009      	b.n	80065c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065b8:	e005      	b.n	80065c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80e7 	beq.w	800679c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d2:	4a19      	ldr	r2, [pc, #100]	@ (8006638 <UART_SetConfig+0x930>)
 80065d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d8:	461a      	mov	r2, r3
 80065da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e0:	005a      	lsls	r2, r3, #1
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	441a      	add	r2, r3
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d916      	bls.n	8006628 <UART_SetConfig+0x920>
 80065fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006600:	d212      	bcs.n	8006628 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006604:	b29b      	uxth	r3, r3
 8006606:	f023 030f 	bic.w	r3, r3, #15
 800660a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	b29b      	uxth	r3, r3
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	b29a      	uxth	r2, r3
 8006618:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800661a:	4313      	orrs	r3, r2
 800661c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	e0b9      	b.n	800679c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800662e:	e0b5      	b.n	800679c <UART_SetConfig+0xa94>
 8006630:	03d09000 	.word	0x03d09000
 8006634:	003d0900 	.word	0x003d0900
 8006638:	0800b758 	.word	0x0800b758
 800663c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006640:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006644:	2b20      	cmp	r3, #32
 8006646:	dc49      	bgt.n	80066dc <UART_SetConfig+0x9d4>
 8006648:	2b00      	cmp	r3, #0
 800664a:	db7c      	blt.n	8006746 <UART_SetConfig+0xa3e>
 800664c:	2b20      	cmp	r3, #32
 800664e:	d87a      	bhi.n	8006746 <UART_SetConfig+0xa3e>
 8006650:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <UART_SetConfig+0x950>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	080066e3 	.word	0x080066e3
 800665c:	080066eb 	.word	0x080066eb
 8006660:	08006747 	.word	0x08006747
 8006664:	08006747 	.word	0x08006747
 8006668:	080066f3 	.word	0x080066f3
 800666c:	08006747 	.word	0x08006747
 8006670:	08006747 	.word	0x08006747
 8006674:	08006747 	.word	0x08006747
 8006678:	08006703 	.word	0x08006703
 800667c:	08006747 	.word	0x08006747
 8006680:	08006747 	.word	0x08006747
 8006684:	08006747 	.word	0x08006747
 8006688:	08006747 	.word	0x08006747
 800668c:	08006747 	.word	0x08006747
 8006690:	08006747 	.word	0x08006747
 8006694:	08006747 	.word	0x08006747
 8006698:	08006713 	.word	0x08006713
 800669c:	08006747 	.word	0x08006747
 80066a0:	08006747 	.word	0x08006747
 80066a4:	08006747 	.word	0x08006747
 80066a8:	08006747 	.word	0x08006747
 80066ac:	08006747 	.word	0x08006747
 80066b0:	08006747 	.word	0x08006747
 80066b4:	08006747 	.word	0x08006747
 80066b8:	08006747 	.word	0x08006747
 80066bc:	08006747 	.word	0x08006747
 80066c0:	08006747 	.word	0x08006747
 80066c4:	08006747 	.word	0x08006747
 80066c8:	08006747 	.word	0x08006747
 80066cc:	08006747 	.word	0x08006747
 80066d0:	08006747 	.word	0x08006747
 80066d4:	08006747 	.word	0x08006747
 80066d8:	08006739 	.word	0x08006739
 80066dc:	2b40      	cmp	r3, #64	@ 0x40
 80066de:	d02e      	beq.n	800673e <UART_SetConfig+0xa36>
 80066e0:	e031      	b.n	8006746 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e2:	f7fd fc5f 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 80066e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066e8:	e033      	b.n	8006752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ea:	f7fd fc71 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 80066ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066f0:	e02f      	b.n	8006752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fea0 	bl	800543c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006700:	e027      	b.n	8006752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006702:	f107 0318 	add.w	r3, r7, #24
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe ffec 	bl	80056e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006710:	e01f      	b.n	8006752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006712:	4b2d      	ldr	r3, [pc, #180]	@ (80067c8 <UART_SetConfig+0xac0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800671e:	4b2a      	ldr	r3, [pc, #168]	@ (80067c8 <UART_SetConfig+0xac0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	08db      	lsrs	r3, r3, #3
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	4a28      	ldr	r2, [pc, #160]	@ (80067cc <UART_SetConfig+0xac4>)
 800672a:	fa22 f303 	lsr.w	r3, r2, r3
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006730:	e00f      	b.n	8006752 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006732:	4b26      	ldr	r3, [pc, #152]	@ (80067cc <UART_SetConfig+0xac4>)
 8006734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006736:	e00c      	b.n	8006752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006738:	4b25      	ldr	r3, [pc, #148]	@ (80067d0 <UART_SetConfig+0xac8>)
 800673a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800673c:	e009      	b.n	8006752 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006744:	e005      	b.n	8006752 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006750:	bf00      	nop
    }

    if (pclk != 0U)
 8006752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d021      	beq.n	800679c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675c:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <UART_SetConfig+0xacc>)
 800675e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006762:	461a      	mov	r2, r3
 8006764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006766:	fbb3 f2f2 	udiv	r2, r3, r2
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	441a      	add	r2, r3
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	fbb2 f3f3 	udiv	r3, r2, r3
 800677a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800677c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677e:	2b0f      	cmp	r3, #15
 8006780:	d909      	bls.n	8006796 <UART_SetConfig+0xa8e>
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006788:	d205      	bcs.n	8006796 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	b29a      	uxth	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60da      	str	r2, [r3, #12]
 8006794:	e002      	b.n	800679c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2201      	movs	r2, #1
 80067a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2200      	movs	r2, #0
 80067b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2200      	movs	r2, #0
 80067b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067b8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3748      	adds	r7, #72	@ 0x48
 80067c0:	46bd      	mov	sp, r7
 80067c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c6:	bf00      	nop
 80067c8:	58024400 	.word	0x58024400
 80067cc:	03d09000 	.word	0x03d09000
 80067d0:	003d0900 	.word	0x003d0900
 80067d4:	0800b758 	.word	0x0800b758

080067d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01a      	beq.n	80068ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d6:	d10a      	bne.n	80068ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b098      	sub	sp, #96	@ 0x60
 8006920:	af02      	add	r7, sp, #8
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800692c:	f7fa fcb0 	bl	8001290 <HAL_GetTick>
 8006930:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b08      	cmp	r3, #8
 800693e:	d12f      	bne.n	80069a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f88e 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d022      	beq.n	80069a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800696e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006978:	647b      	str	r3, [r7, #68]	@ 0x44
 800697a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800697e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e063      	b.n	8006a68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d149      	bne.n	8006a42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b6:	2200      	movs	r2, #0
 80069b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f857 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d03c      	beq.n	8006a42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	623b      	str	r3, [r7, #32]
   return(result);
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80069e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e6      	bne.n	80069c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a1a:	61fa      	str	r2, [r7, #28]
 8006a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	69b9      	ldr	r1, [r7, #24]
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	617b      	str	r3, [r7, #20]
   return(result);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e012      	b.n	8006a68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3758      	adds	r7, #88	@ 0x58
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a80:	e04f      	b.n	8006b22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d04b      	beq.n	8006b22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8a:	f7fa fc01 	bl	8001290 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d302      	bcc.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e04e      	b.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d037      	beq.n	8006b22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b80      	cmp	r3, #128	@ 0x80
 8006ab6:	d034      	beq.n	8006b22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b40      	cmp	r3, #64	@ 0x40
 8006abc:	d031      	beq.n	8006b22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d110      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f839 	bl	8006b4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2208      	movs	r2, #8
 8006ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e029      	b.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006afc:	d111      	bne.n	8006b22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f81f 	bl	8006b4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e00f      	b.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	bf0c      	ite	eq
 8006b32:	2301      	moveq	r3, #1
 8006b34:	2300      	movne	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d0a0      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b095      	sub	sp, #84	@ 0x54
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e6      	bne.n	8006b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	4b1e      	ldr	r3, [pc, #120]	@ (8006c14 <UART_EndRxTransfer+0xc8>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d118      	bne.n	8006bf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f023 0310 	bic.w	r3, r3, #16
 8006bd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6979      	ldr	r1, [r7, #20]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	613b      	str	r3, [r7, #16]
   return(result);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e6      	bne.n	8006bc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c08:	bf00      	nop
 8006c0a:	3754      	adds	r7, #84	@ 0x54
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	effffffe 	.word	0xeffffffe

08006c18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c18:	b084      	sub	sp, #16
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	f107 001c 	add.w	r0, r7, #28
 8006c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d121      	bne.n	8006c76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	4b2c      	ldr	r3, [pc, #176]	@ (8006cf4 <USB_CoreInit+0xdc>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d105      	bne.n	8006c6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 faf6 	bl	800825c <USB_CoreReset>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]
 8006c74:	e01b      	b.n	8006cae <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 faea 	bl	800825c <USB_CoreReset>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ca0:	e005      	b.n	8006cae <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cae:	7fbb      	ldrb	r3, [r7, #30]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d116      	bne.n	8006ce2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <USB_CoreInit+0xe0>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f043 0206 	orr.w	r2, r3, #6
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cee:	b004      	add	sp, #16
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	ffbdffbf 	.word	0xffbdffbf
 8006cf8:	03ee0000 	.word	0x03ee0000

08006cfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d165      	bne.n	8006ddc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4a41      	ldr	r2, [pc, #260]	@ (8006e18 <USB_SetTurnaroundTime+0x11c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d906      	bls.n	8006d26 <USB_SetTurnaroundTime+0x2a>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4a40      	ldr	r2, [pc, #256]	@ (8006e1c <USB_SetTurnaroundTime+0x120>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d202      	bcs.n	8006d26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d20:	230f      	movs	r3, #15
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e062      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4a3c      	ldr	r2, [pc, #240]	@ (8006e1c <USB_SetTurnaroundTime+0x120>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d306      	bcc.n	8006d3c <USB_SetTurnaroundTime+0x40>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4a3b      	ldr	r2, [pc, #236]	@ (8006e20 <USB_SetTurnaroundTime+0x124>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d202      	bcs.n	8006d3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d36:	230e      	movs	r3, #14
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e057      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4a38      	ldr	r2, [pc, #224]	@ (8006e20 <USB_SetTurnaroundTime+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d306      	bcc.n	8006d52 <USB_SetTurnaroundTime+0x56>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4a37      	ldr	r2, [pc, #220]	@ (8006e24 <USB_SetTurnaroundTime+0x128>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d202      	bcs.n	8006d52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d4c:	230d      	movs	r3, #13
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e04c      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	4a33      	ldr	r2, [pc, #204]	@ (8006e24 <USB_SetTurnaroundTime+0x128>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d306      	bcc.n	8006d68 <USB_SetTurnaroundTime+0x6c>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4a32      	ldr	r2, [pc, #200]	@ (8006e28 <USB_SetTurnaroundTime+0x12c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d802      	bhi.n	8006d68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d62:	230c      	movs	r3, #12
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e041      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8006e28 <USB_SetTurnaroundTime+0x12c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d906      	bls.n	8006d7e <USB_SetTurnaroundTime+0x82>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4a2e      	ldr	r2, [pc, #184]	@ (8006e2c <USB_SetTurnaroundTime+0x130>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d802      	bhi.n	8006d7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d78:	230b      	movs	r3, #11
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e036      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	4a2a      	ldr	r2, [pc, #168]	@ (8006e2c <USB_SetTurnaroundTime+0x130>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d906      	bls.n	8006d94 <USB_SetTurnaroundTime+0x98>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4a29      	ldr	r2, [pc, #164]	@ (8006e30 <USB_SetTurnaroundTime+0x134>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d802      	bhi.n	8006d94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d8e:	230a      	movs	r3, #10
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	e02b      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4a26      	ldr	r2, [pc, #152]	@ (8006e30 <USB_SetTurnaroundTime+0x134>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d906      	bls.n	8006daa <USB_SetTurnaroundTime+0xae>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4a25      	ldr	r2, [pc, #148]	@ (8006e34 <USB_SetTurnaroundTime+0x138>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d202      	bcs.n	8006daa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006da4:	2309      	movs	r3, #9
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e020      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4a21      	ldr	r2, [pc, #132]	@ (8006e34 <USB_SetTurnaroundTime+0x138>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d306      	bcc.n	8006dc0 <USB_SetTurnaroundTime+0xc4>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	4a20      	ldr	r2, [pc, #128]	@ (8006e38 <USB_SetTurnaroundTime+0x13c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d802      	bhi.n	8006dc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006dba:	2308      	movs	r3, #8
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	e015      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e38 <USB_SetTurnaroundTime+0x13c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d906      	bls.n	8006dd6 <USB_SetTurnaroundTime+0xda>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4a1c      	ldr	r2, [pc, #112]	@ (8006e3c <USB_SetTurnaroundTime+0x140>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d202      	bcs.n	8006dd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006dd0:	2307      	movs	r3, #7
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	e00a      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006dd6:	2306      	movs	r3, #6
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	e007      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006de2:	2309      	movs	r3, #9
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	e001      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006de8:	2309      	movs	r3, #9
 8006dea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	029b      	lsls	r3, r3, #10
 8006e00:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006e04:	431a      	orrs	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	00d8acbf 	.word	0x00d8acbf
 8006e1c:	00e4e1c0 	.word	0x00e4e1c0
 8006e20:	00f42400 	.word	0x00f42400
 8006e24:	01067380 	.word	0x01067380
 8006e28:	011a499f 	.word	0x011a499f
 8006e2c:	01312cff 	.word	0x01312cff
 8006e30:	014ca43f 	.word	0x014ca43f
 8006e34:	016e3600 	.word	0x016e3600
 8006e38:	01a6ab1f 	.word	0x01a6ab1f
 8006e3c:	01e84800 	.word	0x01e84800

08006e40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f043 0201 	orr.w	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f023 0201 	bic.w	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d115      	bne.n	8006ed2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006eb2:	200a      	movs	r0, #10
 8006eb4:	f7fa f9f8 	bl	80012a8 <HAL_Delay>
      ms += 10U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	330a      	adds	r3, #10
 8006ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 f93b 	bl	800813a <USB_GetMode>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d01e      	beq.n	8006f08 <USB_SetCurrentMode+0x84>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ece:	d9f0      	bls.n	8006eb2 <USB_SetCurrentMode+0x2e>
 8006ed0:	e01a      	b.n	8006f08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d115      	bne.n	8006f04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ee4:	200a      	movs	r0, #10
 8006ee6:	f7fa f9df 	bl	80012a8 <HAL_Delay>
      ms += 10U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	330a      	adds	r3, #10
 8006eee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 f922 	bl	800813a <USB_GetMode>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <USB_SetCurrentMode+0x84>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f00:	d9f0      	bls.n	8006ee4 <USB_SetCurrentMode+0x60>
 8006f02:	e001      	b.n	8006f08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e005      	b.n	8006f14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f0c:	d101      	bne.n	8006f12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	e009      	b.n	8006f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	3340      	adds	r3, #64	@ 0x40
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	2200      	movs	r2, #0
 8006f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b0e      	cmp	r3, #14
 8006f54:	d9f2      	bls.n	8006f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d11c      	bne.n	8006f98 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f6c:	f043 0302 	orr.w	r3, r3, #2
 8006f70:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e005      	b.n	8006fa4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006faa:	461a      	mov	r2, r3
 8006fac:	2300      	movs	r3, #0
 8006fae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fb0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d10d      	bne.n	8006fd4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f968 	bl	8007298 <USB_SetDevSpeed>
 8006fc8:	e008      	b.n	8006fdc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fca:	2101      	movs	r1, #1
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f963 	bl	8007298 <USB_SetDevSpeed>
 8006fd2:	e003      	b.n	8006fdc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fd4:	2103      	movs	r1, #3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f95e 	bl	8007298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fdc:	2110      	movs	r1, #16
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8fa 	bl	80071d8 <USB_FlushTxFifo>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f924 	bl	800723c <USB_FlushRxFifo>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007004:	461a      	mov	r2, r3
 8007006:	2300      	movs	r3, #0
 8007008:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007010:	461a      	mov	r2, r3
 8007012:	2300      	movs	r3, #0
 8007014:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800701c:	461a      	mov	r2, r3
 800701e:	2300      	movs	r3, #0
 8007020:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007022:	2300      	movs	r3, #0
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	e043      	b.n	80070b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800703a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800703e:	d118      	bne.n	8007072 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007052:	461a      	mov	r2, r3
 8007054:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	e013      	b.n	8007084 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007068:	461a      	mov	r2, r3
 800706a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	e008      	b.n	8007084 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800707e:	461a      	mov	r2, r3
 8007080:	2300      	movs	r3, #0
 8007082:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007090:	461a      	mov	r2, r3
 8007092:	2300      	movs	r3, #0
 8007094:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a2:	461a      	mov	r2, r3
 80070a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	3301      	adds	r3, #1
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070b4:	461a      	mov	r2, r3
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d3b5      	bcc.n	8007028 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070bc:	2300      	movs	r3, #0
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	e043      	b.n	800714a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070d8:	d118      	bne.n	800710c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ec:	461a      	mov	r2, r3
 80070ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e013      	b.n	800711e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007102:	461a      	mov	r2, r3
 8007104:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e008      	b.n	800711e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007118:	461a      	mov	r2, r3
 800711a:	2300      	movs	r3, #0
 800711c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712a:	461a      	mov	r2, r3
 800712c:	2300      	movs	r3, #0
 800712e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713c:	461a      	mov	r2, r3
 800713e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007142:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	3301      	adds	r3, #1
 8007148:	613b      	str	r3, [r7, #16]
 800714a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800714e:	461a      	mov	r2, r3
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4293      	cmp	r3, r2
 8007154:	d3b5      	bcc.n	80070c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007168:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007176:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800717c:	2b00      	cmp	r3, #0
 800717e:	d105      	bne.n	800718c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f043 0210 	orr.w	r2, r3, #16
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	4b0f      	ldr	r3, [pc, #60]	@ (80071d0 <USB_DevInit+0x2b4>)
 8007192:	4313      	orrs	r3, r2
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007198:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f043 0208 	orr.w	r2, r3, #8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d105      	bne.n	80071c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <USB_DevInit+0x2b8>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071cc:	b004      	add	sp, #16
 80071ce:	4770      	bx	lr
 80071d0:	803c3800 	.word	0x803c3800
 80071d4:	40000004 	.word	0x40000004

080071d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071f2:	d901      	bls.n	80071f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e01b      	b.n	8007230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	daf2      	bge.n	80071e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	019b      	lsls	r3, r3, #6
 8007208:	f043 0220 	orr.w	r2, r3, #32
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800721c:	d901      	bls.n	8007222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e006      	b.n	8007230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b20      	cmp	r3, #32
 800722c:	d0f0      	beq.n	8007210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007254:	d901      	bls.n	800725a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e018      	b.n	800728c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	daf2      	bge.n	8007248 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2210      	movs	r2, #16
 800726a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007278:	d901      	bls.n	800727e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e006      	b.n	800728c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b10      	cmp	r3, #16
 8007288:	d0f0      	beq.n	800726c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072b8:	4313      	orrs	r3, r2
 80072ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b087      	sub	sp, #28
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0306 	and.w	r3, r3, #6
 80072e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]
 80072ee:	e00a      	b.n	8007306 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d002      	beq.n	80072fc <USB_GetDevSpeed+0x32>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b06      	cmp	r3, #6
 80072fa:	d102      	bne.n	8007302 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072fc:	2302      	movs	r3, #2
 80072fe:	75fb      	strb	r3, [r7, #23]
 8007300:	e001      	b.n	8007306 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007302:	230f      	movs	r3, #15
 8007304:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
}
 8007308:	4618      	mov	r0, r3
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d139      	bne.n	80073a4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	2101      	movs	r1, #1
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	b29b      	uxth	r3, r3
 8007348:	68f9      	ldr	r1, [r7, #12]
 800734a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800734e:	4313      	orrs	r3, r2
 8007350:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d153      	bne.n	8007410 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	791b      	ldrb	r3, [r3, #4]
 8007382:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007384:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	059b      	lsls	r3, r3, #22
 800738a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800738c:	431a      	orrs	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	0159      	lsls	r1, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	440b      	add	r3, r1
 8007396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739a:	4619      	mov	r1, r3
 800739c:	4b20      	ldr	r3, [pc, #128]	@ (8007420 <USB_ActivateEndpoint+0x10c>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	600b      	str	r3, [r1, #0]
 80073a2:	e035      	b.n	8007410 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	2101      	movs	r1, #1
 80073b6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073c2:	4313      	orrs	r3, r2
 80073c4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d119      	bne.n	8007410 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	791b      	ldrb	r3, [r3, #4]
 80073f6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073f8:	430b      	orrs	r3, r1
 80073fa:	431a      	orrs	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	0159      	lsls	r1, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	440b      	add	r3, r1
 8007404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007408:	4619      	mov	r1, r3
 800740a:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <USB_ActivateEndpoint+0x10c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	10008000 	.word	0x10008000

08007424 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	785b      	ldrb	r3, [r3, #1]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d161      	bne.n	8007504 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007456:	d11f      	bne.n	8007498 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007472:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007476:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	440a      	add	r2, r1
 800748e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007492:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007496:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	2101      	movs	r1, #1
 80074aa:	fa01 f303 	lsl.w	r3, r1, r3
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	43db      	mvns	r3, r3
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074b8:	4013      	ands	r3, r2
 80074ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f003 030f 	and.w	r3, r3, #15
 80074cc:	2101      	movs	r1, #1
 80074ce:	fa01 f303 	lsl.w	r3, r1, r3
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	43db      	mvns	r3, r3
 80074d6:	68f9      	ldr	r1, [r7, #12]
 80074d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074dc:	4013      	ands	r3, r2
 80074de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	0159      	lsls	r1, r3, #5
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	440b      	add	r3, r1
 80074f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074fa:	4619      	mov	r1, r3
 80074fc:	4b35      	ldr	r3, [pc, #212]	@ (80075d4 <USB_DeactivateEndpoint+0x1b0>)
 80074fe:	4013      	ands	r3, r2
 8007500:	600b      	str	r3, [r1, #0]
 8007502:	e060      	b.n	80075c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007516:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800751a:	d11f      	bne.n	800755c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007536:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800753a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	0151      	lsls	r1, r2, #5
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	440a      	add	r2, r1
 8007552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007556:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800755a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	2101      	movs	r1, #1
 800756e:	fa01 f303 	lsl.w	r3, r1, r3
 8007572:	041b      	lsls	r3, r3, #16
 8007574:	43db      	mvns	r3, r3
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800757c:	4013      	ands	r3, r2
 800757e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007586:	69da      	ldr	r2, [r3, #28]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	2101      	movs	r1, #1
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	041b      	lsls	r3, r3, #16
 8007598:	43db      	mvns	r3, r3
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075a0:	4013      	ands	r3, r2
 80075a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	0159      	lsls	r1, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	440b      	add	r3, r1
 80075ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075be:	4619      	mov	r1, r3
 80075c0:	4b05      	ldr	r3, [pc, #20]	@ (80075d8 <USB_DeactivateEndpoint+0x1b4>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	ec337800 	.word	0xec337800
 80075d8:	eff37800 	.word	0xeff37800

080075dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	@ 0x28
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	785b      	ldrb	r3, [r3, #1]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	f040 8181 	bne.w	8007900 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d132      	bne.n	800766c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	0159      	lsls	r1, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	440b      	add	r3, r1
 800761c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007620:	4619      	mov	r1, r3
 8007622:	4ba5      	ldr	r3, [pc, #660]	@ (80078b8 <USB_EPStartXfer+0x2dc>)
 8007624:	4013      	ands	r3, r2
 8007626:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007642:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	0159      	lsls	r1, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	440b      	add	r3, r1
 800765e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007662:	4619      	mov	r1, r3
 8007664:	4b95      	ldr	r3, [pc, #596]	@ (80078bc <USB_EPStartXfer+0x2e0>)
 8007666:	4013      	ands	r3, r2
 8007668:	610b      	str	r3, [r1, #16]
 800766a:	e092      	b.n	8007792 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007678:	691a      	ldr	r2, [r3, #16]
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	0159      	lsls	r1, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	440b      	add	r3, r1
 8007682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007686:	4619      	mov	r1, r3
 8007688:	4b8c      	ldr	r3, [pc, #560]	@ (80078bc <USB_EPStartXfer+0x2e0>)
 800768a:	4013      	ands	r3, r2
 800768c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	0159      	lsls	r1, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	440b      	add	r3, r1
 80076a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a8:	4619      	mov	r1, r3
 80076aa:	4b83      	ldr	r3, [pc, #524]	@ (80078b8 <USB_EPStartXfer+0x2dc>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d11a      	bne.n	80076ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	691a      	ldr	r2, [r3, #16]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d903      	bls.n	80076ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076e8:	6113      	str	r3, [r2, #16]
 80076ea:	e01b      	b.n	8007724 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6919      	ldr	r1, [r3, #16]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	440b      	add	r3, r1
 8007704:	1e59      	subs	r1, r3, #1
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	fbb1 f3f3 	udiv	r3, r1, r3
 800770e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007710:	4b6b      	ldr	r3, [pc, #428]	@ (80078c0 <USB_EPStartXfer+0x2e4>)
 8007712:	400b      	ands	r3, r1
 8007714:	69b9      	ldr	r1, [r7, #24]
 8007716:	0148      	lsls	r0, r1, #5
 8007718:	69f9      	ldr	r1, [r7, #28]
 800771a:	4401      	add	r1, r0
 800771c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007720:	4313      	orrs	r3, r2
 8007722:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800773a:	69b9      	ldr	r1, [r7, #24]
 800773c:	0148      	lsls	r0, r1, #5
 800773e:	69f9      	ldr	r1, [r7, #28]
 8007740:	4401      	add	r1, r0
 8007742:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007746:	4313      	orrs	r3, r2
 8007748:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	791b      	ldrb	r3, [r3, #4]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d11f      	bne.n	8007792 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800776c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007770:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800778c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007790:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d14b      	bne.n	8007830 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d009      	beq.n	80077b4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ac:	461a      	mov	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	791b      	ldrb	r3, [r3, #4]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d128      	bne.n	800780e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d110      	bne.n	80077ee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	e00f      	b.n	800780e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800780c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007828:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	e16a      	b.n	8007b06 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800784e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	791b      	ldrb	r3, [r3, #4]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d015      	beq.n	8007884 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8152 	beq.w	8007b06 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	2101      	movs	r1, #1
 8007874:	fa01 f303 	lsl.w	r3, r1, r3
 8007878:	69f9      	ldr	r1, [r7, #28]
 800787a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800787e:	4313      	orrs	r3, r2
 8007880:	634b      	str	r3, [r1, #52]	@ 0x34
 8007882:	e140      	b.n	8007b06 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007890:	2b00      	cmp	r3, #0
 8007892:	d117      	bne.n	80078c4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	e016      	b.n	80078e4 <USB_EPStartXfer+0x308>
 80078b6:	bf00      	nop
 80078b8:	e007ffff 	.word	0xe007ffff
 80078bc:	fff80000 	.word	0xfff80000
 80078c0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	69fa      	ldr	r2, [r7, #28]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	68d9      	ldr	r1, [r3, #12]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	b298      	uxth	r0, r3
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4603      	mov	r3, r0
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f9b9 	bl	8007c70 <USB_WritePacket>
 80078fe:	e102      	b.n	8007b06 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	0159      	lsls	r1, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	440b      	add	r3, r1
 8007916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800791a:	4619      	mov	r1, r3
 800791c:	4b7c      	ldr	r3, [pc, #496]	@ (8007b10 <USB_EPStartXfer+0x534>)
 800791e:	4013      	ands	r3, r2
 8007920:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792e:	691a      	ldr	r2, [r3, #16]
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	0159      	lsls	r1, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	440b      	add	r3, r1
 8007938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793c:	4619      	mov	r1, r3
 800793e:	4b75      	ldr	r3, [pc, #468]	@ (8007b14 <USB_EPStartXfer+0x538>)
 8007940:	4013      	ands	r3, r2
 8007942:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d12f      	bne.n	80079aa <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007978:	69b9      	ldr	r1, [r7, #24]
 800797a:	0148      	lsls	r0, r1, #5
 800797c:	69f9      	ldr	r1, [r7, #28]
 800797e:	4401      	add	r1, r0
 8007980:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007984:	4313      	orrs	r3, r2
 8007986:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	0151      	lsls	r1, r2, #5
 800799a:	69fa      	ldr	r2, [r7, #28]
 800799c:	440a      	add	r2, r1
 800799e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079a6:	6113      	str	r3, [r2, #16]
 80079a8:	e05f      	b.n	8007a6a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d123      	bne.n	80079fa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c8:	69b9      	ldr	r1, [r7, #24]
 80079ca:	0148      	lsls	r0, r1, #5
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	4401      	add	r1, r0
 80079d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079d4:	4313      	orrs	r3, r2
 80079d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079f6:	6113      	str	r3, [r2, #16]
 80079f8:	e037      	b.n	8007a6a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691a      	ldr	r2, [r3, #16]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	4413      	add	r3, r2
 8007a04:	1e5a      	subs	r2, r3, #1
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	8afa      	ldrh	r2, [r7, #22]
 8007a16:	fb03 f202 	mul.w	r2, r3, r2
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	8afb      	ldrh	r3, [r7, #22]
 8007a2e:	04d9      	lsls	r1, r3, #19
 8007a30:	4b39      	ldr	r3, [pc, #228]	@ (8007b18 <USB_EPStartXfer+0x53c>)
 8007a32:	400b      	ands	r3, r1
 8007a34:	69b9      	ldr	r1, [r7, #24]
 8007a36:	0148      	lsls	r0, r1, #5
 8007a38:	69f9      	ldr	r1, [r7, #28]
 8007a3a:	4401      	add	r1, r0
 8007a3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a40:	4313      	orrs	r3, r2
 8007a42:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a5a:	69b9      	ldr	r1, [r7, #24]
 8007a5c:	0148      	lsls	r0, r1, #5
 8007a5e:	69f9      	ldr	r1, [r7, #28]
 8007a60:	4401      	add	r1, r0
 8007a62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a66:	4313      	orrs	r3, r2
 8007a68:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d10d      	bne.n	8007a8c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d009      	beq.n	8007a8c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	68d9      	ldr	r1, [r3, #12]
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a88:	460a      	mov	r2, r1
 8007a8a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	791b      	ldrb	r3, [r3, #4]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d128      	bne.n	8007ae6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d110      	bne.n	8007ac6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	0151      	lsls	r1, r2, #5
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	440a      	add	r2, r1
 8007aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007abe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	e00f      	b.n	8007ae6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ae4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b00:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	fff80000 	.word	0xfff80000
 8007b14:	e007ffff 	.word	0xe007ffff
 8007b18:	1ff80000 	.word	0x1ff80000

08007b1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d14a      	bne.n	8007bd0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b52:	f040 8086 	bne.w	8007c62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	7812      	ldrb	r2, [r2, #0]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d902      	bls.n	8007bb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb2:	e056      	b.n	8007c62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bcc:	d0e7      	beq.n	8007b9e <USB_EPStopXfer+0x82>
 8007bce:	e048      	b.n	8007c62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007be8:	d13b      	bne.n	8007c62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d902      	bls.n	8007c48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	75fb      	strb	r3, [r7, #23]
          break;
 8007c46:	e00c      	b.n	8007c62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c60:	d0e7      	beq.n	8007c32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b089      	sub	sp, #36	@ 0x24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	460b      	mov	r3, r1
 8007c80:	71fb      	strb	r3, [r7, #7]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d123      	bne.n	8007cde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c96:	88bb      	ldrh	r3, [r7, #4]
 8007c98:	3303      	adds	r3, #3
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61bb      	str	r3, [r7, #24]
 8007ca2:	e018      	b.n	8007cd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	031a      	lsls	r2, r3, #12
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d3e2      	bcc.n	8007ca4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3724      	adds	r7, #36	@ 0x24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b08b      	sub	sp, #44	@ 0x2c
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d02:	88fb      	ldrh	r3, [r7, #6]
 8007d04:	089b      	lsrs	r3, r3, #2
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d12:	2300      	movs	r3, #0
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	e014      	b.n	8007d42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	3301      	adds	r3, #1
 8007d28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	3301      	adds	r3, #1
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	3301      	adds	r3, #1
 8007d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	623b      	str	r3, [r7, #32]
 8007d42:	6a3a      	ldr	r2, [r7, #32]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d3e6      	bcc.n	8007d18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d4a:	8bfb      	ldrh	r3, [r7, #30]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01e      	beq.n	8007d8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f107 0310 	add.w	r3, r7, #16
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	701a      	strb	r2, [r3, #0]
      i++;
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	3301      	adds	r3, #1
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007d82:	8bfb      	ldrh	r3, [r7, #30]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d88:	8bfb      	ldrh	r3, [r7, #30]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1ea      	bne.n	8007d64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	372c      	adds	r7, #44	@ 0x2c
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d12c      	bne.n	8007e12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	db12      	blt.n	8007df0 <USB_EPSetStall+0x54>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00f      	beq.n	8007df0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007dee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	0151      	lsls	r1, r2, #5
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	440a      	add	r2, r1
 8007e06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	e02b      	b.n	8007e6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	db12      	blt.n	8007e4a <USB_EPSetStall+0xae>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00f      	beq.n	8007e4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	0151      	lsls	r1, r2, #5
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	440a      	add	r2, r1
 8007e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d128      	bne.n	8007ee6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007eb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	791b      	ldrb	r3, [r3, #4]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d003      	beq.n	8007ec4 <USB_EPClearStall+0x4c>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	791b      	ldrb	r3, [r3, #4]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d138      	bne.n	8007f36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	e027      	b.n	8007f36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	0151      	lsls	r1, r2, #5
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	440a      	add	r2, r1
 8007efc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	791b      	ldrb	r3, [r3, #4]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d003      	beq.n	8007f16 <USB_EPClearStall+0x9e>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	791b      	ldrb	r3, [r3, #4]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d10f      	bne.n	8007f36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f62:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007f66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007f78:	68f9      	ldr	r1, [r7, #12]
 8007f7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fbe:	f023 0302 	bic.w	r3, r3, #2
 8007fc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b085      	sub	sp, #20
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007fec:	f023 0303 	bic.w	r3, r3, #3
 8007ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008000:	f043 0302 	orr.w	r3, r3, #2
 8008004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4013      	ands	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800802c:	68fb      	ldr	r3, [r7, #12]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	4013      	ands	r3, r2
 800805c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	0c1b      	lsrs	r3, r3, #16
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	4013      	ands	r3, r2
 8008090:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	b29b      	uxth	r3, r3
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b085      	sub	sp, #20
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	4013      	ands	r3, r2
 80080ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080d0:	68bb      	ldr	r3, [r7, #8]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008100:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	fa22 f303 	lsr.w	r3, r2, r3
 800810e:	01db      	lsls	r3, r3, #7
 8008110:	b2db      	uxtb	r3, r3
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4313      	orrs	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4013      	ands	r3, r2
 800812a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800812c:	68bb      	ldr	r3, [r7, #8]
}
 800812e:	4618      	mov	r0, r3
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	f003 0301 	and.w	r3, r3, #1
}
 800814a:	4618      	mov	r0, r3
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008172:	4619      	mov	r1, r3
 8008174:	4b09      	ldr	r3, [pc, #36]	@ (800819c <USB_ActivateSetup+0x44>)
 8008176:	4013      	ands	r3, r2
 8008178:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800818c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	fffff800 	.word	0xfffff800

080081a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	460b      	mov	r3, r1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	333c      	adds	r3, #60	@ 0x3c
 80081b6:	3304      	adds	r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4a26      	ldr	r2, [pc, #152]	@ (8008258 <USB_EP0_OutStart+0xb8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d90a      	bls.n	80081da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081d4:	d101      	bne.n	80081da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e037      	b.n	800824a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e0:	461a      	mov	r2, r3
 80081e2:	2300      	movs	r3, #0
 80081e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008208:	f043 0318 	orr.w	r3, r3, #24
 800820c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800821c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008220:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d10f      	bne.n	8008248 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008242:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	4f54300a 	.word	0x4f54300a

0800825c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008274:	d901      	bls.n	800827a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e01b      	b.n	80082b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	daf2      	bge.n	8008268 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f043 0201 	orr.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800829e:	d901      	bls.n	80082a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e006      	b.n	80082b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d0f0      	beq.n	8008292 <USB_CoreReset+0x36>

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
	...

080082c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80082d0:	f002 fcfe 	bl	800acd0 <USBD_static_malloc>
 80082d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	32b0      	adds	r2, #176	@ 0xb0
 80082e6:	2100      	movs	r1, #0
 80082e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082ec:	2302      	movs	r3, #2
 80082ee:	e0d4      	b.n	800849a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80082f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80082f4:	2100      	movs	r1, #0
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f002 fd4e 	bl	800ad98 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	32b0      	adds	r2, #176	@ 0xb0
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32b0      	adds	r2, #176	@ 0xb0
 8008316:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7c1b      	ldrb	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d138      	bne.n	800839a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008328:	4b5e      	ldr	r3, [pc, #376]	@ (80084a4 <USBD_CDC_Init+0x1e4>)
 800832a:	7819      	ldrb	r1, [r3, #0]
 800832c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008330:	2202      	movs	r2, #2
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f002 fba9 	bl	800aa8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008338:	4b5a      	ldr	r3, [pc, #360]	@ (80084a4 <USBD_CDC_Init+0x1e4>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f003 020f 	and.w	r2, r3, #15
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	3324      	adds	r3, #36	@ 0x24
 800834e:	2201      	movs	r2, #1
 8008350:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008352:	4b55      	ldr	r3, [pc, #340]	@ (80084a8 <USBD_CDC_Init+0x1e8>)
 8008354:	7819      	ldrb	r1, [r3, #0]
 8008356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800835a:	2202      	movs	r2, #2
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f002 fb94 	bl	800aa8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008362:	4b51      	ldr	r3, [pc, #324]	@ (80084a8 <USBD_CDC_Init+0x1e8>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	f003 020f 	and.w	r2, r3, #15
 800836a:	6879      	ldr	r1, [r7, #4]
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	440b      	add	r3, r1
 8008376:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800837a:	2201      	movs	r2, #1
 800837c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800837e:	4b4b      	ldr	r3, [pc, #300]	@ (80084ac <USBD_CDC_Init+0x1ec>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	f003 020f 	and.w	r2, r3, #15
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	3326      	adds	r3, #38	@ 0x26
 8008394:	2210      	movs	r2, #16
 8008396:	801a      	strh	r2, [r3, #0]
 8008398:	e035      	b.n	8008406 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800839a:	4b42      	ldr	r3, [pc, #264]	@ (80084a4 <USBD_CDC_Init+0x1e4>)
 800839c:	7819      	ldrb	r1, [r3, #0]
 800839e:	2340      	movs	r3, #64	@ 0x40
 80083a0:	2202      	movs	r2, #2
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f002 fb71 	bl	800aa8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083a8:	4b3e      	ldr	r3, [pc, #248]	@ (80084a4 <USBD_CDC_Init+0x1e4>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	f003 020f 	and.w	r2, r3, #15
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	3324      	adds	r3, #36	@ 0x24
 80083be:	2201      	movs	r2, #1
 80083c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083c2:	4b39      	ldr	r3, [pc, #228]	@ (80084a8 <USBD_CDC_Init+0x1e8>)
 80083c4:	7819      	ldrb	r1, [r3, #0]
 80083c6:	2340      	movs	r3, #64	@ 0x40
 80083c8:	2202      	movs	r2, #2
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f002 fb5d 	bl	800aa8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083d0:	4b35      	ldr	r3, [pc, #212]	@ (80084a8 <USBD_CDC_Init+0x1e8>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 020f 	and.w	r2, r3, #15
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083e8:	2201      	movs	r2, #1
 80083ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083ec:	4b2f      	ldr	r3, [pc, #188]	@ (80084ac <USBD_CDC_Init+0x1ec>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	3326      	adds	r3, #38	@ 0x26
 8008402:	2210      	movs	r2, #16
 8008404:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008406:	4b29      	ldr	r3, [pc, #164]	@ (80084ac <USBD_CDC_Init+0x1ec>)
 8008408:	7819      	ldrb	r1, [r3, #0]
 800840a:	2308      	movs	r3, #8
 800840c:	2203      	movs	r2, #3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f002 fb3b 	bl	800aa8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008414:	4b25      	ldr	r3, [pc, #148]	@ (80084ac <USBD_CDC_Init+0x1ec>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 020f 	and.w	r2, r3, #15
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	3324      	adds	r3, #36	@ 0x24
 800842a:	2201      	movs	r2, #1
 800842c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	33b0      	adds	r3, #176	@ 0xb0
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008464:	2302      	movs	r3, #2
 8008466:	e018      	b.n	800849a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7c1b      	ldrb	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008470:	4b0d      	ldr	r3, [pc, #52]	@ (80084a8 <USBD_CDC_Init+0x1e8>)
 8008472:	7819      	ldrb	r1, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800847a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f002 fbf2 	bl	800ac68 <USBD_LL_PrepareReceive>
 8008484:	e008      	b.n	8008498 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008486:	4b08      	ldr	r3, [pc, #32]	@ (80084a8 <USBD_CDC_Init+0x1e8>)
 8008488:	7819      	ldrb	r1, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008490:	2340      	movs	r3, #64	@ 0x40
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f002 fbe8 	bl	800ac68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	240000b3 	.word	0x240000b3
 80084a8:	240000b4 	.word	0x240000b4
 80084ac:	240000b5 	.word	0x240000b5

080084b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084bc:	4b3a      	ldr	r3, [pc, #232]	@ (80085a8 <USBD_CDC_DeInit+0xf8>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f002 fb07 	bl	800aad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084c8:	4b37      	ldr	r3, [pc, #220]	@ (80085a8 <USBD_CDC_DeInit+0xf8>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	f003 020f 	and.w	r2, r3, #15
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3324      	adds	r3, #36	@ 0x24
 80084de:	2200      	movs	r2, #0
 80084e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80084e2:	4b32      	ldr	r3, [pc, #200]	@ (80085ac <USBD_CDC_DeInit+0xfc>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f002 faf4 	bl	800aad6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80084ee:	4b2f      	ldr	r3, [pc, #188]	@ (80085ac <USBD_CDC_DeInit+0xfc>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f003 020f 	and.w	r2, r3, #15
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008506:	2200      	movs	r2, #0
 8008508:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800850a:	4b29      	ldr	r3, [pc, #164]	@ (80085b0 <USBD_CDC_DeInit+0x100>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f002 fae0 	bl	800aad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008516:	4b26      	ldr	r3, [pc, #152]	@ (80085b0 <USBD_CDC_DeInit+0x100>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 020f 	and.w	r2, r3, #15
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	3324      	adds	r3, #36	@ 0x24
 800852c:	2200      	movs	r2, #0
 800852e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008530:	4b1f      	ldr	r3, [pc, #124]	@ (80085b0 <USBD_CDC_DeInit+0x100>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f003 020f 	and.w	r2, r3, #15
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	3326      	adds	r3, #38	@ 0x26
 8008546:	2200      	movs	r2, #0
 8008548:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	32b0      	adds	r2, #176	@ 0xb0
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01f      	beq.n	800859c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	33b0      	adds	r3, #176	@ 0xb0
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	32b0      	adds	r2, #176	@ 0xb0
 800857a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857e:	4618      	mov	r0, r3
 8008580:	f002 fbb4 	bl	800acec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32b0      	adds	r2, #176	@ 0xb0
 800858e:	2100      	movs	r1, #0
 8008590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	240000b3 	.word	0x240000b3
 80085ac:	240000b4 	.word	0x240000b4
 80085b0:	240000b5 	.word	0x240000b5

080085b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	32b0      	adds	r2, #176	@ 0xb0
 80085c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e0bf      	b.n	8008764 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d050      	beq.n	8008692 <USBD_CDC_Setup+0xde>
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	f040 80af 	bne.w	8008754 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	88db      	ldrh	r3, [r3, #6]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d03a      	beq.n	8008674 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	b25b      	sxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	da1b      	bge.n	8008640 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	33b0      	adds	r3, #176	@ 0xb0
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800861e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	88d2      	ldrh	r2, [r2, #6]
 8008624:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	88db      	ldrh	r3, [r3, #6]
 800862a:	2b07      	cmp	r3, #7
 800862c:	bf28      	it	cs
 800862e:	2307      	movcs	r3, #7
 8008630:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	89fa      	ldrh	r2, [r7, #14]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fdbd 	bl	800a1b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800863e:	e090      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	785a      	ldrb	r2, [r3, #1]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008650:	d803      	bhi.n	800865a <USBD_CDC_Setup+0xa6>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	88db      	ldrh	r3, [r3, #6]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	e000      	b.n	800865c <USBD_CDC_Setup+0xa8>
 800865a:	2240      	movs	r2, #64	@ 0x40
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008662:	6939      	ldr	r1, [r7, #16]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800866a:	461a      	mov	r2, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fdcf 	bl	800a210 <USBD_CtlPrepareRx>
      break;
 8008672:	e076      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	33b0      	adds	r3, #176	@ 0xb0
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	7850      	ldrb	r0, [r2, #1]
 800868a:	2200      	movs	r2, #0
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	4798      	blx	r3
      break;
 8008690:	e067      	b.n	8008762 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b0b      	cmp	r3, #11
 8008698:	d851      	bhi.n	800873e <USBD_CDC_Setup+0x18a>
 800869a:	a201      	add	r2, pc, #4	@ (adr r2, 80086a0 <USBD_CDC_Setup+0xec>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086d1 	.word	0x080086d1
 80086a4:	0800874d 	.word	0x0800874d
 80086a8:	0800873f 	.word	0x0800873f
 80086ac:	0800873f 	.word	0x0800873f
 80086b0:	0800873f 	.word	0x0800873f
 80086b4:	0800873f 	.word	0x0800873f
 80086b8:	0800873f 	.word	0x0800873f
 80086bc:	0800873f 	.word	0x0800873f
 80086c0:	0800873f 	.word	0x0800873f
 80086c4:	0800873f 	.word	0x0800873f
 80086c8:	080086fb 	.word	0x080086fb
 80086cc:	08008725 	.word	0x08008725
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d107      	bne.n	80086ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086dc:	f107 030a 	add.w	r3, r7, #10
 80086e0:	2202      	movs	r2, #2
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fd67 	bl	800a1b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086ea:	e032      	b.n	8008752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 fce5 	bl	800a0be <USBD_CtlError>
            ret = USBD_FAIL;
 80086f4:	2303      	movs	r3, #3
 80086f6:	75fb      	strb	r3, [r7, #23]
          break;
 80086f8:	e02b      	b.n	8008752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d107      	bne.n	8008716 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008706:	f107 030d 	add.w	r3, r7, #13
 800870a:	2201      	movs	r2, #1
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fd52 	bl	800a1b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008714:	e01d      	b.n	8008752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 fcd0 	bl	800a0be <USBD_CtlError>
            ret = USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	75fb      	strb	r3, [r7, #23]
          break;
 8008722:	e016      	b.n	8008752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b03      	cmp	r3, #3
 800872e:	d00f      	beq.n	8008750 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fcc3 	bl	800a0be <USBD_CtlError>
            ret = USBD_FAIL;
 8008738:	2303      	movs	r3, #3
 800873a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800873c:	e008      	b.n	8008750 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 fcbc 	bl	800a0be <USBD_CtlError>
          ret = USBD_FAIL;
 8008746:	2303      	movs	r3, #3
 8008748:	75fb      	strb	r3, [r7, #23]
          break;
 800874a:	e002      	b.n	8008752 <USBD_CDC_Setup+0x19e>
          break;
 800874c:	bf00      	nop
 800874e:	e008      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
          break;
 8008750:	bf00      	nop
      }
      break;
 8008752:	e006      	b.n	8008762 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 fcb1 	bl	800a0be <USBD_CtlError>
      ret = USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	75fb      	strb	r3, [r7, #23]
      break;
 8008760:	bf00      	nop
  }

  return (uint8_t)ret;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800877e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	32b0      	adds	r2, #176	@ 0xb0
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008792:	2303      	movs	r3, #3
 8008794:	e065      	b.n	8008862 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	32b0      	adds	r2, #176	@ 0xb0
 80087a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	3318      	adds	r3, #24
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d02f      	beq.n	8008820 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	f003 020f 	and.w	r2, r3, #15
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	3318      	adds	r3, #24
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	f003 010f 	and.w	r1, r3, #15
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	460b      	mov	r3, r1
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	440b      	add	r3, r1
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4403      	add	r3, r0
 80087e8:	331c      	adds	r3, #28
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d112      	bne.n	8008820 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	3318      	adds	r3, #24
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008812:	78f9      	ldrb	r1, [r7, #3]
 8008814:	2300      	movs	r3, #0
 8008816:	2200      	movs	r2, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f002 fa04 	bl	800ac26 <USBD_LL_Transmit>
 800881e:	e01f      	b.n	8008860 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	33b0      	adds	r3, #176	@ 0xb0
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d010      	beq.n	8008860 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	33b0      	adds	r3, #176	@ 0xb0
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	32b0      	adds	r2, #176	@ 0xb0
 8008880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008884:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	32b0      	adds	r2, #176	@ 0xb0
 8008890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	e01a      	b.n	80088d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 fa02 	bl	800acaa <USBD_LL_GetRxDataSize>
 80088a6:	4602      	mov	r2, r0
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	33b0      	adds	r3, #176	@ 0xb0
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80088cc:	4611      	mov	r1, r2
 80088ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	32b0      	adds	r2, #176	@ 0xb0
 80088ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e024      	b.n	8008946 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	33b0      	adds	r3, #176	@ 0xb0
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d019      	beq.n	8008944 <USBD_CDC_EP0_RxReady+0x6a>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008916:	2bff      	cmp	r3, #255	@ 0xff
 8008918:	d014      	beq.n	8008944 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	33b0      	adds	r3, #176	@ 0xb0
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008932:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800893a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	22ff      	movs	r2, #255	@ 0xff
 8008940:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008958:	2182      	movs	r1, #130	@ 0x82
 800895a:	4818      	ldr	r0, [pc, #96]	@ (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800895c:	f000 fd4f 	bl	80093fe <USBD_GetEpDesc>
 8008960:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008962:	2101      	movs	r1, #1
 8008964:	4815      	ldr	r0, [pc, #84]	@ (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008966:	f000 fd4a 	bl	80093fe <USBD_GetEpDesc>
 800896a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800896c:	2181      	movs	r1, #129	@ 0x81
 800896e:	4813      	ldr	r0, [pc, #76]	@ (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008970:	f000 fd45 	bl	80093fe <USBD_GetEpDesc>
 8008974:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2210      	movs	r2, #16
 8008980:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d006      	beq.n	8008996 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2200      	movs	r2, #0
 800898c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008990:	711a      	strb	r2, [r3, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089a4:	711a      	strb	r2, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2243      	movs	r2, #67	@ 0x43
 80089ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089b0:	4b02      	ldr	r3, [pc, #8]	@ (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	24000070 	.word	0x24000070

080089c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089c8:	2182      	movs	r1, #130	@ 0x82
 80089ca:	4818      	ldr	r0, [pc, #96]	@ (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089cc:	f000 fd17 	bl	80093fe <USBD_GetEpDesc>
 80089d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089d2:	2101      	movs	r1, #1
 80089d4:	4815      	ldr	r0, [pc, #84]	@ (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089d6:	f000 fd12 	bl	80093fe <USBD_GetEpDesc>
 80089da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089dc:	2181      	movs	r1, #129	@ 0x81
 80089de:	4813      	ldr	r0, [pc, #76]	@ (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089e0:	f000 fd0d 	bl	80093fe <USBD_GetEpDesc>
 80089e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2210      	movs	r2, #16
 80089f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	2200      	movs	r2, #0
 80089fc:	711a      	strb	r2, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f042 0202 	orr.w	r2, r2, #2
 8008a04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d006      	beq.n	8008a1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	711a      	strb	r2, [r3, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f042 0202 	orr.w	r2, r2, #2
 8008a18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2243      	movs	r2, #67	@ 0x43
 8008a1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a20:	4b02      	ldr	r3, [pc, #8]	@ (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	24000070 	.word	0x24000070

08008a30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a38:	2182      	movs	r1, #130	@ 0x82
 8008a3a:	4818      	ldr	r0, [pc, #96]	@ (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a3c:	f000 fcdf 	bl	80093fe <USBD_GetEpDesc>
 8008a40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a42:	2101      	movs	r1, #1
 8008a44:	4815      	ldr	r0, [pc, #84]	@ (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a46:	f000 fcda 	bl	80093fe <USBD_GetEpDesc>
 8008a4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a4c:	2181      	movs	r1, #129	@ 0x81
 8008a4e:	4813      	ldr	r0, [pc, #76]	@ (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a50:	f000 fcd5 	bl	80093fe <USBD_GetEpDesc>
 8008a54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2210      	movs	r2, #16
 8008a60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a70:	711a      	strb	r2, [r3, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d006      	beq.n	8008a8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a84:	711a      	strb	r2, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2243      	movs	r2, #67	@ 0x43
 8008a8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a90:	4b02      	ldr	r3, [pc, #8]	@ (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	24000070 	.word	0x24000070

08008aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	220a      	movs	r2, #10
 8008aac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008aae:	4b03      	ldr	r3, [pc, #12]	@ (8008abc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	2400002c 	.word	0x2400002c

08008ac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e009      	b.n	8008ae8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	33b0      	adds	r3, #176	@ 0xb0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	32b0      	adds	r2, #176	@ 0xb0
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e008      	b.n	8008b2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	32b0      	adds	r2, #176	@ 0xb0
 8008b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e004      	b.n	8008b66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32b0      	adds	r2, #176	@ 0xb0
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e025      	b.n	8008be6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d11f      	bne.n	8008be4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008bac:	4b10      	ldr	r3, [pc, #64]	@ (8008bf0 <USBD_CDC_TransmitPacket+0x7c>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f003 020f 	and.w	r2, r3, #15
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4403      	add	r3, r0
 8008bc6:	3318      	adds	r3, #24
 8008bc8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008bca:	4b09      	ldr	r3, [pc, #36]	@ (8008bf0 <USBD_CDC_TransmitPacket+0x7c>)
 8008bcc:	7819      	ldrb	r1, [r3, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f002 f823 	bl	800ac26 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	240000b3 	.word	0x240000b3

08008bf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	32b0      	adds	r2, #176	@ 0xb0
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	32b0      	adds	r2, #176	@ 0xb0
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e018      	b.n	8008c54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	7c1b      	ldrb	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10a      	bne.n	8008c40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c5c <USBD_CDC_ReceivePacket+0x68>)
 8008c2c:	7819      	ldrb	r1, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f002 f815 	bl	800ac68 <USBD_LL_PrepareReceive>
 8008c3e:	e008      	b.n	8008c52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c40:	4b06      	ldr	r3, [pc, #24]	@ (8008c5c <USBD_CDC_ReceivePacket+0x68>)
 8008c42:	7819      	ldrb	r1, [r3, #0]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c4a:	2340      	movs	r3, #64	@ 0x40
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f002 f80b 	bl	800ac68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	240000b4 	.word	0x240000b4

08008c60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e01f      	b.n	8008cb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	79fa      	ldrb	r2, [r7, #7]
 8008caa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f001 fe81 	bl	800a9b4 <USBD_LL_Init>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e025      	b.n	8008d24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	32ae      	adds	r2, #174	@ 0xae
 8008cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00f      	beq.n	8008d14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	32ae      	adds	r2, #174	@ 0xae
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d04:	f107 020e 	add.w	r2, r7, #14
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fe8d 	bl	800aa54 <USBD_LL_Start>
 8008d3a:	4603      	mov	r3, r0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	460b      	mov	r3, r1
 8008d64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d009      	beq.n	8008d88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	78fa      	ldrb	r2, [r7, #3]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	4611      	mov	r1, r2
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	4798      	blx	r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008db8:	2303      	movs	r3, #3
 8008dba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 f936 	bl	800a04a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008dec:	461a      	mov	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dfa:	f003 031f 	and.w	r3, r3, #31
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d01a      	beq.n	8008e38 <USBD_LL_SetupStage+0x72>
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d822      	bhi.n	8008e4c <USBD_LL_SetupStage+0x86>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <USBD_LL_SetupStage+0x4a>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d00a      	beq.n	8008e24 <USBD_LL_SetupStage+0x5e>
 8008e0e:	e01d      	b.n	8008e4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fb63 	bl	80094e4 <USBD_StdDevReq>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	73fb      	strb	r3, [r7, #15]
      break;
 8008e22:	e020      	b.n	8008e66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fbcb 	bl	80095c8 <USBD_StdItfReq>
 8008e32:	4603      	mov	r3, r0
 8008e34:	73fb      	strb	r3, [r7, #15]
      break;
 8008e36:	e016      	b.n	8008e66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fc2d 	bl	80096a0 <USBD_StdEPReq>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4a:	e00c      	b.n	8008e66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e52:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fe5a 	bl	800ab14 <USBD_LL_StallEP>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
      break;
 8008e64:	bf00      	nop
  }

  return ret;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e82:	7afb      	ldrb	r3, [r7, #11]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d16e      	bne.n	8008f66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	f040 8098 	bne.w	8008fcc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d913      	bls.n	8008ed0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	1ad2      	subs	r2, r2, r3
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	bf28      	it	cs
 8008ec2:	4613      	movcs	r3, r2
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f001 f9be 	bl	800a24a <USBD_CtlContinueRx>
 8008ece:	e07d      	b.n	8008fcc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d014      	beq.n	8008f08 <USBD_LL_DataOutStage+0x98>
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d81d      	bhi.n	8008f1e <USBD_LL_DataOutStage+0xae>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <USBD_LL_DataOutStage+0x7c>
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d003      	beq.n	8008ef2 <USBD_LL_DataOutStage+0x82>
 8008eea:	e018      	b.n	8008f1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	75bb      	strb	r3, [r7, #22]
            break;
 8008ef0:	e018      	b.n	8008f24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	4619      	mov	r1, r3
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 fa64 	bl	80093ca <USBD_CoreFindIF>
 8008f02:	4603      	mov	r3, r0
 8008f04:	75bb      	strb	r3, [r7, #22]
            break;
 8008f06:	e00d      	b.n	8008f24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	4619      	mov	r1, r3
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fa66 	bl	80093e4 <USBD_CoreFindEP>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75bb      	strb	r3, [r7, #22]
            break;
 8008f1c:	e002      	b.n	8008f24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	75bb      	strb	r3, [r7, #22]
            break;
 8008f22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008f24:	7dbb      	ldrb	r3, [r7, #22]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d119      	bne.n	8008f5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d113      	bne.n	8008f5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008f36:	7dba      	ldrb	r2, [r7, #22]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	32ae      	adds	r2, #174	@ 0xae
 8008f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00b      	beq.n	8008f5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008f46:	7dba      	ldrb	r2, [r7, #22]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f4e:	7dba      	ldrb	r2, [r7, #22]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	32ae      	adds	r2, #174	@ 0xae
 8008f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f001 f984 	bl	800a26c <USBD_CtlSendStatus>
 8008f64:	e032      	b.n	8008fcc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f66:	7afb      	ldrb	r3, [r7, #11]
 8008f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 fa37 	bl	80093e4 <USBD_CoreFindEP>
 8008f76:	4603      	mov	r3, r0
 8008f78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f7a:	7dbb      	ldrb	r3, [r7, #22]
 8008f7c:	2bff      	cmp	r3, #255	@ 0xff
 8008f7e:	d025      	beq.n	8008fcc <USBD_LL_DataOutStage+0x15c>
 8008f80:	7dbb      	ldrb	r3, [r7, #22]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d122      	bne.n	8008fcc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d117      	bne.n	8008fc2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f92:	7dba      	ldrb	r2, [r7, #22]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	32ae      	adds	r2, #174	@ 0xae
 8008f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00f      	beq.n	8008fc2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008fa2:	7dba      	ldrb	r2, [r7, #22]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008faa:	7dba      	ldrb	r2, [r7, #22]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	32ae      	adds	r2, #174	@ 0xae
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	7afa      	ldrb	r2, [r7, #11]
 8008fb8:	4611      	mov	r1, r2
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	4798      	blx	r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	e000      	b.n	8008fce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008fe4:	7afb      	ldrb	r3, [r7, #11]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d16f      	bne.n	80090ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3314      	adds	r3, #20
 8008fee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d15a      	bne.n	80090b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	429a      	cmp	r2, r3
 8009004:	d914      	bls.n	8009030 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	461a      	mov	r2, r3
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f001 f8e6 	bl	800a1ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009022:	2300      	movs	r3, #0
 8009024:	2200      	movs	r2, #0
 8009026:	2100      	movs	r1, #0
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f001 fe1d 	bl	800ac68 <USBD_LL_PrepareReceive>
 800902e:	e03f      	b.n	80090b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	68da      	ldr	r2, [r3, #12]
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	429a      	cmp	r2, r3
 800903a:	d11c      	bne.n	8009076 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009044:	429a      	cmp	r2, r3
 8009046:	d316      	bcc.n	8009076 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009052:	429a      	cmp	r2, r3
 8009054:	d20f      	bcs.n	8009076 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009056:	2200      	movs	r2, #0
 8009058:	2100      	movs	r1, #0
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f001 f8c7 	bl	800a1ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009068:	2300      	movs	r3, #0
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f001 fdfa 	bl	800ac68 <USBD_LL_PrepareReceive>
 8009074:	e01c      	b.n	80090b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b03      	cmp	r3, #3
 8009080:	d10f      	bne.n	80090a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d009      	beq.n	80090a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090a2:	2180      	movs	r1, #128	@ 0x80
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f001 fd35 	bl	800ab14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f001 f8f1 	bl	800a292 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d03a      	beq.n	8009130 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f7ff fe42 	bl	8008d44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80090c8:	e032      	b.n	8009130 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	4619      	mov	r1, r3
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 f985 	bl	80093e4 <USBD_CoreFindEP>
 80090da:	4603      	mov	r3, r0
 80090dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	2bff      	cmp	r3, #255	@ 0xff
 80090e2:	d025      	beq.n	8009130 <USBD_LL_DataInStage+0x15a>
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d122      	bne.n	8009130 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d11c      	bne.n	8009130 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090f6:	7dfa      	ldrb	r2, [r7, #23]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	32ae      	adds	r2, #174	@ 0xae
 80090fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d014      	beq.n	8009130 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009106:	7dfa      	ldrb	r2, [r7, #23]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800910e:	7dfa      	ldrb	r2, [r7, #23]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	32ae      	adds	r2, #174	@ 0xae
 8009114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	7afa      	ldrb	r2, [r7, #11]
 800911c:	4611      	mov	r1, r2
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	4798      	blx	r3
 8009122:	4603      	mov	r3, r0
 8009124:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009126:	7dbb      	ldrb	r3, [r7, #22]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800912c:	7dbb      	ldrb	r3, [r7, #22]
 800912e:	e000      	b.n	8009132 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d014      	beq.n	80091a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00e      	beq.n	80091a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6852      	ldr	r2, [r2, #4]
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	4611      	mov	r1, r2
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091a0:	2340      	movs	r3, #64	@ 0x40
 80091a2:	2200      	movs	r2, #0
 80091a4:	2100      	movs	r1, #0
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f001 fc6f 	bl	800aa8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2240      	movs	r2, #64	@ 0x40
 80091b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091bc:	2340      	movs	r3, #64	@ 0x40
 80091be:	2200      	movs	r2, #0
 80091c0:	2180      	movs	r1, #128	@ 0x80
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fc61 	bl	800aa8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2240      	movs	r2, #64	@ 0x40
 80091d2:	621a      	str	r2, [r3, #32]

  return ret;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b04      	cmp	r3, #4
 8009210:	d006      	beq.n	8009220 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009218:	b2da      	uxtb	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2204      	movs	r2, #4
 8009224:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b04      	cmp	r3, #4
 8009248:	d106      	bne.n	8009258 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009250:	b2da      	uxtb	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b03      	cmp	r3, #3
 8009278:	d110      	bne.n	800929c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	32ae      	adds	r2, #174	@ 0xae
 80092bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e01c      	b.n	8009302 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d115      	bne.n	8009300 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	32ae      	adds	r2, #174	@ 0xae
 80092de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	32ae      	adds	r2, #174	@ 0xae
 80092f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4611      	mov	r1, r2
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	32ae      	adds	r2, #174	@ 0xae
 8009320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009328:	2303      	movs	r3, #3
 800932a:	e01c      	b.n	8009366 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b03      	cmp	r3, #3
 8009336:	d115      	bne.n	8009364 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	32ae      	adds	r2, #174	@ 0xae
 8009342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	32ae      	adds	r2, #174	@ 0xae
 8009356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	4611      	mov	r1, r2
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00e      	beq.n	80093c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6852      	ldr	r2, [r2, #4]
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	4611      	mov	r1, r2
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	4798      	blx	r3
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80093bc:	2303      	movs	r3, #3
 80093be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009412:	2300      	movs	r3, #0
 8009414:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	885b      	ldrh	r3, [r3, #2]
 800941a:	b29b      	uxth	r3, r3
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	7812      	ldrb	r2, [r2, #0]
 8009420:	4293      	cmp	r3, r2
 8009422:	d91f      	bls.n	8009464 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800942a:	e013      	b.n	8009454 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800942c:	f107 030a 	add.w	r3, r7, #10
 8009430:	4619      	mov	r1, r3
 8009432:	6978      	ldr	r0, [r7, #20]
 8009434:	f000 f81b 	bl	800946e <USBD_GetNextDesc>
 8009438:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	2b05      	cmp	r3, #5
 8009440:	d108      	bne.n	8009454 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	789b      	ldrb	r3, [r3, #2]
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	429a      	cmp	r2, r3
 800944e:	d008      	beq.n	8009462 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009450:	2300      	movs	r3, #0
 8009452:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	885b      	ldrh	r3, [r3, #2]
 8009458:	b29a      	uxth	r2, r3
 800945a:	897b      	ldrh	r3, [r7, #10]
 800945c:	429a      	cmp	r2, r3
 800945e:	d8e5      	bhi.n	800942c <USBD_GetEpDesc+0x2e>
 8009460:	e000      	b.n	8009464 <USBD_GetEpDesc+0x66>
          break;
 8009462:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009464:	693b      	ldr	r3, [r7, #16]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	4413      	add	r3, r2
 8009486:	b29a      	uxth	r2, r3
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	461a      	mov	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4413      	add	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009498:	68fb      	ldr	r3, [r7, #12]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b087      	sub	sp, #28
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	3301      	adds	r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80094c4:	8a3b      	ldrh	r3, [r7, #16]
 80094c6:	021b      	lsls	r3, r3, #8
 80094c8:	b21a      	sxth	r2, r3
 80094ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	b21b      	sxth	r3, r3
 80094d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094d4:	89fb      	ldrh	r3, [r7, #14]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094fa:	2b40      	cmp	r3, #64	@ 0x40
 80094fc:	d005      	beq.n	800950a <USBD_StdDevReq+0x26>
 80094fe:	2b40      	cmp	r3, #64	@ 0x40
 8009500:	d857      	bhi.n	80095b2 <USBD_StdDevReq+0xce>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00f      	beq.n	8009526 <USBD_StdDevReq+0x42>
 8009506:	2b20      	cmp	r3, #32
 8009508:	d153      	bne.n	80095b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	32ae      	adds	r2, #174	@ 0xae
 8009514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	4798      	blx	r3
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
      break;
 8009524:	e04a      	b.n	80095bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	2b09      	cmp	r3, #9
 800952c:	d83b      	bhi.n	80095a6 <USBD_StdDevReq+0xc2>
 800952e:	a201      	add	r2, pc, #4	@ (adr r2, 8009534 <USBD_StdDevReq+0x50>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	08009589 	.word	0x08009589
 8009538:	0800959d 	.word	0x0800959d
 800953c:	080095a7 	.word	0x080095a7
 8009540:	08009593 	.word	0x08009593
 8009544:	080095a7 	.word	0x080095a7
 8009548:	08009567 	.word	0x08009567
 800954c:	0800955d 	.word	0x0800955d
 8009550:	080095a7 	.word	0x080095a7
 8009554:	0800957f 	.word	0x0800957f
 8009558:	08009571 	.word	0x08009571
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa3c 	bl	80099dc <USBD_GetDescriptor>
          break;
 8009564:	e024      	b.n	80095b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fbcb 	bl	8009d04 <USBD_SetAddress>
          break;
 800956e:	e01f      	b.n	80095b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fc0a 	bl	8009d8c <USBD_SetConfig>
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]
          break;
 800957c:	e018      	b.n	80095b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fcad 	bl	8009ee0 <USBD_GetConfig>
          break;
 8009586:	e013      	b.n	80095b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fcde 	bl	8009f4c <USBD_GetStatus>
          break;
 8009590:	e00e      	b.n	80095b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fd0d 	bl	8009fb4 <USBD_SetFeature>
          break;
 800959a:	e009      	b.n	80095b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fd31 	bl	800a006 <USBD_ClrFeature>
          break;
 80095a4:	e004      	b.n	80095b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fd88 	bl	800a0be <USBD_CtlError>
          break;
 80095ae:	bf00      	nop
      }
      break;
 80095b0:	e004      	b.n	80095bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fd82 	bl	800a0be <USBD_CtlError>
      break;
 80095ba:	bf00      	nop
  }

  return ret;
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop

080095c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095de:	2b40      	cmp	r3, #64	@ 0x40
 80095e0:	d005      	beq.n	80095ee <USBD_StdItfReq+0x26>
 80095e2:	2b40      	cmp	r3, #64	@ 0x40
 80095e4:	d852      	bhi.n	800968c <USBD_StdItfReq+0xc4>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <USBD_StdItfReq+0x26>
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d14e      	bne.n	800968c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d840      	bhi.n	800967e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	889b      	ldrh	r3, [r3, #4]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b01      	cmp	r3, #1
 8009604:	d836      	bhi.n	8009674 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff fedb 	bl	80093ca <USBD_CoreFindIF>
 8009614:	4603      	mov	r3, r0
 8009616:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	2bff      	cmp	r3, #255	@ 0xff
 800961c:	d01d      	beq.n	800965a <USBD_StdItfReq+0x92>
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d11a      	bne.n	800965a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009624:	7bba      	ldrb	r2, [r7, #14]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	32ae      	adds	r2, #174	@ 0xae
 800962a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00f      	beq.n	8009654 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009634:	7bba      	ldrb	r2, [r7, #14]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800963c:	7bba      	ldrb	r2, [r7, #14]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	32ae      	adds	r2, #174	@ 0xae
 8009642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	4798      	blx	r3
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009652:	e004      	b.n	800965e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009654:	2303      	movs	r3, #3
 8009656:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009658:	e001      	b.n	800965e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800965a:	2303      	movs	r3, #3
 800965c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	88db      	ldrh	r3, [r3, #6]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d110      	bne.n	8009688 <USBD_StdItfReq+0xc0>
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10d      	bne.n	8009688 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fdfd 	bl	800a26c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009672:	e009      	b.n	8009688 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fd21 	bl	800a0be <USBD_CtlError>
          break;
 800967c:	e004      	b.n	8009688 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fd1c 	bl	800a0be <USBD_CtlError>
          break;
 8009686:	e000      	b.n	800968a <USBD_StdItfReq+0xc2>
          break;
 8009688:	bf00      	nop
      }
      break;
 800968a:	e004      	b.n	8009696 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fd15 	bl	800a0be <USBD_CtlError>
      break;
 8009694:	bf00      	nop
  }

  return ret;
 8009696:	7bfb      	ldrb	r3, [r7, #15]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	889b      	ldrh	r3, [r3, #4]
 80096b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096bc:	2b40      	cmp	r3, #64	@ 0x40
 80096be:	d007      	beq.n	80096d0 <USBD_StdEPReq+0x30>
 80096c0:	2b40      	cmp	r3, #64	@ 0x40
 80096c2:	f200 817f 	bhi.w	80099c4 <USBD_StdEPReq+0x324>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d02a      	beq.n	8009720 <USBD_StdEPReq+0x80>
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	f040 817a 	bne.w	80099c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff fe85 	bl	80093e4 <USBD_CoreFindEP>
 80096da:	4603      	mov	r3, r0
 80096dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096de:	7b7b      	ldrb	r3, [r7, #13]
 80096e0:	2bff      	cmp	r3, #255	@ 0xff
 80096e2:	f000 8174 	beq.w	80099ce <USBD_StdEPReq+0x32e>
 80096e6:	7b7b      	ldrb	r3, [r7, #13]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f040 8170 	bne.w	80099ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80096ee:	7b7a      	ldrb	r2, [r7, #13]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096f6:	7b7a      	ldrb	r2, [r7, #13]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	32ae      	adds	r2, #174	@ 0xae
 80096fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 8163 	beq.w	80099ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009708:	7b7a      	ldrb	r2, [r7, #13]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32ae      	adds	r2, #174	@ 0xae
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
 800971a:	4603      	mov	r3, r0
 800971c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800971e:	e156      	b.n	80099ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	785b      	ldrb	r3, [r3, #1]
 8009724:	2b03      	cmp	r3, #3
 8009726:	d008      	beq.n	800973a <USBD_StdEPReq+0x9a>
 8009728:	2b03      	cmp	r3, #3
 800972a:	f300 8145 	bgt.w	80099b8 <USBD_StdEPReq+0x318>
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 809b 	beq.w	800986a <USBD_StdEPReq+0x1ca>
 8009734:	2b01      	cmp	r3, #1
 8009736:	d03c      	beq.n	80097b2 <USBD_StdEPReq+0x112>
 8009738:	e13e      	b.n	80099b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b02      	cmp	r3, #2
 8009744:	d002      	beq.n	800974c <USBD_StdEPReq+0xac>
 8009746:	2b03      	cmp	r3, #3
 8009748:	d016      	beq.n	8009778 <USBD_StdEPReq+0xd8>
 800974a:	e02c      	b.n	80097a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00d      	beq.n	800976e <USBD_StdEPReq+0xce>
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b80      	cmp	r3, #128	@ 0x80
 8009756:	d00a      	beq.n	800976e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 f9d9 	bl	800ab14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009762:	2180      	movs	r1, #128	@ 0x80
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 f9d5 	bl	800ab14 <USBD_LL_StallEP>
 800976a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800976c:	e020      	b.n	80097b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fca4 	bl	800a0be <USBD_CtlError>
              break;
 8009776:	e01b      	b.n	80097b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	885b      	ldrh	r3, [r3, #2]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10e      	bne.n	800979e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00b      	beq.n	800979e <USBD_StdEPReq+0xfe>
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	2b80      	cmp	r3, #128	@ 0x80
 800978a:	d008      	beq.n	800979e <USBD_StdEPReq+0xfe>
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	88db      	ldrh	r3, [r3, #6]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d104      	bne.n	800979e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 f9bb 	bl	800ab14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fd64 	bl	800a26c <USBD_CtlSendStatus>

              break;
 80097a4:	e004      	b.n	80097b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fc88 	bl	800a0be <USBD_CtlError>
              break;
 80097ae:	bf00      	nop
          }
          break;
 80097b0:	e107      	b.n	80099c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d002      	beq.n	80097c4 <USBD_StdEPReq+0x124>
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d016      	beq.n	80097f0 <USBD_StdEPReq+0x150>
 80097c2:	e04b      	b.n	800985c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00d      	beq.n	80097e6 <USBD_StdEPReq+0x146>
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	2b80      	cmp	r3, #128	@ 0x80
 80097ce:	d00a      	beq.n	80097e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 f99d 	bl	800ab14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097da:	2180      	movs	r1, #128	@ 0x80
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 f999 	bl	800ab14 <USBD_LL_StallEP>
 80097e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097e4:	e040      	b.n	8009868 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fc68 	bl	800a0be <USBD_CtlError>
              break;
 80097ee:	e03b      	b.n	8009868 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	885b      	ldrh	r3, [r3, #2]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d136      	bne.n	8009866 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d004      	beq.n	800980c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 f9a3 	bl	800ab52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fd2d 	bl	800a26c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff fde4 	bl	80093e4 <USBD_CoreFindEP>
 800981c:	4603      	mov	r3, r0
 800981e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009820:	7b7b      	ldrb	r3, [r7, #13]
 8009822:	2bff      	cmp	r3, #255	@ 0xff
 8009824:	d01f      	beq.n	8009866 <USBD_StdEPReq+0x1c6>
 8009826:	7b7b      	ldrb	r3, [r7, #13]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d11c      	bne.n	8009866 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800982c:	7b7a      	ldrb	r2, [r7, #13]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009834:	7b7a      	ldrb	r2, [r7, #13]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	32ae      	adds	r2, #174	@ 0xae
 800983a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d010      	beq.n	8009866 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009844:	7b7a      	ldrb	r2, [r7, #13]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	32ae      	adds	r2, #174	@ 0xae
 800984a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800985a:	e004      	b.n	8009866 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fc2d 	bl	800a0be <USBD_CtlError>
              break;
 8009864:	e000      	b.n	8009868 <USBD_StdEPReq+0x1c8>
              break;
 8009866:	bf00      	nop
          }
          break;
 8009868:	e0ab      	b.n	80099c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b02      	cmp	r3, #2
 8009874:	d002      	beq.n	800987c <USBD_StdEPReq+0x1dc>
 8009876:	2b03      	cmp	r3, #3
 8009878:	d032      	beq.n	80098e0 <USBD_StdEPReq+0x240>
 800987a:	e097      	b.n	80099ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d007      	beq.n	8009892 <USBD_StdEPReq+0x1f2>
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	2b80      	cmp	r3, #128	@ 0x80
 8009886:	d004      	beq.n	8009892 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fc17 	bl	800a0be <USBD_CtlError>
                break;
 8009890:	e091      	b.n	80099b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009896:	2b00      	cmp	r3, #0
 8009898:	da0b      	bge.n	80098b2 <USBD_StdEPReq+0x212>
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	3310      	adds	r3, #16
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	3304      	adds	r3, #4
 80098b0:	e00b      	b.n	80098ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	4413      	add	r3, r2
 80098c8:	3304      	adds	r3, #4
 80098ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2202      	movs	r2, #2
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fc6d 	bl	800a1b8 <USBD_CtlSendData>
              break;
 80098de:	e06a      	b.n	80099b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da11      	bge.n	800990c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
 80098ea:	f003 020f 	and.w	r2, r3, #15
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	4613      	mov	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	440b      	add	r3, r1
 80098fa:	3324      	adds	r3, #36	@ 0x24
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d117      	bne.n	8009932 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fbda 	bl	800a0be <USBD_CtlError>
                  break;
 800990a:	e054      	b.n	80099b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800990c:	7bbb      	ldrb	r3, [r7, #14]
 800990e:	f003 020f 	and.w	r2, r3, #15
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	4613      	mov	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	440b      	add	r3, r1
 800991e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fbc7 	bl	800a0be <USBD_CtlError>
                  break;
 8009930:	e041      	b.n	80099b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	da0b      	bge.n	8009952 <USBD_StdEPReq+0x2b2>
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	3310      	adds	r3, #16
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	3304      	adds	r3, #4
 8009950:	e00b      	b.n	800996a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4413      	add	r3, r2
 8009968:	3304      	adds	r3, #4
 800996a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d002      	beq.n	8009978 <USBD_StdEPReq+0x2d8>
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	2b80      	cmp	r3, #128	@ 0x80
 8009976:	d103      	bne.n	8009980 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	e00e      	b.n	800999e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 f903 	bl	800ab90 <USBD_LL_IsStallEP>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2201      	movs	r2, #1
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	e002      	b.n	800999e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2200      	movs	r2, #0
 800999c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2202      	movs	r2, #2
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fc07 	bl	800a1b8 <USBD_CtlSendData>
              break;
 80099aa:	e004      	b.n	80099b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fb85 	bl	800a0be <USBD_CtlError>
              break;
 80099b4:	bf00      	nop
          }
          break;
 80099b6:	e004      	b.n	80099c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fb7f 	bl	800a0be <USBD_CtlError>
          break;
 80099c0:	bf00      	nop
      }
      break;
 80099c2:	e005      	b.n	80099d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fb79 	bl	800a0be <USBD_CtlError>
      break;
 80099cc:	e000      	b.n	80099d0 <USBD_StdEPReq+0x330>
      break;
 80099ce:	bf00      	nop
  }

  return ret;
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	885b      	ldrh	r3, [r3, #2]
 80099f6:	0a1b      	lsrs	r3, r3, #8
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	3b01      	subs	r3, #1
 80099fc:	2b0e      	cmp	r3, #14
 80099fe:	f200 8152 	bhi.w	8009ca6 <USBD_GetDescriptor+0x2ca>
 8009a02:	a201      	add	r2, pc, #4	@ (adr r2, 8009a08 <USBD_GetDescriptor+0x2c>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a79 	.word	0x08009a79
 8009a0c:	08009a91 	.word	0x08009a91
 8009a10:	08009ad1 	.word	0x08009ad1
 8009a14:	08009ca7 	.word	0x08009ca7
 8009a18:	08009ca7 	.word	0x08009ca7
 8009a1c:	08009c47 	.word	0x08009c47
 8009a20:	08009c73 	.word	0x08009c73
 8009a24:	08009ca7 	.word	0x08009ca7
 8009a28:	08009ca7 	.word	0x08009ca7
 8009a2c:	08009ca7 	.word	0x08009ca7
 8009a30:	08009ca7 	.word	0x08009ca7
 8009a34:	08009ca7 	.word	0x08009ca7
 8009a38:	08009ca7 	.word	0x08009ca7
 8009a3c:	08009ca7 	.word	0x08009ca7
 8009a40:	08009a45 	.word	0x08009a45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00b      	beq.n	8009a68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	7c12      	ldrb	r2, [r2, #16]
 8009a5c:	f107 0108 	add.w	r1, r7, #8
 8009a60:	4610      	mov	r0, r2
 8009a62:	4798      	blx	r3
 8009a64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a66:	e126      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fb27 	bl	800a0be <USBD_CtlError>
        err++;
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	3301      	adds	r3, #1
 8009a74:	72fb      	strb	r3, [r7, #11]
      break;
 8009a76:	e11e      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7c12      	ldrb	r2, [r2, #16]
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	60f8      	str	r0, [r7, #12]
      break;
 8009a8e:	e112      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7c1b      	ldrb	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10d      	bne.n	8009ab4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa0:	f107 0208 	add.w	r2, r7, #8
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4798      	blx	r3
 8009aa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	2202      	movs	r2, #2
 8009ab0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ab2:	e100      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abc:	f107 0208 	add.w	r2, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	2202      	movs	r2, #2
 8009acc:	701a      	strb	r2, [r3, #0]
      break;
 8009ace:	e0f2      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	885b      	ldrh	r3, [r3, #2]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	f200 80ac 	bhi.w	8009c34 <USBD_GetDescriptor+0x258>
 8009adc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae4 <USBD_GetDescriptor+0x108>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009afd 	.word	0x08009afd
 8009ae8:	08009b31 	.word	0x08009b31
 8009aec:	08009b65 	.word	0x08009b65
 8009af0:	08009b99 	.word	0x08009b99
 8009af4:	08009bcd 	.word	0x08009bcd
 8009af8:	08009c01 	.word	0x08009c01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7c12      	ldrb	r2, [r2, #16]
 8009b14:	f107 0108 	add.w	r1, r7, #8
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b1e:	e091      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 facb 	bl	800a0be <USBD_CtlError>
            err++;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b2e:	e089      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7c12      	ldrb	r2, [r2, #16]
 8009b48:	f107 0108 	add.w	r1, r7, #8
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
 8009b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b52:	e077      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fab1 	bl	800a0be <USBD_CtlError>
            err++;
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	72fb      	strb	r3, [r7, #11]
          break;
 8009b62:	e06f      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7c12      	ldrb	r2, [r2, #16]
 8009b7c:	f107 0108 	add.w	r1, r7, #8
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b86:	e05d      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa97 	bl	800a0be <USBD_CtlError>
            err++;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	3301      	adds	r3, #1
 8009b94:	72fb      	strb	r3, [r7, #11]
          break;
 8009b96:	e055      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bba:	e043      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa7d 	bl	800a0be <USBD_CtlError>
            err++;
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bca:	e03b      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bee:	e029      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa63 	bl	800a0be <USBD_CtlError>
            err++;
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bfe:	e021      	b.n	8009c44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c22:	e00f      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa49 	bl	800a0be <USBD_CtlError>
            err++;
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	72fb      	strb	r3, [r7, #11]
          break;
 8009c32:	e007      	b.n	8009c44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa41 	bl	800a0be <USBD_CtlError>
          err++;
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c42:	bf00      	nop
      }
      break;
 8009c44:	e037      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7c1b      	ldrb	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d109      	bne.n	8009c62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c56:	f107 0208 	add.w	r2, r7, #8
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	4798      	blx	r3
 8009c5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c60:	e029      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fa2a 	bl	800a0be <USBD_CtlError>
        err++;
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c70:	e021      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7c1b      	ldrb	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10d      	bne.n	8009c96 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c82:	f107 0208 	add.w	r2, r7, #8
 8009c86:	4610      	mov	r0, r2
 8009c88:	4798      	blx	r3
 8009c8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	2207      	movs	r2, #7
 8009c92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c94:	e00f      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fa10 	bl	800a0be <USBD_CtlError>
        err++;
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ca4:	e007      	b.n	8009cb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fa08 	bl	800a0be <USBD_CtlError>
      err++;
 8009cae:	7afb      	ldrb	r3, [r7, #11]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8009cb4:	bf00      	nop
  }

  if (err != 0U)
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d11e      	bne.n	8009cfa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	88db      	ldrh	r3, [r3, #6]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d016      	beq.n	8009cf2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009cc4:	893b      	ldrh	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00e      	beq.n	8009ce8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	88da      	ldrh	r2, [r3, #6]
 8009cce:	893b      	ldrh	r3, [r7, #8]
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	bf28      	it	cs
 8009cd4:	4613      	movcs	r3, r2
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cda:	893b      	ldrh	r3, [r7, #8]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fa69 	bl	800a1b8 <USBD_CtlSendData>
 8009ce6:	e009      	b.n	8009cfc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f9e7 	bl	800a0be <USBD_CtlError>
 8009cf0:	e004      	b.n	8009cfc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 faba 	bl	800a26c <USBD_CtlSendStatus>
 8009cf8:	e000      	b.n	8009cfc <USBD_GetDescriptor+0x320>
    return;
 8009cfa:	bf00      	nop
  }
}
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop

08009d04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	889b      	ldrh	r3, [r3, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d131      	bne.n	8009d7a <USBD_SetAddress+0x76>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	88db      	ldrh	r3, [r3, #6]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d12d      	bne.n	8009d7a <USBD_SetAddress+0x76>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	885b      	ldrh	r3, [r3, #2]
 8009d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d24:	d829      	bhi.n	8009d7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	885b      	ldrh	r3, [r3, #2]
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d104      	bne.n	8009d48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f9bc 	bl	800a0be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d46:	e01d      	b.n	8009d84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7bfa      	ldrb	r2, [r7, #15]
 8009d4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 ff47 	bl	800abe8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa86 	bl	800a26c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d004      	beq.n	8009d70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6e:	e009      	b.n	8009d84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d78:	e004      	b.n	8009d84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f99e 	bl	800a0be <USBD_CtlError>
  }
}
 8009d82:	bf00      	nop
 8009d84:	bf00      	nop
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	885b      	ldrh	r3, [r3, #2]
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	4b4e      	ldr	r3, [pc, #312]	@ (8009edc <USBD_SetConfig+0x150>)
 8009da2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009da4:	4b4d      	ldr	r3, [pc, #308]	@ (8009edc <USBD_SetConfig+0x150>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d905      	bls.n	8009db8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f985 	bl	800a0be <USBD_CtlError>
    return USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e08c      	b.n	8009ed2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d002      	beq.n	8009dca <USBD_SetConfig+0x3e>
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d029      	beq.n	8009e1c <USBD_SetConfig+0x90>
 8009dc8:	e075      	b.n	8009eb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009dca:	4b44      	ldr	r3, [pc, #272]	@ (8009edc <USBD_SetConfig+0x150>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d020      	beq.n	8009e14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009dd2:	4b42      	ldr	r3, [pc, #264]	@ (8009edc <USBD_SetConfig+0x150>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8009edc <USBD_SetConfig+0x150>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7fe ffb9 	bl	8008d5a <USBD_SetClassConfig>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d008      	beq.n	8009e04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f962 	bl	800a0be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e02:	e065      	b.n	8009ed0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fa31 	bl	800a26c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2203      	movs	r2, #3
 8009e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009e12:	e05d      	b.n	8009ed0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fa29 	bl	800a26c <USBD_CtlSendStatus>
      break;
 8009e1a:	e059      	b.n	8009ed0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8009edc <USBD_SetConfig+0x150>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d112      	bne.n	8009e4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8009edc <USBD_SetConfig+0x150>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e36:	4b29      	ldr	r3, [pc, #164]	@ (8009edc <USBD_SetConfig+0x150>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7fe ffa8 	bl	8008d92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa12 	bl	800a26c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e48:	e042      	b.n	8009ed0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e4a:	4b24      	ldr	r3, [pc, #144]	@ (8009edc <USBD_SetConfig+0x150>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d02a      	beq.n	8009eae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7fe ff96 	bl	8008d92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e66:	4b1d      	ldr	r3, [pc, #116]	@ (8009edc <USBD_SetConfig+0x150>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e70:	4b1a      	ldr	r3, [pc, #104]	@ (8009edc <USBD_SetConfig+0x150>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7fe ff6f 	bl	8008d5a <USBD_SetClassConfig>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00f      	beq.n	8009ea6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f918 	bl	800a0be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7fe ff7b 	bl	8008d92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ea4:	e014      	b.n	8009ed0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f9e0 	bl	800a26c <USBD_CtlSendStatus>
      break;
 8009eac:	e010      	b.n	8009ed0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f9dc 	bl	800a26c <USBD_CtlSendStatus>
      break;
 8009eb4:	e00c      	b.n	8009ed0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f900 	bl	800a0be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ebe:	4b07      	ldr	r3, [pc, #28]	@ (8009edc <USBD_SetConfig+0x150>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7fe ff64 	bl	8008d92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ece:	bf00      	nop
  }

  return ret;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	24000264 	.word	0x24000264

08009ee0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	88db      	ldrh	r3, [r3, #6]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d004      	beq.n	8009efc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f8e2 	bl	800a0be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009efa:	e023      	b.n	8009f44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	dc02      	bgt.n	8009f0e <USBD_GetConfig+0x2e>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	dc03      	bgt.n	8009f14 <USBD_GetConfig+0x34>
 8009f0c:	e015      	b.n	8009f3a <USBD_GetConfig+0x5a>
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d00b      	beq.n	8009f2a <USBD_GetConfig+0x4a>
 8009f12:	e012      	b.n	8009f3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	2201      	movs	r2, #1
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f948 	bl	800a1b8 <USBD_CtlSendData>
        break;
 8009f28:	e00c      	b.n	8009f44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f940 	bl	800a1b8 <USBD_CtlSendData>
        break;
 8009f38:	e004      	b.n	8009f44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f8be 	bl	800a0be <USBD_CtlError>
        break;
 8009f42:	bf00      	nop
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d81e      	bhi.n	8009fa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	88db      	ldrh	r3, [r3, #6]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d004      	beq.n	8009f76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8a5 	bl	800a0be <USBD_CtlError>
        break;
 8009f74:	e01a      	b.n	8009fac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f043 0202 	orr.w	r2, r3, #2
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	330c      	adds	r3, #12
 8009f96:	2202      	movs	r2, #2
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f90c 	bl	800a1b8 <USBD_CtlSendData>
      break;
 8009fa0:	e004      	b.n	8009fac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009fa2:	6839      	ldr	r1, [r7, #0]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f88a 	bl	800a0be <USBD_CtlError>
      break;
 8009faa:	bf00      	nop
  }
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	885b      	ldrh	r3, [r3, #2]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d107      	bne.n	8009fd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f94c 	bl	800a26c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009fd4:	e013      	b.n	8009ffe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	885b      	ldrh	r3, [r3, #2]
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d10b      	bne.n	8009ff6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	889b      	ldrh	r3, [r3, #4]
 8009fe2:	0a1b      	lsrs	r3, r3, #8
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f93c 	bl	800a26c <USBD_CtlSendStatus>
}
 8009ff4:	e003      	b.n	8009ffe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f860 	bl	800a0be <USBD_CtlError>
}
 8009ffe:	bf00      	nop
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a016:	b2db      	uxtb	r3, r3
 800a018:	3b01      	subs	r3, #1
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d80b      	bhi.n	800a036 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	885b      	ldrh	r3, [r3, #2]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d10c      	bne.n	800a040 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f91c 	bl	800a26c <USBD_CtlSendStatus>
      }
      break;
 800a034:	e004      	b.n	800a040 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f840 	bl	800a0be <USBD_CtlError>
      break;
 800a03e:	e000      	b.n	800a042 <USBD_ClrFeature+0x3c>
      break;
 800a040:	bf00      	nop
  }
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	781a      	ldrb	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3301      	adds	r3, #1
 800a072:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f7ff fa16 	bl	80094a6 <SWAPBYTE>
 800a07a:	4603      	mov	r3, r0
 800a07c:	461a      	mov	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3301      	adds	r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3301      	adds	r3, #1
 800a08c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff fa09 	bl	80094a6 <SWAPBYTE>
 800a094:	4603      	mov	r3, r0
 800a096:	461a      	mov	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff f9fc 	bl	80094a6 <SWAPBYTE>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	80da      	strh	r2, [r3, #6]
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0c8:	2180      	movs	r1, #128	@ 0x80
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fd22 	bl	800ab14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fd1e 	bl	800ab14 <USBD_LL_StallEP>
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d042      	beq.n	800a17c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a0fa:	6938      	ldr	r0, [r7, #16]
 800a0fc:	f000 f842 	bl	800a184 <USBD_GetLen>
 800a100:	4603      	mov	r3, r0
 800a102:	3301      	adds	r3, #1
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a10a:	d808      	bhi.n	800a11e <USBD_GetString+0x3e>
 800a10c:	6938      	ldr	r0, [r7, #16]
 800a10e:	f000 f839 	bl	800a184 <USBD_GetLen>
 800a112:	4603      	mov	r3, r0
 800a114:	3301      	adds	r3, #1
 800a116:	b29b      	uxth	r3, r3
 800a118:	005b      	lsls	r3, r3, #1
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	e001      	b.n	800a122 <USBD_GetString+0x42>
 800a11e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	4413      	add	r3, r2
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	7812      	ldrb	r2, [r2, #0]
 800a130:	701a      	strb	r2, [r3, #0]
  idx++;
 800a132:	7dfb      	ldrb	r3, [r7, #23]
 800a134:	3301      	adds	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	4413      	add	r3, r2
 800a13e:	2203      	movs	r2, #3
 800a140:	701a      	strb	r2, [r3, #0]
  idx++;
 800a142:	7dfb      	ldrb	r3, [r7, #23]
 800a144:	3301      	adds	r3, #1
 800a146:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a148:	e013      	b.n	800a172 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	4413      	add	r3, r2
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	7812      	ldrb	r2, [r2, #0]
 800a154:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	3301      	adds	r3, #1
 800a15a:	613b      	str	r3, [r7, #16]
    idx++;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	3301      	adds	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	4413      	add	r3, r2
 800a168:	2200      	movs	r2, #0
 800a16a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	3301      	adds	r3, #1
 800a170:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e7      	bne.n	800a14a <USBD_GetString+0x6a>
 800a17a:	e000      	b.n	800a17e <USBD_GetString+0x9e>
    return;
 800a17c:	bf00      	nop
  }
}
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a194:	e005      	b.n	800a1a2 <USBD_GetLen+0x1e>
  {
    len++;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
 800a198:	3301      	adds	r3, #1
 800a19a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1f5      	bne.n	800a196 <USBD_GetLen+0x12>
  }

  return len;
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	2100      	movs	r1, #0
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 fd21 	bl	800ac26 <USBD_LL_Transmit>

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	2100      	movs	r1, #0
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 fd10 	bl	800ac26 <USBD_LL_Transmit>

  return USBD_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2203      	movs	r2, #3
 800a220:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	2100      	movs	r1, #0
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 fd14 	bl	800ac68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	60f8      	str	r0, [r7, #12]
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	2100      	movs	r1, #0
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 fd03 	bl	800ac68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2204      	movs	r2, #4
 800a278:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a27c:	2300      	movs	r3, #0
 800a27e:	2200      	movs	r2, #0
 800a280:	2100      	movs	r1, #0
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fccf 	bl	800ac26 <USBD_LL_Transmit>

  return USBD_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2205      	movs	r2, #5
 800a29e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fcdd 	bl	800ac68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4913      	ldr	r1, [pc, #76]	@ (800a30c <MX_USB_DEVICE_Init+0x54>)
 800a2c0:	4813      	ldr	r0, [pc, #76]	@ (800a310 <MX_USB_DEVICE_Init+0x58>)
 800a2c2:	f7fe fccd 	bl	8008c60 <USBD_Init>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d001      	beq.n	800a2d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2cc:	f7f6 fcd2 	bl	8000c74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2d0:	4910      	ldr	r1, [pc, #64]	@ (800a314 <MX_USB_DEVICE_Init+0x5c>)
 800a2d2:	480f      	ldr	r0, [pc, #60]	@ (800a310 <MX_USB_DEVICE_Init+0x58>)
 800a2d4:	f7fe fcf4 	bl	8008cc0 <USBD_RegisterClass>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2de:	f7f6 fcc9 	bl	8000c74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2e2:	490d      	ldr	r1, [pc, #52]	@ (800a318 <MX_USB_DEVICE_Init+0x60>)
 800a2e4:	480a      	ldr	r0, [pc, #40]	@ (800a310 <MX_USB_DEVICE_Init+0x58>)
 800a2e6:	f7fe fbeb 	bl	8008ac0 <USBD_CDC_RegisterInterface>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2f0:	f7f6 fcc0 	bl	8000c74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2f4:	4806      	ldr	r0, [pc, #24]	@ (800a310 <MX_USB_DEVICE_Init+0x58>)
 800a2f6:	f7fe fd19 	bl	8008d2c <USBD_Start>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a300:	f7f6 fcb8 	bl	8000c74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a304:	f7f8 fe84 	bl	8003010 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a308:	bf00      	nop
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	240000cc 	.word	0x240000cc
 800a310:	24000268 	.word	0x24000268
 800a314:	24000038 	.word	0x24000038
 800a318:	240000b8 	.word	0x240000b8

0800a31c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a320:	2200      	movs	r2, #0
 800a322:	4905      	ldr	r1, [pc, #20]	@ (800a338 <CDC_Init_FS+0x1c>)
 800a324:	4805      	ldr	r0, [pc, #20]	@ (800a33c <CDC_Init_FS+0x20>)
 800a326:	f7fe fbe5 	bl	8008af4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a32a:	4905      	ldr	r1, [pc, #20]	@ (800a340 <CDC_Init_FS+0x24>)
 800a32c:	4803      	ldr	r0, [pc, #12]	@ (800a33c <CDC_Init_FS+0x20>)
 800a32e:	f7fe fc03 	bl	8008b38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a332:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a334:	4618      	mov	r0, r3
 800a336:	bd80      	pop	{r7, pc}
 800a338:	24000d44 	.word	0x24000d44
 800a33c:	24000268 	.word	0x24000268
 800a340:	24000544 	.word	0x24000544

0800a344 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a344:	b480      	push	{r7}
 800a346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a348:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	6039      	str	r1, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
 800a360:	4613      	mov	r3, r2
 800a362:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	2b23      	cmp	r3, #35	@ 0x23
 800a368:	d84a      	bhi.n	800a400 <CDC_Control_FS+0xac>
 800a36a:	a201      	add	r2, pc, #4	@ (adr r2, 800a370 <CDC_Control_FS+0x1c>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a401 	.word	0x0800a401
 800a374:	0800a401 	.word	0x0800a401
 800a378:	0800a401 	.word	0x0800a401
 800a37c:	0800a401 	.word	0x0800a401
 800a380:	0800a401 	.word	0x0800a401
 800a384:	0800a401 	.word	0x0800a401
 800a388:	0800a401 	.word	0x0800a401
 800a38c:	0800a401 	.word	0x0800a401
 800a390:	0800a401 	.word	0x0800a401
 800a394:	0800a401 	.word	0x0800a401
 800a398:	0800a401 	.word	0x0800a401
 800a39c:	0800a401 	.word	0x0800a401
 800a3a0:	0800a401 	.word	0x0800a401
 800a3a4:	0800a401 	.word	0x0800a401
 800a3a8:	0800a401 	.word	0x0800a401
 800a3ac:	0800a401 	.word	0x0800a401
 800a3b0:	0800a401 	.word	0x0800a401
 800a3b4:	0800a401 	.word	0x0800a401
 800a3b8:	0800a401 	.word	0x0800a401
 800a3bc:	0800a401 	.word	0x0800a401
 800a3c0:	0800a401 	.word	0x0800a401
 800a3c4:	0800a401 	.word	0x0800a401
 800a3c8:	0800a401 	.word	0x0800a401
 800a3cc:	0800a401 	.word	0x0800a401
 800a3d0:	0800a401 	.word	0x0800a401
 800a3d4:	0800a401 	.word	0x0800a401
 800a3d8:	0800a401 	.word	0x0800a401
 800a3dc:	0800a401 	.word	0x0800a401
 800a3e0:	0800a401 	.word	0x0800a401
 800a3e4:	0800a401 	.word	0x0800a401
 800a3e8:	0800a401 	.word	0x0800a401
 800a3ec:	0800a401 	.word	0x0800a401
 800a3f0:	0800a401 	.word	0x0800a401
 800a3f4:	0800a401 	.word	0x0800a401
 800a3f8:	0800a401 	.word	0x0800a401
 800a3fc:	0800a401 	.word	0x0800a401
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a400:	bf00      	nop
  }

  return (USBD_OK);
 800a402:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	4805      	ldr	r0, [pc, #20]	@ (800a434 <CDC_Receive_FS+0x24>)
 800a41e:	f7fe fb8b 	bl	8008b38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a422:	4804      	ldr	r0, [pc, #16]	@ (800a434 <CDC_Receive_FS+0x24>)
 800a424:	f7fe fbe6 	bl	8008bf4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a428:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	24000268 	.word	0x24000268

0800a438 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a448:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <CDC_Transmit_FS+0x48>)
 800a44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a44e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e00b      	b.n	800a476 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a45e:	887b      	ldrh	r3, [r7, #2]
 800a460:	461a      	mov	r2, r3
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	4806      	ldr	r0, [pc, #24]	@ (800a480 <CDC_Transmit_FS+0x48>)
 800a466:	f7fe fb45 	bl	8008af4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a46a:	4805      	ldr	r0, [pc, #20]	@ (800a480 <CDC_Transmit_FS+0x48>)
 800a46c:	f7fe fb82 	bl	8008b74 <USBD_CDC_TransmitPacket>
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	24000268 	.word	0x24000268

0800a484 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	4613      	mov	r3, r2
 800a490:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
	...

0800a4a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	6039      	str	r1, [r7, #0]
 800a4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2212      	movs	r2, #18
 800a4b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4ba:	4b03      	ldr	r3, [pc, #12]	@ (800a4c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	240000ec 	.word	0x240000ec

0800a4cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	6039      	str	r1, [r7, #0]
 800a4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2204      	movs	r2, #4
 800a4dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4de:	4b03      	ldr	r3, [pc, #12]	@ (800a4ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	24000100 	.word	0x24000100

0800a4f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	6039      	str	r1, [r7, #0]
 800a4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d105      	bne.n	800a50e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	4907      	ldr	r1, [pc, #28]	@ (800a524 <USBD_FS_ProductStrDescriptor+0x34>)
 800a506:	4808      	ldr	r0, [pc, #32]	@ (800a528 <USBD_FS_ProductStrDescriptor+0x38>)
 800a508:	f7ff fdea 	bl	800a0e0 <USBD_GetString>
 800a50c:	e004      	b.n	800a518 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	4904      	ldr	r1, [pc, #16]	@ (800a524 <USBD_FS_ProductStrDescriptor+0x34>)
 800a512:	4805      	ldr	r0, [pc, #20]	@ (800a528 <USBD_FS_ProductStrDescriptor+0x38>)
 800a514:	f7ff fde4 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a518:	4b02      	ldr	r3, [pc, #8]	@ (800a524 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	24001544 	.word	0x24001544
 800a528:	0800b6f4 	.word	0x0800b6f4

0800a52c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	6039      	str	r1, [r7, #0]
 800a536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	4904      	ldr	r1, [pc, #16]	@ (800a54c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a53c:	4804      	ldr	r0, [pc, #16]	@ (800a550 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a53e:	f7ff fdcf 	bl	800a0e0 <USBD_GetString>
  return USBD_StrDesc;
 800a542:	4b02      	ldr	r3, [pc, #8]	@ (800a54c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	24001544 	.word	0x24001544
 800a550:	0800b70c 	.word	0x0800b70c

0800a554 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	6039      	str	r1, [r7, #0]
 800a55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	221a      	movs	r2, #26
 800a564:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a566:	f000 f843 	bl	800a5f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a56a:	4b02      	ldr	r3, [pc, #8]	@ (800a574 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	24000104 	.word	0x24000104

0800a578 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	4603      	mov	r3, r0
 800a580:	6039      	str	r1, [r7, #0]
 800a582:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d105      	bne.n	800a596 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	4907      	ldr	r1, [pc, #28]	@ (800a5ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a58e:	4808      	ldr	r0, [pc, #32]	@ (800a5b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a590:	f7ff fda6 	bl	800a0e0 <USBD_GetString>
 800a594:	e004      	b.n	800a5a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	4904      	ldr	r1, [pc, #16]	@ (800a5ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a59a:	4805      	ldr	r0, [pc, #20]	@ (800a5b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a59c:	f7ff fda0 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5a0:	4b02      	ldr	r3, [pc, #8]	@ (800a5ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	24001544 	.word	0x24001544
 800a5b0:	0800b720 	.word	0x0800b720

0800a5b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	6039      	str	r1, [r7, #0]
 800a5be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d105      	bne.n	800a5d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	4907      	ldr	r1, [pc, #28]	@ (800a5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5ca:	4808      	ldr	r0, [pc, #32]	@ (800a5ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5cc:	f7ff fd88 	bl	800a0e0 <USBD_GetString>
 800a5d0:	e004      	b.n	800a5dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	4904      	ldr	r1, [pc, #16]	@ (800a5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5d6:	4805      	ldr	r0, [pc, #20]	@ (800a5ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5d8:	f7ff fd82 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5dc:	4b02      	ldr	r3, [pc, #8]	@ (800a5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	24001544 	.word	0x24001544
 800a5ec:	0800b72c 	.word	0x0800b72c

0800a5f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a634 <Get_SerialNum+0x44>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a638 <Get_SerialNum+0x48>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a602:	4b0e      	ldr	r3, [pc, #56]	@ (800a63c <Get_SerialNum+0x4c>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4413      	add	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a616:	2208      	movs	r2, #8
 800a618:	4909      	ldr	r1, [pc, #36]	@ (800a640 <Get_SerialNum+0x50>)
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f814 	bl	800a648 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a620:	2204      	movs	r2, #4
 800a622:	4908      	ldr	r1, [pc, #32]	@ (800a644 <Get_SerialNum+0x54>)
 800a624:	68b8      	ldr	r0, [r7, #8]
 800a626:	f000 f80f 	bl	800a648 <IntToUnicode>
  }
}
 800a62a:	bf00      	nop
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	1ff1e800 	.word	0x1ff1e800
 800a638:	1ff1e804 	.word	0x1ff1e804
 800a63c:	1ff1e808 	.word	0x1ff1e808
 800a640:	24000106 	.word	0x24000106
 800a644:	24000116 	.word	0x24000116

0800a648 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	4613      	mov	r3, r2
 800a654:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a65a:	2300      	movs	r3, #0
 800a65c:	75fb      	strb	r3, [r7, #23]
 800a65e:	e027      	b.n	800a6b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	0f1b      	lsrs	r3, r3, #28
 800a664:	2b09      	cmp	r3, #9
 800a666:	d80b      	bhi.n	800a680 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0f1b      	lsrs	r3, r3, #28
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	4619      	mov	r1, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	440b      	add	r3, r1
 800a678:	3230      	adds	r2, #48	@ 0x30
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	701a      	strb	r2, [r3, #0]
 800a67e:	e00a      	b.n	800a696 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	0f1b      	lsrs	r3, r3, #28
 800a684:	b2da      	uxtb	r2, r3
 800a686:	7dfb      	ldrb	r3, [r7, #23]
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	4619      	mov	r1, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	440b      	add	r3, r1
 800a690:	3237      	adds	r2, #55	@ 0x37
 800a692:	b2d2      	uxtb	r2, r2
 800a694:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	011b      	lsls	r3, r3, #4
 800a69a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a69c:	7dfb      	ldrb	r3, [r7, #23]
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
 800a6b0:	7dfa      	ldrb	r2, [r7, #23]
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d3d3      	bcc.n	800a660 <IntToUnicode+0x18>
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	371c      	adds	r7, #28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
	...

0800a6c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b0ba      	sub	sp, #232	@ 0xe8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	605a      	str	r2, [r3, #4]
 800a6da:	609a      	str	r2, [r3, #8]
 800a6dc:	60da      	str	r2, [r3, #12]
 800a6de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a6e0:	f107 0310 	add.w	r3, r7, #16
 800a6e4:	22c0      	movs	r2, #192	@ 0xc0
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 fb55 	bl	800ad98 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a34      	ldr	r2, [pc, #208]	@ (800a7c4 <HAL_PCD_MspInit+0xfc>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d161      	bne.n	800a7bc <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a6f8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a6fc:	f04f 0300 	mov.w	r3, #0
 800a700:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a704:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a70c:	f107 0310 	add.w	r3, r7, #16
 800a710:	4618      	mov	r0, r3
 800a712:	f7f9 fc73 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800a71c:	f7f6 faaa 	bl	8000c74 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a720:	f7f8 fc76 	bl	8003010 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a724:	4b28      	ldr	r3, [pc, #160]	@ (800a7c8 <HAL_PCD_MspInit+0x100>)
 800a726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a72a:	4a27      	ldr	r2, [pc, #156]	@ (800a7c8 <HAL_PCD_MspInit+0x100>)
 800a72c:	f043 0301 	orr.w	r3, r3, #1
 800a730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a734:	4b24      	ldr	r3, [pc, #144]	@ (800a7c8 <HAL_PCD_MspInit+0x100>)
 800a736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a742:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800a746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a74a:	2302      	movs	r3, #2
 800a74c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a750:	2300      	movs	r3, #0
 800a752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a756:	2300      	movs	r3, #0
 800a758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a75c:	230a      	movs	r3, #10
 800a75e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a762:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a766:	4619      	mov	r1, r3
 800a768:	4818      	ldr	r0, [pc, #96]	@ (800a7cc <HAL_PCD_MspInit+0x104>)
 800a76a:	f7f6 ff61 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a76e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a776:	2300      	movs	r3, #0
 800a778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a782:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a786:	4619      	mov	r1, r3
 800a788:	4810      	ldr	r0, [pc, #64]	@ (800a7cc <HAL_PCD_MspInit+0x104>)
 800a78a:	f7f6 ff51 	bl	8001630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a78e:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c8 <HAL_PCD_MspInit+0x100>)
 800a790:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a794:	4a0c      	ldr	r2, [pc, #48]	@ (800a7c8 <HAL_PCD_MspInit+0x100>)
 800a796:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a79a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a79e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c8 <HAL_PCD_MspInit+0x100>)
 800a7a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a7a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7a8:	60bb      	str	r3, [r7, #8]
 800a7aa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	2065      	movs	r0, #101	@ 0x65
 800a7b2:	f7f6 fe84 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a7b6:	2065      	movs	r0, #101	@ 0x65
 800a7b8:	f7f6 fe9b 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a7bc:	bf00      	nop
 800a7be:	37e8      	adds	r7, #232	@ 0xe8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	40080000 	.word	0x40080000
 800a7c8:	58024400 	.word	0x58024400
 800a7cc:	58020000 	.word	0x58020000

0800a7d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f7fe faed 	bl	8008dc6 <USBD_LL_SetupStage>
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a806:	78fa      	ldrb	r2, [r7, #3]
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	4619      	mov	r1, r3
 800a81e:	f7fe fb27 	bl	8008e70 <USBD_LL_DataOutStage>
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a83c:	78fa      	ldrb	r2, [r7, #3]
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4613      	mov	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	440b      	add	r3, r1
 800a84a:	3320      	adds	r3, #32
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	78fb      	ldrb	r3, [r7, #3]
 800a850:	4619      	mov	r1, r3
 800a852:	f7fe fbc0 	bl	8008fd6 <USBD_LL_DataInStage>
}
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fe fcfa 	bl	8009266 <USBD_LL_SOF>
}
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a882:	2301      	movs	r3, #1
 800a884:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	79db      	ldrb	r3, [r3, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d102      	bne.n	800a894 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]
 800a892:	e008      	b.n	800a8a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	79db      	ldrb	r3, [r3, #7]
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d102      	bne.n	800a8a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a89c:	2301      	movs	r3, #1
 800a89e:	73fb      	strb	r3, [r7, #15]
 800a8a0:	e001      	b.n	800a8a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a8a2:	f7f6 f9e7 	bl	8000c74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8ac:	7bfa      	ldrb	r2, [r7, #15]
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fc94 	bl	80091de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe fc3c 	bl	800913a <USBD_LL_Reset>
}
 800a8c2:	bf00      	nop
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe fc8f 	bl	80091fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8f2:	f043 0301 	orr.w	r3, r3, #1
 800a8f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	7adb      	ldrb	r3, [r3, #11]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a900:	4b04      	ldr	r3, [pc, #16]	@ (800a914 <HAL_PCD_SuspendCallback+0x48>)
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	4a03      	ldr	r2, [pc, #12]	@ (800a914 <HAL_PCD_SuspendCallback+0x48>)
 800a906:	f043 0306 	orr.w	r3, r3, #6
 800a90a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a90c:	bf00      	nop
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	e000ed00 	.word	0xe000ed00

0800a918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fc85 	bl	8009236 <USBD_LL_Resume>
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a946:	78fa      	ldrb	r2, [r7, #3]
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe fcdd 	bl	800930a <USBD_LL_IsoOUTIncomplete>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a96a:	78fa      	ldrb	r2, [r7, #3]
 800a96c:	4611      	mov	r1, r2
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe fc99 	bl	80092a6 <USBD_LL_IsoINIncomplete>
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fcef 	bl	800936e <USBD_LL_DevConnected>
}
 800a990:	bf00      	nop
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe fcec 	bl	8009384 <USBD_LL_DevDisconnected>
}
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d13e      	bne.n	800aa42 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a9c4:	4a21      	ldr	r2, [pc, #132]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a1f      	ldr	r2, [pc, #124]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a9d4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9d6:	4a1e      	ldr	r2, [pc, #120]	@ (800aa50 <USBD_LL_Init+0x9c>)
 800a9d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800a9da:	4b1c      	ldr	r3, [pc, #112]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9dc:	2209      	movs	r2, #9
 800a9de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a9e0:	4b1a      	ldr	r3, [pc, #104]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9e6:	4b19      	ldr	r3, [pc, #100]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a9ec:	4b17      	ldr	r3, [pc, #92]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a9f2:	4b16      	ldr	r3, [pc, #88]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a9f8:	4b14      	ldr	r3, [pc, #80]	@ (800aa4c <USBD_LL_Init+0x98>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a9fe:	4b13      	ldr	r3, [pc, #76]	@ (800aa4c <USBD_LL_Init+0x98>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800aa04:	4b11      	ldr	r3, [pc, #68]	@ (800aa4c <USBD_LL_Init+0x98>)
 800aa06:	2201      	movs	r2, #1
 800aa08:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aa0a:	4b10      	ldr	r3, [pc, #64]	@ (800aa4c <USBD_LL_Init+0x98>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aa10:	4b0e      	ldr	r3, [pc, #56]	@ (800aa4c <USBD_LL_Init+0x98>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aa16:	480d      	ldr	r0, [pc, #52]	@ (800aa4c <USBD_LL_Init+0x98>)
 800aa18:	f7f7 f802 	bl	8001a20 <HAL_PCD_Init>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800aa22:	f7f6 f927 	bl	8000c74 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aa26:	2180      	movs	r1, #128	@ 0x80
 800aa28:	4808      	ldr	r0, [pc, #32]	@ (800aa4c <USBD_LL_Init+0x98>)
 800aa2a:	f7f8 fa56 	bl	8002eda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aa2e:	2240      	movs	r2, #64	@ 0x40
 800aa30:	2100      	movs	r1, #0
 800aa32:	4806      	ldr	r0, [pc, #24]	@ (800aa4c <USBD_LL_Init+0x98>)
 800aa34:	f7f8 fa0a 	bl	8002e4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aa38:	2280      	movs	r2, #128	@ 0x80
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	4803      	ldr	r0, [pc, #12]	@ (800aa4c <USBD_LL_Init+0x98>)
 800aa3e:	f7f8 fa05 	bl	8002e4c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	24001744 	.word	0x24001744
 800aa50:	40080000 	.word	0x40080000

0800aa54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7f7 f8e4 	bl	8001c38 <HAL_PCD_Start>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f942 	bl	800ad00 <USBD_Get_USB_Status>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	4608      	mov	r0, r1
 800aa94:	4611      	mov	r1, r2
 800aa96:	461a      	mov	r2, r3
 800aa98:	4603      	mov	r3, r0
 800aa9a:	70fb      	strb	r3, [r7, #3]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70bb      	strb	r3, [r7, #2]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aab2:	78bb      	ldrb	r3, [r7, #2]
 800aab4:	883a      	ldrh	r2, [r7, #0]
 800aab6:	78f9      	ldrb	r1, [r7, #3]
 800aab8:	f7f7 fde5 	bl	8002686 <HAL_PCD_EP_Open>
 800aabc:	4603      	mov	r3, r0
 800aabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 f91c 	bl	800ad00 <USBD_Get_USB_Status>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaf0:	78fa      	ldrb	r2, [r7, #3]
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7f7 fe2e 	bl	8002756 <HAL_PCD_EP_Close>
 800aafa:	4603      	mov	r3, r0
 800aafc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 f8fd 	bl	800ad00 <USBD_Get_USB_Status>
 800ab06:	4603      	mov	r3, r0
 800ab08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab2e:	78fa      	ldrb	r2, [r7, #3]
 800ab30:	4611      	mov	r1, r2
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7f7 fee6 	bl	8002904 <HAL_PCD_EP_SetStall>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f8de 	bl	800ad00 <USBD_Get_USB_Status>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab6c:	78fa      	ldrb	r2, [r7, #3]
 800ab6e:	4611      	mov	r1, r2
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7f7 ff2a 	bl	80029ca <HAL_PCD_EP_ClrStall>
 800ab76:	4603      	mov	r3, r0
 800ab78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 f8bf 	bl	800ad00 <USBD_Get_USB_Status>
 800ab82:	4603      	mov	r3, r0
 800ab84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aba2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	da0b      	bge.n	800abc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abb2:	68f9      	ldr	r1, [r7, #12]
 800abb4:	4613      	mov	r3, r2
 800abb6:	00db      	lsls	r3, r3, #3
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	440b      	add	r3, r1
 800abbe:	3316      	adds	r3, #22
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	e00b      	b.n	800abdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abca:	68f9      	ldr	r1, [r7, #12]
 800abcc:	4613      	mov	r3, r2
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	4413      	add	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	440b      	add	r3, r1
 800abd6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800abda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac02:	78fa      	ldrb	r2, [r7, #3]
 800ac04:	4611      	mov	r1, r2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7f7 fd19 	bl	800263e <HAL_PCD_SetAddress>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 f874 	bl	800ad00 <USBD_Get_USB_Status>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b086      	sub	sp, #24
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]
 800ac32:	460b      	mov	r3, r1
 800ac34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac44:	7af9      	ldrb	r1, [r7, #11]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	f7f7 fe21 	bl	8002890 <HAL_PCD_EP_Transmit>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac52:	7dfb      	ldrb	r3, [r7, #23]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 f853 	bl	800ad00 <USBD_Get_USB_Status>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	607a      	str	r2, [r7, #4]
 800ac72:	603b      	str	r3, [r7, #0]
 800ac74:	460b      	mov	r3, r1
 800ac76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac86:	7af9      	ldrb	r1, [r7, #11]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	f7f7 fdad 	bl	80027ea <HAL_PCD_EP_Receive>
 800ac90:	4603      	mov	r3, r0
 800ac92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f832 	bl	800ad00 <USBD_Get_USB_Status>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aca0:	7dbb      	ldrb	r3, [r7, #22]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acbc:	78fa      	ldrb	r2, [r7, #3]
 800acbe:	4611      	mov	r1, r2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7f7 fdcd 	bl	8002860 <HAL_PCD_EP_GetRxCount>
 800acc6:	4603      	mov	r3, r0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800acd8:	4b03      	ldr	r3, [pc, #12]	@ (800ace8 <USBD_static_malloc+0x18>)
}
 800acda:	4618      	mov	r0, r3
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	24001c28 	.word	0x24001c28

0800acec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad0e:	79fb      	ldrb	r3, [r7, #7]
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d817      	bhi.n	800ad44 <USBD_Get_USB_Status+0x44>
 800ad14:	a201      	add	r2, pc, #4	@ (adr r2, 800ad1c <USBD_Get_USB_Status+0x1c>)
 800ad16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1a:	bf00      	nop
 800ad1c:	0800ad2d 	.word	0x0800ad2d
 800ad20:	0800ad33 	.word	0x0800ad33
 800ad24:	0800ad39 	.word	0x0800ad39
 800ad28:	0800ad3f 	.word	0x0800ad3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad30:	e00b      	b.n	800ad4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad32:	2303      	movs	r3, #3
 800ad34:	73fb      	strb	r3, [r7, #15]
    break;
 800ad36:	e008      	b.n	800ad4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3c:	e005      	b.n	800ad4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	73fb      	strb	r3, [r7, #15]
    break;
 800ad42:	e002      	b.n	800ad4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad44:	2303      	movs	r3, #3
 800ad46:	73fb      	strb	r3, [r7, #15]
    break;
 800ad48:	bf00      	nop
  }
  return usb_status;
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <siprintf>:
 800ad58:	b40e      	push	{r1, r2, r3}
 800ad5a:	b500      	push	{lr}
 800ad5c:	b09c      	sub	sp, #112	@ 0x70
 800ad5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad60:	9002      	str	r0, [sp, #8]
 800ad62:	9006      	str	r0, [sp, #24]
 800ad64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad68:	4809      	ldr	r0, [pc, #36]	@ (800ad90 <siprintf+0x38>)
 800ad6a:	9107      	str	r1, [sp, #28]
 800ad6c:	9104      	str	r1, [sp, #16]
 800ad6e:	4909      	ldr	r1, [pc, #36]	@ (800ad94 <siprintf+0x3c>)
 800ad70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad74:	9105      	str	r1, [sp, #20]
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	a902      	add	r1, sp, #8
 800ad7c:	f000 f994 	bl	800b0a8 <_svfiprintf_r>
 800ad80:	9b02      	ldr	r3, [sp, #8]
 800ad82:	2200      	movs	r2, #0
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	b01c      	add	sp, #112	@ 0x70
 800ad88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad8c:	b003      	add	sp, #12
 800ad8e:	4770      	bx	lr
 800ad90:	24000120 	.word	0x24000120
 800ad94:	ffff0208 	.word	0xffff0208

0800ad98 <memset>:
 800ad98:	4402      	add	r2, r0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d100      	bne.n	800ada2 <memset+0xa>
 800ada0:	4770      	bx	lr
 800ada2:	f803 1b01 	strb.w	r1, [r3], #1
 800ada6:	e7f9      	b.n	800ad9c <memset+0x4>

0800ada8 <__errno>:
 800ada8:	4b01      	ldr	r3, [pc, #4]	@ (800adb0 <__errno+0x8>)
 800adaa:	6818      	ldr	r0, [r3, #0]
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	24000120 	.word	0x24000120

0800adb4 <__libc_init_array>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	4d0d      	ldr	r5, [pc, #52]	@ (800adec <__libc_init_array+0x38>)
 800adb8:	4c0d      	ldr	r4, [pc, #52]	@ (800adf0 <__libc_init_array+0x3c>)
 800adba:	1b64      	subs	r4, r4, r5
 800adbc:	10a4      	asrs	r4, r4, #2
 800adbe:	2600      	movs	r6, #0
 800adc0:	42a6      	cmp	r6, r4
 800adc2:	d109      	bne.n	800add8 <__libc_init_array+0x24>
 800adc4:	4d0b      	ldr	r5, [pc, #44]	@ (800adf4 <__libc_init_array+0x40>)
 800adc6:	4c0c      	ldr	r4, [pc, #48]	@ (800adf8 <__libc_init_array+0x44>)
 800adc8:	f000 fc66 	bl	800b698 <_init>
 800adcc:	1b64      	subs	r4, r4, r5
 800adce:	10a4      	asrs	r4, r4, #2
 800add0:	2600      	movs	r6, #0
 800add2:	42a6      	cmp	r6, r4
 800add4:	d105      	bne.n	800ade2 <__libc_init_array+0x2e>
 800add6:	bd70      	pop	{r4, r5, r6, pc}
 800add8:	f855 3b04 	ldr.w	r3, [r5], #4
 800addc:	4798      	blx	r3
 800adde:	3601      	adds	r6, #1
 800ade0:	e7ee      	b.n	800adc0 <__libc_init_array+0xc>
 800ade2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade6:	4798      	blx	r3
 800ade8:	3601      	adds	r6, #1
 800adea:	e7f2      	b.n	800add2 <__libc_init_array+0x1e>
 800adec:	0800b7ac 	.word	0x0800b7ac
 800adf0:	0800b7ac 	.word	0x0800b7ac
 800adf4:	0800b7ac 	.word	0x0800b7ac
 800adf8:	0800b7b0 	.word	0x0800b7b0

0800adfc <__retarget_lock_acquire_recursive>:
 800adfc:	4770      	bx	lr

0800adfe <__retarget_lock_release_recursive>:
 800adfe:	4770      	bx	lr

0800ae00 <_free_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4605      	mov	r5, r0
 800ae04:	2900      	cmp	r1, #0
 800ae06:	d041      	beq.n	800ae8c <_free_r+0x8c>
 800ae08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae0c:	1f0c      	subs	r4, r1, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bfb8      	it	lt
 800ae12:	18e4      	addlt	r4, r4, r3
 800ae14:	f000 f8e0 	bl	800afd8 <__malloc_lock>
 800ae18:	4a1d      	ldr	r2, [pc, #116]	@ (800ae90 <_free_r+0x90>)
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	b933      	cbnz	r3, 800ae2c <_free_r+0x2c>
 800ae1e:	6063      	str	r3, [r4, #4]
 800ae20:	6014      	str	r4, [r2, #0]
 800ae22:	4628      	mov	r0, r5
 800ae24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae28:	f000 b8dc 	b.w	800afe4 <__malloc_unlock>
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d908      	bls.n	800ae42 <_free_r+0x42>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	1821      	adds	r1, r4, r0
 800ae34:	428b      	cmp	r3, r1
 800ae36:	bf01      	itttt	eq
 800ae38:	6819      	ldreq	r1, [r3, #0]
 800ae3a:	685b      	ldreq	r3, [r3, #4]
 800ae3c:	1809      	addeq	r1, r1, r0
 800ae3e:	6021      	streq	r1, [r4, #0]
 800ae40:	e7ed      	b.n	800ae1e <_free_r+0x1e>
 800ae42:	461a      	mov	r2, r3
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	b10b      	cbz	r3, 800ae4c <_free_r+0x4c>
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d9fa      	bls.n	800ae42 <_free_r+0x42>
 800ae4c:	6811      	ldr	r1, [r2, #0]
 800ae4e:	1850      	adds	r0, r2, r1
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d10b      	bne.n	800ae6c <_free_r+0x6c>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	4401      	add	r1, r0
 800ae58:	1850      	adds	r0, r2, r1
 800ae5a:	4283      	cmp	r3, r0
 800ae5c:	6011      	str	r1, [r2, #0]
 800ae5e:	d1e0      	bne.n	800ae22 <_free_r+0x22>
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	6053      	str	r3, [r2, #4]
 800ae66:	4408      	add	r0, r1
 800ae68:	6010      	str	r0, [r2, #0]
 800ae6a:	e7da      	b.n	800ae22 <_free_r+0x22>
 800ae6c:	d902      	bls.n	800ae74 <_free_r+0x74>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	e7d6      	b.n	800ae22 <_free_r+0x22>
 800ae74:	6820      	ldr	r0, [r4, #0]
 800ae76:	1821      	adds	r1, r4, r0
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	bf04      	itt	eq
 800ae7c:	6819      	ldreq	r1, [r3, #0]
 800ae7e:	685b      	ldreq	r3, [r3, #4]
 800ae80:	6063      	str	r3, [r4, #4]
 800ae82:	bf04      	itt	eq
 800ae84:	1809      	addeq	r1, r1, r0
 800ae86:	6021      	streq	r1, [r4, #0]
 800ae88:	6054      	str	r4, [r2, #4]
 800ae8a:	e7ca      	b.n	800ae22 <_free_r+0x22>
 800ae8c:	bd38      	pop	{r3, r4, r5, pc}
 800ae8e:	bf00      	nop
 800ae90:	24001f8c 	.word	0x24001f8c

0800ae94 <sbrk_aligned>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	4e0f      	ldr	r6, [pc, #60]	@ (800aed4 <sbrk_aligned+0x40>)
 800ae98:	460c      	mov	r4, r1
 800ae9a:	6831      	ldr	r1, [r6, #0]
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	b911      	cbnz	r1, 800aea6 <sbrk_aligned+0x12>
 800aea0:	f000 fba6 	bl	800b5f0 <_sbrk_r>
 800aea4:	6030      	str	r0, [r6, #0]
 800aea6:	4621      	mov	r1, r4
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f000 fba1 	bl	800b5f0 <_sbrk_r>
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	d103      	bne.n	800aeba <sbrk_aligned+0x26>
 800aeb2:	f04f 34ff 	mov.w	r4, #4294967295
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
 800aeba:	1cc4      	adds	r4, r0, #3
 800aebc:	f024 0403 	bic.w	r4, r4, #3
 800aec0:	42a0      	cmp	r0, r4
 800aec2:	d0f8      	beq.n	800aeb6 <sbrk_aligned+0x22>
 800aec4:	1a21      	subs	r1, r4, r0
 800aec6:	4628      	mov	r0, r5
 800aec8:	f000 fb92 	bl	800b5f0 <_sbrk_r>
 800aecc:	3001      	adds	r0, #1
 800aece:	d1f2      	bne.n	800aeb6 <sbrk_aligned+0x22>
 800aed0:	e7ef      	b.n	800aeb2 <sbrk_aligned+0x1e>
 800aed2:	bf00      	nop
 800aed4:	24001f88 	.word	0x24001f88

0800aed8 <_malloc_r>:
 800aed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aedc:	1ccd      	adds	r5, r1, #3
 800aede:	f025 0503 	bic.w	r5, r5, #3
 800aee2:	3508      	adds	r5, #8
 800aee4:	2d0c      	cmp	r5, #12
 800aee6:	bf38      	it	cc
 800aee8:	250c      	movcc	r5, #12
 800aeea:	2d00      	cmp	r5, #0
 800aeec:	4606      	mov	r6, r0
 800aeee:	db01      	blt.n	800aef4 <_malloc_r+0x1c>
 800aef0:	42a9      	cmp	r1, r5
 800aef2:	d904      	bls.n	800aefe <_malloc_r+0x26>
 800aef4:	230c      	movs	r3, #12
 800aef6:	6033      	str	r3, [r6, #0]
 800aef8:	2000      	movs	r0, #0
 800aefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afd4 <_malloc_r+0xfc>
 800af02:	f000 f869 	bl	800afd8 <__malloc_lock>
 800af06:	f8d8 3000 	ldr.w	r3, [r8]
 800af0a:	461c      	mov	r4, r3
 800af0c:	bb44      	cbnz	r4, 800af60 <_malloc_r+0x88>
 800af0e:	4629      	mov	r1, r5
 800af10:	4630      	mov	r0, r6
 800af12:	f7ff ffbf 	bl	800ae94 <sbrk_aligned>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	4604      	mov	r4, r0
 800af1a:	d158      	bne.n	800afce <_malloc_r+0xf6>
 800af1c:	f8d8 4000 	ldr.w	r4, [r8]
 800af20:	4627      	mov	r7, r4
 800af22:	2f00      	cmp	r7, #0
 800af24:	d143      	bne.n	800afae <_malloc_r+0xd6>
 800af26:	2c00      	cmp	r4, #0
 800af28:	d04b      	beq.n	800afc2 <_malloc_r+0xea>
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	4639      	mov	r1, r7
 800af2e:	4630      	mov	r0, r6
 800af30:	eb04 0903 	add.w	r9, r4, r3
 800af34:	f000 fb5c 	bl	800b5f0 <_sbrk_r>
 800af38:	4581      	cmp	r9, r0
 800af3a:	d142      	bne.n	800afc2 <_malloc_r+0xea>
 800af3c:	6821      	ldr	r1, [r4, #0]
 800af3e:	1a6d      	subs	r5, r5, r1
 800af40:	4629      	mov	r1, r5
 800af42:	4630      	mov	r0, r6
 800af44:	f7ff ffa6 	bl	800ae94 <sbrk_aligned>
 800af48:	3001      	adds	r0, #1
 800af4a:	d03a      	beq.n	800afc2 <_malloc_r+0xea>
 800af4c:	6823      	ldr	r3, [r4, #0]
 800af4e:	442b      	add	r3, r5
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	f8d8 3000 	ldr.w	r3, [r8]
 800af56:	685a      	ldr	r2, [r3, #4]
 800af58:	bb62      	cbnz	r2, 800afb4 <_malloc_r+0xdc>
 800af5a:	f8c8 7000 	str.w	r7, [r8]
 800af5e:	e00f      	b.n	800af80 <_malloc_r+0xa8>
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	1b52      	subs	r2, r2, r5
 800af64:	d420      	bmi.n	800afa8 <_malloc_r+0xd0>
 800af66:	2a0b      	cmp	r2, #11
 800af68:	d917      	bls.n	800af9a <_malloc_r+0xc2>
 800af6a:	1961      	adds	r1, r4, r5
 800af6c:	42a3      	cmp	r3, r4
 800af6e:	6025      	str	r5, [r4, #0]
 800af70:	bf18      	it	ne
 800af72:	6059      	strne	r1, [r3, #4]
 800af74:	6863      	ldr	r3, [r4, #4]
 800af76:	bf08      	it	eq
 800af78:	f8c8 1000 	streq.w	r1, [r8]
 800af7c:	5162      	str	r2, [r4, r5]
 800af7e:	604b      	str	r3, [r1, #4]
 800af80:	4630      	mov	r0, r6
 800af82:	f000 f82f 	bl	800afe4 <__malloc_unlock>
 800af86:	f104 000b 	add.w	r0, r4, #11
 800af8a:	1d23      	adds	r3, r4, #4
 800af8c:	f020 0007 	bic.w	r0, r0, #7
 800af90:	1ac2      	subs	r2, r0, r3
 800af92:	bf1c      	itt	ne
 800af94:	1a1b      	subne	r3, r3, r0
 800af96:	50a3      	strne	r3, [r4, r2]
 800af98:	e7af      	b.n	800aefa <_malloc_r+0x22>
 800af9a:	6862      	ldr	r2, [r4, #4]
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	bf0c      	ite	eq
 800afa0:	f8c8 2000 	streq.w	r2, [r8]
 800afa4:	605a      	strne	r2, [r3, #4]
 800afa6:	e7eb      	b.n	800af80 <_malloc_r+0xa8>
 800afa8:	4623      	mov	r3, r4
 800afaa:	6864      	ldr	r4, [r4, #4]
 800afac:	e7ae      	b.n	800af0c <_malloc_r+0x34>
 800afae:	463c      	mov	r4, r7
 800afb0:	687f      	ldr	r7, [r7, #4]
 800afb2:	e7b6      	b.n	800af22 <_malloc_r+0x4a>
 800afb4:	461a      	mov	r2, r3
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	42a3      	cmp	r3, r4
 800afba:	d1fb      	bne.n	800afb4 <_malloc_r+0xdc>
 800afbc:	2300      	movs	r3, #0
 800afbe:	6053      	str	r3, [r2, #4]
 800afc0:	e7de      	b.n	800af80 <_malloc_r+0xa8>
 800afc2:	230c      	movs	r3, #12
 800afc4:	6033      	str	r3, [r6, #0]
 800afc6:	4630      	mov	r0, r6
 800afc8:	f000 f80c 	bl	800afe4 <__malloc_unlock>
 800afcc:	e794      	b.n	800aef8 <_malloc_r+0x20>
 800afce:	6005      	str	r5, [r0, #0]
 800afd0:	e7d6      	b.n	800af80 <_malloc_r+0xa8>
 800afd2:	bf00      	nop
 800afd4:	24001f8c 	.word	0x24001f8c

0800afd8 <__malloc_lock>:
 800afd8:	4801      	ldr	r0, [pc, #4]	@ (800afe0 <__malloc_lock+0x8>)
 800afda:	f7ff bf0f 	b.w	800adfc <__retarget_lock_acquire_recursive>
 800afde:	bf00      	nop
 800afe0:	24001f84 	.word	0x24001f84

0800afe4 <__malloc_unlock>:
 800afe4:	4801      	ldr	r0, [pc, #4]	@ (800afec <__malloc_unlock+0x8>)
 800afe6:	f7ff bf0a 	b.w	800adfe <__retarget_lock_release_recursive>
 800afea:	bf00      	nop
 800afec:	24001f84 	.word	0x24001f84

0800aff0 <__ssputs_r>:
 800aff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff4:	688e      	ldr	r6, [r1, #8]
 800aff6:	461f      	mov	r7, r3
 800aff8:	42be      	cmp	r6, r7
 800affa:	680b      	ldr	r3, [r1, #0]
 800affc:	4682      	mov	sl, r0
 800affe:	460c      	mov	r4, r1
 800b000:	4690      	mov	r8, r2
 800b002:	d82d      	bhi.n	800b060 <__ssputs_r+0x70>
 800b004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b008:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b00c:	d026      	beq.n	800b05c <__ssputs_r+0x6c>
 800b00e:	6965      	ldr	r5, [r4, #20]
 800b010:	6909      	ldr	r1, [r1, #16]
 800b012:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b016:	eba3 0901 	sub.w	r9, r3, r1
 800b01a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b01e:	1c7b      	adds	r3, r7, #1
 800b020:	444b      	add	r3, r9
 800b022:	106d      	asrs	r5, r5, #1
 800b024:	429d      	cmp	r5, r3
 800b026:	bf38      	it	cc
 800b028:	461d      	movcc	r5, r3
 800b02a:	0553      	lsls	r3, r2, #21
 800b02c:	d527      	bpl.n	800b07e <__ssputs_r+0x8e>
 800b02e:	4629      	mov	r1, r5
 800b030:	f7ff ff52 	bl	800aed8 <_malloc_r>
 800b034:	4606      	mov	r6, r0
 800b036:	b360      	cbz	r0, 800b092 <__ssputs_r+0xa2>
 800b038:	6921      	ldr	r1, [r4, #16]
 800b03a:	464a      	mov	r2, r9
 800b03c:	f000 fae8 	bl	800b610 <memcpy>
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b04a:	81a3      	strh	r3, [r4, #12]
 800b04c:	6126      	str	r6, [r4, #16]
 800b04e:	6165      	str	r5, [r4, #20]
 800b050:	444e      	add	r6, r9
 800b052:	eba5 0509 	sub.w	r5, r5, r9
 800b056:	6026      	str	r6, [r4, #0]
 800b058:	60a5      	str	r5, [r4, #8]
 800b05a:	463e      	mov	r6, r7
 800b05c:	42be      	cmp	r6, r7
 800b05e:	d900      	bls.n	800b062 <__ssputs_r+0x72>
 800b060:	463e      	mov	r6, r7
 800b062:	6820      	ldr	r0, [r4, #0]
 800b064:	4632      	mov	r2, r6
 800b066:	4641      	mov	r1, r8
 800b068:	f000 faa8 	bl	800b5bc <memmove>
 800b06c:	68a3      	ldr	r3, [r4, #8]
 800b06e:	1b9b      	subs	r3, r3, r6
 800b070:	60a3      	str	r3, [r4, #8]
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	4433      	add	r3, r6
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	2000      	movs	r0, #0
 800b07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07e:	462a      	mov	r2, r5
 800b080:	f000 fad4 	bl	800b62c <_realloc_r>
 800b084:	4606      	mov	r6, r0
 800b086:	2800      	cmp	r0, #0
 800b088:	d1e0      	bne.n	800b04c <__ssputs_r+0x5c>
 800b08a:	6921      	ldr	r1, [r4, #16]
 800b08c:	4650      	mov	r0, sl
 800b08e:	f7ff feb7 	bl	800ae00 <_free_r>
 800b092:	230c      	movs	r3, #12
 800b094:	f8ca 3000 	str.w	r3, [sl]
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b09e:	81a3      	strh	r3, [r4, #12]
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	e7e9      	b.n	800b07a <__ssputs_r+0x8a>
	...

0800b0a8 <_svfiprintf_r>:
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	4698      	mov	r8, r3
 800b0ae:	898b      	ldrh	r3, [r1, #12]
 800b0b0:	061b      	lsls	r3, r3, #24
 800b0b2:	b09d      	sub	sp, #116	@ 0x74
 800b0b4:	4607      	mov	r7, r0
 800b0b6:	460d      	mov	r5, r1
 800b0b8:	4614      	mov	r4, r2
 800b0ba:	d510      	bpl.n	800b0de <_svfiprintf_r+0x36>
 800b0bc:	690b      	ldr	r3, [r1, #16]
 800b0be:	b973      	cbnz	r3, 800b0de <_svfiprintf_r+0x36>
 800b0c0:	2140      	movs	r1, #64	@ 0x40
 800b0c2:	f7ff ff09 	bl	800aed8 <_malloc_r>
 800b0c6:	6028      	str	r0, [r5, #0]
 800b0c8:	6128      	str	r0, [r5, #16]
 800b0ca:	b930      	cbnz	r0, 800b0da <_svfiprintf_r+0x32>
 800b0cc:	230c      	movs	r3, #12
 800b0ce:	603b      	str	r3, [r7, #0]
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d4:	b01d      	add	sp, #116	@ 0x74
 800b0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0da:	2340      	movs	r3, #64	@ 0x40
 800b0dc:	616b      	str	r3, [r5, #20]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0e2:	2320      	movs	r3, #32
 800b0e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ec:	2330      	movs	r3, #48	@ 0x30
 800b0ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b28c <_svfiprintf_r+0x1e4>
 800b0f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0f6:	f04f 0901 	mov.w	r9, #1
 800b0fa:	4623      	mov	r3, r4
 800b0fc:	469a      	mov	sl, r3
 800b0fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b102:	b10a      	cbz	r2, 800b108 <_svfiprintf_r+0x60>
 800b104:	2a25      	cmp	r2, #37	@ 0x25
 800b106:	d1f9      	bne.n	800b0fc <_svfiprintf_r+0x54>
 800b108:	ebba 0b04 	subs.w	fp, sl, r4
 800b10c:	d00b      	beq.n	800b126 <_svfiprintf_r+0x7e>
 800b10e:	465b      	mov	r3, fp
 800b110:	4622      	mov	r2, r4
 800b112:	4629      	mov	r1, r5
 800b114:	4638      	mov	r0, r7
 800b116:	f7ff ff6b 	bl	800aff0 <__ssputs_r>
 800b11a:	3001      	adds	r0, #1
 800b11c:	f000 80a7 	beq.w	800b26e <_svfiprintf_r+0x1c6>
 800b120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b122:	445a      	add	r2, fp
 800b124:	9209      	str	r2, [sp, #36]	@ 0x24
 800b126:	f89a 3000 	ldrb.w	r3, [sl]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 809f 	beq.w	800b26e <_svfiprintf_r+0x1c6>
 800b130:	2300      	movs	r3, #0
 800b132:	f04f 32ff 	mov.w	r2, #4294967295
 800b136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b13a:	f10a 0a01 	add.w	sl, sl, #1
 800b13e:	9304      	str	r3, [sp, #16]
 800b140:	9307      	str	r3, [sp, #28]
 800b142:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b146:	931a      	str	r3, [sp, #104]	@ 0x68
 800b148:	4654      	mov	r4, sl
 800b14a:	2205      	movs	r2, #5
 800b14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b150:	484e      	ldr	r0, [pc, #312]	@ (800b28c <_svfiprintf_r+0x1e4>)
 800b152:	f7f5 f8c5 	bl	80002e0 <memchr>
 800b156:	9a04      	ldr	r2, [sp, #16]
 800b158:	b9d8      	cbnz	r0, 800b192 <_svfiprintf_r+0xea>
 800b15a:	06d0      	lsls	r0, r2, #27
 800b15c:	bf44      	itt	mi
 800b15e:	2320      	movmi	r3, #32
 800b160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b164:	0711      	lsls	r1, r2, #28
 800b166:	bf44      	itt	mi
 800b168:	232b      	movmi	r3, #43	@ 0x2b
 800b16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b16e:	f89a 3000 	ldrb.w	r3, [sl]
 800b172:	2b2a      	cmp	r3, #42	@ 0x2a
 800b174:	d015      	beq.n	800b1a2 <_svfiprintf_r+0xfa>
 800b176:	9a07      	ldr	r2, [sp, #28]
 800b178:	4654      	mov	r4, sl
 800b17a:	2000      	movs	r0, #0
 800b17c:	f04f 0c0a 	mov.w	ip, #10
 800b180:	4621      	mov	r1, r4
 800b182:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b186:	3b30      	subs	r3, #48	@ 0x30
 800b188:	2b09      	cmp	r3, #9
 800b18a:	d94b      	bls.n	800b224 <_svfiprintf_r+0x17c>
 800b18c:	b1b0      	cbz	r0, 800b1bc <_svfiprintf_r+0x114>
 800b18e:	9207      	str	r2, [sp, #28]
 800b190:	e014      	b.n	800b1bc <_svfiprintf_r+0x114>
 800b192:	eba0 0308 	sub.w	r3, r0, r8
 800b196:	fa09 f303 	lsl.w	r3, r9, r3
 800b19a:	4313      	orrs	r3, r2
 800b19c:	9304      	str	r3, [sp, #16]
 800b19e:	46a2      	mov	sl, r4
 800b1a0:	e7d2      	b.n	800b148 <_svfiprintf_r+0xa0>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	1d19      	adds	r1, r3, #4
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	9103      	str	r1, [sp, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bfbb      	ittet	lt
 800b1ae:	425b      	neglt	r3, r3
 800b1b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b4:	9307      	strge	r3, [sp, #28]
 800b1b6:	9307      	strlt	r3, [sp, #28]
 800b1b8:	bfb8      	it	lt
 800b1ba:	9204      	strlt	r2, [sp, #16]
 800b1bc:	7823      	ldrb	r3, [r4, #0]
 800b1be:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1c0:	d10a      	bne.n	800b1d8 <_svfiprintf_r+0x130>
 800b1c2:	7863      	ldrb	r3, [r4, #1]
 800b1c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1c6:	d132      	bne.n	800b22e <_svfiprintf_r+0x186>
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	1d1a      	adds	r2, r3, #4
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	9203      	str	r2, [sp, #12]
 800b1d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1d4:	3402      	adds	r4, #2
 800b1d6:	9305      	str	r3, [sp, #20]
 800b1d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b29c <_svfiprintf_r+0x1f4>
 800b1dc:	7821      	ldrb	r1, [r4, #0]
 800b1de:	2203      	movs	r2, #3
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	f7f5 f87d 	bl	80002e0 <memchr>
 800b1e6:	b138      	cbz	r0, 800b1f8 <_svfiprintf_r+0x150>
 800b1e8:	9b04      	ldr	r3, [sp, #16]
 800b1ea:	eba0 000a 	sub.w	r0, r0, sl
 800b1ee:	2240      	movs	r2, #64	@ 0x40
 800b1f0:	4082      	lsls	r2, r0
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	3401      	adds	r4, #1
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1fc:	4824      	ldr	r0, [pc, #144]	@ (800b290 <_svfiprintf_r+0x1e8>)
 800b1fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b202:	2206      	movs	r2, #6
 800b204:	f7f5 f86c 	bl	80002e0 <memchr>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d036      	beq.n	800b27a <_svfiprintf_r+0x1d2>
 800b20c:	4b21      	ldr	r3, [pc, #132]	@ (800b294 <_svfiprintf_r+0x1ec>)
 800b20e:	bb1b      	cbnz	r3, 800b258 <_svfiprintf_r+0x1b0>
 800b210:	9b03      	ldr	r3, [sp, #12]
 800b212:	3307      	adds	r3, #7
 800b214:	f023 0307 	bic.w	r3, r3, #7
 800b218:	3308      	adds	r3, #8
 800b21a:	9303      	str	r3, [sp, #12]
 800b21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b21e:	4433      	add	r3, r6
 800b220:	9309      	str	r3, [sp, #36]	@ 0x24
 800b222:	e76a      	b.n	800b0fa <_svfiprintf_r+0x52>
 800b224:	fb0c 3202 	mla	r2, ip, r2, r3
 800b228:	460c      	mov	r4, r1
 800b22a:	2001      	movs	r0, #1
 800b22c:	e7a8      	b.n	800b180 <_svfiprintf_r+0xd8>
 800b22e:	2300      	movs	r3, #0
 800b230:	3401      	adds	r4, #1
 800b232:	9305      	str	r3, [sp, #20]
 800b234:	4619      	mov	r1, r3
 800b236:	f04f 0c0a 	mov.w	ip, #10
 800b23a:	4620      	mov	r0, r4
 800b23c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b240:	3a30      	subs	r2, #48	@ 0x30
 800b242:	2a09      	cmp	r2, #9
 800b244:	d903      	bls.n	800b24e <_svfiprintf_r+0x1a6>
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0c6      	beq.n	800b1d8 <_svfiprintf_r+0x130>
 800b24a:	9105      	str	r1, [sp, #20]
 800b24c:	e7c4      	b.n	800b1d8 <_svfiprintf_r+0x130>
 800b24e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b252:	4604      	mov	r4, r0
 800b254:	2301      	movs	r3, #1
 800b256:	e7f0      	b.n	800b23a <_svfiprintf_r+0x192>
 800b258:	ab03      	add	r3, sp, #12
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	462a      	mov	r2, r5
 800b25e:	4b0e      	ldr	r3, [pc, #56]	@ (800b298 <_svfiprintf_r+0x1f0>)
 800b260:	a904      	add	r1, sp, #16
 800b262:	4638      	mov	r0, r7
 800b264:	f3af 8000 	nop.w
 800b268:	1c42      	adds	r2, r0, #1
 800b26a:	4606      	mov	r6, r0
 800b26c:	d1d6      	bne.n	800b21c <_svfiprintf_r+0x174>
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	065b      	lsls	r3, r3, #25
 800b272:	f53f af2d 	bmi.w	800b0d0 <_svfiprintf_r+0x28>
 800b276:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b278:	e72c      	b.n	800b0d4 <_svfiprintf_r+0x2c>
 800b27a:	ab03      	add	r3, sp, #12
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	462a      	mov	r2, r5
 800b280:	4b05      	ldr	r3, [pc, #20]	@ (800b298 <_svfiprintf_r+0x1f0>)
 800b282:	a904      	add	r1, sp, #16
 800b284:	4638      	mov	r0, r7
 800b286:	f000 f879 	bl	800b37c <_printf_i>
 800b28a:	e7ed      	b.n	800b268 <_svfiprintf_r+0x1c0>
 800b28c:	0800b770 	.word	0x0800b770
 800b290:	0800b77a 	.word	0x0800b77a
 800b294:	00000000 	.word	0x00000000
 800b298:	0800aff1 	.word	0x0800aff1
 800b29c:	0800b776 	.word	0x0800b776

0800b2a0 <_printf_common>:
 800b2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	4698      	mov	r8, r3
 800b2a8:	688a      	ldr	r2, [r1, #8]
 800b2aa:	690b      	ldr	r3, [r1, #16]
 800b2ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	bfb8      	it	lt
 800b2b4:	4613      	movlt	r3, r2
 800b2b6:	6033      	str	r3, [r6, #0]
 800b2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2bc:	4607      	mov	r7, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	b10a      	cbz	r2, 800b2c6 <_printf_common+0x26>
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	6033      	str	r3, [r6, #0]
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	0699      	lsls	r1, r3, #26
 800b2ca:	bf42      	ittt	mi
 800b2cc:	6833      	ldrmi	r3, [r6, #0]
 800b2ce:	3302      	addmi	r3, #2
 800b2d0:	6033      	strmi	r3, [r6, #0]
 800b2d2:	6825      	ldr	r5, [r4, #0]
 800b2d4:	f015 0506 	ands.w	r5, r5, #6
 800b2d8:	d106      	bne.n	800b2e8 <_printf_common+0x48>
 800b2da:	f104 0a19 	add.w	sl, r4, #25
 800b2de:	68e3      	ldr	r3, [r4, #12]
 800b2e0:	6832      	ldr	r2, [r6, #0]
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	42ab      	cmp	r3, r5
 800b2e6:	dc26      	bgt.n	800b336 <_printf_common+0x96>
 800b2e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2ec:	6822      	ldr	r2, [r4, #0]
 800b2ee:	3b00      	subs	r3, #0
 800b2f0:	bf18      	it	ne
 800b2f2:	2301      	movne	r3, #1
 800b2f4:	0692      	lsls	r2, r2, #26
 800b2f6:	d42b      	bmi.n	800b350 <_printf_common+0xb0>
 800b2f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2fc:	4641      	mov	r1, r8
 800b2fe:	4638      	mov	r0, r7
 800b300:	47c8      	blx	r9
 800b302:	3001      	adds	r0, #1
 800b304:	d01e      	beq.n	800b344 <_printf_common+0xa4>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	6922      	ldr	r2, [r4, #16]
 800b30a:	f003 0306 	and.w	r3, r3, #6
 800b30e:	2b04      	cmp	r3, #4
 800b310:	bf02      	ittt	eq
 800b312:	68e5      	ldreq	r5, [r4, #12]
 800b314:	6833      	ldreq	r3, [r6, #0]
 800b316:	1aed      	subeq	r5, r5, r3
 800b318:	68a3      	ldr	r3, [r4, #8]
 800b31a:	bf0c      	ite	eq
 800b31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b320:	2500      	movne	r5, #0
 800b322:	4293      	cmp	r3, r2
 800b324:	bfc4      	itt	gt
 800b326:	1a9b      	subgt	r3, r3, r2
 800b328:	18ed      	addgt	r5, r5, r3
 800b32a:	2600      	movs	r6, #0
 800b32c:	341a      	adds	r4, #26
 800b32e:	42b5      	cmp	r5, r6
 800b330:	d11a      	bne.n	800b368 <_printf_common+0xc8>
 800b332:	2000      	movs	r0, #0
 800b334:	e008      	b.n	800b348 <_printf_common+0xa8>
 800b336:	2301      	movs	r3, #1
 800b338:	4652      	mov	r2, sl
 800b33a:	4641      	mov	r1, r8
 800b33c:	4638      	mov	r0, r7
 800b33e:	47c8      	blx	r9
 800b340:	3001      	adds	r0, #1
 800b342:	d103      	bne.n	800b34c <_printf_common+0xac>
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34c:	3501      	adds	r5, #1
 800b34e:	e7c6      	b.n	800b2de <_printf_common+0x3e>
 800b350:	18e1      	adds	r1, r4, r3
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	2030      	movs	r0, #48	@ 0x30
 800b356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b35a:	4422      	add	r2, r4
 800b35c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b364:	3302      	adds	r3, #2
 800b366:	e7c7      	b.n	800b2f8 <_printf_common+0x58>
 800b368:	2301      	movs	r3, #1
 800b36a:	4622      	mov	r2, r4
 800b36c:	4641      	mov	r1, r8
 800b36e:	4638      	mov	r0, r7
 800b370:	47c8      	blx	r9
 800b372:	3001      	adds	r0, #1
 800b374:	d0e6      	beq.n	800b344 <_printf_common+0xa4>
 800b376:	3601      	adds	r6, #1
 800b378:	e7d9      	b.n	800b32e <_printf_common+0x8e>
	...

0800b37c <_printf_i>:
 800b37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b380:	7e0f      	ldrb	r7, [r1, #24]
 800b382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b384:	2f78      	cmp	r7, #120	@ 0x78
 800b386:	4691      	mov	r9, r2
 800b388:	4680      	mov	r8, r0
 800b38a:	460c      	mov	r4, r1
 800b38c:	469a      	mov	sl, r3
 800b38e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b392:	d807      	bhi.n	800b3a4 <_printf_i+0x28>
 800b394:	2f62      	cmp	r7, #98	@ 0x62
 800b396:	d80a      	bhi.n	800b3ae <_printf_i+0x32>
 800b398:	2f00      	cmp	r7, #0
 800b39a:	f000 80d2 	beq.w	800b542 <_printf_i+0x1c6>
 800b39e:	2f58      	cmp	r7, #88	@ 0x58
 800b3a0:	f000 80b9 	beq.w	800b516 <_printf_i+0x19a>
 800b3a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3ac:	e03a      	b.n	800b424 <_printf_i+0xa8>
 800b3ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3b2:	2b15      	cmp	r3, #21
 800b3b4:	d8f6      	bhi.n	800b3a4 <_printf_i+0x28>
 800b3b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b3bc <_printf_i+0x40>)
 800b3b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3bc:	0800b415 	.word	0x0800b415
 800b3c0:	0800b429 	.word	0x0800b429
 800b3c4:	0800b3a5 	.word	0x0800b3a5
 800b3c8:	0800b3a5 	.word	0x0800b3a5
 800b3cc:	0800b3a5 	.word	0x0800b3a5
 800b3d0:	0800b3a5 	.word	0x0800b3a5
 800b3d4:	0800b429 	.word	0x0800b429
 800b3d8:	0800b3a5 	.word	0x0800b3a5
 800b3dc:	0800b3a5 	.word	0x0800b3a5
 800b3e0:	0800b3a5 	.word	0x0800b3a5
 800b3e4:	0800b3a5 	.word	0x0800b3a5
 800b3e8:	0800b529 	.word	0x0800b529
 800b3ec:	0800b453 	.word	0x0800b453
 800b3f0:	0800b4e3 	.word	0x0800b4e3
 800b3f4:	0800b3a5 	.word	0x0800b3a5
 800b3f8:	0800b3a5 	.word	0x0800b3a5
 800b3fc:	0800b54b 	.word	0x0800b54b
 800b400:	0800b3a5 	.word	0x0800b3a5
 800b404:	0800b453 	.word	0x0800b453
 800b408:	0800b3a5 	.word	0x0800b3a5
 800b40c:	0800b3a5 	.word	0x0800b3a5
 800b410:	0800b4eb 	.word	0x0800b4eb
 800b414:	6833      	ldr	r3, [r6, #0]
 800b416:	1d1a      	adds	r2, r3, #4
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6032      	str	r2, [r6, #0]
 800b41c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b424:	2301      	movs	r3, #1
 800b426:	e09d      	b.n	800b564 <_printf_i+0x1e8>
 800b428:	6833      	ldr	r3, [r6, #0]
 800b42a:	6820      	ldr	r0, [r4, #0]
 800b42c:	1d19      	adds	r1, r3, #4
 800b42e:	6031      	str	r1, [r6, #0]
 800b430:	0606      	lsls	r6, r0, #24
 800b432:	d501      	bpl.n	800b438 <_printf_i+0xbc>
 800b434:	681d      	ldr	r5, [r3, #0]
 800b436:	e003      	b.n	800b440 <_printf_i+0xc4>
 800b438:	0645      	lsls	r5, r0, #25
 800b43a:	d5fb      	bpl.n	800b434 <_printf_i+0xb8>
 800b43c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b440:	2d00      	cmp	r5, #0
 800b442:	da03      	bge.n	800b44c <_printf_i+0xd0>
 800b444:	232d      	movs	r3, #45	@ 0x2d
 800b446:	426d      	negs	r5, r5
 800b448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b44c:	4859      	ldr	r0, [pc, #356]	@ (800b5b4 <_printf_i+0x238>)
 800b44e:	230a      	movs	r3, #10
 800b450:	e011      	b.n	800b476 <_printf_i+0xfa>
 800b452:	6821      	ldr	r1, [r4, #0]
 800b454:	6833      	ldr	r3, [r6, #0]
 800b456:	0608      	lsls	r0, r1, #24
 800b458:	f853 5b04 	ldr.w	r5, [r3], #4
 800b45c:	d402      	bmi.n	800b464 <_printf_i+0xe8>
 800b45e:	0649      	lsls	r1, r1, #25
 800b460:	bf48      	it	mi
 800b462:	b2ad      	uxthmi	r5, r5
 800b464:	2f6f      	cmp	r7, #111	@ 0x6f
 800b466:	4853      	ldr	r0, [pc, #332]	@ (800b5b4 <_printf_i+0x238>)
 800b468:	6033      	str	r3, [r6, #0]
 800b46a:	bf14      	ite	ne
 800b46c:	230a      	movne	r3, #10
 800b46e:	2308      	moveq	r3, #8
 800b470:	2100      	movs	r1, #0
 800b472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b476:	6866      	ldr	r6, [r4, #4]
 800b478:	60a6      	str	r6, [r4, #8]
 800b47a:	2e00      	cmp	r6, #0
 800b47c:	bfa2      	ittt	ge
 800b47e:	6821      	ldrge	r1, [r4, #0]
 800b480:	f021 0104 	bicge.w	r1, r1, #4
 800b484:	6021      	strge	r1, [r4, #0]
 800b486:	b90d      	cbnz	r5, 800b48c <_printf_i+0x110>
 800b488:	2e00      	cmp	r6, #0
 800b48a:	d04b      	beq.n	800b524 <_printf_i+0x1a8>
 800b48c:	4616      	mov	r6, r2
 800b48e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b492:	fb03 5711 	mls	r7, r3, r1, r5
 800b496:	5dc7      	ldrb	r7, [r0, r7]
 800b498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b49c:	462f      	mov	r7, r5
 800b49e:	42bb      	cmp	r3, r7
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	d9f4      	bls.n	800b48e <_printf_i+0x112>
 800b4a4:	2b08      	cmp	r3, #8
 800b4a6:	d10b      	bne.n	800b4c0 <_printf_i+0x144>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	07df      	lsls	r7, r3, #31
 800b4ac:	d508      	bpl.n	800b4c0 <_printf_i+0x144>
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	6861      	ldr	r1, [r4, #4]
 800b4b2:	4299      	cmp	r1, r3
 800b4b4:	bfde      	ittt	le
 800b4b6:	2330      	movle	r3, #48	@ 0x30
 800b4b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4c0:	1b92      	subs	r2, r2, r6
 800b4c2:	6122      	str	r2, [r4, #16]
 800b4c4:	f8cd a000 	str.w	sl, [sp]
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	aa03      	add	r2, sp, #12
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	f7ff fee6 	bl	800b2a0 <_printf_common>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d14a      	bne.n	800b56e <_printf_i+0x1f2>
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	b004      	add	sp, #16
 800b4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	f043 0320 	orr.w	r3, r3, #32
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	4833      	ldr	r0, [pc, #204]	@ (800b5b8 <_printf_i+0x23c>)
 800b4ec:	2778      	movs	r7, #120	@ 0x78
 800b4ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	6831      	ldr	r1, [r6, #0]
 800b4f6:	061f      	lsls	r7, r3, #24
 800b4f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4fc:	d402      	bmi.n	800b504 <_printf_i+0x188>
 800b4fe:	065f      	lsls	r7, r3, #25
 800b500:	bf48      	it	mi
 800b502:	b2ad      	uxthmi	r5, r5
 800b504:	6031      	str	r1, [r6, #0]
 800b506:	07d9      	lsls	r1, r3, #31
 800b508:	bf44      	itt	mi
 800b50a:	f043 0320 	orrmi.w	r3, r3, #32
 800b50e:	6023      	strmi	r3, [r4, #0]
 800b510:	b11d      	cbz	r5, 800b51a <_printf_i+0x19e>
 800b512:	2310      	movs	r3, #16
 800b514:	e7ac      	b.n	800b470 <_printf_i+0xf4>
 800b516:	4827      	ldr	r0, [pc, #156]	@ (800b5b4 <_printf_i+0x238>)
 800b518:	e7e9      	b.n	800b4ee <_printf_i+0x172>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	f023 0320 	bic.w	r3, r3, #32
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	e7f6      	b.n	800b512 <_printf_i+0x196>
 800b524:	4616      	mov	r6, r2
 800b526:	e7bd      	b.n	800b4a4 <_printf_i+0x128>
 800b528:	6833      	ldr	r3, [r6, #0]
 800b52a:	6825      	ldr	r5, [r4, #0]
 800b52c:	6961      	ldr	r1, [r4, #20]
 800b52e:	1d18      	adds	r0, r3, #4
 800b530:	6030      	str	r0, [r6, #0]
 800b532:	062e      	lsls	r6, r5, #24
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	d501      	bpl.n	800b53c <_printf_i+0x1c0>
 800b538:	6019      	str	r1, [r3, #0]
 800b53a:	e002      	b.n	800b542 <_printf_i+0x1c6>
 800b53c:	0668      	lsls	r0, r5, #25
 800b53e:	d5fb      	bpl.n	800b538 <_printf_i+0x1bc>
 800b540:	8019      	strh	r1, [r3, #0]
 800b542:	2300      	movs	r3, #0
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	4616      	mov	r6, r2
 800b548:	e7bc      	b.n	800b4c4 <_printf_i+0x148>
 800b54a:	6833      	ldr	r3, [r6, #0]
 800b54c:	1d1a      	adds	r2, r3, #4
 800b54e:	6032      	str	r2, [r6, #0]
 800b550:	681e      	ldr	r6, [r3, #0]
 800b552:	6862      	ldr	r2, [r4, #4]
 800b554:	2100      	movs	r1, #0
 800b556:	4630      	mov	r0, r6
 800b558:	f7f4 fec2 	bl	80002e0 <memchr>
 800b55c:	b108      	cbz	r0, 800b562 <_printf_i+0x1e6>
 800b55e:	1b80      	subs	r0, r0, r6
 800b560:	6060      	str	r0, [r4, #4]
 800b562:	6863      	ldr	r3, [r4, #4]
 800b564:	6123      	str	r3, [r4, #16]
 800b566:	2300      	movs	r3, #0
 800b568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b56c:	e7aa      	b.n	800b4c4 <_printf_i+0x148>
 800b56e:	6923      	ldr	r3, [r4, #16]
 800b570:	4632      	mov	r2, r6
 800b572:	4649      	mov	r1, r9
 800b574:	4640      	mov	r0, r8
 800b576:	47d0      	blx	sl
 800b578:	3001      	adds	r0, #1
 800b57a:	d0ad      	beq.n	800b4d8 <_printf_i+0x15c>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	079b      	lsls	r3, r3, #30
 800b580:	d413      	bmi.n	800b5aa <_printf_i+0x22e>
 800b582:	68e0      	ldr	r0, [r4, #12]
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	4298      	cmp	r0, r3
 800b588:	bfb8      	it	lt
 800b58a:	4618      	movlt	r0, r3
 800b58c:	e7a6      	b.n	800b4dc <_printf_i+0x160>
 800b58e:	2301      	movs	r3, #1
 800b590:	4632      	mov	r2, r6
 800b592:	4649      	mov	r1, r9
 800b594:	4640      	mov	r0, r8
 800b596:	47d0      	blx	sl
 800b598:	3001      	adds	r0, #1
 800b59a:	d09d      	beq.n	800b4d8 <_printf_i+0x15c>
 800b59c:	3501      	adds	r5, #1
 800b59e:	68e3      	ldr	r3, [r4, #12]
 800b5a0:	9903      	ldr	r1, [sp, #12]
 800b5a2:	1a5b      	subs	r3, r3, r1
 800b5a4:	42ab      	cmp	r3, r5
 800b5a6:	dcf2      	bgt.n	800b58e <_printf_i+0x212>
 800b5a8:	e7eb      	b.n	800b582 <_printf_i+0x206>
 800b5aa:	2500      	movs	r5, #0
 800b5ac:	f104 0619 	add.w	r6, r4, #25
 800b5b0:	e7f5      	b.n	800b59e <_printf_i+0x222>
 800b5b2:	bf00      	nop
 800b5b4:	0800b781 	.word	0x0800b781
 800b5b8:	0800b792 	.word	0x0800b792

0800b5bc <memmove>:
 800b5bc:	4288      	cmp	r0, r1
 800b5be:	b510      	push	{r4, lr}
 800b5c0:	eb01 0402 	add.w	r4, r1, r2
 800b5c4:	d902      	bls.n	800b5cc <memmove+0x10>
 800b5c6:	4284      	cmp	r4, r0
 800b5c8:	4623      	mov	r3, r4
 800b5ca:	d807      	bhi.n	800b5dc <memmove+0x20>
 800b5cc:	1e43      	subs	r3, r0, #1
 800b5ce:	42a1      	cmp	r1, r4
 800b5d0:	d008      	beq.n	800b5e4 <memmove+0x28>
 800b5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5da:	e7f8      	b.n	800b5ce <memmove+0x12>
 800b5dc:	4402      	add	r2, r0
 800b5de:	4601      	mov	r1, r0
 800b5e0:	428a      	cmp	r2, r1
 800b5e2:	d100      	bne.n	800b5e6 <memmove+0x2a>
 800b5e4:	bd10      	pop	{r4, pc}
 800b5e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5ee:	e7f7      	b.n	800b5e0 <memmove+0x24>

0800b5f0 <_sbrk_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4d06      	ldr	r5, [pc, #24]	@ (800b60c <_sbrk_r+0x1c>)
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	f7f5 fb9a 	bl	8000d34 <_sbrk>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_sbrk_r+0x1a>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_sbrk_r+0x1a>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	24001f80 	.word	0x24001f80

0800b610 <memcpy>:
 800b610:	440a      	add	r2, r1
 800b612:	4291      	cmp	r1, r2
 800b614:	f100 33ff 	add.w	r3, r0, #4294967295
 800b618:	d100      	bne.n	800b61c <memcpy+0xc>
 800b61a:	4770      	bx	lr
 800b61c:	b510      	push	{r4, lr}
 800b61e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b622:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b626:	4291      	cmp	r1, r2
 800b628:	d1f9      	bne.n	800b61e <memcpy+0xe>
 800b62a:	bd10      	pop	{r4, pc}

0800b62c <_realloc_r>:
 800b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b630:	4680      	mov	r8, r0
 800b632:	4615      	mov	r5, r2
 800b634:	460c      	mov	r4, r1
 800b636:	b921      	cbnz	r1, 800b642 <_realloc_r+0x16>
 800b638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63c:	4611      	mov	r1, r2
 800b63e:	f7ff bc4b 	b.w	800aed8 <_malloc_r>
 800b642:	b92a      	cbnz	r2, 800b650 <_realloc_r+0x24>
 800b644:	f7ff fbdc 	bl	800ae00 <_free_r>
 800b648:	2400      	movs	r4, #0
 800b64a:	4620      	mov	r0, r4
 800b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b650:	f000 f81a 	bl	800b688 <_malloc_usable_size_r>
 800b654:	4285      	cmp	r5, r0
 800b656:	4606      	mov	r6, r0
 800b658:	d802      	bhi.n	800b660 <_realloc_r+0x34>
 800b65a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b65e:	d8f4      	bhi.n	800b64a <_realloc_r+0x1e>
 800b660:	4629      	mov	r1, r5
 800b662:	4640      	mov	r0, r8
 800b664:	f7ff fc38 	bl	800aed8 <_malloc_r>
 800b668:	4607      	mov	r7, r0
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d0ec      	beq.n	800b648 <_realloc_r+0x1c>
 800b66e:	42b5      	cmp	r5, r6
 800b670:	462a      	mov	r2, r5
 800b672:	4621      	mov	r1, r4
 800b674:	bf28      	it	cs
 800b676:	4632      	movcs	r2, r6
 800b678:	f7ff ffca 	bl	800b610 <memcpy>
 800b67c:	4621      	mov	r1, r4
 800b67e:	4640      	mov	r0, r8
 800b680:	f7ff fbbe 	bl	800ae00 <_free_r>
 800b684:	463c      	mov	r4, r7
 800b686:	e7e0      	b.n	800b64a <_realloc_r+0x1e>

0800b688 <_malloc_usable_size_r>:
 800b688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b68c:	1f18      	subs	r0, r3, #4
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bfbc      	itt	lt
 800b692:	580b      	ldrlt	r3, [r1, r0]
 800b694:	18c0      	addlt	r0, r0, r3
 800b696:	4770      	bx	lr

0800b698 <_init>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	bf00      	nop
 800b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69e:	bc08      	pop	{r3}
 800b6a0:	469e      	mov	lr, r3
 800b6a2:	4770      	bx	lr

0800b6a4 <_fini>:
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a6:	bf00      	nop
 800b6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6aa:	bc08      	pop	{r3}
 800b6ac:	469e      	mov	lr, r3
 800b6ae:	4770      	bx	lr
