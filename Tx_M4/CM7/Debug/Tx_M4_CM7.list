
Tx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2dc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800b57c  0800b57c  0000c57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b654  0800b654  0000d170  2**0
                  CONTENTS
  4 .ARM          00000008  0800b654  0800b654  0000c654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b65c  0800b65c  0000d170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b65c  0800b65c  0000c65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b660  0800b660  0000c660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  24000000  0800b664  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dfc  24000170  0800b7d4  0000d170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001f6c  0800b7d4  0000df6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abf5  00000000  00000000  0000d19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c23  00000000  00000000  00027d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0002b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4f  00000000  00000000  0002cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cdc6  00000000  00000000  0002daef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b93f  00000000  00000000  0006a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f4f1  00000000  00000000  000861f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002056e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005294  00000000  00000000  00205728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0020a9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000170 	.word	0x24000170
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b564 	.word	0x0800b564

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000174 	.word	0x24000174
 80002dc:	0800b564 	.word	0x0800b564

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b5b0      	push	{r4, r5, r7, lr}
 800079e:	b0a6      	sub	sp, #152	@ 0x98
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007aa:	bf00      	nop
 80007ac:	4b53      	ldr	r3, [pc, #332]	@ (80008fc <main+0x160>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d006      	beq.n	80007c6 <main+0x2a>
 80007b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	dcf2      	bgt.n	80007ac <main+0x10>
  if ( timeout < 0 )
 80007c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	da01      	bge.n	80007d2 <main+0x36>
  {
  Error_Handler();
 80007ce:	f000 f9b7 	bl	8000b40 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 fc3d 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f89b 	bl	8000910 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007da:	4b48      	ldr	r3, [pc, #288]	@ (80008fc <main+0x160>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e0:	4a46      	ldr	r2, [pc, #280]	@ (80008fc <main+0x160>)
 80007e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ea:	4b44      	ldr	r3, [pc, #272]	@ (80008fc <main+0x160>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 f849 	bl	8001890 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007fe:	2100      	movs	r1, #0
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f85f 	bl	80018c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000806:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800080a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800080e:	bf00      	nop
 8000810:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <main+0x160>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d106      	bne.n	800082a <main+0x8e>
 800081c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8000826:	2b00      	cmp	r3, #0
 8000828:	dcf2      	bgt.n	8000810 <main+0x74>
if ( timeout < 0 )
 800082a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x9a>
{
Error_Handler();
 8000832:	f000 f985 	bl	8000b40 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f8eb 	bl	8000a10 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800083a:	f009 fca3 	bl	800a184 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 fa3e 	bl	8000cc0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fa3b 	bl	8000cc0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800084a:	2002      	movs	r0, #2
 800084c:	f000 fa38 	bl	8000cc0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000850:	2101      	movs	r1, #1
 8000852:	2000      	movs	r0, #0
 8000854:	f000 faaa 	bl	8000dac <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000858:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <main+0x164>)
 800085a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <main+0x164>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000866:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <main+0x164>)
 8000868:	2200      	movs	r2, #0
 800086a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800086c:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <main+0x164>)
 800086e:	2200      	movs	r2, #0
 8000870:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000872:	4b23      	ldr	r3, [pc, #140]	@ (8000900 <main+0x164>)
 8000874:	2200      	movs	r2, #0
 8000876:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000878:	4921      	ldr	r1, [pc, #132]	@ (8000900 <main+0x164>)
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fb26 	bl	8000ecc <BSP_COM_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <main+0xee>
  {
    Error_Handler();
 8000886:	f000 f95b 	bl	8000b40 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100] = {'\0'};
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800088e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000892:	2260      	movs	r2, #96	@ 0x60
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f00a f9e4 	bl	800ac64 <memset>
  uint8_t Retorno[9] = {20,20,20,0,0,0,0,0,0};//Correntes (3 robos), Latência (3 Robos), Perda de Pacote (3 Robos)
 800089c:	4a19      	ldr	r2, [pc, #100]	@ (8000904 <main+0x168>)
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a4:	c303      	stmia	r3!, {r0, r1}
 80008a6:	701a      	strb	r2, [r3, #0]
  uint8_t Receive = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
  uint8_t Software[24] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; //((Dir,vel)*4Rodas)*3Robos
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <main+0x16c>)
 80008b0:	1d3c      	adds	r4, r7, #4
 80008b2:	461d      	mov	r5, r3
 80008b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008bc:	e884 0003 	stmia.w	r4, {r0, r1}
  int contador = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (1)
  {
	CDC_Receive_FS(Software,sizeof(Software));
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2118      	movs	r1, #24
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 fd06 	bl	800a2dc <CDC_Receive_FS>
	Retorno[0] = Software[0];
 80008d0:	793b      	ldrb	r3, [r7, #4]
 80008d2:	773b      	strb	r3, [r7, #28]
	sprintf(message, "%d\n",Retorno[0]);
 80008d4:	7f3b      	ldrb	r3, [r7, #28]
 80008d6:	461a      	mov	r2, r3
 80008d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008dc:	490b      	ldr	r1, [pc, #44]	@ (800090c <main+0x170>)
 80008de:	4618      	mov	r0, r3
 80008e0:	f00a f9a0 	bl	800ac24 <siprintf>
	CDC_Transmit_FS(message,sizeof(message));
 80008e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e8:	2164      	movs	r1, #100	@ 0x64
 80008ea:	4618      	mov	r0, r3
 80008ec:	f009 fd0a 	bl	800a304 <CDC_Transmit_FS>
	//CDC_Transmit_FS(message,sizeof(message));
	HAL_Delay(5);
 80008f0:	2005      	movs	r0, #5
 80008f2:	f000 fc3f 	bl	8001174 <HAL_Delay>
	CDC_Receive_FS(Software,sizeof(Software));
 80008f6:	bf00      	nop
 80008f8:	e7e5      	b.n	80008c6 <main+0x12a>
 80008fa:	bf00      	nop
 80008fc:	58024400 	.word	0x58024400
 8000900:	2400018c 	.word	0x2400018c
 8000904:	0800b580 	.word	0x0800b580
 8000908:	0800b58c 	.word	0x0800b58c
 800090c:	0800b57c 	.word	0x0800b57c

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	@ 0x70
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	224c      	movs	r2, #76	@ 0x4c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f00a f9a0 	bl	800ac64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00a f99a 	bl	800ac64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000930:	2004      	movs	r0, #4
 8000932:	f002 fa79 	bl	8002e28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b33      	ldr	r3, [pc, #204]	@ (8000a08 <SystemClock_Config+0xf8>)
 800093c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093e:	4a32      	ldr	r2, [pc, #200]	@ (8000a08 <SystemClock_Config+0xf8>)
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000946:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <SystemClock_Config+0xf8>)
 8000948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b2e      	ldr	r3, [pc, #184]	@ (8000a0c <SystemClock_Config+0xfc>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000958:	4a2c      	ldr	r2, [pc, #176]	@ (8000a0c <SystemClock_Config+0xfc>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <SystemClock_Config+0xfc>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096c:	bf00      	nop
 800096e:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <SystemClock_Config+0xfc>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800097a:	d1f8      	bne.n	800096e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800097c:	2322      	movs	r3, #34	@ 0x22
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000980:	2301      	movs	r3, #1
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2340      	movs	r3, #64	@ 0x40
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000990:	2300      	movs	r3, #0
 8000992:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000998:	2319      	movs	r3, #25
 800099a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009a0:	2305      	movs	r3, #5
 80009a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009a8:	230c      	movs	r3, #12
 80009aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fa9f 	bl	8002efc <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80009c4:	f000 f8bc 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	233f      	movs	r3, #63	@ 0x3f
 80009ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009cc:	2303      	movs	r3, #3
 80009ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009dc:	2340      	movs	r3, #64	@ 0x40
 80009de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009e6:	2340      	movs	r3, #64	@ 0x40
 80009e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2104      	movs	r1, #4
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fede 	bl	80037b0 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009fa:	f000 f8a1 	bl	8000b40 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3770      	adds	r7, #112	@ 0x70
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58000400 	.word	0x58000400
 8000a0c:	58024800 	.word	0x58024800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b41      	ldr	r3, [pc, #260]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a36:	4b3d      	ldr	r3, [pc, #244]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b39      	ldr	r3, [pc, #228]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4a:	4a38      	ldr	r2, [pc, #224]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a54:	4b35      	ldr	r3, [pc, #212]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b32      	ldr	r3, [pc, #200]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	4a30      	ldr	r2, [pc, #192]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	4a29      	ldr	r2, [pc, #164]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a90:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <MX_GPIO_Init+0x11c>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a9e:	2332      	movs	r3, #50	@ 0x32
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aae:	230b      	movs	r3, #11
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481d      	ldr	r0, [pc, #116]	@ (8000b30 <MX_GPIO_Init+0x120>)
 8000aba:	f000 fd1f 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000abe:	2386      	movs	r3, #134	@ 0x86
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4816      	ldr	r0, [pc, #88]	@ (8000b34 <MX_GPIO_Init+0x124>)
 8000ada:	f000 fd0f 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ade:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480f      	ldr	r0, [pc, #60]	@ (8000b38 <MX_GPIO_Init+0x128>)
 8000afc:	f000 fcfe 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b00:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b12:	230b      	movs	r3, #11
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000b1e:	f000 fced 	bl	80014fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	58020800 	.word	0x58020800
 8000b34:	58020000 	.word	0x58020000
 8000b38:	58020400 	.word	0x58020400
 8000b3c:	58021800 	.word	0x58021800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b58:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_MspInit+0x30>)
 8000b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	58024400 	.word	0x58024400

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 faad 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f954 	bl	8000e90 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <OTG_FS_IRQHandler+0x10>)
 8000bf2:	f000 ffbc 	bl	8001b6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	24001720 	.word	0x24001720

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f00a f820 	bl	800ac74 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	24080000 	.word	0x24080000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	2400019c 	.word	0x2400019c
 8000c68:	24001f70 	.word	0x24001f70

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c70:	f7ff fcfe 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	@ (8000cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f009 fff1 	bl	800ac80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fd7d 	bl	800079c <main>
  bx  lr
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ca8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cac:	24000170 	.word	0x24000170
  ldr r2, =_sidata
 8000cb0:	0800b664 	.word	0x0800b664
  ldr r2, =_sbss
 8000cb4:	24000170 	.word	0x24000170
  ldr r4, =_ebss
 8000cb8:	24001f6c 	.word	0x24001f6c

08000cbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC3_IRQHandler>
	...

08000cc0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	@ 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d009      	beq.n	8000ce8 <BSP_LED_Init+0x28>
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d006      	beq.n	8000ce8 <BSP_LED_Init+0x28>
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d003      	beq.n	8000ce8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ce0:	f06f 0301 	mvn.w	r3, #1
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ce6:	e055      	b.n	8000d94 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10f      	bne.n	8000d0e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000cee:	4b2c      	ldr	r3, [pc, #176]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfe:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	e021      	b.n	8000d52 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d10f      	bne.n	8000d34 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d14:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d24:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	e00e      	b.n	8000d52 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3a:	4a19      	ldr	r2, [pc, #100]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <BSP_LED_Init+0xe0>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <BSP_LED_Init+0xe4>)
 8000d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <BSP_LED_Init+0xe8>)
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	f107 0218 	add.w	r2, r7, #24
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fbc0 	bl	80014fc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <BSP_LED_Init+0xe8>)
 8000d80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4a07      	ldr	r2, [pc, #28]	@ (8000da4 <BSP_LED_Init+0xe4>)
 8000d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f000 fd64 	bl	800185c <HAL_GPIO_WritePin>
  }

  return ret;
 8000d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3730      	adds	r7, #48	@ 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	58024400 	.word	0x58024400
 8000da4:	0800b5fc 	.word	0x0800b5fc
 8000da8:	2400000c 	.word	0x2400000c

08000dac <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e78 <BSP_PB_Init+0xcc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e78 <BSP_PB_Init+0xcc>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <BSP_PB_Init+0xcc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dde:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000de0:	2302      	movs	r3, #2
 8000de2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10c      	bne.n	8000e08 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	4a21      	ldr	r2, [pc, #132]	@ (8000e7c <BSP_PB_Init+0xd0>)
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	f107 020c 	add.w	r2, r7, #12
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fb7b 	bl	80014fc <HAL_GPIO_Init>
 8000e06:	e031      	b.n	8000e6c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e0c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	@ (8000e7c <BSP_PB_Init+0xd0>)
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	f107 020c 	add.w	r2, r7, #12
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fb6d 	bl	80014fc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4a16      	ldr	r2, [pc, #88]	@ (8000e80 <BSP_PB_Init+0xd4>)
 8000e28:	441a      	add	r2, r3
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4915      	ldr	r1, [pc, #84]	@ (8000e84 <BSP_PB_Init+0xd8>)
 8000e2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e32:	4619      	mov	r1, r3
 8000e34:	4610      	mov	r0, r2
 8000e36:	f000 fb10 	bl	800145a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4a10      	ldr	r2, [pc, #64]	@ (8000e80 <BSP_PB_Init+0xd4>)
 8000e40:	1898      	adds	r0, r3, r2
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <BSP_PB_Init+0xdc>)
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f000 fae5 	bl	800141c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e52:	2028      	movs	r0, #40	@ 0x28
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <BSP_PB_Init+0xe0>)
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f000 fa93 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e64:	2328      	movs	r3, #40	@ 0x28
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 faa9 	bl	80013be <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	24000018 	.word	0x24000018
 8000e80:	240001a0 	.word	0x240001a0
 8000e84:	0800b604 	.word	0x0800b604
 8000e88:	2400001c 	.word	0x2400001c
 8000e8c:	24000020 	.word	0x24000020

08000e90 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <BSP_PB_IRQHandler+0x20>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 faee 	bl	8001484 <HAL_EXTI_IRQHandler>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	240001a0 	.word	0x240001a0

08000eb4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ee2:	f06f 0301 	mvn.w	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e018      	b.n	8000f1c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2294      	movs	r2, #148	@ 0x94
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <BSP_COM_Init+0x5c>)
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f852 	bl	8000fa0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2294      	movs	r2, #148	@ 0x94
 8000f00:	fb02 f303 	mul.w	r3, r2, r3
 8000f04:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <BSP_COM_Init+0x5c>)
 8000f06:	4413      	add	r3, r2
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f80e 	bl	8000f2c <MX_USART3_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f16:	f06f 0303 	mvn.w	r3, #3
 8000f1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	240001a8 	.word	0x240001a8

08000f2c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_USART3_Init+0x60>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	220c      	movs	r2, #12
 8000f4a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	895b      	ldrh	r3, [r3, #10]
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	891b      	ldrh	r3, [r3, #8]
 8000f62:	461a      	mov	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	899b      	ldrh	r3, [r3, #12]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f78:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f004 fdd0 	bl	8005b20 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	24000008 	.word	0x24000008

08000f90 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff ff8d 	bl	8000eb4 <BSP_PB_Callback>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fa8:	4b27      	ldr	r3, [pc, #156]	@ (8001048 <COM1_MspInit+0xa8>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	4a26      	ldr	r2, [pc, #152]	@ (8001048 <COM1_MspInit+0xa8>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb8:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <COM1_MspInit+0xa8>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000fc6:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <COM1_MspInit+0xa8>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001048 <COM1_MspInit+0xa8>)
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <COM1_MspInit+0xa8>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <COM1_MspInit+0xa8>)
 8000fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fea:	4a17      	ldr	r2, [pc, #92]	@ (8001048 <COM1_MspInit+0xa8>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <COM1_MspInit+0xa8>)
 8000ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001006:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001014:	2307      	movs	r3, #7
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	480b      	ldr	r0, [pc, #44]	@ (800104c <COM1_MspInit+0xac>)
 8001020:	f000 fa6c 	bl	80014fc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001028:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800102e:	2307      	movs	r3, #7
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <COM1_MspInit+0xac>)
 800103a:	f000 fa5f 	bl	80014fc <HAL_GPIO_Init>
}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	@ 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	58024400 	.word	0x58024400
 800104c:	58020c00 	.word	0x58020c00

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 f98c 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800105c:	f002 fd5e 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8001060:	4602      	mov	r2, r0
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_Init+0x68>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	4913      	ldr	r1, [pc, #76]	@ (80010bc <HAL_Init+0x6c>)
 800106e:	5ccb      	ldrb	r3, [r1, r3]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_Init+0x68>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <HAL_Init+0x6c>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_Init+0x70>)
 8001092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <HAL_Init+0x74>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f814 	bl	80010c8 <HAL_InitTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e002      	b.n	80010b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010aa:	f7ff fd4f 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	58024400 	.word	0x58024400
 80010bc:	0800b5ec 	.word	0x0800b5ec
 80010c0:	24000004 	.word	0x24000004
 80010c4:	24000000 	.word	0x24000000

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_InitTick+0x60>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e021      	b.n	8001120 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_InitTick+0x64>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f971 	bl	80013da <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f93b 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_InitTick+0x68>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	24000028 	.word	0x24000028
 800112c:	24000000 	.word	0x24000000
 8001130:	24000024 	.word	0x24000024

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	24000028 	.word	0x24000028
 8001158:	2400023c 	.word	0x2400023c

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2400023c 	.word	0x2400023c

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	24000028 	.word	0x24000028

080011bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetREVID+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0c1b      	lsrs	r3, r3, #16
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	5c001000 	.word	0x5c001000

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <__NVIC_SetPriorityGrouping+0x40>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <__NVIC_SetPriorityGrouping+0x40>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	05fa0000 	.word	0x05fa0000

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	@ (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	@ (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff40 	bl	800121c <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff90 	bl	80012c8 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5f 	bl	8001274 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff33 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa4 	bl	8001330 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <HAL_GetCurrentCPUID+0x24>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	2b07      	cmp	r3, #7
 8001404:	d101      	bne.n	800140a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001406:	2303      	movs	r3, #3
 8001408:	e000      	b.n	800140c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800140a:	2301      	movs	r3, #1
  }
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	460b      	mov	r3, r1
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e00a      	b.n	800144e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	605a      	str	r2, [r3, #4]
      break;
 8001444:	e002      	b.n	800144c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
      break;
 800144a:	bf00      	nop
  }

  return status;
 800144c:	7dfb      	ldrb	r3, [r7, #23]
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e003      	b.n	8001476 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001474:	2300      	movs	r3, #0
  }
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	2201      	movs	r2, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80014a8:	f7ff ffa4 	bl	80013f4 <HAL_GetCurrentCPUID>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d105      	bne.n	80014be <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	011a      	lsls	r2, r3, #4
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_EXTI_IRQHandler+0x70>)
 80014b8:	4413      	add	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e004      	b.n	80014c8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	011a      	lsls	r2, r3, #4
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <HAL_EXTI_IRQHandler+0x74>)
 80014c4:	4413      	add	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4798      	blx	r3
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	58000088 	.word	0x58000088
 80014f8:	580000c8 	.word	0x580000c8

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800150a:	4b89      	ldr	r3, [pc, #548]	@ (8001730 <HAL_GPIO_Init+0x234>)
 800150c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800150e:	e194      	b.n	800183a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8186 	beq.w	8001834 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d005      	beq.n	8001540 <HAL_GPIO_Init+0x44>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d130      	bne.n	80015a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001576:	2201      	movs	r2, #1
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	f003 0201 	and.w	r2, r3, #1
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d017      	beq.n	80015de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d123      	bne.n	8001632 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	69b9      	ldr	r1, [r7, #24]
 800162e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0203 	and.w	r2, r3, #3
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80e0 	beq.w	8001834 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001674:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <HAL_GPIO_Init+0x238>)
 8001676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800167a:	4a2e      	ldr	r2, [pc, #184]	@ (8001734 <HAL_GPIO_Init+0x238>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001684:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <HAL_GPIO_Init+0x238>)
 8001686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001692:	4a29      	ldr	r2, [pc, #164]	@ (8001738 <HAL_GPIO_Init+0x23c>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a20      	ldr	r2, [pc, #128]	@ (800173c <HAL_GPIO_Init+0x240>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d052      	beq.n	8001764 <HAL_GPIO_Init+0x268>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <HAL_GPIO_Init+0x244>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d031      	beq.n	800172a <HAL_GPIO_Init+0x22e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <HAL_GPIO_Init+0x248>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d02b      	beq.n	8001726 <HAL_GPIO_Init+0x22a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <HAL_GPIO_Init+0x24c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d025      	beq.n	8001722 <HAL_GPIO_Init+0x226>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a1c      	ldr	r2, [pc, #112]	@ (800174c <HAL_GPIO_Init+0x250>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01f      	beq.n	800171e <HAL_GPIO_Init+0x222>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001750 <HAL_GPIO_Init+0x254>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x21e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <HAL_GPIO_Init+0x258>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x21a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <HAL_GPIO_Init+0x25c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x216>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a18      	ldr	r2, [pc, #96]	@ (800175c <HAL_GPIO_Init+0x260>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x212>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <HAL_GPIO_Init+0x264>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x20e>
 8001706:	2309      	movs	r3, #9
 8001708:	e02d      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 800170a:	230a      	movs	r3, #10
 800170c:	e02b      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 800170e:	2308      	movs	r3, #8
 8001710:	e029      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 8001712:	2307      	movs	r3, #7
 8001714:	e027      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 8001716:	2306      	movs	r3, #6
 8001718:	e025      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 800171a:	2305      	movs	r3, #5
 800171c:	e023      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 800171e:	2304      	movs	r3, #4
 8001720:	e021      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 8001722:	2303      	movs	r3, #3
 8001724:	e01f      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 8001726:	2302      	movs	r3, #2
 8001728:	e01d      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 800172a:	2301      	movs	r3, #1
 800172c:	e01b      	b.n	8001766 <HAL_GPIO_Init+0x26a>
 800172e:	bf00      	nop
 8001730:	58000080 	.word	0x58000080
 8001734:	58024400 	.word	0x58024400
 8001738:	58000400 	.word	0x58000400
 800173c:	58020000 	.word	0x58020000
 8001740:	58020400 	.word	0x58020400
 8001744:	58020800 	.word	0x58020800
 8001748:	58020c00 	.word	0x58020c00
 800174c:	58021000 	.word	0x58021000
 8001750:	58021400 	.word	0x58021400
 8001754:	58021800 	.word	0x58021800
 8001758:	58021c00 	.word	0x58021c00
 800175c:	58022000 	.word	0x58022000
 8001760:	58022400 	.word	0x58022400
 8001764:	2300      	movs	r3, #0
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001776:	4938      	ldr	r1, [pc, #224]	@ (8001858 <HAL_GPIO_Init+0x35c>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	3301      	adds	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f ae63 	bne.w	8001510 <HAL_GPIO_Init+0x14>
  }
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	3724      	adds	r7, #36	@ 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	58000400 	.word	0x58000400

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001898:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <HAL_HSEM_FastTake+0x2c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3320      	adds	r3, #32
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_HSEM_FastTake+0x30>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e000      	b.n	80018ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	58026400 	.word	0x58026400
 80018c0:	80000300 	.word	0x80000300

080018c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018ce:	4906      	ldr	r1, [pc, #24]	@ (80018e8 <HAL_HSEM_Release+0x24>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	58026400 	.word	0x58026400

080018ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0fe      	b.n	8001afc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f008 fe3e 	bl	800a594 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2203      	movs	r2, #3
 800191c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f005 fa02 	bl	8006d2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7c1a      	ldrb	r2, [r3, #16]
 8001932:	f88d 2000 	strb.w	r2, [sp]
 8001936:	3304      	adds	r3, #4
 8001938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193a:	f005 f8d3 	bl	8006ae4 <USB_CoreInit>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d5      	b.n	8001afc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f005 f9fa 	bl	8006d50 <USB_SetCurrentMode>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2202      	movs	r2, #2
 8001966:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0c6      	b.n	8001afc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e04a      	b.n	8001a0a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3315      	adds	r3, #21
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	3314      	adds	r3, #20
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	b298      	uxth	r0, r3
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	332e      	adds	r3, #46	@ 0x2e
 80019b0:	4602      	mov	r2, r0
 80019b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	3318      	adds	r3, #24
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	331c      	adds	r3, #28
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3320      	adds	r3, #32
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	3324      	adds	r3, #36	@ 0x24
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	3301      	adds	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	791b      	ldrb	r3, [r3, #4]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d3af      	bcc.n	8001974 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e044      	b.n	8001aa4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3b5      	bcc.n	8001a1a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7c1a      	ldrb	r2, [r3, #16]
 8001ab6:	f88d 2000 	strb.w	r2, [sp]
 8001aba:	3304      	adds	r3, #4
 8001abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001abe:	f005 f993 	bl	8006de8 <USB_DevInit>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e013      	b.n	8001afc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7b1b      	ldrb	r3, [r3, #12]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d102      	bne.n	8001af0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f001 f96c 	bl	8002dc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 f9d2 	bl	8007e9e <USB_DevDisconnect>

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_Start+0x1c>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e022      	b.n	8001b66 <HAL_PCD_Start+0x62>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f005 f8dd 	bl	8006d0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 f980 	bl	8007e5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b6e:	b590      	push	{r4, r7, lr}
 8001b70:	b08d      	sub	sp, #52	@ 0x34
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f006 fa3e 	bl	8008006 <USB_GetMode>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 84b9 	bne.w	8002504 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 f9a2 	bl	8007ee0 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 84af 	beq.w	8002502 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f006 f98f 	bl	8007ee0 <USB_ReadInterrupts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d107      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f002 0202 	and.w	r2, r2, #2
 8001bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f006 f97d 	bl	8007ee0 <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d161      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0210 	bic.w	r2, r2, #16
 8001bfe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	0c5b      	lsrs	r3, r3, #17
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d124      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d035      	beq.n	8001ca4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	6a38      	ldr	r0, [r7, #32]
 8001c4c:	f005 ffb4 	bl	8007bb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c5c:	441a      	add	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c6e:	441a      	add	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	e016      	b.n	8001ca4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	0c5b      	lsrs	r3, r3, #17
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d110      	bne.n	8001ca4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c88:	2208      	movs	r2, #8
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6a38      	ldr	r0, [r7, #32]
 8001c8e:	f005 ff93 	bl	8007bb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c9e:	441a      	add	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0210 	orr.w	r2, r2, #16
 8001cb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f006 f911 	bl	8007ee0 <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001cc8:	f040 80a7 	bne.w	8001e1a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f006 f916 	bl	8007f06 <USB_ReadDevAllOutEpInterrupt>
 8001cda:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001cdc:	e099      	b.n	8001e12 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 808e 	beq.w	8001e06 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f006 f93a 	bl	8007f6e <USB_ReadDevOutEPInterrupt>
 8001cfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d12:	461a      	mov	r2, r3
 8001d14:	2301      	movs	r3, #1
 8001d16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fece 	bl	8002abc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00c      	beq.n	8001d44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d36:	461a      	mov	r2, r3
 8001d38:	2308      	movs	r3, #8
 8001d3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 ffa4 	bl	8002c8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d030      	beq.n	8001dcc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d72:	2b80      	cmp	r3, #128	@ 0x80
 8001d74:	d109      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	78db      	ldrb	r3, [r3, #3]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2200      	movs	r2, #0
 8001dac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f008 fd23 	bl	800a800 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2302      	movs	r3, #2
 8001dca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001de2:	461a      	mov	r2, r3
 8001de4:	2320      	movs	r3, #32
 8001de6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	3301      	adds	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f47f af62 	bne.w	8001cde <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 f85e 	bl	8007ee0 <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e2e:	f040 80db 	bne.w	8001fe8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 f87f 	bl	8007f3a <USB_ReadDevAllInEpInterrupt>
 8001e3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001e42:	e0cd      	b.n	8001fe0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80c2 	beq.w	8001fd4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f006 f8a5 	bl	8007faa <USB_ReadDevInEPInterrupt>
 8001e60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d057      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	2201      	movs	r2, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69f9      	ldr	r1, [r7, #28]
 8001e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	799b      	ldrb	r3, [r3, #6]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d132      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3320      	adds	r3, #32
 8001eba:	6819      	ldr	r1, [r3, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4403      	add	r3, r0
 8001eca:	331c      	adds	r3, #28
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4419      	add	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4403      	add	r3, r0
 8001ede:	3320      	adds	r3, #32
 8001ee0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d113      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x3a2>
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3324      	adds	r3, #36	@ 0x24
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	f006 f8ae 	bl	800806c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f008 fbed 	bl	800a6f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f32:	461a      	mov	r2, r3
 8001f34:	2308      	movs	r3, #8
 8001f36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2310      	movs	r3, #16
 8001f52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2340      	movs	r3, #64	@ 0x40
 8001f6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d023      	beq.n	8001fc2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f7c:	6a38      	ldr	r0, [r7, #32]
 8001f7e:	f005 f891 	bl	80070a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	78db      	ldrb	r3, [r3, #3]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4619      	mov	r1, r3
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f008 fc3a 	bl	800a824 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fce8 	bl	80029a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f47f af2e 	bne.w	8001e44 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 ff77 	bl	8007ee0 <USB_ReadInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ffc:	d122      	bne.n	8002044 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002018:	2b01      	cmp	r3, #1
 800201a:	d108      	bne.n	800202e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002024:	2100      	movs	r1, #0
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fef2 	bl	8002e10 <HAL_PCDEx_LPM_Callback>
 800202c:	e002      	b.n	8002034 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f008 fbd8 	bl	800a7e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f005 ff49 	bl	8007ee0 <USB_ReadInterrupts>
 800204e:	4603      	mov	r3, r0
 8002050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002058:	d112      	bne.n	8002080 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f008 fb94 	bl	800a798 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800207e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f005 ff2b 	bl	8007ee0 <USB_ReadInterrupts>
 800208a:	4603      	mov	r3, r0
 800208c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002094:	d121      	bne.n	80020da <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80020a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d111      	bne.n	80020d4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	f003 020f 	and.w	r2, r3, #15
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020ca:	2101      	movs	r1, #1
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fe9f 	bl	8002e10 <HAL_PCDEx_LPM_Callback>
 80020d2:	e002      	b.n	80020da <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f008 fb5f 	bl	800a798 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f005 fefe 	bl	8007ee0 <USB_ReadInterrupts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ee:	f040 80b7 	bne.w	8002260 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2110      	movs	r1, #16
 800210c:	4618      	mov	r0, r3
 800210e:	f004 ffc9 	bl	80070a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002116:	e046      	b.n	80021a6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002124:	461a      	mov	r2, r3
 8002126:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800212a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800212c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800213c:	0151      	lsls	r1, r2, #5
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	440a      	add	r2, r1
 8002142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002146:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800214a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800214c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002158:	461a      	mov	r2, r3
 800215a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800215e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002170:	0151      	lsls	r1, r2, #5
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	440a      	add	r2, r1
 8002176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800217a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800217e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002190:	0151      	lsls	r1, r2, #5
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	440a      	add	r2, r1
 8002196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800219a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800219e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a2:	3301      	adds	r3, #1
 80021a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	791b      	ldrb	r3, [r3, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d3b2      	bcc.n	8002118 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021c0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80021c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7bdb      	ldrb	r3, [r3, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021de:	f043 030b 	orr.w	r3, r3, #11
 80021e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021f4:	f043 030b 	orr.w	r3, r3, #11
 80021f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fa:	e015      	b.n	8002228 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800220a:	4619      	mov	r1, r3
 800220c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002210:	4313      	orrs	r3, r2
 8002212:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002222:	f043 030b 	orr.w	r3, r3, #11
 8002226:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002236:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800223a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800224a:	461a      	mov	r2, r3
 800224c:	f005 ff0e 	bl	800806c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800225e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f005 fe3b 	bl	8007ee0 <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002274:	d123      	bne.n	80022be <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fed2 	bl	8008024 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f004 ff86 	bl	8007196 <USB_GetDevSpeed>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681c      	ldr	r4, [r3, #0]
 8002296:	f001 fdbb 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 800229a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022a0:	461a      	mov	r2, r3
 80022a2:	4620      	mov	r0, r4
 80022a4:	f004 fc90 	bl	8006bc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f008 fa4c 	bl	800a746 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80022bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 fe0c 	bl	8007ee0 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d10a      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f008 fa29 	bl	800a72a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f002 0208 	and.w	r2, r2, #8
 80022e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f005 fdf7 	bl	8007ee0 <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f8:	2b80      	cmp	r3, #128	@ 0x80
 80022fa:	d123      	bne.n	8002344 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002308:	2301      	movs	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
 800230c:	e014      	b.n	8002338 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fb08 	bl	8002942 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	3301      	adds	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	461a      	mov	r2, r3
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	4293      	cmp	r3, r2
 8002342:	d3e4      	bcc.n	800230e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f005 fdc9 	bl	8007ee0 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002358:	d13c      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800235a:	2301      	movs	r3, #1
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
 800235e:	e02b      	b.n	80023b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3318      	adds	r3, #24
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d115      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002386:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	da12      	bge.n	80023b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3317      	adds	r3, #23
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fac8 	bl	8002942 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	3301      	adds	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	791b      	ldrb	r3, [r3, #4]
 80023bc:	461a      	mov	r2, r3
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d3cd      	bcc.n	8002360 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80023d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f005 fd81 	bl	8007ee0 <USB_ReadInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023e8:	d156      	bne.n	8002498 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ea:	2301      	movs	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ee:	e045      	b.n	800247c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d12e      	bne.n	8002476 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002418:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	da2b      	bge.n	8002476 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800242a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800242e:	429a      	cmp	r2, r3
 8002430:	d121      	bne.n	8002476 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800246e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002472:	6053      	str	r3, [r2, #4]
            break;
 8002474:	e008      	b.n	8002488 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	3301      	adds	r3, #1
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	791b      	ldrb	r3, [r3, #4]
 8002480:	461a      	mov	r2, r3
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	4293      	cmp	r3, r2
 8002486:	d3b3      	bcc.n	80023f0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f005 fd1f 	bl	8007ee0 <USB_ReadInterrupts>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ac:	d10a      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f008 f9ca 	bl	800a848 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80024c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 fd09 	bl	8007ee0 <USB_ReadInterrupts>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d115      	bne.n	8002504 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f008 f9ba 	bl	800a864 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	e000      	b.n	8002504 <HAL_PCD_IRQHandler+0x996>
      return;
 8002502:	bf00      	nop
    }
  }
}
 8002504:	3734      	adds	r7, #52	@ 0x34
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}

0800250a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_PCD_SetAddress+0x1a>
 8002520:	2302      	movs	r3, #2
 8002522:	e012      	b.n	800254a <HAL_PCD_SetAddress+0x40>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f005 fc68 	bl	8007e10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	4608      	mov	r0, r1
 800255c:	4611      	mov	r1, r2
 800255e:	461a      	mov	r2, r3
 8002560:	4603      	mov	r3, r0
 8002562:	70fb      	strb	r3, [r7, #3]
 8002564:	460b      	mov	r3, r1
 8002566:	803b      	strh	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002574:	2b00      	cmp	r3, #0
 8002576:	da0f      	bge.n	8002598 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 020f 	and.w	r2, r3, #15
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	3310      	adds	r3, #16
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	3304      	adds	r3, #4
 800258e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	705a      	strb	r2, [r3, #1]
 8002596:	e00f      	b.n	80025b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 020f 	and.w	r2, r3, #15
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025c4:	883a      	ldrh	r2, [r7, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	78ba      	ldrb	r2, [r7, #2]
 80025ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025e2:	78bb      	ldrb	r3, [r7, #2]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d102      	bne.n	80025ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_PCD_EP_Open+0xaa>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e00e      	b.n	800261a <HAL_PCD_EP_Open+0xc8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68f9      	ldr	r1, [r7, #12]
 800260a:	4618      	mov	r0, r3
 800260c:	f004 fde8 	bl	80071e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002618:	7afb      	ldrb	r3, [r7, #11]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800262e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002632:	2b00      	cmp	r3, #0
 8002634:	da0f      	bge.n	8002656 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	3310      	adds	r3, #16
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	705a      	strb	r2, [r3, #1]
 8002654:	e00f      	b.n	8002676 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 020f 	and.w	r2, r3, #15
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	3304      	adds	r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_PCD_EP_Close+0x6e>
 800268c:	2302      	movs	r3, #2
 800268e:	e00e      	b.n	80026ae <HAL_PCD_EP_Close+0x8c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68f9      	ldr	r1, [r7, #12]
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 fe26 	bl	80072f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	460b      	mov	r3, r1
 80026c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	f003 020f 	and.w	r2, r3, #15
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	3304      	adds	r3, #4
 80026de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2200      	movs	r2, #0
 80026f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2200      	movs	r2, #0
 80026f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f8:	7afb      	ldrb	r3, [r7, #11]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	799b      	ldrb	r3, [r3, #6]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d102      	bne.n	8002712 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	799b      	ldrb	r3, [r3, #6]
 800271a:	461a      	mov	r2, r3
 800271c:	6979      	ldr	r1, [r7, #20]
 800271e:	f004 fec3 	bl	80074a8 <USB_EPStartXfer>

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 020f 	and.w	r2, r3, #15
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	460b      	mov	r3, r1
 800276a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	f003 020f 	and.w	r2, r3, #15
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	3310      	adds	r3, #16
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2201      	movs	r2, #1
 800279a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	799b      	ldrb	r3, [r3, #6]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	799b      	ldrb	r3, [r3, #6]
 80027be:	461a      	mov	r2, r3
 80027c0:	6979      	ldr	r1, [r7, #20]
 80027c2:	f004 fe71 	bl	80074a8 <USB_EPStartXfer>

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	7912      	ldrb	r2, [r2, #4]
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e04f      	b.n	800288e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	da0f      	bge.n	8002816 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	3310      	adds	r3, #16
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	3304      	adds	r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	705a      	strb	r2, [r3, #1]
 8002814:	e00d      	b.n	8002832 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	3304      	adds	r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_PCD_EP_SetStall+0x82>
 800284e:	2302      	movs	r3, #2
 8002850:	e01d      	b.n	800288e <HAL_PCD_EP_SetStall+0xbe>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	4618      	mov	r0, r3
 8002862:	f005 fa01 	bl	8007c68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7999      	ldrb	r1, [r3, #6]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800287e:	461a      	mov	r2, r3
 8002880:	f005 fbf4 	bl	800806c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	7912      	ldrb	r2, [r2, #4]
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e042      	b.n	800293a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da0f      	bge.n	80028dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 020f 	and.w	r2, r3, #15
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	3310      	adds	r3, #16
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	3304      	adds	r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	705a      	strb	r2, [r3, #1]
 80028da:	e00f      	b.n	80028fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	3304      	adds	r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_PCD_EP_ClrStall+0x86>
 8002918:	2302      	movs	r3, #2
 800291a:	e00e      	b.n	800293a <HAL_PCD_EP_ClrStall+0xa4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	4618      	mov	r0, r3
 800292c:	f005 fa0a 	bl	8007d44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800294e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	da0c      	bge.n	8002970 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	3310      	adds	r3, #16
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e00c      	b.n	800298a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	f003 020f 	and.w	r2, r3, #15
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	3304      	adds	r3, #4
 8002988:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	4618      	mov	r0, r3
 8002992:	f005 f829 	bl	80079e8 <USB_EPStopXfer>
 8002996:	4603      	mov	r3, r0
 8002998:	72fb      	strb	r3, [r7, #11]

  return ret;
 800299a:	7afb      	ldrb	r3, [r7, #11]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	@ 0x28
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	3310      	adds	r3, #16
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d901      	bls.n	80029dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e06b      	b.n	8002ab4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d902      	bls.n	80029f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3303      	adds	r3, #3
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a00:	e02a      	b.n	8002a58 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d902      	bls.n	8002a1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3303      	adds	r3, #3
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68d9      	ldr	r1, [r3, #12]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	4603      	mov	r3, r0
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f005 f87e 	bl	8007b3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	441a      	add	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d809      	bhi.n	8002a82 <PCD_WriteEmptyTxFifo+0xde>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d203      	bcs.n	8002a82 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1bf      	bne.n	8002a02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d811      	bhi.n	8002ab2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	2201      	movs	r2, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	6939      	ldr	r1, [r7, #16]
 8002aaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002aae:	4013      	ands	r3, r2
 8002ab0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	333c      	adds	r3, #60	@ 0x3c
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	799b      	ldrb	r3, [r3, #6]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d17b      	bne.n	8002bea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4a61      	ldr	r2, [pc, #388]	@ (8002c84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	f240 80b9 	bls.w	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80b3 	beq.w	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b24:	6093      	str	r3, [r2, #8]
 8002b26:	e0a7      	b.n	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2320      	movs	r3, #32
 8002b42:	6093      	str	r3, [r2, #8]
 8002b44:	e098      	b.n	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 8093 	bne.w	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4a4b      	ldr	r2, [pc, #300]	@ (8002c84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d90f      	bls.n	8002b7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b70:	461a      	mov	r2, r3
 8002b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b76:	6093      	str	r3, [r2, #8]
 8002b78:	e07e      	b.n	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	0159      	lsls	r1, r3, #5
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	1ad2      	subs	r2, r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d114      	bne.n	8002bdc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	f005 fa50 	bl	800806c <USB_EP0_OutStart>
 8002bcc:	e006      	b.n	8002bdc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	441a      	add	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f007 fd6c 	bl	800a6c0 <HAL_PCD_DataOutStageCallback>
 8002be8:	e046      	b.n	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	4a26      	ldr	r2, [pc, #152]	@ (8002c88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d124      	bne.n	8002c3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c0e:	6093      	str	r3, [r2, #8]
 8002c10:	e032      	b.n	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f007 fd43 	bl	800a6c0 <HAL_PCD_DataOutStageCallback>
 8002c3a:	e01d      	b.n	8002c78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d114      	bne.n	8002c6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c64:	461a      	mov	r2, r3
 8002c66:	2100      	movs	r1, #0
 8002c68:	f005 fa00 	bl	800806c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f007 fd24 	bl	800a6c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	4f54300a 	.word	0x4f54300a
 8002c88:	4f54310a 	.word	0x4f54310a

08002c8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	333c      	adds	r3, #60	@ 0x3c
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	@ (8002d14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d90e      	bls.n	8002ce0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f007 fcdb 	bl	800a69c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d90c      	bls.n	8002d08 <PCD_EP_OutSetupPacket_int+0x7c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	799b      	ldrb	r3, [r3, #6]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d108      	bne.n	8002d08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d00:	461a      	mov	r2, r3
 8002d02:	2101      	movs	r1, #1
 8002d04:	f005 f9b2 	bl	800806c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	4f54300a 	.word	0x4f54300a

08002d18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
 8002d24:	4613      	mov	r3, r2
 8002d26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d36:	883b      	ldrh	r3, [r7, #0]
 8002d38:	0419      	lsls	r1, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d44:	e028      	b.n	8002d98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4413      	add	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e00d      	b.n	8002d76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	3340      	adds	r3, #64	@ 0x40
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	3301      	adds	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3ec      	bcc.n	8002d5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d80:	883b      	ldrh	r3, [r7, #0]
 8002d82:	0418      	lsls	r0, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	4302      	orrs	r2, r0
 8002d90:	3340      	adds	r3, #64	@ 0x40
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002df6:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_PCDEx_ActivateLPM+0x44>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	10000003 	.word	0x10000003

08002e10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e30:	4b29      	ldr	r3, [pc, #164]	@ (8002ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	2b06      	cmp	r3, #6
 8002e3a:	d00a      	beq.n	8002e52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e3c:	4b26      	ldr	r3, [pc, #152]	@ (8002ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e040      	b.n	8002ed0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e03e      	b.n	8002ed0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e52:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002e5a:	491f      	ldr	r1, [pc, #124]	@ (8002ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e62:	f7fe f97b 	bl	800115c <HAL_GetTick>
 8002e66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e68:	e009      	b.n	8002e7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e6a:	f7fe f977 	bl	800115c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e78:	d901      	bls.n	8002e7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e028      	b.n	8002ed0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b1e      	cmp	r3, #30
 8002e90:	d008      	beq.n	8002ea4 <HAL_PWREx_ConfigSupply+0x7c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e96:	d005      	beq.n	8002ea4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b1d      	cmp	r3, #29
 8002e9c:	d002      	beq.n	8002ea4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b2d      	cmp	r3, #45	@ 0x2d
 8002ea2:	d114      	bne.n	8002ece <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ea4:	f7fe f95a 	bl	800115c <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002eaa:	e009      	b.n	8002ec0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002eac:	f7fe f956 	bl	800115c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eba:	d901      	bls.n	8002ec0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e007      	b.n	8002ed0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ecc:	d1ee      	bne.n	8002eac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	58024800 	.word	0x58024800

08002edc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	@ (8002ef8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	58024800 	.word	0x58024800

08002efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	@ 0x30
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f000 bc48 	b.w	80037a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8088 	beq.w	800302e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1e:	4b99      	ldr	r3, [pc, #612]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f28:	4b96      	ldr	r3, [pc, #600]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d007      	beq.n	8002f44 <HAL_RCC_OscConfig+0x48>
 8002f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f36:	2b18      	cmp	r3, #24
 8002f38:	d111      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62>
 8002f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	4b8f      	ldr	r3, [pc, #572]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d06d      	beq.n	800302c <HAL_RCC_OscConfig+0x130>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d169      	bne.n	800302c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f000 bc21 	b.w	80037a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x7a>
 8002f68:	4b86      	ldr	r3, [pc, #536]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a85      	ldr	r2, [pc, #532]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e02e      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x9c>
 8002f7e:	4b81      	ldr	r3, [pc, #516]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a80      	ldr	r2, [pc, #512]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b7e      	ldr	r3, [pc, #504]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xc0>
 8002fa2:	4b78      	ldr	r3, [pc, #480]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a77      	ldr	r2, [pc, #476]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b75      	ldr	r3, [pc, #468]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a74      	ldr	r2, [pc, #464]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd8>
 8002fbc:	4b71      	ldr	r3, [pc, #452]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a70      	ldr	r2, [pc, #448]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b6e      	ldr	r3, [pc, #440]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6d      	ldr	r2, [pc, #436]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f8be 	bl	800115c <HAL_GetTick>
 8002fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe f8ba 	bl	800115c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e3d4      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff6:	4b63      	ldr	r3, [pc, #396]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe8>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe f8aa 	bl	800115c <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe f8a6 	bl	800115c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	@ 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e3c0      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800301e:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x110>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80ca 	beq.w	80031d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303c:	4b51      	ldr	r3, [pc, #324]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003044:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003046:	4b4f      	ldr	r3, [pc, #316]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_RCC_OscConfig+0x166>
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2b18      	cmp	r3, #24
 8003056:	d156      	bne.n	8003106 <HAL_RCC_OscConfig+0x20a>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d151      	bne.n	8003106 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003062:	4b48      	ldr	r3, [pc, #288]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x17e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e392      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800307a:	4b42      	ldr	r3, [pc, #264]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 0219 	bic.w	r2, r3, #25
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	493f      	ldr	r1, [pc, #252]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe f866 	bl	800115c <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003094:	f7fe f862 	bl	800115c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e37c      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a6:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b2:	f7fe f883 	bl	80011bc <HAL_GetREVID>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030bc:	4293      	cmp	r3, r2
 80030be:	d817      	bhi.n	80030f0 <HAL_RCC_OscConfig+0x1f4>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b40      	cmp	r3, #64	@ 0x40
 80030c6:	d108      	bne.n	80030da <HAL_RCC_OscConfig+0x1de>
 80030c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80030d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 80030d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d8:	e07a      	b.n	80031d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b2a      	ldr	r3, [pc, #168]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	031b      	lsls	r3, r3, #12
 80030e8:	4926      	ldr	r1, [pc, #152]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ee:	e06f      	b.n	80031d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f0:	4b24      	ldr	r3, [pc, #144]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	4921      	ldr	r1, [pc, #132]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003104:	e064      	b.n	80031d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d047      	beq.n	800319e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800310e:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 0219 	bic.w	r2, r3, #25
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	491a      	ldr	r1, [pc, #104]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe f81c 	bl	800115c <HAL_GetTick>
 8003124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003128:	f7fe f818 	bl	800115c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e332      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800313a:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	f7fe f839 	bl	80011bc <HAL_GetREVID>
 800314a:	4603      	mov	r3, r0
 800314c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003150:	4293      	cmp	r3, r2
 8003152:	d819      	bhi.n	8003188 <HAL_RCC_OscConfig+0x28c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b40      	cmp	r3, #64	@ 0x40
 800315a:	d108      	bne.n	800316e <HAL_RCC_OscConfig+0x272>
 800315c:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003164:	4a07      	ldr	r2, [pc, #28]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800316a:	6053      	str	r3, [r2, #4]
 800316c:	e030      	b.n	80031d0 <HAL_RCC_OscConfig+0x2d4>
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	031b      	lsls	r3, r3, #12
 800317c:	4901      	ldr	r1, [pc, #4]	@ (8003184 <HAL_RCC_OscConfig+0x288>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
 8003182:	e025      	b.n	80031d0 <HAL_RCC_OscConfig+0x2d4>
 8003184:	58024400 	.word	0x58024400
 8003188:	4b9a      	ldr	r3, [pc, #616]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	4997      	ldr	r1, [pc, #604]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
 800319c:	e018      	b.n	80031d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319e:	4b95      	ldr	r3, [pc, #596]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a94      	ldr	r2, [pc, #592]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fd ffd7 	bl	800115c <HAL_GetTick>
 80031ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b2:	f7fd ffd3 	bl	800115c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e2ed      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031c4:	4b8b      	ldr	r3, [pc, #556]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80a9 	beq.w	8003330 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031de:	4b85      	ldr	r3, [pc, #532]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031e8:	4b82      	ldr	r3, [pc, #520]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d007      	beq.n	8003204 <HAL_RCC_OscConfig+0x308>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b18      	cmp	r3, #24
 80031f8:	d13a      	bne.n	8003270 <HAL_RCC_OscConfig+0x374>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d135      	bne.n	8003270 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003204:	4b7b      	ldr	r3, [pc, #492]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_OscConfig+0x320>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b80      	cmp	r3, #128	@ 0x80
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e2c1      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800321c:	f7fd ffce 	bl	80011bc <HAL_GetREVID>
 8003220:	4603      	mov	r3, r0
 8003222:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003226:	4293      	cmp	r3, r2
 8003228:	d817      	bhi.n	800325a <HAL_RCC_OscConfig+0x35e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	2b20      	cmp	r3, #32
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x348>
 8003232:	4b70      	ldr	r3, [pc, #448]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800323a:	4a6e      	ldr	r2, [pc, #440]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800323c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003240:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003242:	e075      	b.n	8003330 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003244:	4b6b      	ldr	r3, [pc, #428]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	069b      	lsls	r3, r3, #26
 8003252:	4968      	ldr	r1, [pc, #416]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003258:	e06a      	b.n	8003330 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800325a:	4b66      	ldr	r3, [pc, #408]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	4962      	ldr	r1, [pc, #392]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800326a:	4313      	orrs	r3, r2
 800326c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800326e:	e05f      	b.n	8003330 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d042      	beq.n	80032fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003278:	4b5e      	ldr	r3, [pc, #376]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5d      	ldr	r2, [pc, #372]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800327e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fd ff6a 	bl	800115c <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800328c:	f7fd ff66 	bl	800115c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e280      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800329e:	4b55      	ldr	r3, [pc, #340]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032aa:	f7fd ff87 	bl	80011bc <HAL_GetREVID>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d817      	bhi.n	80032e8 <HAL_RCC_OscConfig+0x3ec>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d108      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3d6>
 80032c0:	4b4c      	ldr	r3, [pc, #304]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80032c8:	4a4a      	ldr	r2, [pc, #296]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80032ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032ce:	6053      	str	r3, [r2, #4]
 80032d0:	e02e      	b.n	8003330 <HAL_RCC_OscConfig+0x434>
 80032d2:	4b48      	ldr	r3, [pc, #288]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	069b      	lsls	r3, r3, #26
 80032e0:	4944      	ldr	r1, [pc, #272]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
 80032e6:	e023      	b.n	8003330 <HAL_RCC_OscConfig+0x434>
 80032e8:	4b42      	ldr	r3, [pc, #264]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	493f      	ldr	r1, [pc, #252]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60cb      	str	r3, [r1, #12]
 80032fc:	e018      	b.n	8003330 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032fe:	4b3d      	ldr	r3, [pc, #244]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a3c      	ldr	r2, [pc, #240]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fd ff27 	bl	800115c <HAL_GetTick>
 800330e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003312:	f7fd ff23 	bl	800115c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e23d      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003324:	4b33      	ldr	r3, [pc, #204]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d036      	beq.n	80033aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d019      	beq.n	8003378 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003344:	4b2b      	ldr	r3, [pc, #172]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 8003346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003348:	4a2a      	ldr	r2, [pc, #168]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd ff04 	bl	800115c <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7fd ff00 	bl	800115c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e21a      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800336a:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800336c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x45c>
 8003376:	e018      	b.n	80033aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003378:	4b1e      	ldr	r3, [pc, #120]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800337a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337c:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fd feea 	bl	800115c <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7fd fee6 	bl	800115c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e200      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800339e:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d039      	beq.n	800342a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033be:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80033c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033ca:	f7fd fec7 	bl	800115c <HAL_GetTick>
 80033ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d2:	f7fd fec3 	bl	800115c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e1dd      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033e4:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x4d6>
 80033f0:	e01b      	b.n	800342a <HAL_RCC_OscConfig+0x52e>
 80033f2:	bf00      	nop
 80033f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033f8:	4b9b      	ldr	r3, [pc, #620]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a9a      	ldr	r2, [pc, #616]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80033fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003402:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003404:	f7fd feaa 	bl	800115c <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340c:	f7fd fea6 	bl	800115c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1c0      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800341e:	4b92      	ldr	r3, [pc, #584]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8081 	beq.w	800353a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003438:	4b8c      	ldr	r3, [pc, #560]	@ (800366c <HAL_RCC_OscConfig+0x770>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a8b      	ldr	r2, [pc, #556]	@ (800366c <HAL_RCC_OscConfig+0x770>)
 800343e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003442:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003444:	f7fd fe8a 	bl	800115c <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fd fe86 	bl	800115c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1a0      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800345e:	4b83      	ldr	r3, [pc, #524]	@ (800366c <HAL_RCC_OscConfig+0x770>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d106      	bne.n	8003480 <HAL_RCC_OscConfig+0x584>
 8003472:	4b7d      	ldr	r3, [pc, #500]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	4a7c      	ldr	r2, [pc, #496]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	@ 0x70
 800347e:	e02d      	b.n	80034dc <HAL_RCC_OscConfig+0x5e0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x5a6>
 8003488:	4b77      	ldr	r3, [pc, #476]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	4a76      	ldr	r2, [pc, #472]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6713      	str	r3, [r2, #112]	@ 0x70
 8003494:	4b74      	ldr	r3, [pc, #464]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	4a73      	ldr	r2, [pc, #460]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 800349a:	f023 0304 	bic.w	r3, r3, #4
 800349e:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a0:	e01c      	b.n	80034dc <HAL_RCC_OscConfig+0x5e0>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c8>
 80034aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0x5e0>
 80034c4:	4b68      	ldr	r3, [pc, #416]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	4a67      	ldr	r2, [pc, #412]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d0:	4b65      	ldr	r3, [pc, #404]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	4a64      	ldr	r2, [pc, #400]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80034d6:	f023 0304 	bic.w	r3, r3, #4
 80034da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fd fe3a 	bl	800115c <HAL_GetTick>
 80034e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fd fe36 	bl	800115c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e14e      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003502:	4b59      	ldr	r3, [pc, #356]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0ee      	beq.n	80034ec <HAL_RCC_OscConfig+0x5f0>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fd fe24 	bl	800115c <HAL_GetTick>
 8003514:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003516:	e00a      	b.n	800352e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fd fe20 	bl	800115c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e138      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800352e:	4b4e      	ldr	r3, [pc, #312]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1ee      	bne.n	8003518 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 812d 	beq.w	800379e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003544:	4b48      	ldr	r3, [pc, #288]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800354c:	2b18      	cmp	r3, #24
 800354e:	f000 80bd 	beq.w	80036cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	2b02      	cmp	r3, #2
 8003558:	f040 809e 	bne.w	8003698 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b42      	ldr	r3, [pc, #264]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a41      	ldr	r2, [pc, #260]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd fdf8 	bl	800115c <HAL_GetTick>
 800356c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fd fdf4 	bl	800115c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e10e      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003582:	4b39      	ldr	r3, [pc, #228]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800358e:	4b36      	ldr	r3, [pc, #216]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003592:	4b37      	ldr	r3, [pc, #220]	@ (8003670 <HAL_RCC_OscConfig+0x774>)
 8003594:	4013      	ands	r3, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	430a      	orrs	r2, r1
 80035a2:	4931      	ldr	r1, [pc, #196]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	3b01      	subs	r3, #1
 80035ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	3b01      	subs	r3, #1
 80035b8:	025b      	lsls	r3, r3, #9
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c2:	3b01      	subs	r3, #1
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	3b01      	subs	r3, #1
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80035d8:	4923      	ldr	r1, [pc, #140]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80035de:	4b22      	ldr	r3, [pc, #136]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e2:	4a21      	ldr	r2, [pc, #132]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80035ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ee:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <HAL_RCC_OscConfig+0x778>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035f6:	00d2      	lsls	r2, r2, #3
 80035f8:	491b      	ldr	r1, [pc, #108]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003602:	f023 020c 	bic.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	4917      	ldr	r1, [pc, #92]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003610:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003614:	f023 0202 	bic.w	r2, r3, #2
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	4912      	ldr	r1, [pc, #72]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003622:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	4a10      	ldr	r2, [pc, #64]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362e:	4b0e      	ldr	r3, [pc, #56]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	4a0d      	ldr	r2, [pc, #52]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800363a:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	4a07      	ldr	r2, [pc, #28]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003652:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a04      	ldr	r2, [pc, #16]	@ (8003668 <HAL_RCC_OscConfig+0x76c>)
 8003658:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800365c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd fd7d 	bl	800115c <HAL_GetTick>
 8003662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003664:	e011      	b.n	800368a <HAL_RCC_OscConfig+0x78e>
 8003666:	bf00      	nop
 8003668:	58024400 	.word	0x58024400
 800366c:	58024800 	.word	0x58024800
 8003670:	fffffc0c 	.word	0xfffffc0c
 8003674:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fd fd70 	bl	800115c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e08a      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800368a:	4b47      	ldr	r3, [pc, #284]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x77c>
 8003696:	e082      	b.n	800379e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	4b43      	ldr	r3, [pc, #268]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a42      	ldr	r2, [pc, #264]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 800369e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd fd5a 	bl	800115c <HAL_GetTick>
 80036a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fd fd56 	bl	800115c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e070      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036be:	4b3a      	ldr	r3, [pc, #232]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x7b0>
 80036ca:	e068      	b.n	800379e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036cc:	4b36      	ldr	r3, [pc, #216]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036d2:	4b35      	ldr	r3, [pc, #212]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d031      	beq.n	8003744 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f003 0203 	and.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d12a      	bne.n	8003744 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d122      	bne.n	8003744 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d11a      	bne.n	8003744 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	0a5b      	lsrs	r3, r3, #9
 8003712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d111      	bne.n	8003744 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	0c1b      	lsrs	r3, r3, #16
 8003724:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d108      	bne.n	8003744 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0e1b      	lsrs	r3, r3, #24
 8003736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e02b      	b.n	80037a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003748:	4b17      	ldr	r3, [pc, #92]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	08db      	lsrs	r3, r3, #3
 800374e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003752:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	429a      	cmp	r2, r3
 800375c:	d01f      	beq.n	800379e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800375e:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	4a11      	ldr	r2, [pc, #68]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800376a:	f7fd fcf7 	bl	800115c <HAL_GetTick>
 800376e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003770:	bf00      	nop
 8003772:	f7fd fcf3 	bl	800115c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	4293      	cmp	r3, r2
 800377c:	d0f9      	beq.n	8003772 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800377e:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 8003780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003782:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <HAL_RCC_OscConfig+0x8b0>)
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800378a:	00d2      	lsls	r2, r2, #3
 800378c:	4906      	ldr	r1, [pc, #24]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 800378e:	4313      	orrs	r3, r2
 8003790:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003792:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <HAL_RCC_OscConfig+0x8ac>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3730      	adds	r7, #48	@ 0x30
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	58024400 	.word	0x58024400
 80037ac:	ffff0007 	.word	0xffff0007

080037b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e19c      	b.n	8003afe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b8a      	ldr	r3, [pc, #552]	@ (80039f0 <HAL_RCC_ClockConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d910      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b87      	ldr	r3, [pc, #540]	@ (80039f0 <HAL_RCC_ClockConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 020f 	bic.w	r2, r3, #15
 80037da:	4985      	ldr	r1, [pc, #532]	@ (80039f0 <HAL_RCC_ClockConfig+0x240>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b83      	ldr	r3, [pc, #524]	@ (80039f0 <HAL_RCC_ClockConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e184      	b.n	8003afe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	4b7b      	ldr	r3, [pc, #492]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800380c:	429a      	cmp	r2, r3
 800380e:	d908      	bls.n	8003822 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003810:	4b78      	ldr	r3, [pc, #480]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	4975      	ldr	r1, [pc, #468]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 800381e:	4313      	orrs	r3, r2
 8003820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d010      	beq.n	8003850 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	4b70      	ldr	r3, [pc, #448]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800383a:	429a      	cmp	r2, r3
 800383c:	d908      	bls.n	8003850 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800383e:	4b6d      	ldr	r3, [pc, #436]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	496a      	ldr	r1, [pc, #424]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 800384c:	4313      	orrs	r3, r2
 800384e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	4b64      	ldr	r3, [pc, #400]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003868:	429a      	cmp	r2, r3
 800386a:	d908      	bls.n	800387e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800386c:	4b61      	ldr	r3, [pc, #388]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	495e      	ldr	r1, [pc, #376]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 800387a:	4313      	orrs	r3, r2
 800387c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d010      	beq.n	80038ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	4b59      	ldr	r3, [pc, #356]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003896:	429a      	cmp	r2, r3
 8003898:	d908      	bls.n	80038ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800389a:	4b56      	ldr	r3, [pc, #344]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4953      	ldr	r1, [pc, #332]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d010      	beq.n	80038da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	4b4d      	ldr	r3, [pc, #308]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d908      	bls.n	80038da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c8:	4b4a      	ldr	r3, [pc, #296]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f023 020f 	bic.w	r2, r3, #15
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4947      	ldr	r1, [pc, #284]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d055      	beq.n	8003992 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038e6:	4b43      	ldr	r3, [pc, #268]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4940      	ldr	r1, [pc, #256]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003900:	4b3c      	ldr	r3, [pc, #240]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d121      	bne.n	8003950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0f6      	b.n	8003afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d107      	bne.n	8003928 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003918:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d115      	bne.n	8003950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0ea      	b.n	8003afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003930:	4b30      	ldr	r3, [pc, #192]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0de      	b.n	8003afe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003940:	4b2c      	ldr	r3, [pc, #176]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d6      	b.n	8003afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003950:	4b28      	ldr	r3, [pc, #160]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f023 0207 	bic.w	r2, r3, #7
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4925      	ldr	r1, [pc, #148]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 800395e:	4313      	orrs	r3, r2
 8003960:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003962:	f7fd fbfb 	bl	800115c <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003968:	e00a      	b.n	8003980 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396a:	f7fd fbf7 	bl	800115c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003978:	4293      	cmp	r3, r2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e0be      	b.n	8003afe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003980:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	429a      	cmp	r2, r3
 8003990:	d1eb      	bne.n	800396a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d010      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d208      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ae:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f023 020f 	bic.w	r2, r3, #15
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	490e      	ldr	r1, [pc, #56]	@ (80039f4 <HAL_RCC_ClockConfig+0x244>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_ClockConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d214      	bcs.n	80039f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <HAL_RCC_ClockConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 020f 	bic.w	r2, r3, #15
 80039d6:	4906      	ldr	r1, [pc, #24]	@ (80039f0 <HAL_RCC_ClockConfig+0x240>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <HAL_RCC_ClockConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e086      	b.n	8003afe <HAL_RCC_ClockConfig+0x34e>
 80039f0:	52002000 	.word	0x52002000
 80039f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d010      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	4b3f      	ldr	r3, [pc, #252]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d208      	bcs.n	8003a26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a14:	4b3c      	ldr	r3, [pc, #240]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	4939      	ldr	r1, [pc, #228]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d010      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	4b34      	ldr	r3, [pc, #208]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d208      	bcs.n	8003a54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a42:	4b31      	ldr	r3, [pc, #196]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	492e      	ldr	r1, [pc, #184]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	4b28      	ldr	r3, [pc, #160]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d208      	bcs.n	8003a82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a70:	4b25      	ldr	r3, [pc, #148]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	4922      	ldr	r1, [pc, #136]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d208      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4917      	ldr	r1, [pc, #92]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ab0:	f000 f834 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	4912      	ldr	r1, [pc, #72]	@ (8003b0c <HAL_RCC_ClockConfig+0x35c>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ace:	4b0e      	ldr	r3, [pc, #56]	@ (8003b08 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b0c <HAL_RCC_ClockConfig+0x35c>)
 8003ad8:	5cd3      	ldrb	r3, [r2, r3]
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <HAL_RCC_ClockConfig+0x360>)
 8003ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <HAL_RCC_ClockConfig+0x364>)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <HAL_RCC_ClockConfig+0x368>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fae8 	bl	80010c8 <HAL_InitTick>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	0800b5ec 	.word	0x0800b5ec
 8003b10:	24000004 	.word	0x24000004
 8003b14:	24000000 	.word	0x24000000
 8003b18:	24000024 	.word	0x24000024

08003b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	@ 0x24
 8003b20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b22:	4bb3      	ldr	r3, [pc, #716]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b2a:	2b18      	cmp	r3, #24
 8003b2c:	f200 8155 	bhi.w	8003dda <HAL_RCC_GetSysClockFreq+0x2be>
 8003b30:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b9d 	.word	0x08003b9d
 8003b3c:	08003ddb 	.word	0x08003ddb
 8003b40:	08003ddb 	.word	0x08003ddb
 8003b44:	08003ddb 	.word	0x08003ddb
 8003b48:	08003ddb 	.word	0x08003ddb
 8003b4c:	08003ddb 	.word	0x08003ddb
 8003b50:	08003ddb 	.word	0x08003ddb
 8003b54:	08003ddb 	.word	0x08003ddb
 8003b58:	08003bc3 	.word	0x08003bc3
 8003b5c:	08003ddb 	.word	0x08003ddb
 8003b60:	08003ddb 	.word	0x08003ddb
 8003b64:	08003ddb 	.word	0x08003ddb
 8003b68:	08003ddb 	.word	0x08003ddb
 8003b6c:	08003ddb 	.word	0x08003ddb
 8003b70:	08003ddb 	.word	0x08003ddb
 8003b74:	08003ddb 	.word	0x08003ddb
 8003b78:	08003bc9 	.word	0x08003bc9
 8003b7c:	08003ddb 	.word	0x08003ddb
 8003b80:	08003ddb 	.word	0x08003ddb
 8003b84:	08003ddb 	.word	0x08003ddb
 8003b88:	08003ddb 	.word	0x08003ddb
 8003b8c:	08003ddb 	.word	0x08003ddb
 8003b90:	08003ddb 	.word	0x08003ddb
 8003b94:	08003ddb 	.word	0x08003ddb
 8003b98:	08003bcf 	.word	0x08003bcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b9c:	4b94      	ldr	r3, [pc, #592]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d009      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ba8:	4b91      	ldr	r3, [pc, #580]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	4a90      	ldr	r2, [pc, #576]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003bba:	e111      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bbe:	61bb      	str	r3, [r7, #24]
      break;
 8003bc0:	e10e      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bc4:	61bb      	str	r3, [r7, #24]
      break;
 8003bc6:	e10b      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bca:	61bb      	str	r3, [r7, #24]
      break;
 8003bcc:	e108      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bce:	4b88      	ldr	r3, [pc, #544]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003bd8:	4b85      	ldr	r3, [pc, #532]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003be4:	4b82      	ldr	r3, [pc, #520]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003bee:	4b80      	ldr	r3, [pc, #512]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf2:	08db      	lsrs	r3, r3, #3
 8003bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80e1 	beq.w	8003dd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	f000 8083 	beq.w	8003d20 <HAL_RCC_GetSysClockFreq+0x204>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	f200 80a1 	bhi.w	8003d64 <HAL_RCC_GetSysClockFreq+0x248>
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x114>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d056      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c2e:	e099      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c30:	4b6f      	ldr	r3, [pc, #444]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02d      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	4a6b      	ldr	r2, [pc, #428]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c66:	4b62      	ldr	r3, [pc, #392]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003c96:	e087      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003caa:	4b51      	ldr	r3, [pc, #324]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cbe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cda:	e065      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	4b40      	ldr	r3, [pc, #256]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d1e:	e043      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	4b2f      	ldr	r3, [pc, #188]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d62:	e021      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b1e      	ldr	r3, [pc, #120]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003da6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003da8:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003db2:	3301      	adds	r3, #1
 8003db4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dcc:	ee17 3a90 	vmov	r3, s15
 8003dd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003dd2:	e005      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61bb      	str	r3, [r7, #24]
      break;
 8003dd8:	e002      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003dda:	4b07      	ldr	r3, [pc, #28]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ddc:	61bb      	str	r3, [r7, #24]
      break;
 8003dde:	bf00      	nop
  }

  return sysclockfreq;
 8003de0:	69bb      	ldr	r3, [r7, #24]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	@ 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	58024400 	.word	0x58024400
 8003df4:	03d09000 	.word	0x03d09000
 8003df8:	003d0900 	.word	0x003d0900
 8003dfc:	017d7840 	.word	0x017d7840
 8003e00:	46000000 	.word	0x46000000
 8003e04:	4c742400 	.word	0x4c742400
 8003e08:	4a742400 	.word	0x4a742400
 8003e0c:	4bbebc20 	.word	0x4bbebc20

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e16:	f7ff fe81 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	490f      	ldr	r1, [pc, #60]	@ (8003e64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e28:	5ccb      	ldrb	r3, [r1, r3]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e34:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e3e:	5cd3      	ldrb	r3, [r2, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	4a07      	ldr	r2, [pc, #28]	@ (8003e68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e4e:	4a07      	ldr	r2, [pc, #28]	@ (8003e6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e54:	4b04      	ldr	r3, [pc, #16]	@ (8003e68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	58024400 	.word	0x58024400
 8003e64:	0800b5ec 	.word	0x0800b5ec
 8003e68:	24000004 	.word	0x24000004
 8003e6c:	24000000 	.word	0x24000000

08003e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e74:	f7ff ffcc 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4904      	ldr	r1, [pc, #16]	@ (8003e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	58024400 	.word	0x58024400
 8003e98:	0800b5ec 	.word	0x0800b5ec

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ea0:	f7ff ffb6 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4904      	ldr	r1, [pc, #16]	@ (8003ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	0800b5ec 	.word	0x0800b5ec

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ecc:	b0ca      	sub	sp, #296	@ 0x128
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003eec:	2500      	movs	r5, #0
 8003eee:	ea54 0305 	orrs.w	r3, r4, r5
 8003ef2:	d049      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003efa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003efe:	d02f      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f04:	d828      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f0a:	d01a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f10:	d822      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f1a:	d007      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f1c:	e01c      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1e:	4bb8      	ldr	r3, [pc, #736]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	4ab7      	ldr	r2, [pc, #732]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f2a:	e01a      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	3308      	adds	r3, #8
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 fc8f 	bl	8005858 <RCCEx_PLL2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f40:	e00f      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	3328      	adds	r3, #40	@ 0x28
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fd36 	bl	80059bc <RCCEx_PLL3_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f56:	e004      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f6a:	4ba5      	ldr	r3, [pc, #660]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f78:	4aa1      	ldr	r2, [pc, #644]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f7e:	e003      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003f94:	f04f 0900 	mov.w	r9, #0
 8003f98:	ea58 0309 	orrs.w	r3, r8, r9
 8003f9c:	d047      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d82a      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fc5 	.word	0x08003fc5
 8003fb4:	08003fd3 	.word	0x08003fd3
 8003fb8:	08003fe9 	.word	0x08003fe9
 8003fbc:	08004007 	.word	0x08004007
 8003fc0:	08004007 	.word	0x08004007
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc4:	4b8e      	ldr	r3, [pc, #568]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	4a8d      	ldr	r2, [pc, #564]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fd0:	e01a      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fc3c 	bl	8005858 <RCCEx_PLL2_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fe6:	e00f      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fec:	3328      	adds	r3, #40	@ 0x28
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 fce3 	bl	80059bc <RCCEx_PLL3_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e004      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004010:	4b7b      	ldr	r3, [pc, #492]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004014:	f023 0107 	bic.w	r1, r3, #7
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	4a78      	ldr	r2, [pc, #480]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004020:	430b      	orrs	r3, r1
 8004022:	6513      	str	r3, [r2, #80]	@ 0x50
 8004024:	e003      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800403a:	f04f 0b00 	mov.w	fp, #0
 800403e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004042:	d04c      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800404e:	d030      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004054:	d829      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004056:	2bc0      	cmp	r3, #192	@ 0xc0
 8004058:	d02d      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800405a:	2bc0      	cmp	r3, #192	@ 0xc0
 800405c:	d825      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800405e:	2b80      	cmp	r3, #128	@ 0x80
 8004060:	d018      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004062:	2b80      	cmp	r3, #128	@ 0x80
 8004064:	d821      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800406a:	2b40      	cmp	r3, #64	@ 0x40
 800406c:	d007      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800406e:	e01c      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004070:	4b63      	ldr	r3, [pc, #396]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	4a62      	ldr	r2, [pc, #392]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800407a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800407c:	e01c      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004082:	3308      	adds	r3, #8
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fbe6 	bl	8005858 <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004092:	e011      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004098:	3328      	adds	r3, #40	@ 0x28
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f001 fc8d 	bl	80059bc <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040a8:	e006      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80040ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80040f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80040f8:	460b      	mov	r3, r1
 80040fa:	4313      	orrs	r3, r2
 80040fc:	d053      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004106:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800410a:	d035      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800410c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004110:	d82e      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004112:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004116:	d031      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004118:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800411c:	d828      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800411e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004122:	d01a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004128:	d822      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800412e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004132:	d007      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004134:	e01c      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004136:	4b32      	ldr	r3, [pc, #200]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	4a31      	ldr	r2, [pc, #196]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800413c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004142:	e01c      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	3308      	adds	r3, #8
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f001 fb83 	bl	8005858 <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004158:	e011      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	3328      	adds	r3, #40	@ 0x28
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f001 fc2a 	bl	80059bc <RCCEx_PLL3_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800416e:	e006      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004176:	e002      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800417c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004186:	4b1e      	ldr	r3, [pc, #120]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800418e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004196:	4a1a      	ldr	r2, [pc, #104]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004198:	430b      	orrs	r3, r1
 800419a:	6593      	str	r3, [r2, #88]	@ 0x58
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80041b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80041bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d056      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041d2:	d038      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80041d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041d8:	d831      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041de:	d034      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80041e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041e4:	d82b      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041ea:	d01d      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80041ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041f0:	d825      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80041f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041fc:	e01f      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004204:	4ba2      	ldr	r3, [pc, #648]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	4aa1      	ldr	r2, [pc, #644]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800420a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800420e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004210:	e01c      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	3308      	adds	r3, #8
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f001 fb1c 	bl	8005858 <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004226:	e011      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	3328      	adds	r3, #40	@ 0x28
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fbc3 	bl	80059bc <RCCEx_PLL3_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800423c:	e006      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004244:	e002      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800424a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004254:	4b8e      	ldr	r3, [pc, #568]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004258:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004260:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004264:	4a8a      	ldr	r2, [pc, #552]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004266:	430b      	orrs	r3, r1
 8004268:	6593      	str	r3, [r2, #88]	@ 0x58
 800426a:	e003      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004280:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800428a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	d03a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	2b30      	cmp	r3, #48	@ 0x30
 800429c:	d01f      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800429e:	2b30      	cmp	r3, #48	@ 0x30
 80042a0:	d819      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d00c      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d815      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d019      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d111      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b2:	4b77      	ldr	r3, [pc, #476]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	4a76      	ldr	r2, [pc, #472]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042be:	e011      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c4:	3308      	adds	r3, #8
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fac5 	bl	8005858 <RCCEx_PLL2_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042dc:	e002      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042ec:	4b68      	ldr	r3, [pc, #416]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	4a65      	ldr	r2, [pc, #404]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004300:	e003      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004316:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004320:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004324:	460b      	mov	r3, r1
 8004326:	4313      	orrs	r3, r2
 8004328:	d051      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004334:	d035      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800433a:	d82e      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800433c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004340:	d031      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004342:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004346:	d828      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434c:	d01a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800434e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004352:	d822      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435c:	d007      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800435e:	e01c      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004360:	4b4b      	ldr	r3, [pc, #300]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	4a4a      	ldr	r2, [pc, #296]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800436c:	e01c      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	3308      	adds	r3, #8
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fa6e 	bl	8005858 <RCCEx_PLL2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004382:	e011      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004388:	3328      	adds	r3, #40	@ 0x28
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f001 fb15 	bl	80059bc <RCCEx_PLL3_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004398:	e006      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043a0:	e002      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043b0:	4b37      	ldr	r3, [pc, #220]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043be:	4a34      	ldr	r2, [pc, #208]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80043c4:	e003      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80043da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80043e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80043e8:	460b      	mov	r3, r1
 80043ea:	4313      	orrs	r3, r2
 80043ec:	d056      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f8:	d033      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80043fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043fe:	d82c      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004400:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004404:	d02f      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004406:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800440a:	d826      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800440c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004410:	d02b      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004412:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004416:	d820      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800441c:	d012      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800441e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004422:	d81a      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d022      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800442c:	d115      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004432:	3308      	adds	r3, #8
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f001 fa0e 	bl	8005858 <RCCEx_PLL2_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004442:	e015      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	3328      	adds	r3, #40	@ 0x28
 800444a:	2101      	movs	r1, #1
 800444c:	4618      	mov	r0, r3
 800444e:	f001 fab5 	bl	80059bc <RCCEx_PLL3_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004458:	e00a      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004460:	e006      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004462:	bf00      	nop
 8004464:	e004      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004466:	bf00      	nop
 8004468:	e002      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800446a:	bf00      	nop
 800446c:	e000      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800446e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10d      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800447a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004486:	4a02      	ldr	r2, [pc, #8]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6513      	str	r3, [r2, #80]	@ 0x50
 800448c:	e006      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800448e:	bf00      	nop
 8004490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80044a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4313      	orrs	r3, r2
 80044ba:	d055      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044c8:	d033      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80044ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044ce:	d82c      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d4:	d02f      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044da:	d826      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044e0:	d02b      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80044e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044e6:	d820      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ec:	d012      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80044ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044f2:	d81a      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d022      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80044f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044fc:	d115      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	3308      	adds	r3, #8
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f001 f9a6 	bl	8005858 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004512:	e015      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	3328      	adds	r3, #40	@ 0x28
 800451a:	2101      	movs	r1, #1
 800451c:	4618      	mov	r0, r3
 800451e:	f001 fa4d 	bl	80059bc <RCCEx_PLL3_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004528:	e00a      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004532:	bf00      	nop
 8004534:	e004      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004536:	bf00      	nop
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800453e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004548:	4ba3      	ldr	r3, [pc, #652]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004558:	4a9f      	ldr	r2, [pc, #636]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800455a:	430b      	orrs	r3, r1
 800455c:	6593      	str	r3, [r2, #88]	@ 0x58
 800455e:	e003      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004564:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800457e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004582:	460b      	mov	r3, r1
 8004584:	4313      	orrs	r3, r2
 8004586:	d037      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004592:	d00e      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004598:	d816      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800459e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045a2:	d111      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a4:	4b8c      	ldr	r3, [pc, #560]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	4a8b      	ldr	r2, [pc, #556]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045b0:	e00f      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	3308      	adds	r3, #8
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 f94c 	bl	8005858 <RCCEx_PLL2_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80045d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045da:	4b7f      	ldr	r3, [pc, #508]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	4a7b      	ldr	r2, [pc, #492]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ea:	430b      	orrs	r3, r1
 80045ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80045ee:	e003      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800460e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d039      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461e:	2b03      	cmp	r3, #3
 8004620:	d81c      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004622:	a201      	add	r2, pc, #4	@ (adr r2, 8004628 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	08004665 	.word	0x08004665
 800462c:	08004639 	.word	0x08004639
 8004630:	08004647 	.word	0x08004647
 8004634:	08004665 	.word	0x08004665
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004638:	4b67      	ldr	r3, [pc, #412]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	4a66      	ldr	r2, [pc, #408]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800463e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004644:	e00f      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	3308      	adds	r3, #8
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f001 f902 	bl	8005858 <RCCEx_PLL2_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800465a:	e004      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800466e:	4b5a      	ldr	r3, [pc, #360]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004672:	f023 0103 	bic.w	r1, r3, #3
 8004676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467c:	4a56      	ldr	r2, [pc, #344]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800467e:	430b      	orrs	r3, r1
 8004680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004682:	e003      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004698:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f000 809f 	beq.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ae:	4b4b      	ldr	r3, [pc, #300]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4a      	ldr	r2, [pc, #296]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046ba:	f7fc fd4f 	bl	800115c <HAL_GetTick>
 80046be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c2:	e00b      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c4:	f7fc fd4a 	bl	800115c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b64      	cmp	r3, #100	@ 0x64
 80046d2:	d903      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046da:	e005      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046dc:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0ed      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80046e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d179      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046fc:	4053      	eors	r3, r2
 80046fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004702:	2b00      	cmp	r3, #0
 8004704:	d015      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004706:	4b34      	ldr	r3, [pc, #208]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004712:	4b31      	ldr	r3, [pc, #196]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004716:	4a30      	ldr	r2, [pc, #192]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800471e:	4b2e      	ldr	r3, [pc, #184]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	4a2d      	ldr	r2, [pc, #180]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004728:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800472a:	4a2b      	ldr	r2, [pc, #172]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800472c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004730:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800473a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473e:	d118      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fc fd0c 	bl	800115c <HAL_GetTick>
 8004744:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004748:	e00d      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fc fd07 	bl	800115c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004754:	1ad2      	subs	r2, r2, r3
 8004756:	f241 3388 	movw	r3, #5000	@ 0x1388
 800475a:	429a      	cmp	r2, r3
 800475c:	d903      	bls.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004764:	e005      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004766:	4b1c      	ldr	r3, [pc, #112]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0eb      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004776:	2b00      	cmp	r3, #0
 8004778:	d129      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800478a:	d10e      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800478c:	4b12      	ldr	r3, [pc, #72]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800479c:	091a      	lsrs	r2, r3, #4
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	4a0d      	ldr	r2, [pc, #52]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6113      	str	r3, [r2, #16]
 80047a8:	e005      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	4a0a      	ldr	r2, [pc, #40]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047b4:	6113      	str	r3, [r2, #16]
 80047b6:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c6:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80047cc:	e00e      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80047d6:	e009      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80047d8:	58024400 	.word	0x58024400
 80047dc:	58024800 	.word	0x58024800
 80047e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f002 0301 	and.w	r3, r2, #1
 80047f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004802:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004806:	460b      	mov	r3, r1
 8004808:	4313      	orrs	r3, r2
 800480a:	f000 8089 	beq.w	8004920 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800480e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004814:	2b28      	cmp	r3, #40	@ 0x28
 8004816:	d86b      	bhi.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004818:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	080048f9 	.word	0x080048f9
 8004824:	080048f1 	.word	0x080048f1
 8004828:	080048f1 	.word	0x080048f1
 800482c:	080048f1 	.word	0x080048f1
 8004830:	080048f1 	.word	0x080048f1
 8004834:	080048f1 	.word	0x080048f1
 8004838:	080048f1 	.word	0x080048f1
 800483c:	080048f1 	.word	0x080048f1
 8004840:	080048c5 	.word	0x080048c5
 8004844:	080048f1 	.word	0x080048f1
 8004848:	080048f1 	.word	0x080048f1
 800484c:	080048f1 	.word	0x080048f1
 8004850:	080048f1 	.word	0x080048f1
 8004854:	080048f1 	.word	0x080048f1
 8004858:	080048f1 	.word	0x080048f1
 800485c:	080048f1 	.word	0x080048f1
 8004860:	080048db 	.word	0x080048db
 8004864:	080048f1 	.word	0x080048f1
 8004868:	080048f1 	.word	0x080048f1
 800486c:	080048f1 	.word	0x080048f1
 8004870:	080048f1 	.word	0x080048f1
 8004874:	080048f1 	.word	0x080048f1
 8004878:	080048f1 	.word	0x080048f1
 800487c:	080048f1 	.word	0x080048f1
 8004880:	080048f9 	.word	0x080048f9
 8004884:	080048f1 	.word	0x080048f1
 8004888:	080048f1 	.word	0x080048f1
 800488c:	080048f1 	.word	0x080048f1
 8004890:	080048f1 	.word	0x080048f1
 8004894:	080048f1 	.word	0x080048f1
 8004898:	080048f1 	.word	0x080048f1
 800489c:	080048f1 	.word	0x080048f1
 80048a0:	080048f9 	.word	0x080048f9
 80048a4:	080048f1 	.word	0x080048f1
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048f1 	.word	0x080048f1
 80048b0:	080048f1 	.word	0x080048f1
 80048b4:	080048f1 	.word	0x080048f1
 80048b8:	080048f1 	.word	0x080048f1
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	080048f9 	.word	0x080048f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c8:	3308      	adds	r3, #8
 80048ca:	2101      	movs	r1, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 ffc3 	bl	8005858 <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048d8:	e00f      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	3328      	adds	r3, #40	@ 0x28
 80048e0:	2101      	movs	r1, #1
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 f86a 	bl	80059bc <RCCEx_PLL3_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048ee:	e004      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048f6:	e000      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80048f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004902:	4bbf      	ldr	r3, [pc, #764]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004906:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004910:	4abb      	ldr	r2, [pc, #748]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004912:	430b      	orrs	r3, r1
 8004914:	6553      	str	r3, [r2, #84]	@ 0x54
 8004916:	e003      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f002 0302 	and.w	r3, r2, #2
 800492c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004930:	2300      	movs	r3, #0
 8004932:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004936:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800493a:	460b      	mov	r3, r1
 800493c:	4313      	orrs	r3, r2
 800493e:	d041      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004946:	2b05      	cmp	r3, #5
 8004948:	d824      	bhi.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800494a:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	0800499d 	.word	0x0800499d
 8004954:	08004969 	.word	0x08004969
 8004958:	0800497f 	.word	0x0800497f
 800495c:	0800499d 	.word	0x0800499d
 8004960:	0800499d 	.word	0x0800499d
 8004964:	0800499d 	.word	0x0800499d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	3308      	adds	r3, #8
 800496e:	2101      	movs	r1, #1
 8004970:	4618      	mov	r0, r3
 8004972:	f000 ff71 	bl	8005858 <RCCEx_PLL2_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800497c:	e00f      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	3328      	adds	r3, #40	@ 0x28
 8004984:	2101      	movs	r1, #1
 8004986:	4618      	mov	r0, r3
 8004988:	f001 f818 	bl	80059bc <RCCEx_PLL3_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004992:	e004      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800499a:	e000      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800499c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049a6:	4b96      	ldr	r3, [pc, #600]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	f023 0107 	bic.w	r1, r3, #7
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049b4:	4a92      	ldr	r2, [pc, #584]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049b6:	430b      	orrs	r3, r1
 80049b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80049ba:	e003      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f002 0304 	and.w	r3, r2, #4
 80049d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049d4:	2300      	movs	r3, #0
 80049d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80049de:	460b      	mov	r3, r1
 80049e0:	4313      	orrs	r3, r2
 80049e2:	d044      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d825      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80049f0:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a45 	.word	0x08004a45
 80049fc:	08004a11 	.word	0x08004a11
 8004a00:	08004a27 	.word	0x08004a27
 8004a04:	08004a45 	.word	0x08004a45
 8004a08:	08004a45 	.word	0x08004a45
 8004a0c:	08004a45 	.word	0x08004a45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a14:	3308      	adds	r3, #8
 8004a16:	2101      	movs	r1, #1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 ff1d 	bl	8005858 <RCCEx_PLL2_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a24:	e00f      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	3328      	adds	r3, #40	@ 0x28
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 ffc4 	bl	80059bc <RCCEx_PLL3_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a3a:	e004      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10b      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a52:	f023 0107 	bic.w	r1, r3, #7
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a5e:	4a68      	ldr	r2, [pc, #416]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a64:	e003      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f002 0320 	and.w	r3, r2, #32
 8004a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	d055      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a9a:	d033      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aa0:	d82c      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa6:	d02f      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aac:	d826      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ab2:	d02b      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004ab4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ab8:	d820      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004abe:	d012      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ac4:	d81a      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d022      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ace:	d115      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 febd 	bl	8005858 <RCCEx_PLL2_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ae4:	e015      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	3328      	adds	r3, #40	@ 0x28
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 ff64 	bl	80059bc <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004afa:	e00a      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b02:	e006      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b04:	bf00      	nop
 8004b06:	e004      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b08:	bf00      	nop
 8004b0a:	e002      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b1a:	4b39      	ldr	r3, [pc, #228]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2a:	4a35      	ldr	r2, [pc, #212]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	d058      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b62:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b66:	d033      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004b68:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b6c:	d82c      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b72:	d02f      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b78:	d826      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b7e:	d02b      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004b80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b84:	d820      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b8a:	d012      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b90:	d81a      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d022      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d115      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fe57 	bl	8005858 <RCCEx_PLL2_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bb0:	e015      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	3328      	adds	r3, #40	@ 0x28
 8004bb8:	2102      	movs	r1, #2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fefe 	bl	80059bc <RCCEx_PLL3_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bc6:	e00a      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bce:	e006      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bd0:	bf00      	nop
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bd4:	bf00      	nop
 8004bd6:	e002      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bd8:	bf00      	nop
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10e      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004be6:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bf6:	4a02      	ldr	r2, [pc, #8]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d055      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c34:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c38:	d033      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004c3a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c3e:	d82c      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c44:	d02f      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c4a:	d826      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c4c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c50:	d02b      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004c52:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c56:	d820      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c5c:	d012      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004c5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c62:	d81a      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d022      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6c:	d115      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c72:	3308      	adds	r3, #8
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fdee 	bl	8005858 <RCCEx_PLL2_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c82:	e015      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c88:	3328      	adds	r3, #40	@ 0x28
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fe95 	bl	80059bc <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e004      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cc8:	4a9d      	ldr	r2, [pc, #628]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cce:	e003      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f002 0308 	and.w	r3, r2, #8
 8004ce4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d01e      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0a:	3328      	adds	r3, #40	@ 0x28
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fe54 	bl	80059bc <RCCEx_PLL3_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d20:	4b87      	ldr	r3, [pc, #540]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d24:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d30:	4a83      	ldr	r2, [pc, #524]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f002 0310 	and.w	r3, r2, #16
 8004d42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004d50:	460b      	mov	r3, r1
 8004d52:	4313      	orrs	r3, r2
 8004d54:	d01e      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d62:	d10c      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d68:	3328      	adds	r3, #40	@ 0x28
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fe25 	bl	80059bc <RCCEx_PLL3_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d7e:	4b70      	ldr	r3, [pc, #448]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004da0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004daa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004dae:	460b      	mov	r3, r1
 8004db0:	4313      	orrs	r3, r2
 8004db2:	d03e      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc0:	d022      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc6:	d81b      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd0:	d00b      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004dd2:	e015      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd8:	3308      	adds	r3, #8
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fd3b 	bl	8005858 <RCCEx_PLL2_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004de8:	e00f      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dee:	3328      	adds	r3, #40	@ 0x28
 8004df0:	2102      	movs	r1, #2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fde2 	bl	80059bc <RCCEx_PLL3_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004dfe:	e004      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e06:	e000      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e12:	4b4b      	ldr	r3, [pc, #300]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e22:	4a47      	ldr	r2, [pc, #284]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e40:	2300      	movs	r3, #0
 8004e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	d03b      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e5a:	d01f      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004e5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e60:	d818      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e66:	d003      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e6c:	d007      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e6e:	e011      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e70:	4b33      	ldr	r3, [pc, #204]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	4a32      	ldr	r2, [pc, #200]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e7c:	e00f      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	3328      	adds	r3, #40	@ 0x28
 8004e84:	2101      	movs	r1, #1
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fd98 	bl	80059bc <RCCEx_PLL3_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e92:	e004      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e9a:	e000      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10b      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ea6:	4b26      	ldr	r3, [pc, #152]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb6:	4a22      	ldr	r2, [pc, #136]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ebc:	e003      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ed2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ed8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004edc:	460b      	mov	r3, r1
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	d034      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef0:	d007      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ef2:	e011      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef4:	4b12      	ldr	r3, [pc, #72]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef8:	4a11      	ldr	r2, [pc, #68]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f00:	e00e      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f06:	3308      	adds	r3, #8
 8004f08:	2102      	movs	r1, #2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fca4 	bl	8005858 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f16:	e003      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10d      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f28:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f36:	4a02      	ldr	r2, [pc, #8]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f3c:	e006      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004f3e:	bf00      	nop
 8004f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f62:	460b      	mov	r3, r1
 8004f64:	4313      	orrs	r3, r2
 8004f66:	d00c      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6c:	3328      	adds	r3, #40	@ 0x28
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fd23 	bl	80059bc <RCCEx_PLL3_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004f8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f90:	2300      	movs	r3, #0
 8004f92:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	d038      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004faa:	d018      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004fac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb0:	d811      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb6:	d014      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fbc:	d80b      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d011      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc8:	4bc3      	ldr	r3, [pc, #780]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	4ac2      	ldr	r2, [pc, #776]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fdc:	e004      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005000:	4ab5      	ldr	r2, [pc, #724]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005002:	430b      	orrs	r3, r1
 8005004:	6553      	str	r3, [r2, #84]	@ 0x54
 8005006:	e003      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800501c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800501e:	2300      	movs	r3, #0
 8005020:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005022:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005026:	460b      	mov	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	d009      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800502c:	4baa      	ldr	r3, [pc, #680]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800502e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005030:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503a:	4aa7      	ldr	r2, [pc, #668]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800503c:	430b      	orrs	r3, r1
 800503e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800504c:	653b      	str	r3, [r7, #80]	@ 0x50
 800504e:	2300      	movs	r3, #0
 8005050:	657b      	str	r3, [r7, #84]	@ 0x54
 8005052:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005056:	460b      	mov	r3, r1
 8005058:	4313      	orrs	r3, r2
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800505c:	4b9e      	ldr	r3, [pc, #632]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005068:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800506c:	4a9a      	ldr	r2, [pc, #616]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800506e:	430b      	orrs	r3, r1
 8005070:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800507e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005080:	2300      	movs	r3, #0
 8005082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005084:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005088:	460b      	mov	r3, r1
 800508a:	4313      	orrs	r3, r2
 800508c:	d009      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800508e:	4b92      	ldr	r3, [pc, #584]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005092:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800509c:	4a8e      	ldr	r2, [pc, #568]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800509e:	430b      	orrs	r3, r1
 80050a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80050ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80050b0:	2300      	movs	r3, #0
 80050b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80050b8:	460b      	mov	r3, r1
 80050ba:	4313      	orrs	r3, r2
 80050bc:	d00e      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050be:	4b86      	ldr	r3, [pc, #536]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	4a85      	ldr	r2, [pc, #532]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050c8:	6113      	str	r3, [r2, #16]
 80050ca:	4b83      	ldr	r3, [pc, #524]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050cc:	6919      	ldr	r1, [r3, #16]
 80050ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80050d6:	4a80      	ldr	r2, [pc, #512]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050d8:	430b      	orrs	r3, r1
 80050da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80050e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ea:	2300      	movs	r3, #0
 80050ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80050f2:	460b      	mov	r3, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050f8:	4b77      	ldr	r3, [pc, #476]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005106:	4a74      	ldr	r2, [pc, #464]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005108:	430b      	orrs	r3, r1
 800510a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005118:	633b      	str	r3, [r7, #48]	@ 0x30
 800511a:	2300      	movs	r3, #0
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
 800511e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005122:	460b      	mov	r3, r1
 8005124:	4313      	orrs	r3, r2
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005128:	4b6b      	ldr	r3, [pc, #428]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800512a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005138:	4a67      	ldr	r2, [pc, #412]	@ (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800513a:	430b      	orrs	r3, r1
 800513c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	2100      	movs	r1, #0
 8005148:	62b9      	str	r1, [r7, #40]	@ 0x28
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005150:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005154:	460b      	mov	r3, r1
 8005156:	4313      	orrs	r3, r2
 8005158:	d011      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515e:	3308      	adds	r3, #8
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fb78 	bl	8005858 <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800517a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	2100      	movs	r1, #0
 8005188:	6239      	str	r1, [r7, #32]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005190:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005194:	460b      	mov	r3, r1
 8005196:	4313      	orrs	r3, r2
 8005198:	d011      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800519a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519e:	3308      	adds	r3, #8
 80051a0:	2101      	movs	r1, #1
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fb58 	bl	8005858 <RCCEx_PLL2_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	2100      	movs	r1, #0
 80051c8:	61b9      	str	r1, [r7, #24]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d011      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051de:	3308      	adds	r3, #8
 80051e0:	2102      	movs	r1, #2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fb38 	bl	8005858 <RCCEx_PLL2_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	2100      	movs	r1, #0
 8005208:	6139      	str	r1, [r7, #16]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005214:	460b      	mov	r3, r1
 8005216:	4313      	orrs	r3, r2
 8005218:	d011      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800521a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521e:	3328      	adds	r3, #40	@ 0x28
 8005220:	2100      	movs	r1, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fbca 	bl	80059bc <RCCEx_PLL3_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800522e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800523a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	2100      	movs	r1, #0
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005254:	460b      	mov	r3, r1
 8005256:	4313      	orrs	r3, r2
 8005258:	d011      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	3328      	adds	r3, #40	@ 0x28
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fbaa 	bl	80059bc <RCCEx_PLL3_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800526e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800527a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	2100      	movs	r1, #0
 8005288:	6039      	str	r1, [r7, #0]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	607b      	str	r3, [r7, #4]
 8005290:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005294:	460b      	mov	r3, r1
 8005296:	4313      	orrs	r3, r2
 8005298:	d011      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	3328      	adds	r3, #40	@ 0x28
 80052a0:	2102      	movs	r1, #2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fb8a 	bl	80059bc <RCCEx_PLL3_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80052ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80052be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80052d2:	46bd      	mov	sp, r7
 80052d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d8:	58024400 	.word	0x58024400

080052dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80052e0:	f7fe fd96 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	091b      	lsrs	r3, r3, #4
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	4904      	ldr	r1, [pc, #16]	@ (8005304 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052f2:	5ccb      	ldrb	r3, [r1, r3]
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	58024400 	.word	0x58024400
 8005304:	0800b5ec 	.word	0x0800b5ec

08005308 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	@ 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005310:	4ba1      	ldr	r3, [pc, #644]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800531a:	4b9f      	ldr	r3, [pc, #636]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	0b1b      	lsrs	r3, r3, #12
 8005320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005324:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005326:	4b9c      	ldr	r3, [pc, #624]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005332:	4b99      	ldr	r3, [pc, #612]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8111 	beq.w	8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b02      	cmp	r3, #2
 800535a:	f000 8083 	beq.w	8005464 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b02      	cmp	r3, #2
 8005362:	f200 80a1 	bhi.w	80054a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d056      	beq.n	8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005372:	e099      	b.n	80054a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005374:	4b88      	ldr	r3, [pc, #544]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d02d      	beq.n	80053dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005380:	4b85      	ldr	r3, [pc, #532]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	08db      	lsrs	r3, r3, #3
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	4a84      	ldr	r2, [pc, #528]	@ (800559c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
 8005390:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80053be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053da:	e087      	b.n	80054ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80053ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005402:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800541e:	e065      	b.n	80054ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800542e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005432:	4b59      	ldr	r3, [pc, #356]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005442:	ed97 6a03 	vldr	s12, [r7, #12]
 8005446:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800544a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005462:	e043      	b.n	80054ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005476:	4b48      	ldr	r3, [pc, #288]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005486:	ed97 6a03 	vldr	s12, [r7, #12]
 800548a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800548e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054a6:	e021      	b.n	80054ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ba:	4b37      	ldr	r3, [pc, #220]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80054ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	0a5b      	lsrs	r3, r3, #9
 80054f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005506:	edd7 6a07 	vldr	s13, [r7, #28]
 800550a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800550e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005512:	ee17 2a90 	vmov	r2, s15
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800551a:	4b1f      	ldr	r3, [pc, #124]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551e:	0c1b      	lsrs	r3, r3, #16
 8005520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005530:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005534:	edd7 6a07 	vldr	s13, [r7, #28]
 8005538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800553c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005540:	ee17 2a90 	vmov	r2, s15
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005548:	4b13      	ldr	r3, [pc, #76]	@ (8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	0e1b      	lsrs	r3, r3, #24
 800554e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800555e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005562:	edd7 6a07 	vldr	s13, [r7, #28]
 8005566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800556a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556e:	ee17 2a90 	vmov	r2, s15
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005576:	e008      	b.n	800558a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	609a      	str	r2, [r3, #8]
}
 800558a:	bf00      	nop
 800558c:	3724      	adds	r7, #36	@ 0x24
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
 800559c:	03d09000 	.word	0x03d09000
 80055a0:	46000000 	.word	0x46000000
 80055a4:	4c742400 	.word	0x4c742400
 80055a8:	4a742400 	.word	0x4a742400
 80055ac:	4bbebc20 	.word	0x4bbebc20

080055b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b089      	sub	sp, #36	@ 0x24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055c2:	4b9f      	ldr	r3, [pc, #636]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	0d1b      	lsrs	r3, r3, #20
 80055c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055da:	4b99      	ldr	r3, [pc, #612]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8111 	beq.w	8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b02      	cmp	r3, #2
 8005602:	f000 8083 	beq.w	800570c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b02      	cmp	r3, #2
 800560a:	f200 80a1 	bhi.w	8005750 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d056      	beq.n	80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800561a:	e099      	b.n	8005750 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800561c:	4b88      	ldr	r3, [pc, #544]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d02d      	beq.n	8005684 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005628:	4b85      	ldr	r3, [pc, #532]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	08db      	lsrs	r3, r3, #3
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	4a84      	ldr	r2, [pc, #528]	@ (8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005634:	fa22 f303 	lsr.w	r3, r2, r3
 8005638:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b7b      	ldr	r3, [pc, #492]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005662:	ed97 6a03 	vldr	s12, [r7, #12]
 8005666:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005682:	e087      	b.n	8005794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800584c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005696:	4b6a      	ldr	r3, [pc, #424]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056c6:	e065      	b.n	8005794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056da:	4b59      	ldr	r3, [pc, #356]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800570a:	e043      	b.n	8005794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005716:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800571a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571e:	4b48      	ldr	r3, [pc, #288]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005732:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800574e:	e021      	b.n	8005794 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800575e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005762:	4b37      	ldr	r3, [pc, #220]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005772:	ed97 6a03 	vldr	s12, [r7, #12]
 8005776:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005848 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800577a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005792:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005794:	4b2a      	ldr	r3, [pc, #168]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	0a5b      	lsrs	r3, r3, #9
 800579a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ba:	ee17 2a90 	vmov	r2, s15
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80057c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80057e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e8:	ee17 2a90 	vmov	r2, s15
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80057f0:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	0e1b      	lsrs	r3, r3, #24
 80057f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800580a:	edd7 6a07 	vldr	s13, [r7, #28]
 800580e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005816:	ee17 2a90 	vmov	r2, s15
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800581e:	e008      	b.n	8005832 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	609a      	str	r2, [r3, #8]
}
 8005832:	bf00      	nop
 8005834:	3724      	adds	r7, #36	@ 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
 8005844:	03d09000 	.word	0x03d09000
 8005848:	46000000 	.word	0x46000000
 800584c:	4c742400 	.word	0x4c742400
 8005850:	4a742400 	.word	0x4a742400
 8005854:	4bbebc20 	.word	0x4bbebc20

08005858 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005866:	4b53      	ldr	r3, [pc, #332]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d101      	bne.n	8005876 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e099      	b.n	80059aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005876:	4b4f      	ldr	r3, [pc, #316]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a4e      	ldr	r2, [pc, #312]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800587c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005882:	f7fb fc6b 	bl	800115c <HAL_GetTick>
 8005886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005888:	e008      	b.n	800589c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800588a:	f7fb fc67 	bl	800115c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e086      	b.n	80059aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800589c:	4b45      	ldr	r3, [pc, #276]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058a8:	4b42      	ldr	r3, [pc, #264]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	031b      	lsls	r3, r3, #12
 80058b6:	493f      	ldr	r1, [pc, #252]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	025b      	lsls	r3, r3, #9
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058ec:	4931      	ldr	r1, [pc, #196]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058f2:	4b30      	ldr	r3, [pc, #192]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	492d      	ldr	r1, [pc, #180]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005904:	4b2b      	ldr	r3, [pc, #172]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	f023 0220 	bic.w	r2, r3, #32
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	4928      	ldr	r1, [pc, #160]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005916:	4b27      	ldr	r3, [pc, #156]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	4a26      	ldr	r2, [pc, #152]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800591c:	f023 0310 	bic.w	r3, r3, #16
 8005920:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005922:	4b24      	ldr	r3, [pc, #144]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005926:	4b24      	ldr	r3, [pc, #144]	@ (80059b8 <RCCEx_PLL2_Config+0x160>)
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	69d2      	ldr	r2, [r2, #28]
 800592e:	00d2      	lsls	r2, r2, #3
 8005930:	4920      	ldr	r1, [pc, #128]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005936:	4b1f      	ldr	r3, [pc, #124]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	4a1e      	ldr	r2, [pc, #120]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800593c:	f043 0310 	orr.w	r3, r3, #16
 8005940:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005948:	4b1a      	ldr	r3, [pc, #104]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	4a19      	ldr	r2, [pc, #100]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800594e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005952:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005954:	e00f      	b.n	8005976 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d106      	bne.n	800596a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800595c:	4b15      	ldr	r3, [pc, #84]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	4a14      	ldr	r2, [pc, #80]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005966:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005968:	e005      	b.n	8005976 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800596a:	4b12      	ldr	r3, [pc, #72]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596e:	4a11      	ldr	r2, [pc, #68]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005970:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005974:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005976:	4b0f      	ldr	r3, [pc, #60]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a0e      	ldr	r2, [pc, #56]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800597c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005982:	f7fb fbeb 	bl	800115c <HAL_GetTick>
 8005986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005988:	e008      	b.n	800599c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800598a:	f7fb fbe7 	bl	800115c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e006      	b.n	80059aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800599c:	4b05      	ldr	r3, [pc, #20]	@ (80059b4 <RCCEx_PLL2_Config+0x15c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	58024400 	.word	0x58024400
 80059b8:	ffff0007 	.word	0xffff0007

080059bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059ca:	4b53      	ldr	r3, [pc, #332]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d101      	bne.n	80059da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e099      	b.n	8005b0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059da:	4b4f      	ldr	r3, [pc, #316]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a4e      	ldr	r2, [pc, #312]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 80059e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e6:	f7fb fbb9 	bl	800115c <HAL_GetTick>
 80059ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059ec:	e008      	b.n	8005a00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059ee:	f7fb fbb5 	bl	800115c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e086      	b.n	8005b0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a00:	4b45      	ldr	r3, [pc, #276]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f0      	bne.n	80059ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a0c:	4b42      	ldr	r3, [pc, #264]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	051b      	lsls	r3, r3, #20
 8005a1a:	493f      	ldr	r1, [pc, #252]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	025b      	lsls	r3, r3, #9
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	061b      	lsls	r3, r3, #24
 8005a4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a50:	4931      	ldr	r1, [pc, #196]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a56:	4b30      	ldr	r3, [pc, #192]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	492d      	ldr	r1, [pc, #180]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a68:	4b2b      	ldr	r3, [pc, #172]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	4928      	ldr	r1, [pc, #160]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a7a:	4b27      	ldr	r3, [pc, #156]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	4a26      	ldr	r2, [pc, #152]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a86:	4b24      	ldr	r3, [pc, #144]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a8a:	4b24      	ldr	r3, [pc, #144]	@ (8005b1c <RCCEx_PLL3_Config+0x160>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	69d2      	ldr	r2, [r2, #28]
 8005a92:	00d2      	lsls	r2, r2, #3
 8005a94:	4920      	ldr	r1, [pc, #128]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005aac:	4b1a      	ldr	r3, [pc, #104]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	4a19      	ldr	r2, [pc, #100]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005ab2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ab8:	e00f      	b.n	8005ada <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d106      	bne.n	8005ace <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ac0:	4b15      	ldr	r3, [pc, #84]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	4a14      	ldr	r2, [pc, #80]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005ac6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005acc:	e005      	b.n	8005ada <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ace:	4b12      	ldr	r3, [pc, #72]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	4a11      	ldr	r2, [pc, #68]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005ad4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ada:	4b0f      	ldr	r3, [pc, #60]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a0e      	ldr	r2, [pc, #56]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fb fb39 	bl	800115c <HAL_GetTick>
 8005aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aec:	e008      	b.n	8005b00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005aee:	f7fb fb35 	bl	800115c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e006      	b.n	8005b0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b00:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <RCCEx_PLL3_Config+0x15c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	ffff0007 	.word	0xffff0007

08005b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e042      	b.n	8005bb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f83b 	bl	8005bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2224      	movs	r2, #36	@ 0x24
 8005b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0201 	bic.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fd9a 	bl	80066a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f82f 	bl	8005bd4 <UART_SetConfig>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e01b      	b.n	8005bb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fe19 	bl	80067e8 <UART_CheckIdleState>
 8005bb6:	4603      	mov	r3, r0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd8:	b092      	sub	sp, #72	@ 0x48
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	431a      	orrs	r2, r3
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4bbe      	ldr	r3, [pc, #760]	@ (8005efc <UART_SetConfig+0x328>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4ab3      	ldr	r2, [pc, #716]	@ (8005f00 <UART_SetConfig+0x32c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	4baf      	ldr	r3, [pc, #700]	@ (8005f04 <UART_SetConfig+0x330>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	f023 010f 	bic.w	r1, r3, #15
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4aa6      	ldr	r2, [pc, #664]	@ (8005f08 <UART_SetConfig+0x334>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d177      	bne.n	8005d64 <UART_SetConfig+0x190>
 8005c74:	4ba5      	ldr	r3, [pc, #660]	@ (8005f0c <UART_SetConfig+0x338>)
 8005c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c7c:	2b28      	cmp	r3, #40	@ 0x28
 8005c7e:	d86d      	bhi.n	8005d5c <UART_SetConfig+0x188>
 8005c80:	a201      	add	r2, pc, #4	@ (adr r2, 8005c88 <UART_SetConfig+0xb4>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005d2d 	.word	0x08005d2d
 8005c8c:	08005d5d 	.word	0x08005d5d
 8005c90:	08005d5d 	.word	0x08005d5d
 8005c94:	08005d5d 	.word	0x08005d5d
 8005c98:	08005d5d 	.word	0x08005d5d
 8005c9c:	08005d5d 	.word	0x08005d5d
 8005ca0:	08005d5d 	.word	0x08005d5d
 8005ca4:	08005d5d 	.word	0x08005d5d
 8005ca8:	08005d35 	.word	0x08005d35
 8005cac:	08005d5d 	.word	0x08005d5d
 8005cb0:	08005d5d 	.word	0x08005d5d
 8005cb4:	08005d5d 	.word	0x08005d5d
 8005cb8:	08005d5d 	.word	0x08005d5d
 8005cbc:	08005d5d 	.word	0x08005d5d
 8005cc0:	08005d5d 	.word	0x08005d5d
 8005cc4:	08005d5d 	.word	0x08005d5d
 8005cc8:	08005d3d 	.word	0x08005d3d
 8005ccc:	08005d5d 	.word	0x08005d5d
 8005cd0:	08005d5d 	.word	0x08005d5d
 8005cd4:	08005d5d 	.word	0x08005d5d
 8005cd8:	08005d5d 	.word	0x08005d5d
 8005cdc:	08005d5d 	.word	0x08005d5d
 8005ce0:	08005d5d 	.word	0x08005d5d
 8005ce4:	08005d5d 	.word	0x08005d5d
 8005ce8:	08005d45 	.word	0x08005d45
 8005cec:	08005d5d 	.word	0x08005d5d
 8005cf0:	08005d5d 	.word	0x08005d5d
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005d5d 	.word	0x08005d5d
 8005d00:	08005d5d 	.word	0x08005d5d
 8005d04:	08005d5d 	.word	0x08005d5d
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d5d 	.word	0x08005d5d
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d5d 	.word	0x08005d5d
 8005d18:	08005d5d 	.word	0x08005d5d
 8005d1c:	08005d5d 	.word	0x08005d5d
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d5d 	.word	0x08005d5d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e222      	b.n	800617a <UART_SetConfig+0x5a6>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e21e      	b.n	800617a <UART_SetConfig+0x5a6>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e21a      	b.n	800617a <UART_SetConfig+0x5a6>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e216      	b.n	800617a <UART_SetConfig+0x5a6>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e212      	b.n	800617a <UART_SetConfig+0x5a6>
 8005d54:	2340      	movs	r3, #64	@ 0x40
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e20e      	b.n	800617a <UART_SetConfig+0x5a6>
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e20a      	b.n	800617a <UART_SetConfig+0x5a6>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a69      	ldr	r2, [pc, #420]	@ (8005f10 <UART_SetConfig+0x33c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d130      	bne.n	8005dd0 <UART_SetConfig+0x1fc>
 8005d6e:	4b67      	ldr	r3, [pc, #412]	@ (8005f0c <UART_SetConfig+0x338>)
 8005d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d826      	bhi.n	8005dc8 <UART_SetConfig+0x1f4>
 8005d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <UART_SetConfig+0x1ac>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db9 	.word	0x08005db9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e1ec      	b.n	800617a <UART_SetConfig+0x5a6>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e1e8      	b.n	800617a <UART_SetConfig+0x5a6>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e1e4      	b.n	800617a <UART_SetConfig+0x5a6>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e1e0      	b.n	800617a <UART_SetConfig+0x5a6>
 8005db8:	2320      	movs	r3, #32
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e1dc      	b.n	800617a <UART_SetConfig+0x5a6>
 8005dc0:	2340      	movs	r3, #64	@ 0x40
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc6:	e1d8      	b.n	800617a <UART_SetConfig+0x5a6>
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dce:	e1d4      	b.n	800617a <UART_SetConfig+0x5a6>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a4f      	ldr	r2, [pc, #316]	@ (8005f14 <UART_SetConfig+0x340>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d130      	bne.n	8005e3c <UART_SetConfig+0x268>
 8005dda:	4b4c      	ldr	r3, [pc, #304]	@ (8005f0c <UART_SetConfig+0x338>)
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	2b05      	cmp	r3, #5
 8005de4:	d826      	bhi.n	8005e34 <UART_SetConfig+0x260>
 8005de6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <UART_SetConfig+0x218>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e05 	.word	0x08005e05
 8005df0:	08005e0d 	.word	0x08005e0d
 8005df4:	08005e15 	.word	0x08005e15
 8005df8:	08005e1d 	.word	0x08005e1d
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e2d 	.word	0x08005e2d
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e1b6      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e1b2      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e1ae      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e1aa      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e24:	2320      	movs	r3, #32
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e1a6      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e2c:	2340      	movs	r3, #64	@ 0x40
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e1a2      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e34:	2380      	movs	r3, #128	@ 0x80
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e19e      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a35      	ldr	r2, [pc, #212]	@ (8005f18 <UART_SetConfig+0x344>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d130      	bne.n	8005ea8 <UART_SetConfig+0x2d4>
 8005e46:	4b31      	ldr	r3, [pc, #196]	@ (8005f0c <UART_SetConfig+0x338>)
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d826      	bhi.n	8005ea0 <UART_SetConfig+0x2cc>
 8005e52:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <UART_SetConfig+0x284>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e71 	.word	0x08005e71
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	08005e81 	.word	0x08005e81
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e180      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e17c      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e80:	2308      	movs	r3, #8
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e178      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e174      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e90:	2320      	movs	r3, #32
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e170      	b.n	800617a <UART_SetConfig+0x5a6>
 8005e98:	2340      	movs	r3, #64	@ 0x40
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e16c      	b.n	800617a <UART_SetConfig+0x5a6>
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e168      	b.n	800617a <UART_SetConfig+0x5a6>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1b      	ldr	r2, [pc, #108]	@ (8005f1c <UART_SetConfig+0x348>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d142      	bne.n	8005f38 <UART_SetConfig+0x364>
 8005eb2:	4b16      	ldr	r3, [pc, #88]	@ (8005f0c <UART_SetConfig+0x338>)
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d838      	bhi.n	8005f30 <UART_SetConfig+0x35c>
 8005ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <UART_SetConfig+0x2f0>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005edd 	.word	0x08005edd
 8005ec8:	08005ee5 	.word	0x08005ee5
 8005ecc:	08005eed 	.word	0x08005eed
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005f21 	.word	0x08005f21
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e14a      	b.n	800617a <UART_SetConfig+0x5a6>
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e146      	b.n	800617a <UART_SetConfig+0x5a6>
 8005eec:	2308      	movs	r3, #8
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e142      	b.n	800617a <UART_SetConfig+0x5a6>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e13e      	b.n	800617a <UART_SetConfig+0x5a6>
 8005efc:	cfff69f3 	.word	0xcfff69f3
 8005f00:	58000c00 	.word	0x58000c00
 8005f04:	11fff4ff 	.word	0x11fff4ff
 8005f08:	40011000 	.word	0x40011000
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	40004400 	.word	0x40004400
 8005f14:	40004800 	.word	0x40004800
 8005f18:	40004c00 	.word	0x40004c00
 8005f1c:	40005000 	.word	0x40005000
 8005f20:	2320      	movs	r3, #32
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e128      	b.n	800617a <UART_SetConfig+0x5a6>
 8005f28:	2340      	movs	r3, #64	@ 0x40
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2e:	e124      	b.n	800617a <UART_SetConfig+0x5a6>
 8005f30:	2380      	movs	r3, #128	@ 0x80
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f36:	e120      	b.n	800617a <UART_SetConfig+0x5a6>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4acb      	ldr	r2, [pc, #812]	@ (800626c <UART_SetConfig+0x698>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d176      	bne.n	8006030 <UART_SetConfig+0x45c>
 8005f42:	4bcb      	ldr	r3, [pc, #812]	@ (8006270 <UART_SetConfig+0x69c>)
 8005f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f4a:	2b28      	cmp	r3, #40	@ 0x28
 8005f4c:	d86c      	bhi.n	8006028 <UART_SetConfig+0x454>
 8005f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f54 <UART_SetConfig+0x380>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005ff9 	.word	0x08005ff9
 8005f58:	08006029 	.word	0x08006029
 8005f5c:	08006029 	.word	0x08006029
 8005f60:	08006029 	.word	0x08006029
 8005f64:	08006029 	.word	0x08006029
 8005f68:	08006029 	.word	0x08006029
 8005f6c:	08006029 	.word	0x08006029
 8005f70:	08006029 	.word	0x08006029
 8005f74:	08006001 	.word	0x08006001
 8005f78:	08006029 	.word	0x08006029
 8005f7c:	08006029 	.word	0x08006029
 8005f80:	08006029 	.word	0x08006029
 8005f84:	08006029 	.word	0x08006029
 8005f88:	08006029 	.word	0x08006029
 8005f8c:	08006029 	.word	0x08006029
 8005f90:	08006029 	.word	0x08006029
 8005f94:	08006009 	.word	0x08006009
 8005f98:	08006029 	.word	0x08006029
 8005f9c:	08006029 	.word	0x08006029
 8005fa0:	08006029 	.word	0x08006029
 8005fa4:	08006029 	.word	0x08006029
 8005fa8:	08006029 	.word	0x08006029
 8005fac:	08006029 	.word	0x08006029
 8005fb0:	08006029 	.word	0x08006029
 8005fb4:	08006011 	.word	0x08006011
 8005fb8:	08006029 	.word	0x08006029
 8005fbc:	08006029 	.word	0x08006029
 8005fc0:	08006029 	.word	0x08006029
 8005fc4:	08006029 	.word	0x08006029
 8005fc8:	08006029 	.word	0x08006029
 8005fcc:	08006029 	.word	0x08006029
 8005fd0:	08006029 	.word	0x08006029
 8005fd4:	08006019 	.word	0x08006019
 8005fd8:	08006029 	.word	0x08006029
 8005fdc:	08006029 	.word	0x08006029
 8005fe0:	08006029 	.word	0x08006029
 8005fe4:	08006029 	.word	0x08006029
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08006029 	.word	0x08006029
 8005ff4:	08006021 	.word	0x08006021
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e0bc      	b.n	800617a <UART_SetConfig+0x5a6>
 8006000:	2304      	movs	r3, #4
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006006:	e0b8      	b.n	800617a <UART_SetConfig+0x5a6>
 8006008:	2308      	movs	r3, #8
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600e:	e0b4      	b.n	800617a <UART_SetConfig+0x5a6>
 8006010:	2310      	movs	r3, #16
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006016:	e0b0      	b.n	800617a <UART_SetConfig+0x5a6>
 8006018:	2320      	movs	r3, #32
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601e:	e0ac      	b.n	800617a <UART_SetConfig+0x5a6>
 8006020:	2340      	movs	r3, #64	@ 0x40
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e0a8      	b.n	800617a <UART_SetConfig+0x5a6>
 8006028:	2380      	movs	r3, #128	@ 0x80
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602e:	e0a4      	b.n	800617a <UART_SetConfig+0x5a6>
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a8f      	ldr	r2, [pc, #572]	@ (8006274 <UART_SetConfig+0x6a0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d130      	bne.n	800609c <UART_SetConfig+0x4c8>
 800603a:	4b8d      	ldr	r3, [pc, #564]	@ (8006270 <UART_SetConfig+0x69c>)
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	2b05      	cmp	r3, #5
 8006044:	d826      	bhi.n	8006094 <UART_SetConfig+0x4c0>
 8006046:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <UART_SetConfig+0x478>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	08006065 	.word	0x08006065
 8006050:	0800606d 	.word	0x0800606d
 8006054:	08006075 	.word	0x08006075
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006085 	.word	0x08006085
 8006060:	0800608d 	.word	0x0800608d
 8006064:	2300      	movs	r3, #0
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e086      	b.n	800617a <UART_SetConfig+0x5a6>
 800606c:	2304      	movs	r3, #4
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e082      	b.n	800617a <UART_SetConfig+0x5a6>
 8006074:	2308      	movs	r3, #8
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e07e      	b.n	800617a <UART_SetConfig+0x5a6>
 800607c:	2310      	movs	r3, #16
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006082:	e07a      	b.n	800617a <UART_SetConfig+0x5a6>
 8006084:	2320      	movs	r3, #32
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608a:	e076      	b.n	800617a <UART_SetConfig+0x5a6>
 800608c:	2340      	movs	r3, #64	@ 0x40
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006092:	e072      	b.n	800617a <UART_SetConfig+0x5a6>
 8006094:	2380      	movs	r3, #128	@ 0x80
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609a:	e06e      	b.n	800617a <UART_SetConfig+0x5a6>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a75      	ldr	r2, [pc, #468]	@ (8006278 <UART_SetConfig+0x6a4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d130      	bne.n	8006108 <UART_SetConfig+0x534>
 80060a6:	4b72      	ldr	r3, [pc, #456]	@ (8006270 <UART_SetConfig+0x69c>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d826      	bhi.n	8006100 <UART_SetConfig+0x52c>
 80060b2:	a201      	add	r2, pc, #4	@ (adr r2, 80060b8 <UART_SetConfig+0x4e4>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060d1 	.word	0x080060d1
 80060bc:	080060d9 	.word	0x080060d9
 80060c0:	080060e1 	.word	0x080060e1
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d6:	e050      	b.n	800617a <UART_SetConfig+0x5a6>
 80060d8:	2304      	movs	r3, #4
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060de:	e04c      	b.n	800617a <UART_SetConfig+0x5a6>
 80060e0:	2308      	movs	r3, #8
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e6:	e048      	b.n	800617a <UART_SetConfig+0x5a6>
 80060e8:	2310      	movs	r3, #16
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ee:	e044      	b.n	800617a <UART_SetConfig+0x5a6>
 80060f0:	2320      	movs	r3, #32
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f6:	e040      	b.n	800617a <UART_SetConfig+0x5a6>
 80060f8:	2340      	movs	r3, #64	@ 0x40
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fe:	e03c      	b.n	800617a <UART_SetConfig+0x5a6>
 8006100:	2380      	movs	r3, #128	@ 0x80
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e038      	b.n	800617a <UART_SetConfig+0x5a6>
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a5b      	ldr	r2, [pc, #364]	@ (800627c <UART_SetConfig+0x6a8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d130      	bne.n	8006174 <UART_SetConfig+0x5a0>
 8006112:	4b57      	ldr	r3, [pc, #348]	@ (8006270 <UART_SetConfig+0x69c>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	2b05      	cmp	r3, #5
 800611c:	d826      	bhi.n	800616c <UART_SetConfig+0x598>
 800611e:	a201      	add	r2, pc, #4	@ (adr r2, 8006124 <UART_SetConfig+0x550>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	0800613d 	.word	0x0800613d
 8006128:	08006145 	.word	0x08006145
 800612c:	0800614d 	.word	0x0800614d
 8006130:	08006155 	.word	0x08006155
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006165 	.word	0x08006165
 800613c:	2302      	movs	r3, #2
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006142:	e01a      	b.n	800617a <UART_SetConfig+0x5a6>
 8006144:	2304      	movs	r3, #4
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614a:	e016      	b.n	800617a <UART_SetConfig+0x5a6>
 800614c:	2308      	movs	r3, #8
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006152:	e012      	b.n	800617a <UART_SetConfig+0x5a6>
 8006154:	2310      	movs	r3, #16
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615a:	e00e      	b.n	800617a <UART_SetConfig+0x5a6>
 800615c:	2320      	movs	r3, #32
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e00a      	b.n	800617a <UART_SetConfig+0x5a6>
 8006164:	2340      	movs	r3, #64	@ 0x40
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616a:	e006      	b.n	800617a <UART_SetConfig+0x5a6>
 800616c:	2380      	movs	r3, #128	@ 0x80
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e002      	b.n	800617a <UART_SetConfig+0x5a6>
 8006174:	2380      	movs	r3, #128	@ 0x80
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a3f      	ldr	r2, [pc, #252]	@ (800627c <UART_SetConfig+0x6a8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	f040 80f8 	bne.w	8006376 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006186:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800618a:	2b20      	cmp	r3, #32
 800618c:	dc46      	bgt.n	800621c <UART_SetConfig+0x648>
 800618e:	2b02      	cmp	r3, #2
 8006190:	f2c0 8082 	blt.w	8006298 <UART_SetConfig+0x6c4>
 8006194:	3b02      	subs	r3, #2
 8006196:	2b1e      	cmp	r3, #30
 8006198:	d87e      	bhi.n	8006298 <UART_SetConfig+0x6c4>
 800619a:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <UART_SetConfig+0x5cc>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	08006223 	.word	0x08006223
 80061a4:	08006299 	.word	0x08006299
 80061a8:	0800622b 	.word	0x0800622b
 80061ac:	08006299 	.word	0x08006299
 80061b0:	08006299 	.word	0x08006299
 80061b4:	08006299 	.word	0x08006299
 80061b8:	0800623b 	.word	0x0800623b
 80061bc:	08006299 	.word	0x08006299
 80061c0:	08006299 	.word	0x08006299
 80061c4:	08006299 	.word	0x08006299
 80061c8:	08006299 	.word	0x08006299
 80061cc:	08006299 	.word	0x08006299
 80061d0:	08006299 	.word	0x08006299
 80061d4:	08006299 	.word	0x08006299
 80061d8:	0800624b 	.word	0x0800624b
 80061dc:	08006299 	.word	0x08006299
 80061e0:	08006299 	.word	0x08006299
 80061e4:	08006299 	.word	0x08006299
 80061e8:	08006299 	.word	0x08006299
 80061ec:	08006299 	.word	0x08006299
 80061f0:	08006299 	.word	0x08006299
 80061f4:	08006299 	.word	0x08006299
 80061f8:	08006299 	.word	0x08006299
 80061fc:	08006299 	.word	0x08006299
 8006200:	08006299 	.word	0x08006299
 8006204:	08006299 	.word	0x08006299
 8006208:	08006299 	.word	0x08006299
 800620c:	08006299 	.word	0x08006299
 8006210:	08006299 	.word	0x08006299
 8006214:	08006299 	.word	0x08006299
 8006218:	0800628b 	.word	0x0800628b
 800621c:	2b40      	cmp	r3, #64	@ 0x40
 800621e:	d037      	beq.n	8006290 <UART_SetConfig+0x6bc>
 8006220:	e03a      	b.n	8006298 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006222:	f7ff f85b 	bl	80052dc <HAL_RCCEx_GetD3PCLK1Freq>
 8006226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006228:	e03c      	b.n	80062a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800622a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff f86a 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006238:	e034      	b.n	80062a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800623a:	f107 0318 	add.w	r3, r7, #24
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff f9b6 	bl	80055b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006248:	e02c      	b.n	80062a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800624a:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <UART_SetConfig+0x69c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <UART_SetConfig+0x69c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	08db      	lsrs	r3, r3, #3
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	4a07      	ldr	r2, [pc, #28]	@ (8006280 <UART_SetConfig+0x6ac>)
 8006262:	fa22 f303 	lsr.w	r3, r2, r3
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006268:	e01c      	b.n	80062a4 <UART_SetConfig+0x6d0>
 800626a:	bf00      	nop
 800626c:	40011400 	.word	0x40011400
 8006270:	58024400 	.word	0x58024400
 8006274:	40007800 	.word	0x40007800
 8006278:	40007c00 	.word	0x40007c00
 800627c:	58000c00 	.word	0x58000c00
 8006280:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006284:	4b9d      	ldr	r3, [pc, #628]	@ (80064fc <UART_SetConfig+0x928>)
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006288:	e00c      	b.n	80062a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800628a:	4b9d      	ldr	r3, [pc, #628]	@ (8006500 <UART_SetConfig+0x92c>)
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800628e:	e009      	b.n	80062a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006296:	e005      	b.n	80062a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 81de 	beq.w	8006668 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b0:	4a94      	ldr	r2, [pc, #592]	@ (8006504 <UART_SetConfig+0x930>)
 80062b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80062be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	4613      	mov	r3, r2
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	4413      	add	r3, r2
 80062ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d305      	bcc.n	80062dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d8:	429a      	cmp	r2, r3
 80062da:	d903      	bls.n	80062e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062e2:	e1c1      	b.n	8006668 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062e6:	2200      	movs	r2, #0
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	60fa      	str	r2, [r7, #12]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	4a84      	ldr	r2, [pc, #528]	@ (8006504 <UART_SetConfig+0x930>)
 80062f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2200      	movs	r2, #0
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	607a      	str	r2, [r7, #4]
 80062fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006306:	f7fa f83b 	bl	8000380 <__aeabi_uldivmod>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4610      	mov	r0, r2
 8006310:	4619      	mov	r1, r3
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	020b      	lsls	r3, r1, #8
 800631c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006320:	0202      	lsls	r2, r0, #8
 8006322:	6979      	ldr	r1, [r7, #20]
 8006324:	6849      	ldr	r1, [r1, #4]
 8006326:	0849      	lsrs	r1, r1, #1
 8006328:	2000      	movs	r0, #0
 800632a:	460c      	mov	r4, r1
 800632c:	4605      	mov	r5, r0
 800632e:	eb12 0804 	adds.w	r8, r2, r4
 8006332:	eb43 0905 	adc.w	r9, r3, r5
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	469a      	mov	sl, r3
 800633e:	4693      	mov	fp, r2
 8006340:	4652      	mov	r2, sl
 8006342:	465b      	mov	r3, fp
 8006344:	4640      	mov	r0, r8
 8006346:	4649      	mov	r1, r9
 8006348:	f7fa f81a 	bl	8000380 <__aeabi_uldivmod>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4613      	mov	r3, r2
 8006352:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800635a:	d308      	bcc.n	800636e <UART_SetConfig+0x79a>
 800635c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006362:	d204      	bcs.n	800636e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800636a:	60da      	str	r2, [r3, #12]
 800636c:	e17c      	b.n	8006668 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006374:	e178      	b.n	8006668 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800637e:	f040 80c5 	bne.w	800650c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006386:	2b20      	cmp	r3, #32
 8006388:	dc48      	bgt.n	800641c <UART_SetConfig+0x848>
 800638a:	2b00      	cmp	r3, #0
 800638c:	db7b      	blt.n	8006486 <UART_SetConfig+0x8b2>
 800638e:	2b20      	cmp	r3, #32
 8006390:	d879      	bhi.n	8006486 <UART_SetConfig+0x8b2>
 8006392:	a201      	add	r2, pc, #4	@ (adr r2, 8006398 <UART_SetConfig+0x7c4>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	08006423 	.word	0x08006423
 800639c:	0800642b 	.word	0x0800642b
 80063a0:	08006487 	.word	0x08006487
 80063a4:	08006487 	.word	0x08006487
 80063a8:	08006433 	.word	0x08006433
 80063ac:	08006487 	.word	0x08006487
 80063b0:	08006487 	.word	0x08006487
 80063b4:	08006487 	.word	0x08006487
 80063b8:	08006443 	.word	0x08006443
 80063bc:	08006487 	.word	0x08006487
 80063c0:	08006487 	.word	0x08006487
 80063c4:	08006487 	.word	0x08006487
 80063c8:	08006487 	.word	0x08006487
 80063cc:	08006487 	.word	0x08006487
 80063d0:	08006487 	.word	0x08006487
 80063d4:	08006487 	.word	0x08006487
 80063d8:	08006453 	.word	0x08006453
 80063dc:	08006487 	.word	0x08006487
 80063e0:	08006487 	.word	0x08006487
 80063e4:	08006487 	.word	0x08006487
 80063e8:	08006487 	.word	0x08006487
 80063ec:	08006487 	.word	0x08006487
 80063f0:	08006487 	.word	0x08006487
 80063f4:	08006487 	.word	0x08006487
 80063f8:	08006487 	.word	0x08006487
 80063fc:	08006487 	.word	0x08006487
 8006400:	08006487 	.word	0x08006487
 8006404:	08006487 	.word	0x08006487
 8006408:	08006487 	.word	0x08006487
 800640c:	08006487 	.word	0x08006487
 8006410:	08006487 	.word	0x08006487
 8006414:	08006487 	.word	0x08006487
 8006418:	08006479 	.word	0x08006479
 800641c:	2b40      	cmp	r3, #64	@ 0x40
 800641e:	d02e      	beq.n	800647e <UART_SetConfig+0x8aa>
 8006420:	e031      	b.n	8006486 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006422:	f7fd fd25 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8006426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006428:	e033      	b.n	8006492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800642a:	f7fd fd37 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 800642e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006430:	e02f      	b.n	8006492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe ff66 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006440:	e027      	b.n	8006492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006442:	f107 0318 	add.w	r3, r7, #24
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff f8b2 	bl	80055b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006450:	e01f      	b.n	8006492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006452:	4b2d      	ldr	r3, [pc, #180]	@ (8006508 <UART_SetConfig+0x934>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800645e:	4b2a      	ldr	r3, [pc, #168]	@ (8006508 <UART_SetConfig+0x934>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	08db      	lsrs	r3, r3, #3
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	4a24      	ldr	r2, [pc, #144]	@ (80064fc <UART_SetConfig+0x928>)
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006470:	e00f      	b.n	8006492 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006472:	4b22      	ldr	r3, [pc, #136]	@ (80064fc <UART_SetConfig+0x928>)
 8006474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006476:	e00c      	b.n	8006492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006478:	4b21      	ldr	r3, [pc, #132]	@ (8006500 <UART_SetConfig+0x92c>)
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800647c:	e009      	b.n	8006492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006484:	e005      	b.n	8006492 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80e7 	beq.w	8006668 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	4a19      	ldr	r2, [pc, #100]	@ (8006504 <UART_SetConfig+0x930>)
 80064a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a4:	461a      	mov	r2, r3
 80064a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ac:	005a      	lsls	r2, r3, #1
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	441a      	add	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c2:	2b0f      	cmp	r3, #15
 80064c4:	d916      	bls.n	80064f4 <UART_SetConfig+0x920>
 80064c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064cc:	d212      	bcs.n	80064f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f023 030f 	bic.w	r3, r3, #15
 80064d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064e6:	4313      	orrs	r3, r2
 80064e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	e0b9      	b.n	8006668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064fa:	e0b5      	b.n	8006668 <UART_SetConfig+0xa94>
 80064fc:	03d09000 	.word	0x03d09000
 8006500:	003d0900 	.word	0x003d0900
 8006504:	0800b608 	.word	0x0800b608
 8006508:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800650c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006510:	2b20      	cmp	r3, #32
 8006512:	dc49      	bgt.n	80065a8 <UART_SetConfig+0x9d4>
 8006514:	2b00      	cmp	r3, #0
 8006516:	db7c      	blt.n	8006612 <UART_SetConfig+0xa3e>
 8006518:	2b20      	cmp	r3, #32
 800651a:	d87a      	bhi.n	8006612 <UART_SetConfig+0xa3e>
 800651c:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <UART_SetConfig+0x950>)
 800651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006522:	bf00      	nop
 8006524:	080065af 	.word	0x080065af
 8006528:	080065b7 	.word	0x080065b7
 800652c:	08006613 	.word	0x08006613
 8006530:	08006613 	.word	0x08006613
 8006534:	080065bf 	.word	0x080065bf
 8006538:	08006613 	.word	0x08006613
 800653c:	08006613 	.word	0x08006613
 8006540:	08006613 	.word	0x08006613
 8006544:	080065cf 	.word	0x080065cf
 8006548:	08006613 	.word	0x08006613
 800654c:	08006613 	.word	0x08006613
 8006550:	08006613 	.word	0x08006613
 8006554:	08006613 	.word	0x08006613
 8006558:	08006613 	.word	0x08006613
 800655c:	08006613 	.word	0x08006613
 8006560:	08006613 	.word	0x08006613
 8006564:	080065df 	.word	0x080065df
 8006568:	08006613 	.word	0x08006613
 800656c:	08006613 	.word	0x08006613
 8006570:	08006613 	.word	0x08006613
 8006574:	08006613 	.word	0x08006613
 8006578:	08006613 	.word	0x08006613
 800657c:	08006613 	.word	0x08006613
 8006580:	08006613 	.word	0x08006613
 8006584:	08006613 	.word	0x08006613
 8006588:	08006613 	.word	0x08006613
 800658c:	08006613 	.word	0x08006613
 8006590:	08006613 	.word	0x08006613
 8006594:	08006613 	.word	0x08006613
 8006598:	08006613 	.word	0x08006613
 800659c:	08006613 	.word	0x08006613
 80065a0:	08006613 	.word	0x08006613
 80065a4:	08006605 	.word	0x08006605
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	d02e      	beq.n	800660a <UART_SetConfig+0xa36>
 80065ac:	e031      	b.n	8006612 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7fd fc5f 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 80065b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065b4:	e033      	b.n	800661e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b6:	f7fd fc71 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 80065ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065bc:	e02f      	b.n	800661e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fea0 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065cc:	e027      	b.n	800661e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ce:	f107 0318 	add.w	r3, r7, #24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe ffec 	bl	80055b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065dc:	e01f      	b.n	800661e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065de:	4b2d      	ldr	r3, [pc, #180]	@ (8006694 <UART_SetConfig+0xac0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006694 <UART_SetConfig+0xac0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	08db      	lsrs	r3, r3, #3
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	4a28      	ldr	r2, [pc, #160]	@ (8006698 <UART_SetConfig+0xac4>)
 80065f6:	fa22 f303 	lsr.w	r3, r2, r3
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065fc:	e00f      	b.n	800661e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80065fe:	4b26      	ldr	r3, [pc, #152]	@ (8006698 <UART_SetConfig+0xac4>)
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006602:	e00c      	b.n	800661e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006604:	4b25      	ldr	r3, [pc, #148]	@ (800669c <UART_SetConfig+0xac8>)
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006608:	e009      	b.n	800661e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006610:	e005      	b.n	800661e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800661c:	bf00      	nop
    }

    if (pclk != 0U)
 800661e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d021      	beq.n	8006668 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006628:	4a1d      	ldr	r2, [pc, #116]	@ (80066a0 <UART_SetConfig+0xacc>)
 800662a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800662e:	461a      	mov	r2, r3
 8006630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006632:	fbb3 f2f2 	udiv	r2, r3, r2
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	441a      	add	r2, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	2b0f      	cmp	r3, #15
 800664c:	d909      	bls.n	8006662 <UART_SetConfig+0xa8e>
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006654:	d205      	bcs.n	8006662 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	b29a      	uxth	r2, r3
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60da      	str	r2, [r3, #12]
 8006660:	e002      	b.n	8006668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2201      	movs	r2, #1
 800666c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2201      	movs	r2, #1
 8006674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006684:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006688:	4618      	mov	r0, r3
 800668a:	3748      	adds	r7, #72	@ 0x48
 800668c:	46bd      	mov	sp, r7
 800668e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	03d09000 	.word	0x03d09000
 800669c:	003d0900 	.word	0x003d0900
 80066a0:	0800b608 	.word	0x0800b608

080066a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01a      	beq.n	80067ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067a2:	d10a      	bne.n	80067ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
  }
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b098      	sub	sp, #96	@ 0x60
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067f8:	f7fa fcb0 	bl	800115c <HAL_GetTick>
 80067fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b08      	cmp	r3, #8
 800680a:	d12f      	bne.n	800686c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800680c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006814:	2200      	movs	r2, #0
 8006816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f88e 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d022      	beq.n	800686c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800683a:	653b      	str	r3, [r7, #80]	@ 0x50
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006844:	647b      	str	r3, [r7, #68]	@ 0x44
 8006846:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800684a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e6      	bne.n	8006826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e063      	b.n	8006934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b04      	cmp	r3, #4
 8006878:	d149      	bne.n	800690e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800687a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006882:	2200      	movs	r2, #0
 8006884:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f857 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d03c      	beq.n	800690e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	623b      	str	r3, [r7, #32]
   return(result);
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80068b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e6      	bne.n	8006894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3308      	adds	r3, #8
 80068cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068e6:	61fa      	str	r2, [r7, #28]
 80068e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	69b9      	ldr	r1, [r7, #24]
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	617b      	str	r3, [r7, #20]
   return(result);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e5      	bne.n	80068c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e012      	b.n	8006934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3758      	adds	r7, #88	@ 0x58
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694c:	e04f      	b.n	80069ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d04b      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fa fc01 	bl	800115c <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <UART_WaitOnFlagUntilTimeout+0x30>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e04e      	b.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d037      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b80      	cmp	r3, #128	@ 0x80
 8006982:	d034      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b40      	cmp	r3, #64	@ 0x40
 8006988:	d031      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d110      	bne.n	80069ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2208      	movs	r2, #8
 800699e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f839 	bl	8006a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2208      	movs	r2, #8
 80069aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e029      	b.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069c8:	d111      	bne.n	80069ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f81f 	bl	8006a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e00f      	b.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4013      	ands	r3, r2
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	bf0c      	ite	eq
 80069fe:	2301      	moveq	r3, #1
 8006a00:	2300      	movne	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d0a0      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b095      	sub	sp, #84	@ 0x54
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e6      	bne.n	8006a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae0 <UART_EndRxTransfer+0xc8>)
 8006a66:	4013      	ands	r3, r2
 8006a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d118      	bne.n	8006ac0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ad4:	bf00      	nop
 8006ad6:	3754      	adds	r7, #84	@ 0x54
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	effffffe 	.word	0xeffffffe

08006ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	f107 001c 	add.w	r0, r7, #28
 8006af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006af6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d121      	bne.n	8006b42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006bc0 <USB_CoreInit+0xdc>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d105      	bne.n	8006b36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 faf6 	bl	8008128 <USB_CoreReset>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
 8006b40:	e01b      	b.n	8006b7a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 faea 	bl	8008128 <USB_CoreReset>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b6c:	e005      	b.n	8006b7a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b7a:	7fbb      	ldrb	r3, [r7, #30]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d116      	bne.n	8006bae <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <USB_CoreInit+0xe0>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f043 0206 	orr.w	r2, r3, #6
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f043 0220 	orr.w	r2, r3, #32
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bba:	b004      	add	sp, #16
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	ffbdffbf 	.word	0xffbdffbf
 8006bc4:	03ee0000 	.word	0x03ee0000

08006bc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d165      	bne.n	8006ca8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4a41      	ldr	r2, [pc, #260]	@ (8006ce4 <USB_SetTurnaroundTime+0x11c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d906      	bls.n	8006bf2 <USB_SetTurnaroundTime+0x2a>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4a40      	ldr	r2, [pc, #256]	@ (8006ce8 <USB_SetTurnaroundTime+0x120>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d202      	bcs.n	8006bf2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006bec:	230f      	movs	r3, #15
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e062      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ce8 <USB_SetTurnaroundTime+0x120>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d306      	bcc.n	8006c08 <USB_SetTurnaroundTime+0x40>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8006cec <USB_SetTurnaroundTime+0x124>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d202      	bcs.n	8006c08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c02:	230e      	movs	r3, #14
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	e057      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4a38      	ldr	r2, [pc, #224]	@ (8006cec <USB_SetTurnaroundTime+0x124>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d306      	bcc.n	8006c1e <USB_SetTurnaroundTime+0x56>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4a37      	ldr	r2, [pc, #220]	@ (8006cf0 <USB_SetTurnaroundTime+0x128>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d202      	bcs.n	8006c1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c18:	230d      	movs	r3, #13
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	e04c      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4a33      	ldr	r2, [pc, #204]	@ (8006cf0 <USB_SetTurnaroundTime+0x128>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d306      	bcc.n	8006c34 <USB_SetTurnaroundTime+0x6c>
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4a32      	ldr	r2, [pc, #200]	@ (8006cf4 <USB_SetTurnaroundTime+0x12c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d802      	bhi.n	8006c34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c2e:	230c      	movs	r3, #12
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e041      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4a2f      	ldr	r2, [pc, #188]	@ (8006cf4 <USB_SetTurnaroundTime+0x12c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d906      	bls.n	8006c4a <USB_SetTurnaroundTime+0x82>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006cf8 <USB_SetTurnaroundTime+0x130>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d802      	bhi.n	8006c4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c44:	230b      	movs	r3, #11
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e036      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf8 <USB_SetTurnaroundTime+0x130>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d906      	bls.n	8006c60 <USB_SetTurnaroundTime+0x98>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4a29      	ldr	r2, [pc, #164]	@ (8006cfc <USB_SetTurnaroundTime+0x134>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d802      	bhi.n	8006c60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c5a:	230a      	movs	r3, #10
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e02b      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4a26      	ldr	r2, [pc, #152]	@ (8006cfc <USB_SetTurnaroundTime+0x134>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d906      	bls.n	8006c76 <USB_SetTurnaroundTime+0xae>
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4a25      	ldr	r2, [pc, #148]	@ (8006d00 <USB_SetTurnaroundTime+0x138>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d202      	bcs.n	8006c76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c70:	2309      	movs	r3, #9
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e020      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4a21      	ldr	r2, [pc, #132]	@ (8006d00 <USB_SetTurnaroundTime+0x138>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d306      	bcc.n	8006c8c <USB_SetTurnaroundTime+0xc4>
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	4a20      	ldr	r2, [pc, #128]	@ (8006d04 <USB_SetTurnaroundTime+0x13c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d802      	bhi.n	8006c8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c86:	2308      	movs	r3, #8
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	e015      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d04 <USB_SetTurnaroundTime+0x13c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d906      	bls.n	8006ca2 <USB_SetTurnaroundTime+0xda>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4a1c      	ldr	r2, [pc, #112]	@ (8006d08 <USB_SetTurnaroundTime+0x140>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d202      	bcs.n	8006ca2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c9c:	2307      	movs	r3, #7
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e00a      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ca2:	2306      	movs	r3, #6
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	e007      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006cae:	2309      	movs	r3, #9
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e001      	b.n	8006cb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006cb4:	2309      	movs	r3, #9
 8006cb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	371c      	adds	r7, #28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	00d8acbf 	.word	0x00d8acbf
 8006ce8:	00e4e1c0 	.word	0x00e4e1c0
 8006cec:	00f42400 	.word	0x00f42400
 8006cf0:	01067380 	.word	0x01067380
 8006cf4:	011a499f 	.word	0x011a499f
 8006cf8:	01312cff 	.word	0x01312cff
 8006cfc:	014ca43f 	.word	0x014ca43f
 8006d00:	016e3600 	.word	0x016e3600
 8006d04:	01a6ab1f 	.word	0x01a6ab1f
 8006d08:	01e84800 	.word	0x01e84800

08006d0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f043 0201 	orr.w	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f023 0201 	bic.w	r2, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d115      	bne.n	8006d9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d7e:	200a      	movs	r0, #10
 8006d80:	f7fa f9f8 	bl	8001174 <HAL_Delay>
      ms += 10U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	330a      	adds	r3, #10
 8006d88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f93b 	bl	8008006 <USB_GetMode>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d01e      	beq.n	8006dd4 <USB_SetCurrentMode+0x84>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d9a:	d9f0      	bls.n	8006d7e <USB_SetCurrentMode+0x2e>
 8006d9c:	e01a      	b.n	8006dd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d115      	bne.n	8006dd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006db0:	200a      	movs	r0, #10
 8006db2:	f7fa f9df 	bl	8001174 <HAL_Delay>
      ms += 10U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	330a      	adds	r3, #10
 8006dba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f922 	bl	8008006 <USB_GetMode>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <USB_SetCurrentMode+0x84>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dcc:	d9f0      	bls.n	8006db0 <USB_SetCurrentMode+0x60>
 8006dce:	e001      	b.n	8006dd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e005      	b.n	8006de0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2bc8      	cmp	r3, #200	@ 0xc8
 8006dd8:	d101      	bne.n	8006dde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006de8:	b084      	sub	sp, #16
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	e009      	b.n	8006e1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	3340      	adds	r3, #64	@ 0x40
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	2200      	movs	r2, #0
 8006e14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b0e      	cmp	r3, #14
 8006e20:	d9f2      	bls.n	8006e08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11c      	bne.n	8006e64 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e38:	f043 0302 	orr.w	r3, r3, #2
 8006e3c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e42:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e005      	b.n	8006e70 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e68:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e76:	461a      	mov	r2, r3
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d10d      	bne.n	8006ea0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f968 	bl	8007164 <USB_SetDevSpeed>
 8006e94:	e008      	b.n	8006ea8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e96:	2101      	movs	r1, #1
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f963 	bl	8007164 <USB_SetDevSpeed>
 8006e9e:	e003      	b.n	8006ea8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ea0:	2103      	movs	r1, #3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f95e 	bl	8007164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ea8:	2110      	movs	r1, #16
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8fa 	bl	80070a4 <USB_FlushTxFifo>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f924 	bl	8007108 <USB_FlushRxFifo>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006edc:	461a      	mov	r2, r3
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2300      	movs	r3, #0
 8006eec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	e043      	b.n	8006f7c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f0a:	d118      	bne.n	8006f3e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e013      	b.n	8006f50 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f34:	461a      	mov	r2, r3
 8006f36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	e008      	b.n	8006f50 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f80:	461a      	mov	r2, r3
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d3b5      	bcc.n	8006ef4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	e043      	b.n	8007016 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fa4:	d118      	bne.n	8006fd8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	e013      	b.n	8006fea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	e008      	b.n	8006fea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007008:	461a      	mov	r2, r3
 800700a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800700e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	3301      	adds	r3, #1
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800701a:	461a      	mov	r2, r3
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	4293      	cmp	r3, r2
 8007020:	d3b5      	bcc.n	8006f8e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007034:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007042:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007044:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	f043 0210 	orr.w	r2, r3, #16
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699a      	ldr	r2, [r3, #24]
 800705c:	4b0f      	ldr	r3, [pc, #60]	@ (800709c <USB_DevInit+0x2b4>)
 800705e:	4313      	orrs	r3, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007064:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f043 0208 	orr.w	r2, r3, #8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007078:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800707c:	2b01      	cmp	r3, #1
 800707e:	d105      	bne.n	800708c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	4b06      	ldr	r3, [pc, #24]	@ (80070a0 <USB_DevInit+0x2b8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007098:	b004      	add	sp, #16
 800709a:	4770      	bx	lr
 800709c:	803c3800 	.word	0x803c3800
 80070a0:	40000004 	.word	0x40000004

080070a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070be:	d901      	bls.n	80070c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e01b      	b.n	80070fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	daf2      	bge.n	80070b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	019b      	lsls	r3, r3, #6
 80070d4:	f043 0220 	orr.w	r2, r3, #32
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3301      	adds	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070e8:	d901      	bls.n	80070ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e006      	b.n	80070fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d0f0      	beq.n	80070dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3301      	adds	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007120:	d901      	bls.n	8007126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e018      	b.n	8007158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	daf2      	bge.n	8007114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2210      	movs	r2, #16
 8007136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007144:	d901      	bls.n	800714a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e006      	b.n	8007158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b10      	cmp	r3, #16
 8007154:	d0f0      	beq.n	8007138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	68f9      	ldr	r1, [r7, #12]
 8007180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007184:	4313      	orrs	r3, r2
 8007186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007196:	b480      	push	{r7}
 8007198:	b087      	sub	sp, #28
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 0306 	and.w	r3, r3, #6
 80071ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80071b6:	2300      	movs	r3, #0
 80071b8:	75fb      	strb	r3, [r7, #23]
 80071ba:	e00a      	b.n	80071d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d002      	beq.n	80071c8 <USB_GetDevSpeed+0x32>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b06      	cmp	r3, #6
 80071c6:	d102      	bne.n	80071ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80071c8:	2302      	movs	r3, #2
 80071ca:	75fb      	strb	r3, [r7, #23]
 80071cc:	e001      	b.n	80071d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80071ce:	230f      	movs	r3, #15
 80071d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d139      	bne.n	8007270 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2101      	movs	r1, #1
 800720e:	fa01 f303 	lsl.w	r3, r1, r3
 8007212:	b29b      	uxth	r3, r3
 8007214:	68f9      	ldr	r1, [r7, #12]
 8007216:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800721a:	4313      	orrs	r3, r2
 800721c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d153      	bne.n	80072dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	791b      	ldrb	r3, [r3, #4]
 800724e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007250:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	059b      	lsls	r3, r3, #22
 8007256:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007258:	431a      	orrs	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	0159      	lsls	r1, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	440b      	add	r3, r1
 8007262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007266:	4619      	mov	r1, r3
 8007268:	4b20      	ldr	r3, [pc, #128]	@ (80072ec <USB_ActivateEndpoint+0x10c>)
 800726a:	4313      	orrs	r3, r2
 800726c:	600b      	str	r3, [r1, #0]
 800726e:	e035      	b.n	80072dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007276:	69da      	ldr	r2, [r3, #28]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	2101      	movs	r1, #1
 8007282:	fa01 f303 	lsl.w	r3, r1, r3
 8007286:	041b      	lsls	r3, r3, #16
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800728e:	4313      	orrs	r3, r2
 8007290:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d119      	bne.n	80072dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	791b      	ldrb	r3, [r3, #4]
 80072c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072c4:	430b      	orrs	r3, r1
 80072c6:	431a      	orrs	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	0159      	lsls	r1, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	440b      	add	r3, r1
 80072d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d4:	4619      	mov	r1, r3
 80072d6:	4b05      	ldr	r3, [pc, #20]	@ (80072ec <USB_ActivateEndpoint+0x10c>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	10008000 	.word	0x10008000

080072f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d161      	bne.n	80073d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800731e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007322:	d11f      	bne.n	8007364 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800733e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007342:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800735e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800736a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	2101      	movs	r1, #1
 8007376:	fa01 f303 	lsl.w	r3, r1, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	43db      	mvns	r3, r3
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007384:	4013      	ands	r3, r2
 8007386:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	2101      	movs	r1, #1
 800739a:	fa01 f303 	lsl.w	r3, r1, r3
 800739e:	b29b      	uxth	r3, r3
 80073a0:	43db      	mvns	r3, r3
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073a8:	4013      	ands	r3, r2
 80073aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	0159      	lsls	r1, r3, #5
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	440b      	add	r3, r1
 80073c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c6:	4619      	mov	r1, r3
 80073c8:	4b35      	ldr	r3, [pc, #212]	@ (80074a0 <USB_DeactivateEndpoint+0x1b0>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	600b      	str	r3, [r1, #0]
 80073ce:	e060      	b.n	8007492 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073e6:	d11f      	bne.n	8007428 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007406:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	440a      	add	r2, r1
 800741e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007422:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800742e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	2101      	movs	r1, #1
 800743a:	fa01 f303 	lsl.w	r3, r1, r3
 800743e:	041b      	lsls	r3, r3, #16
 8007440:	43db      	mvns	r3, r3
 8007442:	68f9      	ldr	r1, [r7, #12]
 8007444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007448:	4013      	ands	r3, r2
 800744a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007452:	69da      	ldr	r2, [r3, #28]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	2101      	movs	r1, #1
 800745e:	fa01 f303 	lsl.w	r3, r1, r3
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	43db      	mvns	r3, r3
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800746c:	4013      	ands	r3, r2
 800746e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	0159      	lsls	r1, r3, #5
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	440b      	add	r3, r1
 8007486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748a:	4619      	mov	r1, r3
 800748c:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <USB_DeactivateEndpoint+0x1b4>)
 800748e:	4013      	ands	r3, r2
 8007490:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	ec337800 	.word	0xec337800
 80074a4:	eff37800 	.word	0xeff37800

080074a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	@ 0x28
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	4613      	mov	r3, r2
 80074b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	f040 8181 	bne.w	80077cc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d132      	bne.n	8007538 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074de:	691a      	ldr	r2, [r3, #16]
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	0159      	lsls	r1, r3, #5
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	440b      	add	r3, r1
 80074e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ec:	4619      	mov	r1, r3
 80074ee:	4ba5      	ldr	r3, [pc, #660]	@ (8007784 <USB_EPStartXfer+0x2dc>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	440a      	add	r2, r1
 800750a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800750e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	0159      	lsls	r1, r3, #5
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	440b      	add	r3, r1
 800752a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752e:	4619      	mov	r1, r3
 8007530:	4b95      	ldr	r3, [pc, #596]	@ (8007788 <USB_EPStartXfer+0x2e0>)
 8007532:	4013      	ands	r3, r2
 8007534:	610b      	str	r3, [r1, #16]
 8007536:	e092      	b.n	800765e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	0159      	lsls	r1, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	440b      	add	r3, r1
 800754e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007552:	4619      	mov	r1, r3
 8007554:	4b8c      	ldr	r3, [pc, #560]	@ (8007788 <USB_EPStartXfer+0x2e0>)
 8007556:	4013      	ands	r3, r2
 8007558:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	0159      	lsls	r1, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	440b      	add	r3, r1
 8007570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007574:	4619      	mov	r1, r3
 8007576:	4b83      	ldr	r3, [pc, #524]	@ (8007784 <USB_EPStartXfer+0x2dc>)
 8007578:	4013      	ands	r3, r2
 800757a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d11a      	bne.n	80075b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	d903      	bls.n	8007596 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075b4:	6113      	str	r3, [r2, #16]
 80075b6:	e01b      	b.n	80075f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6919      	ldr	r1, [r3, #16]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	440b      	add	r3, r1
 80075d0:	1e59      	subs	r1, r3, #1
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80075da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80075dc:	4b6b      	ldr	r3, [pc, #428]	@ (800778c <USB_EPStartXfer+0x2e4>)
 80075de:	400b      	ands	r3, r1
 80075e0:	69b9      	ldr	r1, [r7, #24]
 80075e2:	0148      	lsls	r0, r1, #5
 80075e4:	69f9      	ldr	r1, [r7, #28]
 80075e6:	4401      	add	r1, r0
 80075e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075ec:	4313      	orrs	r3, r2
 80075ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007606:	69b9      	ldr	r1, [r7, #24]
 8007608:	0148      	lsls	r0, r1, #5
 800760a:	69f9      	ldr	r1, [r7, #28]
 800760c:	4401      	add	r1, r0
 800760e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007612:	4313      	orrs	r3, r2
 8007614:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	791b      	ldrb	r3, [r3, #4]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d11f      	bne.n	800765e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007638:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800763c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	0151      	lsls	r1, r2, #5
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	440a      	add	r2, r1
 8007654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007658:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800765c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d14b      	bne.n	80076fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d009      	beq.n	8007680 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	791b      	ldrb	r3, [r3, #4]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d128      	bne.n	80076da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007694:	2b00      	cmp	r3, #0
 8007696:	d110      	bne.n	80076ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	e00f      	b.n	80076da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	0151      	lsls	r1, r2, #5
 80076cc:	69fa      	ldr	r2, [r7, #28]
 80076ce:	440a      	add	r2, r1
 80076d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e16a      	b.n	80079d2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	0151      	lsls	r1, r2, #5
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	440a      	add	r2, r1
 8007712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007716:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800771a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	791b      	ldrb	r3, [r3, #4]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d015      	beq.n	8007750 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8152 	beq.w	80079d2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	2101      	movs	r1, #1
 8007740:	fa01 f303 	lsl.w	r3, r1, r3
 8007744:	69f9      	ldr	r1, [r7, #28]
 8007746:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800774a:	4313      	orrs	r3, r2
 800774c:	634b      	str	r3, [r1, #52]	@ 0x34
 800774e:	e140      	b.n	80079d2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800775c:	2b00      	cmp	r3, #0
 800775e:	d117      	bne.n	8007790 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800777a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	e016      	b.n	80077b0 <USB_EPStartXfer+0x308>
 8007782:	bf00      	nop
 8007784:	e007ffff 	.word	0xe007ffff
 8007788:	fff80000 	.word	0xfff80000
 800778c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	0151      	lsls	r1, r2, #5
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	440a      	add	r2, r1
 80077a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	68d9      	ldr	r1, [r3, #12]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	781a      	ldrb	r2, [r3, #0]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	b298      	uxth	r0, r3
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4603      	mov	r3, r0
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f9b9 	bl	8007b3c <USB_WritePacket>
 80077ca:	e102      	b.n	80079d2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d8:	691a      	ldr	r2, [r3, #16]
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	0159      	lsls	r1, r3, #5
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	440b      	add	r3, r1
 80077e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e6:	4619      	mov	r1, r3
 80077e8:	4b7c      	ldr	r3, [pc, #496]	@ (80079dc <USB_EPStartXfer+0x534>)
 80077ea:	4013      	ands	r3, r2
 80077ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fa:	691a      	ldr	r2, [r3, #16]
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	0159      	lsls	r1, r3, #5
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	440b      	add	r3, r1
 8007804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007808:	4619      	mov	r1, r3
 800780a:	4b75      	ldr	r3, [pc, #468]	@ (80079e0 <USB_EPStartXfer+0x538>)
 800780c:	4013      	ands	r3, r2
 800780e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d12f      	bne.n	8007876 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007844:	69b9      	ldr	r1, [r7, #24]
 8007846:	0148      	lsls	r0, r1, #5
 8007848:	69f9      	ldr	r1, [r7, #28]
 800784a:	4401      	add	r1, r0
 800784c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007850:	4313      	orrs	r3, r2
 8007852:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	440a      	add	r2, r1
 800786a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800786e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007872:	6113      	str	r3, [r2, #16]
 8007874:	e05f      	b.n	8007936 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d123      	bne.n	80078c6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007894:	69b9      	ldr	r1, [r7, #24]
 8007896:	0148      	lsls	r0, r1, #5
 8007898:	69f9      	ldr	r1, [r7, #28]
 800789a:	4401      	add	r1, r0
 800789c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078a0:	4313      	orrs	r3, r2
 80078a2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	69fa      	ldr	r2, [r7, #28]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078c2:	6113      	str	r3, [r2, #16]
 80078c4:	e037      	b.n	8007936 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	4413      	add	r3, r2
 80078d0:	1e5a      	subs	r2, r3, #1
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	8afa      	ldrh	r2, [r7, #22]
 80078e2:	fb03 f202 	mul.w	r2, r3, r2
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	8afb      	ldrh	r3, [r7, #22]
 80078fa:	04d9      	lsls	r1, r3, #19
 80078fc:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <USB_EPStartXfer+0x53c>)
 80078fe:	400b      	ands	r3, r1
 8007900:	69b9      	ldr	r1, [r7, #24]
 8007902:	0148      	lsls	r0, r1, #5
 8007904:	69f9      	ldr	r1, [r7, #28]
 8007906:	4401      	add	r1, r0
 8007908:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800790c:	4313      	orrs	r3, r2
 800790e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800791c:	691a      	ldr	r2, [r3, #16]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007926:	69b9      	ldr	r1, [r7, #24]
 8007928:	0148      	lsls	r0, r1, #5
 800792a:	69f9      	ldr	r1, [r7, #28]
 800792c:	4401      	add	r1, r0
 800792e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007932:	4313      	orrs	r3, r2
 8007934:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d10d      	bne.n	8007958 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	68d9      	ldr	r1, [r3, #12]
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007954:	460a      	mov	r2, r1
 8007956:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	791b      	ldrb	r3, [r3, #4]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d128      	bne.n	80079b2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800796c:	2b00      	cmp	r3, #0
 800796e:	d110      	bne.n	8007992 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	440a      	add	r2, r1
 8007986:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800798a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	e00f      	b.n	80079b2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079b0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80079d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	fff80000 	.word	0xfff80000
 80079e0:	e007ffff 	.word	0xe007ffff
 80079e4:	1ff80000 	.word	0x1ff80000

080079e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d14a      	bne.n	8007a9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a1e:	f040 8086 	bne.w	8007b2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	7812      	ldrb	r2, [r2, #0]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	7812      	ldrb	r2, [r2, #0]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d902      	bls.n	8007a80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7e:	e056      	b.n	8007b2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a98:	d0e7      	beq.n	8007a6a <USB_EPStopXfer+0x82>
 8007a9a:	e048      	b.n	8007b2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ab4:	d13b      	bne.n	8007b2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	7812      	ldrb	r2, [r2, #0]
 8007aca:	0151      	lsls	r1, r2, #5
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	440a      	add	r2, r1
 8007ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ad4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ad8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007afc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3301      	adds	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d902      	bls.n	8007b14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]
          break;
 8007b12:	e00c      	b.n	8007b2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b2c:	d0e7      	beq.n	8007afe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b089      	sub	sp, #36	@ 0x24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4611      	mov	r1, r2
 8007b48:	461a      	mov	r2, r3
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	71fb      	strb	r3, [r7, #7]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d123      	bne.n	8007baa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b62:	88bb      	ldrh	r3, [r7, #4]
 8007b64:	3303      	adds	r3, #3
 8007b66:	089b      	lsrs	r3, r3, #2
 8007b68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	e018      	b.n	8007ba2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	031a      	lsls	r2, r3, #12
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	3301      	adds	r3, #1
 8007b88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	3301      	adds	r3, #1
 8007b94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61bb      	str	r3, [r7, #24]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d3e2      	bcc.n	8007b70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3724      	adds	r7, #36	@ 0x24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b08b      	sub	sp, #44	@ 0x2c
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	089b      	lsrs	r3, r3, #2
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007bd6:	88fb      	ldrh	r3, [r7, #6]
 8007bd8:	f003 0303 	and.w	r3, r3, #3
 8007bdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bde:	2300      	movs	r3, #0
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	e014      	b.n	8007c0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	3301      	adds	r3, #1
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	3301      	adds	r3, #1
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	623b      	str	r3, [r7, #32]
 8007c0e:	6a3a      	ldr	r2, [r7, #32]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d3e6      	bcc.n	8007be4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c16:	8bfb      	ldrh	r3, [r7, #30]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01e      	beq.n	8007c5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c26:	461a      	mov	r2, r3
 8007c28:	f107 0310 	add.w	r3, r7, #16
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	701a      	strb	r2, [r3, #0]
      i++;
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	3301      	adds	r3, #1
 8007c46:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007c4e:	8bfb      	ldrh	r3, [r7, #30]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c54:	8bfb      	ldrh	r3, [r7, #30]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1ea      	bne.n	8007c30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	372c      	adds	r7, #44	@ 0x2c
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d12c      	bne.n	8007cde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	db12      	blt.n	8007cbc <USB_EPSetStall+0x54>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00f      	beq.n	8007cbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	e02b      	b.n	8007d36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	db12      	blt.n	8007d16 <USB_EPSetStall+0xae>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00f      	beq.n	8007d16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	0151      	lsls	r1, r2, #5
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	440a      	add	r2, r1
 8007d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	0151      	lsls	r1, r2, #5
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d128      	bne.n	8007db2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	791b      	ldrb	r3, [r3, #4]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d003      	beq.n	8007d90 <USB_EPClearStall+0x4c>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	791b      	ldrb	r3, [r3, #4]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d138      	bne.n	8007e02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	e027      	b.n	8007e02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	0151      	lsls	r1, r2, #5
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dcc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007dd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	791b      	ldrb	r3, [r3, #4]
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d003      	beq.n	8007de2 <USB_EPClearStall+0x9e>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	791b      	ldrb	r3, [r3, #4]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d10f      	bne.n	8007e02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e2e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007e44:	68f9      	ldr	r1, [r7, #12]
 8007e46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e76:	f023 0303 	bic.w	r3, r3, #3
 8007e7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e8a:	f023 0302 	bic.w	r3, r3, #2
 8007e8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007eb8:	f023 0303 	bic.w	r3, r3, #3
 8007ebc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ecc:	f043 0302 	orr.w	r3, r3, #2
 8007ed0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4013      	ands	r3, r2
 8007f28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	0c1b      	lsrs	r3, r3, #16
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	b29b      	uxth	r3, r3
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f7e:	78fb      	ldrb	r3, [r7, #3]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b087      	sub	sp, #28
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fcc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fda:	01db      	lsls	r3, r3, #7
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0301 	and.w	r3, r3, #1
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803e:	4619      	mov	r1, r3
 8008040:	4b09      	ldr	r3, [pc, #36]	@ (8008068 <USB_ActivateSetup+0x44>)
 8008042:	4013      	ands	r3, r2
 8008044:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	fffff800 	.word	0xfffff800

0800806c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	460b      	mov	r3, r1
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	333c      	adds	r3, #60	@ 0x3c
 8008082:	3304      	adds	r3, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	4a26      	ldr	r2, [pc, #152]	@ (8008124 <USB_EP0_OutStart+0xb8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d90a      	bls.n	80080a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800809c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080a0:	d101      	bne.n	80080a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e037      	b.n	8008116 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ac:	461a      	mov	r2, r3
 80080ae:	2300      	movs	r3, #0
 80080b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080d4:	f043 0318 	orr.w	r3, r3, #24
 80080d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80080ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80080ee:	7afb      	ldrb	r3, [r7, #11]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d10f      	bne.n	8008114 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080fa:	461a      	mov	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800810e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	4f54300a 	.word	0x4f54300a

08008128 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3301      	adds	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008140:	d901      	bls.n	8008146 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e01b      	b.n	800817e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	daf2      	bge.n	8008134 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f043 0201 	orr.w	r2, r3, #1
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3301      	adds	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800816a:	d901      	bls.n	8008170 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e006      	b.n	800817e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b01      	cmp	r3, #1
 800817a:	d0f0      	beq.n	800815e <USB_CoreReset+0x36>

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
	...

0800818c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008198:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800819c:	f002 fcfe 	bl	800ab9c <USBD_static_malloc>
 80081a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d109      	bne.n	80081bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	32b0      	adds	r2, #176	@ 0xb0
 80081b2:	2100      	movs	r1, #0
 80081b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80081b8:	2302      	movs	r3, #2
 80081ba:	e0d4      	b.n	8008366 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80081bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80081c0:	2100      	movs	r1, #0
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f002 fd4e 	bl	800ac64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	32b0      	adds	r2, #176	@ 0xb0
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	32b0      	adds	r2, #176	@ 0xb0
 80081e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7c1b      	ldrb	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d138      	bne.n	8008266 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081f4:	4b5e      	ldr	r3, [pc, #376]	@ (8008370 <USBD_CDC_Init+0x1e4>)
 80081f6:	7819      	ldrb	r1, [r3, #0]
 80081f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081fc:	2202      	movs	r2, #2
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f002 fba9 	bl	800a956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008204:	4b5a      	ldr	r3, [pc, #360]	@ (8008370 <USBD_CDC_Init+0x1e4>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	f003 020f 	and.w	r2, r3, #15
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	3324      	adds	r3, #36	@ 0x24
 800821a:	2201      	movs	r2, #1
 800821c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800821e:	4b55      	ldr	r3, [pc, #340]	@ (8008374 <USBD_CDC_Init+0x1e8>)
 8008220:	7819      	ldrb	r1, [r3, #0]
 8008222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008226:	2202      	movs	r2, #2
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f002 fb94 	bl	800a956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800822e:	4b51      	ldr	r3, [pc, #324]	@ (8008374 <USBD_CDC_Init+0x1e8>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	f003 020f 	and.w	r2, r3, #15
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008246:	2201      	movs	r2, #1
 8008248:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800824a:	4b4b      	ldr	r3, [pc, #300]	@ (8008378 <USBD_CDC_Init+0x1ec>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 020f 	and.w	r2, r3, #15
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	3326      	adds	r3, #38	@ 0x26
 8008260:	2210      	movs	r2, #16
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	e035      	b.n	80082d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008266:	4b42      	ldr	r3, [pc, #264]	@ (8008370 <USBD_CDC_Init+0x1e4>)
 8008268:	7819      	ldrb	r1, [r3, #0]
 800826a:	2340      	movs	r3, #64	@ 0x40
 800826c:	2202      	movs	r2, #2
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f002 fb71 	bl	800a956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008274:	4b3e      	ldr	r3, [pc, #248]	@ (8008370 <USBD_CDC_Init+0x1e4>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	f003 020f 	and.w	r2, r3, #15
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	3324      	adds	r3, #36	@ 0x24
 800828a:	2201      	movs	r2, #1
 800828c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800828e:	4b39      	ldr	r3, [pc, #228]	@ (8008374 <USBD_CDC_Init+0x1e8>)
 8008290:	7819      	ldrb	r1, [r3, #0]
 8008292:	2340      	movs	r3, #64	@ 0x40
 8008294:	2202      	movs	r2, #2
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f002 fb5d 	bl	800a956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800829c:	4b35      	ldr	r3, [pc, #212]	@ (8008374 <USBD_CDC_Init+0x1e8>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 020f 	and.w	r2, r3, #15
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	440b      	add	r3, r1
 80082b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80082b4:	2201      	movs	r2, #1
 80082b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008378 <USBD_CDC_Init+0x1ec>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f003 020f 	and.w	r2, r3, #15
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	440b      	add	r3, r1
 80082cc:	3326      	adds	r3, #38	@ 0x26
 80082ce:	2210      	movs	r2, #16
 80082d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082d2:	4b29      	ldr	r3, [pc, #164]	@ (8008378 <USBD_CDC_Init+0x1ec>)
 80082d4:	7819      	ldrb	r1, [r3, #0]
 80082d6:	2308      	movs	r3, #8
 80082d8:	2203      	movs	r2, #3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f002 fb3b 	bl	800a956 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80082e0:	4b25      	ldr	r3, [pc, #148]	@ (8008378 <USBD_CDC_Init+0x1ec>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	f003 020f 	and.w	r2, r3, #15
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	3324      	adds	r3, #36	@ 0x24
 80082f6:	2201      	movs	r2, #1
 80082f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	33b0      	adds	r3, #176	@ 0xb0
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008330:	2302      	movs	r3, #2
 8008332:	e018      	b.n	8008366 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	7c1b      	ldrb	r3, [r3, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10a      	bne.n	8008352 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800833c:	4b0d      	ldr	r3, [pc, #52]	@ (8008374 <USBD_CDC_Init+0x1e8>)
 800833e:	7819      	ldrb	r1, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f002 fbf2 	bl	800ab34 <USBD_LL_PrepareReceive>
 8008350:	e008      	b.n	8008364 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008352:	4b08      	ldr	r3, [pc, #32]	@ (8008374 <USBD_CDC_Init+0x1e8>)
 8008354:	7819      	ldrb	r1, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800835c:	2340      	movs	r3, #64	@ 0x40
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f002 fbe8 	bl	800ab34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	240000b3 	.word	0x240000b3
 8008374:	240000b4 	.word	0x240000b4
 8008378:	240000b5 	.word	0x240000b5

0800837c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008388:	4b3a      	ldr	r3, [pc, #232]	@ (8008474 <USBD_CDC_DeInit+0xf8>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f002 fb07 	bl	800a9a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008394:	4b37      	ldr	r3, [pc, #220]	@ (8008474 <USBD_CDC_DeInit+0xf8>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	f003 020f 	and.w	r2, r3, #15
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	3324      	adds	r3, #36	@ 0x24
 80083aa:	2200      	movs	r2, #0
 80083ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80083ae:	4b32      	ldr	r3, [pc, #200]	@ (8008478 <USBD_CDC_DeInit+0xfc>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f002 faf4 	bl	800a9a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80083ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008478 <USBD_CDC_DeInit+0xfc>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	f003 020f 	and.w	r2, r3, #15
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083d2:	2200      	movs	r2, #0
 80083d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80083d6:	4b29      	ldr	r3, [pc, #164]	@ (800847c <USBD_CDC_DeInit+0x100>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f002 fae0 	bl	800a9a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80083e2:	4b26      	ldr	r3, [pc, #152]	@ (800847c <USBD_CDC_DeInit+0x100>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 020f 	and.w	r2, r3, #15
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	440b      	add	r3, r1
 80083f6:	3324      	adds	r3, #36	@ 0x24
 80083f8:	2200      	movs	r2, #0
 80083fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80083fc:	4b1f      	ldr	r3, [pc, #124]	@ (800847c <USBD_CDC_DeInit+0x100>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	f003 020f 	and.w	r2, r3, #15
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	3326      	adds	r3, #38	@ 0x26
 8008412:	2200      	movs	r2, #0
 8008414:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	32b0      	adds	r2, #176	@ 0xb0
 8008420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d01f      	beq.n	8008468 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	33b0      	adds	r3, #176	@ 0xb0
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	32b0      	adds	r2, #176	@ 0xb0
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	4618      	mov	r0, r3
 800844c:	f002 fbb4 	bl	800abb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	32b0      	adds	r2, #176	@ 0xb0
 800845a:	2100      	movs	r1, #0
 800845c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	240000b3 	.word	0x240000b3
 8008478:	240000b4 	.word	0x240000b4
 800847c:	240000b5 	.word	0x240000b5

08008480 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	32b0      	adds	r2, #176	@ 0xb0
 8008494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008498:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e0bf      	b.n	8008630 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d050      	beq.n	800855e <USBD_CDC_Setup+0xde>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	f040 80af 	bne.w	8008620 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	88db      	ldrh	r3, [r3, #6]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d03a      	beq.n	8008540 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b25b      	sxtb	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da1b      	bge.n	800850c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	33b0      	adds	r3, #176	@ 0xb0
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80084ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	88d2      	ldrh	r2, [r2, #6]
 80084f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	88db      	ldrh	r3, [r3, #6]
 80084f6:	2b07      	cmp	r3, #7
 80084f8:	bf28      	it	cs
 80084fa:	2307      	movcs	r3, #7
 80084fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	89fa      	ldrh	r2, [r7, #14]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 fdbd 	bl	800a084 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800850a:	e090      	b.n	800862e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	785a      	ldrb	r2, [r3, #1]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	88db      	ldrh	r3, [r3, #6]
 800851a:	2b3f      	cmp	r3, #63	@ 0x3f
 800851c:	d803      	bhi.n	8008526 <USBD_CDC_Setup+0xa6>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	88db      	ldrh	r3, [r3, #6]
 8008522:	b2da      	uxtb	r2, r3
 8008524:	e000      	b.n	8008528 <USBD_CDC_Setup+0xa8>
 8008526:	2240      	movs	r2, #64	@ 0x40
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800852e:	6939      	ldr	r1, [r7, #16]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008536:	461a      	mov	r2, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 fdcf 	bl	800a0dc <USBD_CtlPrepareRx>
      break;
 800853e:	e076      	b.n	800862e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	33b0      	adds	r3, #176	@ 0xb0
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	7850      	ldrb	r0, [r2, #1]
 8008556:	2200      	movs	r2, #0
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	4798      	blx	r3
      break;
 800855c:	e067      	b.n	800862e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	2b0b      	cmp	r3, #11
 8008564:	d851      	bhi.n	800860a <USBD_CDC_Setup+0x18a>
 8008566:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <USBD_CDC_Setup+0xec>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	0800859d 	.word	0x0800859d
 8008570:	08008619 	.word	0x08008619
 8008574:	0800860b 	.word	0x0800860b
 8008578:	0800860b 	.word	0x0800860b
 800857c:	0800860b 	.word	0x0800860b
 8008580:	0800860b 	.word	0x0800860b
 8008584:	0800860b 	.word	0x0800860b
 8008588:	0800860b 	.word	0x0800860b
 800858c:	0800860b 	.word	0x0800860b
 8008590:	0800860b 	.word	0x0800860b
 8008594:	080085c7 	.word	0x080085c7
 8008598:	080085f1 	.word	0x080085f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d107      	bne.n	80085b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085a8:	f107 030a 	add.w	r3, r7, #10
 80085ac:	2202      	movs	r2, #2
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 fd67 	bl	800a084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085b6:	e032      	b.n	800861e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fce5 	bl	8009f8a <USBD_CtlError>
            ret = USBD_FAIL;
 80085c0:	2303      	movs	r3, #3
 80085c2:	75fb      	strb	r3, [r7, #23]
          break;
 80085c4:	e02b      	b.n	800861e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d107      	bne.n	80085e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085d2:	f107 030d 	add.w	r3, r7, #13
 80085d6:	2201      	movs	r2, #1
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 fd52 	bl	800a084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085e0:	e01d      	b.n	800861e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 fcd0 	bl	8009f8a <USBD_CtlError>
            ret = USBD_FAIL;
 80085ea:	2303      	movs	r3, #3
 80085ec:	75fb      	strb	r3, [r7, #23]
          break;
 80085ee:	e016      	b.n	800861e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d00f      	beq.n	800861c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 fcc3 	bl	8009f8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008604:	2303      	movs	r3, #3
 8008606:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008608:	e008      	b.n	800861c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fcbc 	bl	8009f8a <USBD_CtlError>
          ret = USBD_FAIL;
 8008612:	2303      	movs	r3, #3
 8008614:	75fb      	strb	r3, [r7, #23]
          break;
 8008616:	e002      	b.n	800861e <USBD_CDC_Setup+0x19e>
          break;
 8008618:	bf00      	nop
 800861a:	e008      	b.n	800862e <USBD_CDC_Setup+0x1ae>
          break;
 800861c:	bf00      	nop
      }
      break;
 800861e:	e006      	b.n	800862e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fcb1 	bl	8009f8a <USBD_CtlError>
      ret = USBD_FAIL;
 8008628:	2303      	movs	r3, #3
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	bf00      	nop
  }

  return (uint8_t)ret;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800864a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32b0      	adds	r2, #176	@ 0xb0
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800865e:	2303      	movs	r3, #3
 8008660:	e065      	b.n	800872e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	32b0      	adds	r2, #176	@ 0xb0
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	f003 020f 	and.w	r2, r3, #15
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	4613      	mov	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	3318      	adds	r3, #24
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d02f      	beq.n	80086ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	f003 020f 	and.w	r2, r3, #15
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	3318      	adds	r3, #24
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	f003 010f 	and.w	r1, r3, #15
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	460b      	mov	r3, r1
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	440b      	add	r3, r1
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4403      	add	r3, r0
 80086b4:	331c      	adds	r3, #28
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80086bc:	fb01 f303 	mul.w	r3, r1, r3
 80086c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d112      	bne.n	80086ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	f003 020f 	and.w	r2, r3, #15
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	440b      	add	r3, r1
 80086d8:	3318      	adds	r3, #24
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086de:	78f9      	ldrb	r1, [r7, #3]
 80086e0:	2300      	movs	r3, #0
 80086e2:	2200      	movs	r2, #0
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f002 fa04 	bl	800aaf2 <USBD_LL_Transmit>
 80086ea:	e01f      	b.n	800872c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	33b0      	adds	r3, #176	@ 0xb0
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d010      	beq.n	800872c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	33b0      	adds	r3, #176	@ 0xb0
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	32b0      	adds	r2, #176	@ 0xb0
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	32b0      	adds	r2, #176	@ 0xb0
 800875c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008764:	2303      	movs	r3, #3
 8008766:	e01a      	b.n	800879e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f002 fa02 	bl	800ab76 <USBD_LL_GetRxDataSize>
 8008772:	4602      	mov	r2, r0
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	33b0      	adds	r3, #176	@ 0xb0
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008798:	4611      	mov	r1, r2
 800879a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	32b0      	adds	r2, #176	@ 0xb0
 80087b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e024      	b.n	8008812 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	33b0      	adds	r3, #176	@ 0xb0
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d019      	beq.n	8008810 <USBD_CDC_EP0_RxReady+0x6a>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80087e2:	2bff      	cmp	r3, #255	@ 0xff
 80087e4:	d014      	beq.n	8008810 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	33b0      	adds	r3, #176	@ 0xb0
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80087fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008806:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	22ff      	movs	r2, #255	@ 0xff
 800880c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008824:	2182      	movs	r1, #130	@ 0x82
 8008826:	4818      	ldr	r0, [pc, #96]	@ (8008888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008828:	f000 fd4f 	bl	80092ca <USBD_GetEpDesc>
 800882c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800882e:	2101      	movs	r1, #1
 8008830:	4815      	ldr	r0, [pc, #84]	@ (8008888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008832:	f000 fd4a 	bl	80092ca <USBD_GetEpDesc>
 8008836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008838:	2181      	movs	r1, #129	@ 0x81
 800883a:	4813      	ldr	r0, [pc, #76]	@ (8008888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800883c:	f000 fd45 	bl	80092ca <USBD_GetEpDesc>
 8008840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2210      	movs	r2, #16
 800884c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d006      	beq.n	8008862 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2200      	movs	r2, #0
 8008858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800885c:	711a      	strb	r2, [r3, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d006      	beq.n	8008876 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008870:	711a      	strb	r2, [r3, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2243      	movs	r2, #67	@ 0x43
 800887a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800887c:	4b02      	ldr	r3, [pc, #8]	@ (8008888 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	24000070 	.word	0x24000070

0800888c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008894:	2182      	movs	r1, #130	@ 0x82
 8008896:	4818      	ldr	r0, [pc, #96]	@ (80088f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008898:	f000 fd17 	bl	80092ca <USBD_GetEpDesc>
 800889c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800889e:	2101      	movs	r1, #1
 80088a0:	4815      	ldr	r0, [pc, #84]	@ (80088f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088a2:	f000 fd12 	bl	80092ca <USBD_GetEpDesc>
 80088a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088a8:	2181      	movs	r1, #129	@ 0x81
 80088aa:	4813      	ldr	r0, [pc, #76]	@ (80088f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088ac:	f000 fd0d 	bl	80092ca <USBD_GetEpDesc>
 80088b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2210      	movs	r2, #16
 80088bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2200      	movs	r2, #0
 80088c8:	711a      	strb	r2, [r3, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f042 0202 	orr.w	r2, r2, #2
 80088d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d006      	beq.n	80088e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	711a      	strb	r2, [r3, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f042 0202 	orr.w	r2, r2, #2
 80088e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2243      	movs	r2, #67	@ 0x43
 80088ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088ec:	4b02      	ldr	r3, [pc, #8]	@ (80088f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	24000070 	.word	0x24000070

080088fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008904:	2182      	movs	r1, #130	@ 0x82
 8008906:	4818      	ldr	r0, [pc, #96]	@ (8008968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008908:	f000 fcdf 	bl	80092ca <USBD_GetEpDesc>
 800890c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800890e:	2101      	movs	r1, #1
 8008910:	4815      	ldr	r0, [pc, #84]	@ (8008968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008912:	f000 fcda 	bl	80092ca <USBD_GetEpDesc>
 8008916:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008918:	2181      	movs	r1, #129	@ 0x81
 800891a:	4813      	ldr	r0, [pc, #76]	@ (8008968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800891c:	f000 fcd5 	bl	80092ca <USBD_GetEpDesc>
 8008920:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2210      	movs	r2, #16
 800892c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d006      	beq.n	8008942 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	2200      	movs	r2, #0
 8008938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800893c:	711a      	strb	r2, [r3, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d006      	beq.n	8008956 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008950:	711a      	strb	r2, [r3, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2243      	movs	r2, #67	@ 0x43
 800895a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800895c:	4b02      	ldr	r3, [pc, #8]	@ (8008968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	24000070 	.word	0x24000070

0800896c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	220a      	movs	r2, #10
 8008978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800897a:	4b03      	ldr	r3, [pc, #12]	@ (8008988 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	2400002c 	.word	0x2400002c

0800898c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800899c:	2303      	movs	r3, #3
 800899e:	e009      	b.n	80089b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	33b0      	adds	r3, #176	@ 0xb0
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	32b0      	adds	r2, #176	@ 0xb0
 80089d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e008      	b.n	80089f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	32b0      	adds	r2, #176	@ 0xb0
 8008a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e004      	b.n	8008a32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	32b0      	adds	r2, #176	@ 0xb0
 8008a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a56:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e025      	b.n	8008ab2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d11f      	bne.n	8008ab0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a78:	4b10      	ldr	r3, [pc, #64]	@ (8008abc <USBD_CDC_TransmitPacket+0x7c>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4403      	add	r3, r0
 8008a92:	3318      	adds	r3, #24
 8008a94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a96:	4b09      	ldr	r3, [pc, #36]	@ (8008abc <USBD_CDC_TransmitPacket+0x7c>)
 8008a98:	7819      	ldrb	r1, [r3, #0]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f002 f823 	bl	800aaf2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	240000b3 	.word	0x240000b3

08008ac0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	32b0      	adds	r2, #176	@ 0xb0
 8008ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	32b0      	adds	r2, #176	@ 0xb0
 8008ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e018      	b.n	8008b20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	7c1b      	ldrb	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008af6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b28 <USBD_CDC_ReceivePacket+0x68>)
 8008af8:	7819      	ldrb	r1, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f002 f815 	bl	800ab34 <USBD_LL_PrepareReceive>
 8008b0a:	e008      	b.n	8008b1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b0c:	4b06      	ldr	r3, [pc, #24]	@ (8008b28 <USBD_CDC_ReceivePacket+0x68>)
 8008b0e:	7819      	ldrb	r1, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b16:	2340      	movs	r3, #64	@ 0x40
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f002 f80b 	bl	800ab34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	240000b4 	.word	0x240000b4

08008b2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e01f      	b.n	8008b84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	79fa      	ldrb	r2, [r7, #7]
 8008b76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f001 fe81 	bl	800a880 <USBD_LL_Init>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e025      	b.n	8008bf0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	32ae      	adds	r2, #174	@ 0xae
 8008bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00f      	beq.n	8008be0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	32ae      	adds	r2, #174	@ 0xae
 8008bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd0:	f107 020e 	add.w	r2, r7, #14
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	4602      	mov	r2, r0
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fe8d 	bl	800a920 <USBD_LL_Start>
 8008c06:	4603      	mov	r3, r0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d009      	beq.n	8008c54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	4611      	mov	r1, r2
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 f936 	bl	8009f16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008cb8:	461a      	mov	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008cc6:	f003 031f 	and.w	r3, r3, #31
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d01a      	beq.n	8008d04 <USBD_LL_SetupStage+0x72>
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d822      	bhi.n	8008d18 <USBD_LL_SetupStage+0x86>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <USBD_LL_SetupStage+0x4a>
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d00a      	beq.n	8008cf0 <USBD_LL_SetupStage+0x5e>
 8008cda:	e01d      	b.n	8008d18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fb63 	bl	80093b0 <USBD_StdDevReq>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
      break;
 8008cee:	e020      	b.n	8008d32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fbcb 	bl	8009494 <USBD_StdItfReq>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	73fb      	strb	r3, [r7, #15]
      break;
 8008d02:	e016      	b.n	8008d32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fc2d 	bl	800956c <USBD_StdEPReq>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
      break;
 8008d16:	e00c      	b.n	8008d32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 fe5a 	bl	800a9e0 <USBD_LL_StallEP>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d30:	bf00      	nop
  }

  return ret;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	460b      	mov	r3, r1
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d16e      	bne.n	8008e32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	f040 8098 	bne.w	8008e98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d913      	bls.n	8008d9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	1ad2      	subs	r2, r2, r3
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	bf28      	it	cs
 8008d8e:	4613      	movcs	r3, r2
 8008d90:	461a      	mov	r2, r3
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f001 f9be 	bl	800a116 <USBD_CtlContinueRx>
 8008d9a:	e07d      	b.n	8008e98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008da2:	f003 031f 	and.w	r3, r3, #31
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d014      	beq.n	8008dd4 <USBD_LL_DataOutStage+0x98>
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d81d      	bhi.n	8008dea <USBD_LL_DataOutStage+0xae>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <USBD_LL_DataOutStage+0x7c>
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d003      	beq.n	8008dbe <USBD_LL_DataOutStage+0x82>
 8008db6:	e018      	b.n	8008dea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75bb      	strb	r3, [r7, #22]
            break;
 8008dbc:	e018      	b.n	8008df0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 fa64 	bl	8009296 <USBD_CoreFindIF>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75bb      	strb	r3, [r7, #22]
            break;
 8008dd2:	e00d      	b.n	8008df0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	4619      	mov	r1, r3
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 fa66 	bl	80092b0 <USBD_CoreFindEP>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75bb      	strb	r3, [r7, #22]
            break;
 8008de8:	e002      	b.n	8008df0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	75bb      	strb	r3, [r7, #22]
            break;
 8008dee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008df0:	7dbb      	ldrb	r3, [r7, #22]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d119      	bne.n	8008e2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d113      	bne.n	8008e2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e02:	7dba      	ldrb	r2, [r7, #22]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	32ae      	adds	r2, #174	@ 0xae
 8008e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e12:	7dba      	ldrb	r2, [r7, #22]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e1a:	7dba      	ldrb	r2, [r7, #22]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	32ae      	adds	r2, #174	@ 0xae
 8008e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f001 f984 	bl	800a138 <USBD_CtlSendStatus>
 8008e30:	e032      	b.n	8008e98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e32:	7afb      	ldrb	r3, [r7, #11]
 8008e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 fa37 	bl	80092b0 <USBD_CoreFindEP>
 8008e42:	4603      	mov	r3, r0
 8008e44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e46:	7dbb      	ldrb	r3, [r7, #22]
 8008e48:	2bff      	cmp	r3, #255	@ 0xff
 8008e4a:	d025      	beq.n	8008e98 <USBD_LL_DataOutStage+0x15c>
 8008e4c:	7dbb      	ldrb	r3, [r7, #22]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d122      	bne.n	8008e98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d117      	bne.n	8008e8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e5e:	7dba      	ldrb	r2, [r7, #22]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	32ae      	adds	r2, #174	@ 0xae
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00f      	beq.n	8008e8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e6e:	7dba      	ldrb	r2, [r7, #22]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e76:	7dba      	ldrb	r2, [r7, #22]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	32ae      	adds	r2, #174	@ 0xae
 8008e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	7afa      	ldrb	r2, [r7, #11]
 8008e84:	4611      	mov	r1, r2
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	4798      	blx	r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	e000      	b.n	8008e9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	607a      	str	r2, [r7, #4]
 8008eae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d16f      	bne.n	8008f96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3314      	adds	r3, #20
 8008eba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d15a      	bne.n	8008f7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d914      	bls.n	8008efc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	1ad2      	subs	r2, r2, r3
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f001 f8e6 	bl	800a0ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f001 fe1d 	bl	800ab34 <USBD_LL_PrepareReceive>
 8008efa:	e03f      	b.n	8008f7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d11c      	bne.n	8008f42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d316      	bcc.n	8008f42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d20f      	bcs.n	8008f42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f22:	2200      	movs	r2, #0
 8008f24:	2100      	movs	r1, #0
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f001 f8c7 	bl	800a0ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f34:	2300      	movs	r3, #0
 8008f36:	2200      	movs	r2, #0
 8008f38:	2100      	movs	r1, #0
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f001 fdfa 	bl	800ab34 <USBD_LL_PrepareReceive>
 8008f40:	e01c      	b.n	8008f7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d10f      	bne.n	8008f6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d009      	beq.n	8008f6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f6e:	2180      	movs	r1, #128	@ 0x80
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f001 fd35 	bl	800a9e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f001 f8f1 	bl	800a15e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d03a      	beq.n	8008ffc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff fe42 	bl	8008c10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f94:	e032      	b.n	8008ffc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f96:	7afb      	ldrb	r3, [r7, #11]
 8008f98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f985 	bl	80092b0 <USBD_CoreFindEP>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	2bff      	cmp	r3, #255	@ 0xff
 8008fae:	d025      	beq.n	8008ffc <USBD_LL_DataInStage+0x15a>
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d122      	bne.n	8008ffc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d11c      	bne.n	8008ffc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008fc2:	7dfa      	ldrb	r2, [r7, #23]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	32ae      	adds	r2, #174	@ 0xae
 8008fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d014      	beq.n	8008ffc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008fd2:	7dfa      	ldrb	r2, [r7, #23]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008fda:	7dfa      	ldrb	r2, [r7, #23]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	32ae      	adds	r2, #174	@ 0xae
 8008fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	7afa      	ldrb	r2, [r7, #11]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	4798      	blx	r3
 8008fee:	4603      	mov	r3, r0
 8008ff0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008ff2:	7dbb      	ldrb	r3, [r7, #22]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008ff8:	7dbb      	ldrb	r3, [r7, #22]
 8008ffa:	e000      	b.n	8008ffe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903e:	2b00      	cmp	r3, #0
 8009040:	d014      	beq.n	800906c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00e      	beq.n	800906c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	6852      	ldr	r2, [r2, #4]
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	4611      	mov	r1, r2
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	4798      	blx	r3
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009068:	2303      	movs	r3, #3
 800906a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800906c:	2340      	movs	r3, #64	@ 0x40
 800906e:	2200      	movs	r2, #0
 8009070:	2100      	movs	r1, #0
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f001 fc6f 	bl	800a956 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2240      	movs	r2, #64	@ 0x40
 8009084:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009088:	2340      	movs	r3, #64	@ 0x40
 800908a:	2200      	movs	r2, #0
 800908c:	2180      	movs	r1, #128	@ 0x80
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 fc61 	bl	800a956 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2240      	movs	r2, #64	@ 0x40
 800909e:	621a      	str	r2, [r3, #32]

  return ret;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	78fa      	ldrb	r2, [r7, #3]
 80090ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d006      	beq.n	80090ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2204      	movs	r2, #4
 80090f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b04      	cmp	r3, #4
 8009114:	d106      	bne.n	8009124 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800911c:	b2da      	uxtb	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b03      	cmp	r3, #3
 8009144:	d110      	bne.n	8009168 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	32ae      	adds	r2, #174	@ 0xae
 8009188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009190:	2303      	movs	r3, #3
 8009192:	e01c      	b.n	80091ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b03      	cmp	r3, #3
 800919e:	d115      	bne.n	80091cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	32ae      	adds	r2, #174	@ 0xae
 80091aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00b      	beq.n	80091cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	32ae      	adds	r2, #174	@ 0xae
 80091be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	4611      	mov	r1, r2
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	460b      	mov	r3, r1
 80091e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	32ae      	adds	r2, #174	@ 0xae
 80091ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e01c      	b.n	8009232 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b03      	cmp	r3, #3
 8009202:	d115      	bne.n	8009230 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	32ae      	adds	r2, #174	@ 0xae
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	32ae      	adds	r2, #174	@ 0xae
 8009222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009228:	78fa      	ldrb	r2, [r7, #3]
 800922a:	4611      	mov	r1, r2
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00e      	beq.n	800928c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6852      	ldr	r2, [r2, #4]
 800927a:	b2d2      	uxtb	r2, r2
 800927c:	4611      	mov	r1, r2
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800928c:	7bfb      	ldrb	r3, [r7, #15]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	460b      	mov	r3, r1
 80092ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	460b      	mov	r3, r1
 80092d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	885b      	ldrh	r3, [r3, #2]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d91f      	bls.n	8009330 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80092f6:	e013      	b.n	8009320 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092f8:	f107 030a 	add.w	r3, r7, #10
 80092fc:	4619      	mov	r1, r3
 80092fe:	6978      	ldr	r0, [r7, #20]
 8009300:	f000 f81b 	bl	800933a <USBD_GetNextDesc>
 8009304:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	785b      	ldrb	r3, [r3, #1]
 800930a:	2b05      	cmp	r3, #5
 800930c:	d108      	bne.n	8009320 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	789b      	ldrb	r3, [r3, #2]
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	429a      	cmp	r2, r3
 800931a:	d008      	beq.n	800932e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800931c:	2300      	movs	r3, #0
 800931e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	885b      	ldrh	r3, [r3, #2]
 8009324:	b29a      	uxth	r2, r3
 8009326:	897b      	ldrh	r3, [r7, #10]
 8009328:	429a      	cmp	r2, r3
 800932a:	d8e5      	bhi.n	80092f8 <USBD_GetEpDesc+0x2e>
 800932c:	e000      	b.n	8009330 <USBD_GetEpDesc+0x66>
          break;
 800932e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009330:	693b      	ldr	r3, [r7, #16]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800933a:	b480      	push	{r7}
 800933c:	b085      	sub	sp, #20
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	7812      	ldrb	r2, [r2, #0]
 8009350:	4413      	add	r3, r2
 8009352:	b29a      	uxth	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4413      	add	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009364:	68fb      	ldr	r3, [r7, #12]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009372:	b480      	push	{r7}
 8009374:	b087      	sub	sp, #28
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	3301      	adds	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009390:	8a3b      	ldrh	r3, [r7, #16]
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	b21a      	sxth	r2, r3
 8009396:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800939a:	4313      	orrs	r3, r2
 800939c:	b21b      	sxth	r3, r3
 800939e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093a0:	89fb      	ldrh	r3, [r7, #14]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
	...

080093b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093c6:	2b40      	cmp	r3, #64	@ 0x40
 80093c8:	d005      	beq.n	80093d6 <USBD_StdDevReq+0x26>
 80093ca:	2b40      	cmp	r3, #64	@ 0x40
 80093cc:	d857      	bhi.n	800947e <USBD_StdDevReq+0xce>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00f      	beq.n	80093f2 <USBD_StdDevReq+0x42>
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	d153      	bne.n	800947e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	32ae      	adds	r2, #174	@ 0xae
 80093e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	4798      	blx	r3
 80093ec:	4603      	mov	r3, r0
 80093ee:	73fb      	strb	r3, [r7, #15]
      break;
 80093f0:	e04a      	b.n	8009488 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	785b      	ldrb	r3, [r3, #1]
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	d83b      	bhi.n	8009472 <USBD_StdDevReq+0xc2>
 80093fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009400 <USBD_StdDevReq+0x50>)
 80093fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009400:	08009455 	.word	0x08009455
 8009404:	08009469 	.word	0x08009469
 8009408:	08009473 	.word	0x08009473
 800940c:	0800945f 	.word	0x0800945f
 8009410:	08009473 	.word	0x08009473
 8009414:	08009433 	.word	0x08009433
 8009418:	08009429 	.word	0x08009429
 800941c:	08009473 	.word	0x08009473
 8009420:	0800944b 	.word	0x0800944b
 8009424:	0800943d 	.word	0x0800943d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa3c 	bl	80098a8 <USBD_GetDescriptor>
          break;
 8009430:	e024      	b.n	800947c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fbcb 	bl	8009bd0 <USBD_SetAddress>
          break;
 800943a:	e01f      	b.n	800947c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fc0a 	bl	8009c58 <USBD_SetConfig>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]
          break;
 8009448:	e018      	b.n	800947c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fcad 	bl	8009dac <USBD_GetConfig>
          break;
 8009452:	e013      	b.n	800947c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fcde 	bl	8009e18 <USBD_GetStatus>
          break;
 800945c:	e00e      	b.n	800947c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fd0d 	bl	8009e80 <USBD_SetFeature>
          break;
 8009466:	e009      	b.n	800947c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fd31 	bl	8009ed2 <USBD_ClrFeature>
          break;
 8009470:	e004      	b.n	800947c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fd88 	bl	8009f8a <USBD_CtlError>
          break;
 800947a:	bf00      	nop
      }
      break;
 800947c:	e004      	b.n	8009488 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fd82 	bl	8009f8a <USBD_CtlError>
      break;
 8009486:	bf00      	nop
  }

  return ret;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop

08009494 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094aa:	2b40      	cmp	r3, #64	@ 0x40
 80094ac:	d005      	beq.n	80094ba <USBD_StdItfReq+0x26>
 80094ae:	2b40      	cmp	r3, #64	@ 0x40
 80094b0:	d852      	bhi.n	8009558 <USBD_StdItfReq+0xc4>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <USBD_StdItfReq+0x26>
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d14e      	bne.n	8009558 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	3b01      	subs	r3, #1
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d840      	bhi.n	800954a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	889b      	ldrh	r3, [r3, #4]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d836      	bhi.n	8009540 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	889b      	ldrh	r3, [r3, #4]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fedb 	bl	8009296 <USBD_CoreFindIF>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	2bff      	cmp	r3, #255	@ 0xff
 80094e8:	d01d      	beq.n	8009526 <USBD_StdItfReq+0x92>
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11a      	bne.n	8009526 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094f0:	7bba      	ldrb	r2, [r7, #14]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	32ae      	adds	r2, #174	@ 0xae
 80094f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00f      	beq.n	8009520 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009500:	7bba      	ldrb	r2, [r7, #14]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009508:	7bba      	ldrb	r2, [r7, #14]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	32ae      	adds	r2, #174	@ 0xae
 800950e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
 800951a:	4603      	mov	r3, r0
 800951c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800951e:	e004      	b.n	800952a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009520:	2303      	movs	r3, #3
 8009522:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009524:	e001      	b.n	800952a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009526:	2303      	movs	r3, #3
 8009528:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	88db      	ldrh	r3, [r3, #6]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d110      	bne.n	8009554 <USBD_StdItfReq+0xc0>
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10d      	bne.n	8009554 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fdfd 	bl	800a138 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800953e:	e009      	b.n	8009554 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fd21 	bl	8009f8a <USBD_CtlError>
          break;
 8009548:	e004      	b.n	8009554 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fd1c 	bl	8009f8a <USBD_CtlError>
          break;
 8009552:	e000      	b.n	8009556 <USBD_StdItfReq+0xc2>
          break;
 8009554:	bf00      	nop
      }
      break;
 8009556:	e004      	b.n	8009562 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fd15 	bl	8009f8a <USBD_CtlError>
      break;
 8009560:	bf00      	nop
  }

  return ret;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	889b      	ldrh	r3, [r3, #4]
 800957e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009588:	2b40      	cmp	r3, #64	@ 0x40
 800958a:	d007      	beq.n	800959c <USBD_StdEPReq+0x30>
 800958c:	2b40      	cmp	r3, #64	@ 0x40
 800958e:	f200 817f 	bhi.w	8009890 <USBD_StdEPReq+0x324>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d02a      	beq.n	80095ec <USBD_StdEPReq+0x80>
 8009596:	2b20      	cmp	r3, #32
 8009598:	f040 817a 	bne.w	8009890 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff fe85 	bl	80092b0 <USBD_CoreFindEP>
 80095a6:	4603      	mov	r3, r0
 80095a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095aa:	7b7b      	ldrb	r3, [r7, #13]
 80095ac:	2bff      	cmp	r3, #255	@ 0xff
 80095ae:	f000 8174 	beq.w	800989a <USBD_StdEPReq+0x32e>
 80095b2:	7b7b      	ldrb	r3, [r7, #13]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f040 8170 	bne.w	800989a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80095ba:	7b7a      	ldrb	r2, [r7, #13]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80095c2:	7b7a      	ldrb	r2, [r7, #13]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	32ae      	adds	r2, #174	@ 0xae
 80095c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 8163 	beq.w	800989a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095d4:	7b7a      	ldrb	r2, [r7, #13]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	32ae      	adds	r2, #174	@ 0xae
 80095da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	4798      	blx	r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095ea:	e156      	b.n	800989a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d008      	beq.n	8009606 <USBD_StdEPReq+0x9a>
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	f300 8145 	bgt.w	8009884 <USBD_StdEPReq+0x318>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 809b 	beq.w	8009736 <USBD_StdEPReq+0x1ca>
 8009600:	2b01      	cmp	r3, #1
 8009602:	d03c      	beq.n	800967e <USBD_StdEPReq+0x112>
 8009604:	e13e      	b.n	8009884 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b02      	cmp	r3, #2
 8009610:	d002      	beq.n	8009618 <USBD_StdEPReq+0xac>
 8009612:	2b03      	cmp	r3, #3
 8009614:	d016      	beq.n	8009644 <USBD_StdEPReq+0xd8>
 8009616:	e02c      	b.n	8009672 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00d      	beq.n	800963a <USBD_StdEPReq+0xce>
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b80      	cmp	r3, #128	@ 0x80
 8009622:	d00a      	beq.n	800963a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 f9d9 	bl	800a9e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800962e:	2180      	movs	r1, #128	@ 0x80
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f001 f9d5 	bl	800a9e0 <USBD_LL_StallEP>
 8009636:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009638:	e020      	b.n	800967c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fca4 	bl	8009f8a <USBD_CtlError>
              break;
 8009642:	e01b      	b.n	800967c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	885b      	ldrh	r3, [r3, #2]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10e      	bne.n	800966a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00b      	beq.n	800966a <USBD_StdEPReq+0xfe>
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b80      	cmp	r3, #128	@ 0x80
 8009656:	d008      	beq.n	800966a <USBD_StdEPReq+0xfe>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	88db      	ldrh	r3, [r3, #6]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 f9bb 	bl	800a9e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fd64 	bl	800a138 <USBD_CtlSendStatus>

              break;
 8009670:	e004      	b.n	800967c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fc88 	bl	8009f8a <USBD_CtlError>
              break;
 800967a:	bf00      	nop
          }
          break;
 800967c:	e107      	b.n	800988e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b02      	cmp	r3, #2
 8009688:	d002      	beq.n	8009690 <USBD_StdEPReq+0x124>
 800968a:	2b03      	cmp	r3, #3
 800968c:	d016      	beq.n	80096bc <USBD_StdEPReq+0x150>
 800968e:	e04b      	b.n	8009728 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00d      	beq.n	80096b2 <USBD_StdEPReq+0x146>
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	2b80      	cmp	r3, #128	@ 0x80
 800969a:	d00a      	beq.n	80096b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 f99d 	bl	800a9e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096a6:	2180      	movs	r1, #128	@ 0x80
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 f999 	bl	800a9e0 <USBD_LL_StallEP>
 80096ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096b0:	e040      	b.n	8009734 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fc68 	bl	8009f8a <USBD_CtlError>
              break;
 80096ba:	e03b      	b.n	8009734 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	885b      	ldrh	r3, [r3, #2]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d136      	bne.n	8009732 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d004      	beq.n	80096d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 f9a3 	bl	800aa1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fd2d 	bl	800a138 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff fde4 	bl	80092b0 <USBD_CoreFindEP>
 80096e8:	4603      	mov	r3, r0
 80096ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096ec:	7b7b      	ldrb	r3, [r7, #13]
 80096ee:	2bff      	cmp	r3, #255	@ 0xff
 80096f0:	d01f      	beq.n	8009732 <USBD_StdEPReq+0x1c6>
 80096f2:	7b7b      	ldrb	r3, [r7, #13]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d11c      	bne.n	8009732 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80096f8:	7b7a      	ldrb	r2, [r7, #13]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009700:	7b7a      	ldrb	r2, [r7, #13]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	32ae      	adds	r2, #174	@ 0xae
 8009706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d010      	beq.n	8009732 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009710:	7b7a      	ldrb	r2, [r7, #13]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	32ae      	adds	r2, #174	@ 0xae
 8009716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
 8009722:	4603      	mov	r3, r0
 8009724:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009726:	e004      	b.n	8009732 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fc2d 	bl	8009f8a <USBD_CtlError>
              break;
 8009730:	e000      	b.n	8009734 <USBD_StdEPReq+0x1c8>
              break;
 8009732:	bf00      	nop
          }
          break;
 8009734:	e0ab      	b.n	800988e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b02      	cmp	r3, #2
 8009740:	d002      	beq.n	8009748 <USBD_StdEPReq+0x1dc>
 8009742:	2b03      	cmp	r3, #3
 8009744:	d032      	beq.n	80097ac <USBD_StdEPReq+0x240>
 8009746:	e097      	b.n	8009878 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <USBD_StdEPReq+0x1f2>
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	2b80      	cmp	r3, #128	@ 0x80
 8009752:	d004      	beq.n	800975e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fc17 	bl	8009f8a <USBD_CtlError>
                break;
 800975c:	e091      	b.n	8009882 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800975e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009762:	2b00      	cmp	r3, #0
 8009764:	da0b      	bge.n	800977e <USBD_StdEPReq+0x212>
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	3310      	adds	r3, #16
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	4413      	add	r3, r2
 800977a:	3304      	adds	r3, #4
 800977c:	e00b      	b.n	8009796 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800977e:	7bbb      	ldrb	r3, [r7, #14]
 8009780:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009784:	4613      	mov	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	4413      	add	r3, r2
 8009794:	3304      	adds	r3, #4
 8009796:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2202      	movs	r2, #2
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc6d 	bl	800a084 <USBD_CtlSendData>
              break;
 80097aa:	e06a      	b.n	8009882 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da11      	bge.n	80097d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	f003 020f 	and.w	r2, r3, #15
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	4613      	mov	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	440b      	add	r3, r1
 80097c6:	3324      	adds	r3, #36	@ 0x24
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d117      	bne.n	80097fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fbda 	bl	8009f8a <USBD_CtlError>
                  break;
 80097d6:	e054      	b.n	8009882 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	f003 020f 	and.w	r2, r3, #15
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	440b      	add	r3, r1
 80097ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d104      	bne.n	80097fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fbc7 	bl	8009f8a <USBD_CtlError>
                  break;
 80097fc:	e041      	b.n	8009882 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009802:	2b00      	cmp	r3, #0
 8009804:	da0b      	bge.n	800981e <USBD_StdEPReq+0x2b2>
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	3310      	adds	r3, #16
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	4413      	add	r3, r2
 800981a:	3304      	adds	r3, #4
 800981c:	e00b      	b.n	8009836 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	4413      	add	r3, r2
 8009834:	3304      	adds	r3, #4
 8009836:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <USBD_StdEPReq+0x2d8>
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	2b80      	cmp	r3, #128	@ 0x80
 8009842:	d103      	bne.n	800984c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	e00e      	b.n	800986a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800984c:	7bbb      	ldrb	r3, [r7, #14]
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f001 f903 	bl	800aa5c <USBD_LL_IsStallEP>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2201      	movs	r2, #1
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	e002      	b.n	800986a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2202      	movs	r2, #2
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fc07 	bl	800a084 <USBD_CtlSendData>
              break;
 8009876:	e004      	b.n	8009882 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fb85 	bl	8009f8a <USBD_CtlError>
              break;
 8009880:	bf00      	nop
          }
          break;
 8009882:	e004      	b.n	800988e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb7f 	bl	8009f8a <USBD_CtlError>
          break;
 800988c:	bf00      	nop
      }
      break;
 800988e:	e005      	b.n	800989c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fb79 	bl	8009f8a <USBD_CtlError>
      break;
 8009898:	e000      	b.n	800989c <USBD_StdEPReq+0x330>
      break;
 800989a:	bf00      	nop
  }

  return ret;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098b2:	2300      	movs	r3, #0
 80098b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	885b      	ldrh	r3, [r3, #2]
 80098c2:	0a1b      	lsrs	r3, r3, #8
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	3b01      	subs	r3, #1
 80098c8:	2b0e      	cmp	r3, #14
 80098ca:	f200 8152 	bhi.w	8009b72 <USBD_GetDescriptor+0x2ca>
 80098ce:	a201      	add	r2, pc, #4	@ (adr r2, 80098d4 <USBD_GetDescriptor+0x2c>)
 80098d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d4:	08009945 	.word	0x08009945
 80098d8:	0800995d 	.word	0x0800995d
 80098dc:	0800999d 	.word	0x0800999d
 80098e0:	08009b73 	.word	0x08009b73
 80098e4:	08009b73 	.word	0x08009b73
 80098e8:	08009b13 	.word	0x08009b13
 80098ec:	08009b3f 	.word	0x08009b3f
 80098f0:	08009b73 	.word	0x08009b73
 80098f4:	08009b73 	.word	0x08009b73
 80098f8:	08009b73 	.word	0x08009b73
 80098fc:	08009b73 	.word	0x08009b73
 8009900:	08009b73 	.word	0x08009b73
 8009904:	08009b73 	.word	0x08009b73
 8009908:	08009b73 	.word	0x08009b73
 800990c:	08009911 	.word	0x08009911
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	7c12      	ldrb	r2, [r2, #16]
 8009928:	f107 0108 	add.w	r1, r7, #8
 800992c:	4610      	mov	r0, r2
 800992e:	4798      	blx	r3
 8009930:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009932:	e126      	b.n	8009b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fb27 	bl	8009f8a <USBD_CtlError>
        err++;
 800993c:	7afb      	ldrb	r3, [r7, #11]
 800993e:	3301      	adds	r3, #1
 8009940:	72fb      	strb	r3, [r7, #11]
      break;
 8009942:	e11e      	b.n	8009b82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	7c12      	ldrb	r2, [r2, #16]
 8009950:	f107 0108 	add.w	r1, r7, #8
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	60f8      	str	r0, [r7, #12]
      break;
 800995a:	e112      	b.n	8009b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	7c1b      	ldrb	r3, [r3, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10d      	bne.n	8009980 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800996a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996c:	f107 0208 	add.w	r2, r7, #8
 8009970:	4610      	mov	r0, r2
 8009972:	4798      	blx	r3
 8009974:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3301      	adds	r3, #1
 800997a:	2202      	movs	r2, #2
 800997c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800997e:	e100      	b.n	8009b82 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009988:	f107 0208 	add.w	r2, r7, #8
 800998c:	4610      	mov	r0, r2
 800998e:	4798      	blx	r3
 8009990:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3301      	adds	r3, #1
 8009996:	2202      	movs	r2, #2
 8009998:	701a      	strb	r2, [r3, #0]
      break;
 800999a:	e0f2      	b.n	8009b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	885b      	ldrh	r3, [r3, #2]
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b05      	cmp	r3, #5
 80099a4:	f200 80ac 	bhi.w	8009b00 <USBD_GetDescriptor+0x258>
 80099a8:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <USBD_GetDescriptor+0x108>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099c9 	.word	0x080099c9
 80099b4:	080099fd 	.word	0x080099fd
 80099b8:	08009a31 	.word	0x08009a31
 80099bc:	08009a65 	.word	0x08009a65
 80099c0:	08009a99 	.word	0x08009a99
 80099c4:	08009acd 	.word	0x08009acd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00b      	beq.n	80099ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ea:	e091      	b.n	8009b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 facb 	bl	8009f8a <USBD_CtlError>
            err++;
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	3301      	adds	r3, #1
 80099f8:	72fb      	strb	r3, [r7, #11]
          break;
 80099fa:	e089      	b.n	8009b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	7c12      	ldrb	r2, [r2, #16]
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a1e:	e077      	b.n	8009b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fab1 	bl	8009f8a <USBD_CtlError>
            err++;
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a2e:	e06f      	b.n	8009b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00b      	beq.n	8009a54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	7c12      	ldrb	r2, [r2, #16]
 8009a48:	f107 0108 	add.w	r1, r7, #8
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4798      	blx	r3
 8009a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a52:	e05d      	b.n	8009b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fa97 	bl	8009f8a <USBD_CtlError>
            err++;
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	72fb      	strb	r3, [r7, #11]
          break;
 8009a62:	e055      	b.n	8009b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00b      	beq.n	8009a88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	7c12      	ldrb	r2, [r2, #16]
 8009a7c:	f107 0108 	add.w	r1, r7, #8
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
 8009a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a86:	e043      	b.n	8009b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa7d 	bl	8009f8a <USBD_CtlError>
            err++;
 8009a90:	7afb      	ldrb	r3, [r7, #11]
 8009a92:	3301      	adds	r3, #1
 8009a94:	72fb      	strb	r3, [r7, #11]
          break;
 8009a96:	e03b      	b.n	8009b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	7c12      	ldrb	r2, [r2, #16]
 8009ab0:	f107 0108 	add.w	r1, r7, #8
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
 8009ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aba:	e029      	b.n	8009b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa63 	bl	8009f8a <USBD_CtlError>
            err++;
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aca:	e021      	b.n	8009b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00b      	beq.n	8009af0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7c12      	ldrb	r2, [r2, #16]
 8009ae4:	f107 0108 	add.w	r1, r7, #8
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
 8009aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aee:	e00f      	b.n	8009b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa49 	bl	8009f8a <USBD_CtlError>
            err++;
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	3301      	adds	r3, #1
 8009afc:	72fb      	strb	r3, [r7, #11]
          break;
 8009afe:	e007      	b.n	8009b10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fa41 	bl	8009f8a <USBD_CtlError>
          err++;
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b0e:	bf00      	nop
      }
      break;
 8009b10:	e037      	b.n	8009b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	7c1b      	ldrb	r3, [r3, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d109      	bne.n	8009b2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b22:	f107 0208 	add.w	r2, r7, #8
 8009b26:	4610      	mov	r0, r2
 8009b28:	4798      	blx	r3
 8009b2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b2c:	e029      	b.n	8009b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fa2a 	bl	8009f8a <USBD_CtlError>
        err++;
 8009b36:	7afb      	ldrb	r3, [r7, #11]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b3c:	e021      	b.n	8009b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	7c1b      	ldrb	r3, [r3, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10d      	bne.n	8009b62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4e:	f107 0208 	add.w	r2, r7, #8
 8009b52:	4610      	mov	r0, r2
 8009b54:	4798      	blx	r3
 8009b56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	2207      	movs	r2, #7
 8009b5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b60:	e00f      	b.n	8009b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fa10 	bl	8009f8a <USBD_CtlError>
        err++;
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b70:	e007      	b.n	8009b82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fa08 	bl	8009f8a <USBD_CtlError>
      err++;
 8009b7a:	7afb      	ldrb	r3, [r7, #11]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b80:	bf00      	nop
  }

  if (err != 0U)
 8009b82:	7afb      	ldrb	r3, [r7, #11]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d11e      	bne.n	8009bc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	88db      	ldrh	r3, [r3, #6]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d016      	beq.n	8009bbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009b90:	893b      	ldrh	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00e      	beq.n	8009bb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	88da      	ldrh	r2, [r3, #6]
 8009b9a:	893b      	ldrh	r3, [r7, #8]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	bf28      	it	cs
 8009ba0:	4613      	movcs	r3, r2
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ba6:	893b      	ldrh	r3, [r7, #8]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	68f9      	ldr	r1, [r7, #12]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fa69 	bl	800a084 <USBD_CtlSendData>
 8009bb2:	e009      	b.n	8009bc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f9e7 	bl	8009f8a <USBD_CtlError>
 8009bbc:	e004      	b.n	8009bc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 faba 	bl	800a138 <USBD_CtlSendStatus>
 8009bc4:	e000      	b.n	8009bc8 <USBD_GetDescriptor+0x320>
    return;
 8009bc6:	bf00      	nop
  }
}
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop

08009bd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	889b      	ldrh	r3, [r3, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d131      	bne.n	8009c46 <USBD_SetAddress+0x76>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	88db      	ldrh	r3, [r3, #6]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d12d      	bne.n	8009c46 <USBD_SetAddress+0x76>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	885b      	ldrh	r3, [r3, #2]
 8009bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bf0:	d829      	bhi.n	8009c46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d104      	bne.n	8009c14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f9bc 	bl	8009f8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c12:	e01d      	b.n	8009c50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	7bfa      	ldrb	r2, [r7, #15]
 8009c18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 ff47 	bl	800aab4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa86 	bl	800a138 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d004      	beq.n	8009c3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2202      	movs	r2, #2
 8009c36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3a:	e009      	b.n	8009c50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c44:	e004      	b.n	8009c50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f99e 	bl	8009f8a <USBD_CtlError>
  }
}
 8009c4e:	bf00      	nop
 8009c50:	bf00      	nop
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	885b      	ldrh	r3, [r3, #2]
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009c6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c70:	4b4d      	ldr	r3, [pc, #308]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d905      	bls.n	8009c84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f985 	bl	8009f8a <USBD_CtlError>
    return USBD_FAIL;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e08c      	b.n	8009d9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d002      	beq.n	8009c96 <USBD_SetConfig+0x3e>
 8009c90:	2b03      	cmp	r3, #3
 8009c92:	d029      	beq.n	8009ce8 <USBD_SetConfig+0x90>
 8009c94:	e075      	b.n	8009d82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c96:	4b44      	ldr	r3, [pc, #272]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d020      	beq.n	8009ce0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c9e:	4b42      	ldr	r3, [pc, #264]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7fe ffb9 	bl	8008c26 <USBD_SetClassConfig>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d008      	beq.n	8009cd0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f962 	bl	8009f8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2202      	movs	r2, #2
 8009cca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cce:	e065      	b.n	8009d9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fa31 	bl	800a138 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2203      	movs	r2, #3
 8009cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009cde:	e05d      	b.n	8009d9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fa29 	bl	800a138 <USBD_CtlSendStatus>
      break;
 8009ce6:	e059      	b.n	8009d9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d112      	bne.n	8009d16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d02:	4b29      	ldr	r3, [pc, #164]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7fe ffa8 	bl	8008c5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fa12 	bl	800a138 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d14:	e042      	b.n	8009d9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d16:	4b24      	ldr	r3, [pc, #144]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d02a      	beq.n	8009d7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7fe ff96 	bl	8008c5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d32:	4b1d      	ldr	r3, [pc, #116]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fe ff6f 	bl	8008c26 <USBD_SetClassConfig>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00f      	beq.n	8009d72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f918 	bl	8009f8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7fe ff7b 	bl	8008c5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d70:	e014      	b.n	8009d9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f9e0 	bl	800a138 <USBD_CtlSendStatus>
      break;
 8009d78:	e010      	b.n	8009d9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f9dc 	bl	800a138 <USBD_CtlSendStatus>
      break;
 8009d80:	e00c      	b.n	8009d9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f900 	bl	8009f8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d8a:	4b07      	ldr	r3, [pc, #28]	@ (8009da8 <USBD_SetConfig+0x150>)
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7fe ff64 	bl	8008c5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d96:	2303      	movs	r3, #3
 8009d98:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9a:	bf00      	nop
  }

  return ret;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	24000240 	.word	0x24000240

08009dac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	88db      	ldrh	r3, [r3, #6]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d004      	beq.n	8009dc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f8e2 	bl	8009f8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dc6:	e023      	b.n	8009e10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	dc02      	bgt.n	8009dda <USBD_GetConfig+0x2e>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dc03      	bgt.n	8009de0 <USBD_GetConfig+0x34>
 8009dd8:	e015      	b.n	8009e06 <USBD_GetConfig+0x5a>
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d00b      	beq.n	8009df6 <USBD_GetConfig+0x4a>
 8009dde:	e012      	b.n	8009e06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3308      	adds	r3, #8
 8009dea:	2201      	movs	r2, #1
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f948 	bl	800a084 <USBD_CtlSendData>
        break;
 8009df4:	e00c      	b.n	8009e10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f940 	bl	800a084 <USBD_CtlSendData>
        break;
 8009e04:	e004      	b.n	8009e10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f8be 	bl	8009f8a <USBD_CtlError>
        break;
 8009e0e:	bf00      	nop
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d81e      	bhi.n	8009e6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	88db      	ldrh	r3, [r3, #6]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d004      	beq.n	8009e42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f8a5 	bl	8009f8a <USBD_CtlError>
        break;
 8009e40:	e01a      	b.n	8009e78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f043 0202 	orr.w	r2, r3, #2
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	330c      	adds	r3, #12
 8009e62:	2202      	movs	r2, #2
 8009e64:	4619      	mov	r1, r3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f90c 	bl	800a084 <USBD_CtlSendData>
      break;
 8009e6c:	e004      	b.n	8009e78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f88a 	bl	8009f8a <USBD_CtlError>
      break;
 8009e76:	bf00      	nop
  }
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	885b      	ldrh	r3, [r3, #2]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d107      	bne.n	8009ea2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f94c 	bl	800a138 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ea0:	e013      	b.n	8009eca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	885b      	ldrh	r3, [r3, #2]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d10b      	bne.n	8009ec2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	889b      	ldrh	r3, [r3, #4]
 8009eae:	0a1b      	lsrs	r3, r3, #8
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f93c 	bl	800a138 <USBD_CtlSendStatus>
}
 8009ec0:	e003      	b.n	8009eca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f860 	bl	8009f8a <USBD_CtlError>
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d80b      	bhi.n	8009f02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	885b      	ldrh	r3, [r3, #2]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d10c      	bne.n	8009f0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f91c 	bl	800a138 <USBD_CtlSendStatus>
      }
      break;
 8009f00:	e004      	b.n	8009f0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f840 	bl	8009f8a <USBD_CtlError>
      break;
 8009f0a:	e000      	b.n	8009f0e <USBD_ClrFeature+0x3c>
      break;
 8009f0c:	bf00      	nop
  }
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	781a      	ldrb	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7ff fa16 	bl	8009372 <SWAPBYTE>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3301      	adds	r3, #1
 8009f52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7ff fa09 	bl	8009372 <SWAPBYTE>
 8009f60:	4603      	mov	r3, r0
 8009f62:	461a      	mov	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3301      	adds	r3, #1
 8009f72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f7ff f9fc 	bl	8009372 <SWAPBYTE>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	80da      	strh	r2, [r3, #6]
}
 8009f82:	bf00      	nop
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f94:	2180      	movs	r1, #128	@ 0x80
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fd22 	bl	800a9e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fd1e 	bl	800a9e0 <USBD_LL_StallEP>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d042      	beq.n	800a048 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009fc6:	6938      	ldr	r0, [r7, #16]
 8009fc8:	f000 f842 	bl	800a050 <USBD_GetLen>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	3301      	adds	r3, #1
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd6:	d808      	bhi.n	8009fea <USBD_GetString+0x3e>
 8009fd8:	6938      	ldr	r0, [r7, #16]
 8009fda:	f000 f839 	bl	800a050 <USBD_GetLen>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	005b      	lsls	r3, r3, #1
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	e001      	b.n	8009fee <USBD_GetString+0x42>
 8009fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	7812      	ldrb	r2, [r2, #0]
 8009ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	3301      	adds	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a004:	7dfb      	ldrb	r3, [r7, #23]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	4413      	add	r3, r2
 800a00a:	2203      	movs	r2, #3
 800a00c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	3301      	adds	r3, #1
 800a012:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a014:	e013      	b.n	800a03e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	4413      	add	r3, r2
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	7812      	ldrb	r2, [r2, #0]
 800a020:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	3301      	adds	r3, #1
 800a026:	613b      	str	r3, [r7, #16]
    idx++;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	3301      	adds	r3, #1
 800a02c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	4413      	add	r3, r2
 800a034:	2200      	movs	r2, #0
 800a036:	701a      	strb	r2, [r3, #0]
    idx++;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	3301      	adds	r3, #1
 800a03c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1e7      	bne.n	800a016 <USBD_GetString+0x6a>
 800a046:	e000      	b.n	800a04a <USBD_GetString+0x9e>
    return;
 800a048:	bf00      	nop
  }
}
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a060:	e005      	b.n	800a06e <USBD_GetLen+0x1e>
  {
    len++;
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	3301      	adds	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	3301      	adds	r3, #1
 800a06c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1f5      	bne.n	800a062 <USBD_GetLen+0x12>
  }

  return len;
 800a076:	7bfb      	ldrb	r3, [r7, #15]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2202      	movs	r2, #2
 800a094:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 fd21 	bl	800aaf2 <USBD_LL_Transmit>

  return USBD_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b084      	sub	sp, #16
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fd10 	bl	800aaf2 <USBD_LL_Transmit>

  return USBD_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	2100      	movs	r1, #0
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 fd14 	bl	800ab34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	2100      	movs	r1, #0
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fd03 	bl	800ab34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2204      	movs	r2, #4
 800a144:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a148:	2300      	movs	r3, #0
 800a14a:	2200      	movs	r2, #0
 800a14c:	2100      	movs	r1, #0
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fccf 	bl	800aaf2 <USBD_LL_Transmit>

  return USBD_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b082      	sub	sp, #8
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2205      	movs	r2, #5
 800a16a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a16e:	2300      	movs	r3, #0
 800a170:	2200      	movs	r2, #0
 800a172:	2100      	movs	r1, #0
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fcdd 	bl	800ab34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a188:	2200      	movs	r2, #0
 800a18a:	4913      	ldr	r1, [pc, #76]	@ (800a1d8 <MX_USB_DEVICE_Init+0x54>)
 800a18c:	4813      	ldr	r0, [pc, #76]	@ (800a1dc <MX_USB_DEVICE_Init+0x58>)
 800a18e:	f7fe fccd 	bl	8008b2c <USBD_Init>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a198:	f7f6 fcd2 	bl	8000b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a19c:	4910      	ldr	r1, [pc, #64]	@ (800a1e0 <MX_USB_DEVICE_Init+0x5c>)
 800a19e:	480f      	ldr	r0, [pc, #60]	@ (800a1dc <MX_USB_DEVICE_Init+0x58>)
 800a1a0:	f7fe fcf4 	bl	8008b8c <USBD_RegisterClass>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1aa:	f7f6 fcc9 	bl	8000b40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1ae:	490d      	ldr	r1, [pc, #52]	@ (800a1e4 <MX_USB_DEVICE_Init+0x60>)
 800a1b0:	480a      	ldr	r0, [pc, #40]	@ (800a1dc <MX_USB_DEVICE_Init+0x58>)
 800a1b2:	f7fe fbeb 	bl	800898c <USBD_CDC_RegisterInterface>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1bc:	f7f6 fcc0 	bl	8000b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1c0:	4806      	ldr	r0, [pc, #24]	@ (800a1dc <MX_USB_DEVICE_Init+0x58>)
 800a1c2:	f7fe fd19 	bl	8008bf8 <USBD_Start>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1cc:	f7f6 fcb8 	bl	8000b40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a1d0:	f7f8 fe84 	bl	8002edc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1d4:	bf00      	nop
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	240000cc 	.word	0x240000cc
 800a1dc:	24000244 	.word	0x24000244
 800a1e0:	24000038 	.word	0x24000038
 800a1e4:	240000b8 	.word	0x240000b8

0800a1e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	4905      	ldr	r1, [pc, #20]	@ (800a204 <CDC_Init_FS+0x1c>)
 800a1f0:	4805      	ldr	r0, [pc, #20]	@ (800a208 <CDC_Init_FS+0x20>)
 800a1f2:	f7fe fbe5 	bl	80089c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1f6:	4905      	ldr	r1, [pc, #20]	@ (800a20c <CDC_Init_FS+0x24>)
 800a1f8:	4803      	ldr	r0, [pc, #12]	@ (800a208 <CDC_Init_FS+0x20>)
 800a1fa:	f7fe fc03 	bl	8008a04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a200:	4618      	mov	r0, r3
 800a202:	bd80      	pop	{r7, pc}
 800a204:	24000d20 	.word	0x24000d20
 800a208:	24000244 	.word	0x24000244
 800a20c:	24000520 	.word	0x24000520

0800a210 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a210:	b480      	push	{r7}
 800a212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a214:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a216:	4618      	mov	r0, r3
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	6039      	str	r1, [r7, #0]
 800a22a:	71fb      	strb	r3, [r7, #7]
 800a22c:	4613      	mov	r3, r2
 800a22e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	2b23      	cmp	r3, #35	@ 0x23
 800a234:	d84a      	bhi.n	800a2cc <CDC_Control_FS+0xac>
 800a236:	a201      	add	r2, pc, #4	@ (adr r2, 800a23c <CDC_Control_FS+0x1c>)
 800a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23c:	0800a2cd 	.word	0x0800a2cd
 800a240:	0800a2cd 	.word	0x0800a2cd
 800a244:	0800a2cd 	.word	0x0800a2cd
 800a248:	0800a2cd 	.word	0x0800a2cd
 800a24c:	0800a2cd 	.word	0x0800a2cd
 800a250:	0800a2cd 	.word	0x0800a2cd
 800a254:	0800a2cd 	.word	0x0800a2cd
 800a258:	0800a2cd 	.word	0x0800a2cd
 800a25c:	0800a2cd 	.word	0x0800a2cd
 800a260:	0800a2cd 	.word	0x0800a2cd
 800a264:	0800a2cd 	.word	0x0800a2cd
 800a268:	0800a2cd 	.word	0x0800a2cd
 800a26c:	0800a2cd 	.word	0x0800a2cd
 800a270:	0800a2cd 	.word	0x0800a2cd
 800a274:	0800a2cd 	.word	0x0800a2cd
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a2cd 	.word	0x0800a2cd
 800a280:	0800a2cd 	.word	0x0800a2cd
 800a284:	0800a2cd 	.word	0x0800a2cd
 800a288:	0800a2cd 	.word	0x0800a2cd
 800a28c:	0800a2cd 	.word	0x0800a2cd
 800a290:	0800a2cd 	.word	0x0800a2cd
 800a294:	0800a2cd 	.word	0x0800a2cd
 800a298:	0800a2cd 	.word	0x0800a2cd
 800a29c:	0800a2cd 	.word	0x0800a2cd
 800a2a0:	0800a2cd 	.word	0x0800a2cd
 800a2a4:	0800a2cd 	.word	0x0800a2cd
 800a2a8:	0800a2cd 	.word	0x0800a2cd
 800a2ac:	0800a2cd 	.word	0x0800a2cd
 800a2b0:	0800a2cd 	.word	0x0800a2cd
 800a2b4:	0800a2cd 	.word	0x0800a2cd
 800a2b8:	0800a2cd 	.word	0x0800a2cd
 800a2bc:	0800a2cd 	.word	0x0800a2cd
 800a2c0:	0800a2cd 	.word	0x0800a2cd
 800a2c4:	0800a2cd 	.word	0x0800a2cd
 800a2c8:	0800a2cd 	.word	0x0800a2cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2cc:	bf00      	nop
  }

  return (USBD_OK);
 800a2ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	4805      	ldr	r0, [pc, #20]	@ (800a300 <CDC_Receive_FS+0x24>)
 800a2ea:	f7fe fb8b 	bl	8008a04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2ee:	4804      	ldr	r0, [pc, #16]	@ (800a300 <CDC_Receive_FS+0x24>)
 800a2f0:	f7fe fbe6 	bl	8008ac0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	24000244 	.word	0x24000244

0800a304 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a314:	4b0d      	ldr	r3, [pc, #52]	@ (800a34c <CDC_Transmit_FS+0x48>)
 800a316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a31a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a326:	2301      	movs	r3, #1
 800a328:	e00b      	b.n	800a342 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a32a:	887b      	ldrh	r3, [r7, #2]
 800a32c:	461a      	mov	r2, r3
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	4806      	ldr	r0, [pc, #24]	@ (800a34c <CDC_Transmit_FS+0x48>)
 800a332:	f7fe fb45 	bl	80089c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a336:	4805      	ldr	r0, [pc, #20]	@ (800a34c <CDC_Transmit_FS+0x48>)
 800a338:	f7fe fb82 	bl	8008a40 <USBD_CDC_TransmitPacket>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a340:	7bfb      	ldrb	r3, [r7, #15]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	24000244 	.word	0x24000244

0800a350 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a366:	4618      	mov	r0, r3
 800a368:	371c      	adds	r7, #28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
	...

0800a374 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	6039      	str	r1, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2212      	movs	r2, #18
 800a384:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a386:	4b03      	ldr	r3, [pc, #12]	@ (800a394 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	240000ec 	.word	0x240000ec

0800a398 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2204      	movs	r2, #4
 800a3a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3aa:	4b03      	ldr	r3, [pc, #12]	@ (800a3b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	24000100 	.word	0x24000100

0800a3bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	6039      	str	r1, [r7, #0]
 800a3c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d105      	bne.n	800a3da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4907      	ldr	r1, [pc, #28]	@ (800a3f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3d2:	4808      	ldr	r0, [pc, #32]	@ (800a3f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3d4:	f7ff fdea 	bl	8009fac <USBD_GetString>
 800a3d8:	e004      	b.n	800a3e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	4904      	ldr	r1, [pc, #16]	@ (800a3f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3de:	4805      	ldr	r0, [pc, #20]	@ (800a3f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3e0:	f7ff fde4 	bl	8009fac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e4:	4b02      	ldr	r3, [pc, #8]	@ (800a3f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	24001520 	.word	0x24001520
 800a3f4:	0800b5a4 	.word	0x0800b5a4

0800a3f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	6039      	str	r1, [r7, #0]
 800a402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	4904      	ldr	r1, [pc, #16]	@ (800a418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a408:	4804      	ldr	r0, [pc, #16]	@ (800a41c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a40a:	f7ff fdcf 	bl	8009fac <USBD_GetString>
  return USBD_StrDesc;
 800a40e:	4b02      	ldr	r3, [pc, #8]	@ (800a418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	24001520 	.word	0x24001520
 800a41c:	0800b5bc 	.word	0x0800b5bc

0800a420 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	221a      	movs	r2, #26
 800a430:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a432:	f000 f843 	bl	800a4bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a436:	4b02      	ldr	r3, [pc, #8]	@ (800a440 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	24000104 	.word	0x24000104

0800a444 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d105      	bne.n	800a462 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4907      	ldr	r1, [pc, #28]	@ (800a478 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a45a:	4808      	ldr	r0, [pc, #32]	@ (800a47c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a45c:	f7ff fda6 	bl	8009fac <USBD_GetString>
 800a460:	e004      	b.n	800a46c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	4904      	ldr	r1, [pc, #16]	@ (800a478 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a466:	4805      	ldr	r0, [pc, #20]	@ (800a47c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a468:	f7ff fda0 	bl	8009fac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a46c:	4b02      	ldr	r3, [pc, #8]	@ (800a478 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	24001520 	.word	0x24001520
 800a47c:	0800b5d0 	.word	0x0800b5d0

0800a480 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	6039      	str	r1, [r7, #0]
 800a48a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d105      	bne.n	800a49e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	4907      	ldr	r1, [pc, #28]	@ (800a4b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a496:	4808      	ldr	r0, [pc, #32]	@ (800a4b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a498:	f7ff fd88 	bl	8009fac <USBD_GetString>
 800a49c:	e004      	b.n	800a4a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	4904      	ldr	r1, [pc, #16]	@ (800a4b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4a2:	4805      	ldr	r0, [pc, #20]	@ (800a4b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4a4:	f7ff fd82 	bl	8009fac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4a8:	4b02      	ldr	r3, [pc, #8]	@ (800a4b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	24001520 	.word	0x24001520
 800a4b8:	0800b5dc 	.word	0x0800b5dc

0800a4bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a500 <Get_SerialNum+0x44>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a504 <Get_SerialNum+0x48>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a508 <Get_SerialNum+0x4c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4413      	add	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d009      	beq.n	800a4f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4e2:	2208      	movs	r2, #8
 800a4e4:	4909      	ldr	r1, [pc, #36]	@ (800a50c <Get_SerialNum+0x50>)
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 f814 	bl	800a514 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4ec:	2204      	movs	r2, #4
 800a4ee:	4908      	ldr	r1, [pc, #32]	@ (800a510 <Get_SerialNum+0x54>)
 800a4f0:	68b8      	ldr	r0, [r7, #8]
 800a4f2:	f000 f80f 	bl	800a514 <IntToUnicode>
  }
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	1ff1e800 	.word	0x1ff1e800
 800a504:	1ff1e804 	.word	0x1ff1e804
 800a508:	1ff1e808 	.word	0x1ff1e808
 800a50c:	24000106 	.word	0x24000106
 800a510:	24000116 	.word	0x24000116

0800a514 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a514:	b480      	push	{r7}
 800a516:	b087      	sub	sp, #28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	4613      	mov	r3, r2
 800a520:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a526:	2300      	movs	r3, #0
 800a528:	75fb      	strb	r3, [r7, #23]
 800a52a:	e027      	b.n	800a57c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	0f1b      	lsrs	r3, r3, #28
 800a530:	2b09      	cmp	r3, #9
 800a532:	d80b      	bhi.n	800a54c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	0f1b      	lsrs	r3, r3, #28
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	4619      	mov	r1, r3
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	440b      	add	r3, r1
 800a544:	3230      	adds	r2, #48	@ 0x30
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	701a      	strb	r2, [r3, #0]
 800a54a:	e00a      	b.n	800a562 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	0f1b      	lsrs	r3, r3, #28
 800a550:	b2da      	uxtb	r2, r3
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	4619      	mov	r1, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	440b      	add	r3, r1
 800a55c:	3237      	adds	r2, #55	@ 0x37
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	011b      	lsls	r3, r3, #4
 800a566:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	3301      	adds	r3, #1
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	4413      	add	r3, r2
 800a572:	2200      	movs	r2, #0
 800a574:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	3301      	adds	r3, #1
 800a57a:	75fb      	strb	r3, [r7, #23]
 800a57c:	7dfa      	ldrb	r2, [r7, #23]
 800a57e:	79fb      	ldrb	r3, [r7, #7]
 800a580:	429a      	cmp	r2, r3
 800a582:	d3d3      	bcc.n	800a52c <IntToUnicode+0x18>
  }
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop
 800a588:	371c      	adds	r7, #28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
	...

0800a594 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b0ba      	sub	sp, #232	@ 0xe8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a59c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	609a      	str	r2, [r3, #8]
 800a5a8:	60da      	str	r2, [r3, #12]
 800a5aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5ac:	f107 0310 	add.w	r3, r7, #16
 800a5b0:	22c0      	movs	r2, #192	@ 0xc0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f000 fb55 	bl	800ac64 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a34      	ldr	r2, [pc, #208]	@ (800a690 <HAL_PCD_MspInit+0xfc>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d161      	bne.n	800a688 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a5c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a5c8:	f04f 0300 	mov.w	r3, #0
 800a5cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a5d0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a5d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5d8:	f107 0310 	add.w	r3, r7, #16
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7f9 fc73 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800a5e8:	f7f6 faaa 	bl	8000b40 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a5ec:	f7f8 fc76 	bl	8002edc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5f0:	4b28      	ldr	r3, [pc, #160]	@ (800a694 <HAL_PCD_MspInit+0x100>)
 800a5f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5f6:	4a27      	ldr	r2, [pc, #156]	@ (800a694 <HAL_PCD_MspInit+0x100>)
 800a5f8:	f043 0301 	orr.w	r3, r3, #1
 800a5fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a600:	4b24      	ldr	r3, [pc, #144]	@ (800a694 <HAL_PCD_MspInit+0x100>)
 800a602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a60e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800a612:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a616:	2302      	movs	r3, #2
 800a618:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a622:	2300      	movs	r3, #0
 800a624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a628:	230a      	movs	r3, #10
 800a62a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a62e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a632:	4619      	mov	r1, r3
 800a634:	4818      	ldr	r0, [pc, #96]	@ (800a698 <HAL_PCD_MspInit+0x104>)
 800a636:	f7f6 ff61 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a63a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a63e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a642:	2300      	movs	r3, #0
 800a644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a648:	2300      	movs	r3, #0
 800a64a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a64e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a652:	4619      	mov	r1, r3
 800a654:	4810      	ldr	r0, [pc, #64]	@ (800a698 <HAL_PCD_MspInit+0x104>)
 800a656:	f7f6 ff51 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a65a:	4b0e      	ldr	r3, [pc, #56]	@ (800a694 <HAL_PCD_MspInit+0x100>)
 800a65c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a660:	4a0c      	ldr	r2, [pc, #48]	@ (800a694 <HAL_PCD_MspInit+0x100>)
 800a662:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a666:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a66a:	4b0a      	ldr	r3, [pc, #40]	@ (800a694 <HAL_PCD_MspInit+0x100>)
 800a66c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a674:	60bb      	str	r3, [r7, #8]
 800a676:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a678:	2200      	movs	r2, #0
 800a67a:	2100      	movs	r1, #0
 800a67c:	2065      	movs	r0, #101	@ 0x65
 800a67e:	f7f6 fe84 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a682:	2065      	movs	r0, #101	@ 0x65
 800a684:	f7f6 fe9b 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a688:	bf00      	nop
 800a68a:	37e8      	adds	r7, #232	@ 0xe8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	40080000 	.word	0x40080000
 800a694:	58024400 	.word	0x58024400
 800a698:	58020000 	.word	0x58020000

0800a69c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	f7fe faed 	bl	8008c92 <USBD_LL_SetupStage>
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6d2:	78fa      	ldrb	r2, [r7, #3]
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	4413      	add	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	440b      	add	r3, r1
 800a6e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	78fb      	ldrb	r3, [r7, #3]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	f7fe fb27 	bl	8008d3c <USBD_LL_DataOutStage>
}
 800a6ee:	bf00      	nop
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	460b      	mov	r3, r1
 800a700:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a708:	78fa      	ldrb	r2, [r7, #3]
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	4613      	mov	r3, r2
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	3320      	adds	r3, #32
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	78fb      	ldrb	r3, [r7, #3]
 800a71c:	4619      	mov	r1, r3
 800a71e:	f7fe fbc0 	bl	8008ea2 <USBD_LL_DataInStage>
}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe fcfa 	bl	8009132 <USBD_LL_SOF>
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b084      	sub	sp, #16
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a74e:	2301      	movs	r3, #1
 800a750:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	79db      	ldrb	r3, [r3, #7]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73fb      	strb	r3, [r7, #15]
 800a75e:	e008      	b.n	800a772 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	79db      	ldrb	r3, [r3, #7]
 800a764:	2b02      	cmp	r3, #2
 800a766:	d102      	bne.n	800a76e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a768:	2301      	movs	r3, #1
 800a76a:	73fb      	strb	r3, [r7, #15]
 800a76c:	e001      	b.n	800a772 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a76e:	f7f6 f9e7 	bl	8000b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a778:	7bfa      	ldrb	r2, [r7, #15]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fe fc94 	bl	80090aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fc3c 	bl	8009006 <USBD_LL_Reset>
}
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fc8f 	bl	80090ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6812      	ldr	r2, [r2, #0]
 800a7ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7be:	f043 0301 	orr.w	r3, r3, #1
 800a7c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	7adb      	ldrb	r3, [r3, #11]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7cc:	4b04      	ldr	r3, [pc, #16]	@ (800a7e0 <HAL_PCD_SuspendCallback+0x48>)
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	4a03      	ldr	r2, [pc, #12]	@ (800a7e0 <HAL_PCD_SuspendCallback+0x48>)
 800a7d2:	f043 0306 	orr.w	r3, r3, #6
 800a7d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	e000ed00 	.word	0xe000ed00

0800a7e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe fc85 	bl	8009102 <USBD_LL_Resume>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	4611      	mov	r1, r2
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fcdd 	bl	80091d6 <USBD_LL_IsoOUTIncomplete>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a836:	78fa      	ldrb	r2, [r7, #3]
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fc99 	bl	8009172 <USBD_LL_IsoINIncomplete>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe fcef 	bl	800923a <USBD_LL_DevConnected>
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fcec 	bl	8009250 <USBD_LL_DevDisconnected>
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d13e      	bne.n	800a90e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a890:	4a21      	ldr	r2, [pc, #132]	@ (800a918 <USBD_LL_Init+0x98>)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a1f      	ldr	r2, [pc, #124]	@ (800a918 <USBD_LL_Init+0x98>)
 800a89c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a91c <USBD_LL_Init+0x9c>)
 800a8a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800a8a6:	4b1c      	ldr	r3, [pc, #112]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8a8:	2209      	movs	r2, #9
 800a8aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8b2:	4b19      	ldr	r3, [pc, #100]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8b8:	4b17      	ldr	r3, [pc, #92]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a8be:	4b16      	ldr	r3, [pc, #88]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8c4:	4b14      	ldr	r3, [pc, #80]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8ca:	4b13      	ldr	r3, [pc, #76]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800a8d0:	4b11      	ldr	r3, [pc, #68]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a8d6:	4b10      	ldr	r3, [pc, #64]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8d8:	2201      	movs	r2, #1
 800a8da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8e2:	480d      	ldr	r0, [pc, #52]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8e4:	f7f7 f802 	bl	80018ec <HAL_PCD_Init>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a8ee:	f7f6 f927 	bl	8000b40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8f2:	2180      	movs	r1, #128	@ 0x80
 800a8f4:	4808      	ldr	r0, [pc, #32]	@ (800a918 <USBD_LL_Init+0x98>)
 800a8f6:	f7f8 fa56 	bl	8002da6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8fa:	2240      	movs	r2, #64	@ 0x40
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	4806      	ldr	r0, [pc, #24]	@ (800a918 <USBD_LL_Init+0x98>)
 800a900:	f7f8 fa0a 	bl	8002d18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a904:	2280      	movs	r2, #128	@ 0x80
 800a906:	2101      	movs	r1, #1
 800a908:	4803      	ldr	r0, [pc, #12]	@ (800a918 <USBD_LL_Init+0x98>)
 800a90a:	f7f8 fa05 	bl	8002d18 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	24001720 	.word	0x24001720
 800a91c:	40080000 	.word	0x40080000

0800a920 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a936:	4618      	mov	r0, r3
 800a938:	f7f7 f8e4 	bl	8001b04 <HAL_PCD_Start>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 f942 	bl	800abcc <USBD_Get_USB_Status>
 800a948:	4603      	mov	r3, r0
 800a94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	4608      	mov	r0, r1
 800a960:	4611      	mov	r1, r2
 800a962:	461a      	mov	r2, r3
 800a964:	4603      	mov	r3, r0
 800a966:	70fb      	strb	r3, [r7, #3]
 800a968:	460b      	mov	r3, r1
 800a96a:	70bb      	strb	r3, [r7, #2]
 800a96c:	4613      	mov	r3, r2
 800a96e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a97e:	78bb      	ldrb	r3, [r7, #2]
 800a980:	883a      	ldrh	r2, [r7, #0]
 800a982:	78f9      	ldrb	r1, [r7, #3]
 800a984:	f7f7 fde5 	bl	8002552 <HAL_PCD_EP_Open>
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f91c 	bl	800abcc <USBD_Get_USB_Status>
 800a994:	4603      	mov	r3, r0
 800a996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a998:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9bc:	78fa      	ldrb	r2, [r7, #3]
 800a9be:	4611      	mov	r1, r2
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7f7 fe2e 	bl	8002622 <HAL_PCD_EP_Close>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 f8fd 	bl	800abcc <USBD_Get_USB_Status>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9fa:	78fa      	ldrb	r2, [r7, #3]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7f7 fee6 	bl	80027d0 <HAL_PCD_EP_SetStall>
 800aa04:	4603      	mov	r3, r0
 800aa06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 f8de 	bl	800abcc <USBD_Get_USB_Status>
 800aa10:	4603      	mov	r3, r0
 800aa12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa14:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa38:	78fa      	ldrb	r2, [r7, #3]
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7f7 ff2a 	bl	8002896 <HAL_PCD_EP_ClrStall>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 f8bf 	bl	800abcc <USBD_Get_USB_Status>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	da0b      	bge.n	800aa90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa7e:	68f9      	ldr	r1, [r7, #12]
 800aa80:	4613      	mov	r3, r2
 800aa82:	00db      	lsls	r3, r3, #3
 800aa84:	4413      	add	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	440b      	add	r3, r1
 800aa8a:	3316      	adds	r3, #22
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	e00b      	b.n	800aaa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa96:	68f9      	ldr	r1, [r7, #12]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aaa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aace:	78fa      	ldrb	r2, [r7, #3]
 800aad0:	4611      	mov	r1, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7f7 fd19 	bl	800250a <HAL_PCD_SetAddress>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f874 	bl	800abcc <USBD_Get_USB_Status>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b086      	sub	sp, #24
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
 800aafe:	460b      	mov	r3, r1
 800ab00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab10:	7af9      	ldrb	r1, [r7, #11]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	f7f7 fe21 	bl	800275c <HAL_PCD_EP_Transmit>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 f853 	bl	800abcc <USBD_Get_USB_Status>
 800ab26:	4603      	mov	r3, r0
 800ab28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	607a      	str	r2, [r7, #4]
 800ab3e:	603b      	str	r3, [r7, #0]
 800ab40:	460b      	mov	r3, r1
 800ab42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab52:	7af9      	ldrb	r1, [r7, #11]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	f7f7 fdad 	bl	80026b6 <HAL_PCD_EP_Receive>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 f832 	bl	800abcc <USBD_Get_USB_Status>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b082      	sub	sp, #8
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab88:	78fa      	ldrb	r2, [r7, #3]
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7f7 fdcd 	bl	800272c <HAL_PCD_EP_GetRxCount>
 800ab92:	4603      	mov	r3, r0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aba4:	4b03      	ldr	r3, [pc, #12]	@ (800abb4 <USBD_static_malloc+0x18>)
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	24001c04 	.word	0x24001c04

0800abb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d817      	bhi.n	800ac10 <USBD_Get_USB_Status+0x44>
 800abe0:	a201      	add	r2, pc, #4	@ (adr r2, 800abe8 <USBD_Get_USB_Status+0x1c>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800abf9 	.word	0x0800abf9
 800abec:	0800abff 	.word	0x0800abff
 800abf0:	0800ac05 	.word	0x0800ac05
 800abf4:	0800ac0b 	.word	0x0800ac0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
    break;
 800abfc:	e00b      	b.n	800ac16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abfe:	2303      	movs	r3, #3
 800ac00:	73fb      	strb	r3, [r7, #15]
    break;
 800ac02:	e008      	b.n	800ac16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac04:	2301      	movs	r3, #1
 800ac06:	73fb      	strb	r3, [r7, #15]
    break;
 800ac08:	e005      	b.n	800ac16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0e:	e002      	b.n	800ac16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	73fb      	strb	r3, [r7, #15]
    break;
 800ac14:	bf00      	nop
  }
  return usb_status;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <siprintf>:
 800ac24:	b40e      	push	{r1, r2, r3}
 800ac26:	b500      	push	{lr}
 800ac28:	b09c      	sub	sp, #112	@ 0x70
 800ac2a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac2c:	9002      	str	r0, [sp, #8]
 800ac2e:	9006      	str	r0, [sp, #24]
 800ac30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac34:	4809      	ldr	r0, [pc, #36]	@ (800ac5c <siprintf+0x38>)
 800ac36:	9107      	str	r1, [sp, #28]
 800ac38:	9104      	str	r1, [sp, #16]
 800ac3a:	4909      	ldr	r1, [pc, #36]	@ (800ac60 <siprintf+0x3c>)
 800ac3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac40:	9105      	str	r1, [sp, #20]
 800ac42:	6800      	ldr	r0, [r0, #0]
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	a902      	add	r1, sp, #8
 800ac48:	f000 f994 	bl	800af74 <_svfiprintf_r>
 800ac4c:	9b02      	ldr	r3, [sp, #8]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	b01c      	add	sp, #112	@ 0x70
 800ac54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac58:	b003      	add	sp, #12
 800ac5a:	4770      	bx	lr
 800ac5c:	24000120 	.word	0x24000120
 800ac60:	ffff0208 	.word	0xffff0208

0800ac64 <memset>:
 800ac64:	4402      	add	r2, r0
 800ac66:	4603      	mov	r3, r0
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d100      	bne.n	800ac6e <memset+0xa>
 800ac6c:	4770      	bx	lr
 800ac6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac72:	e7f9      	b.n	800ac68 <memset+0x4>

0800ac74 <__errno>:
 800ac74:	4b01      	ldr	r3, [pc, #4]	@ (800ac7c <__errno+0x8>)
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	24000120 	.word	0x24000120

0800ac80 <__libc_init_array>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	4d0d      	ldr	r5, [pc, #52]	@ (800acb8 <__libc_init_array+0x38>)
 800ac84:	4c0d      	ldr	r4, [pc, #52]	@ (800acbc <__libc_init_array+0x3c>)
 800ac86:	1b64      	subs	r4, r4, r5
 800ac88:	10a4      	asrs	r4, r4, #2
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	42a6      	cmp	r6, r4
 800ac8e:	d109      	bne.n	800aca4 <__libc_init_array+0x24>
 800ac90:	4d0b      	ldr	r5, [pc, #44]	@ (800acc0 <__libc_init_array+0x40>)
 800ac92:	4c0c      	ldr	r4, [pc, #48]	@ (800acc4 <__libc_init_array+0x44>)
 800ac94:	f000 fc66 	bl	800b564 <_init>
 800ac98:	1b64      	subs	r4, r4, r5
 800ac9a:	10a4      	asrs	r4, r4, #2
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	42a6      	cmp	r6, r4
 800aca0:	d105      	bne.n	800acae <__libc_init_array+0x2e>
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca8:	4798      	blx	r3
 800acaa:	3601      	adds	r6, #1
 800acac:	e7ee      	b.n	800ac8c <__libc_init_array+0xc>
 800acae:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb2:	4798      	blx	r3
 800acb4:	3601      	adds	r6, #1
 800acb6:	e7f2      	b.n	800ac9e <__libc_init_array+0x1e>
 800acb8:	0800b65c 	.word	0x0800b65c
 800acbc:	0800b65c 	.word	0x0800b65c
 800acc0:	0800b65c 	.word	0x0800b65c
 800acc4:	0800b660 	.word	0x0800b660

0800acc8 <__retarget_lock_acquire_recursive>:
 800acc8:	4770      	bx	lr

0800acca <__retarget_lock_release_recursive>:
 800acca:	4770      	bx	lr

0800accc <_free_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4605      	mov	r5, r0
 800acd0:	2900      	cmp	r1, #0
 800acd2:	d041      	beq.n	800ad58 <_free_r+0x8c>
 800acd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd8:	1f0c      	subs	r4, r1, #4
 800acda:	2b00      	cmp	r3, #0
 800acdc:	bfb8      	it	lt
 800acde:	18e4      	addlt	r4, r4, r3
 800ace0:	f000 f8e0 	bl	800aea4 <__malloc_lock>
 800ace4:	4a1d      	ldr	r2, [pc, #116]	@ (800ad5c <_free_r+0x90>)
 800ace6:	6813      	ldr	r3, [r2, #0]
 800ace8:	b933      	cbnz	r3, 800acf8 <_free_r+0x2c>
 800acea:	6063      	str	r3, [r4, #4]
 800acec:	6014      	str	r4, [r2, #0]
 800acee:	4628      	mov	r0, r5
 800acf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf4:	f000 b8dc 	b.w	800aeb0 <__malloc_unlock>
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d908      	bls.n	800ad0e <_free_r+0x42>
 800acfc:	6820      	ldr	r0, [r4, #0]
 800acfe:	1821      	adds	r1, r4, r0
 800ad00:	428b      	cmp	r3, r1
 800ad02:	bf01      	itttt	eq
 800ad04:	6819      	ldreq	r1, [r3, #0]
 800ad06:	685b      	ldreq	r3, [r3, #4]
 800ad08:	1809      	addeq	r1, r1, r0
 800ad0a:	6021      	streq	r1, [r4, #0]
 800ad0c:	e7ed      	b.n	800acea <_free_r+0x1e>
 800ad0e:	461a      	mov	r2, r3
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	b10b      	cbz	r3, 800ad18 <_free_r+0x4c>
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d9fa      	bls.n	800ad0e <_free_r+0x42>
 800ad18:	6811      	ldr	r1, [r2, #0]
 800ad1a:	1850      	adds	r0, r2, r1
 800ad1c:	42a0      	cmp	r0, r4
 800ad1e:	d10b      	bne.n	800ad38 <_free_r+0x6c>
 800ad20:	6820      	ldr	r0, [r4, #0]
 800ad22:	4401      	add	r1, r0
 800ad24:	1850      	adds	r0, r2, r1
 800ad26:	4283      	cmp	r3, r0
 800ad28:	6011      	str	r1, [r2, #0]
 800ad2a:	d1e0      	bne.n	800acee <_free_r+0x22>
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	6053      	str	r3, [r2, #4]
 800ad32:	4408      	add	r0, r1
 800ad34:	6010      	str	r0, [r2, #0]
 800ad36:	e7da      	b.n	800acee <_free_r+0x22>
 800ad38:	d902      	bls.n	800ad40 <_free_r+0x74>
 800ad3a:	230c      	movs	r3, #12
 800ad3c:	602b      	str	r3, [r5, #0]
 800ad3e:	e7d6      	b.n	800acee <_free_r+0x22>
 800ad40:	6820      	ldr	r0, [r4, #0]
 800ad42:	1821      	adds	r1, r4, r0
 800ad44:	428b      	cmp	r3, r1
 800ad46:	bf04      	itt	eq
 800ad48:	6819      	ldreq	r1, [r3, #0]
 800ad4a:	685b      	ldreq	r3, [r3, #4]
 800ad4c:	6063      	str	r3, [r4, #4]
 800ad4e:	bf04      	itt	eq
 800ad50:	1809      	addeq	r1, r1, r0
 800ad52:	6021      	streq	r1, [r4, #0]
 800ad54:	6054      	str	r4, [r2, #4]
 800ad56:	e7ca      	b.n	800acee <_free_r+0x22>
 800ad58:	bd38      	pop	{r3, r4, r5, pc}
 800ad5a:	bf00      	nop
 800ad5c:	24001f68 	.word	0x24001f68

0800ad60 <sbrk_aligned>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	4e0f      	ldr	r6, [pc, #60]	@ (800ada0 <sbrk_aligned+0x40>)
 800ad64:	460c      	mov	r4, r1
 800ad66:	6831      	ldr	r1, [r6, #0]
 800ad68:	4605      	mov	r5, r0
 800ad6a:	b911      	cbnz	r1, 800ad72 <sbrk_aligned+0x12>
 800ad6c:	f000 fba6 	bl	800b4bc <_sbrk_r>
 800ad70:	6030      	str	r0, [r6, #0]
 800ad72:	4621      	mov	r1, r4
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 fba1 	bl	800b4bc <_sbrk_r>
 800ad7a:	1c43      	adds	r3, r0, #1
 800ad7c:	d103      	bne.n	800ad86 <sbrk_aligned+0x26>
 800ad7e:	f04f 34ff 	mov.w	r4, #4294967295
 800ad82:	4620      	mov	r0, r4
 800ad84:	bd70      	pop	{r4, r5, r6, pc}
 800ad86:	1cc4      	adds	r4, r0, #3
 800ad88:	f024 0403 	bic.w	r4, r4, #3
 800ad8c:	42a0      	cmp	r0, r4
 800ad8e:	d0f8      	beq.n	800ad82 <sbrk_aligned+0x22>
 800ad90:	1a21      	subs	r1, r4, r0
 800ad92:	4628      	mov	r0, r5
 800ad94:	f000 fb92 	bl	800b4bc <_sbrk_r>
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d1f2      	bne.n	800ad82 <sbrk_aligned+0x22>
 800ad9c:	e7ef      	b.n	800ad7e <sbrk_aligned+0x1e>
 800ad9e:	bf00      	nop
 800ada0:	24001f64 	.word	0x24001f64

0800ada4 <_malloc_r>:
 800ada4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada8:	1ccd      	adds	r5, r1, #3
 800adaa:	f025 0503 	bic.w	r5, r5, #3
 800adae:	3508      	adds	r5, #8
 800adb0:	2d0c      	cmp	r5, #12
 800adb2:	bf38      	it	cc
 800adb4:	250c      	movcc	r5, #12
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	4606      	mov	r6, r0
 800adba:	db01      	blt.n	800adc0 <_malloc_r+0x1c>
 800adbc:	42a9      	cmp	r1, r5
 800adbe:	d904      	bls.n	800adca <_malloc_r+0x26>
 800adc0:	230c      	movs	r3, #12
 800adc2:	6033      	str	r3, [r6, #0]
 800adc4:	2000      	movs	r0, #0
 800adc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aea0 <_malloc_r+0xfc>
 800adce:	f000 f869 	bl	800aea4 <__malloc_lock>
 800add2:	f8d8 3000 	ldr.w	r3, [r8]
 800add6:	461c      	mov	r4, r3
 800add8:	bb44      	cbnz	r4, 800ae2c <_malloc_r+0x88>
 800adda:	4629      	mov	r1, r5
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff ffbf 	bl	800ad60 <sbrk_aligned>
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	4604      	mov	r4, r0
 800ade6:	d158      	bne.n	800ae9a <_malloc_r+0xf6>
 800ade8:	f8d8 4000 	ldr.w	r4, [r8]
 800adec:	4627      	mov	r7, r4
 800adee:	2f00      	cmp	r7, #0
 800adf0:	d143      	bne.n	800ae7a <_malloc_r+0xd6>
 800adf2:	2c00      	cmp	r4, #0
 800adf4:	d04b      	beq.n	800ae8e <_malloc_r+0xea>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	4639      	mov	r1, r7
 800adfa:	4630      	mov	r0, r6
 800adfc:	eb04 0903 	add.w	r9, r4, r3
 800ae00:	f000 fb5c 	bl	800b4bc <_sbrk_r>
 800ae04:	4581      	cmp	r9, r0
 800ae06:	d142      	bne.n	800ae8e <_malloc_r+0xea>
 800ae08:	6821      	ldr	r1, [r4, #0]
 800ae0a:	1a6d      	subs	r5, r5, r1
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7ff ffa6 	bl	800ad60 <sbrk_aligned>
 800ae14:	3001      	adds	r0, #1
 800ae16:	d03a      	beq.n	800ae8e <_malloc_r+0xea>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	442b      	add	r3, r5
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	bb62      	cbnz	r2, 800ae80 <_malloc_r+0xdc>
 800ae26:	f8c8 7000 	str.w	r7, [r8]
 800ae2a:	e00f      	b.n	800ae4c <_malloc_r+0xa8>
 800ae2c:	6822      	ldr	r2, [r4, #0]
 800ae2e:	1b52      	subs	r2, r2, r5
 800ae30:	d420      	bmi.n	800ae74 <_malloc_r+0xd0>
 800ae32:	2a0b      	cmp	r2, #11
 800ae34:	d917      	bls.n	800ae66 <_malloc_r+0xc2>
 800ae36:	1961      	adds	r1, r4, r5
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	6025      	str	r5, [r4, #0]
 800ae3c:	bf18      	it	ne
 800ae3e:	6059      	strne	r1, [r3, #4]
 800ae40:	6863      	ldr	r3, [r4, #4]
 800ae42:	bf08      	it	eq
 800ae44:	f8c8 1000 	streq.w	r1, [r8]
 800ae48:	5162      	str	r2, [r4, r5]
 800ae4a:	604b      	str	r3, [r1, #4]
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f000 f82f 	bl	800aeb0 <__malloc_unlock>
 800ae52:	f104 000b 	add.w	r0, r4, #11
 800ae56:	1d23      	adds	r3, r4, #4
 800ae58:	f020 0007 	bic.w	r0, r0, #7
 800ae5c:	1ac2      	subs	r2, r0, r3
 800ae5e:	bf1c      	itt	ne
 800ae60:	1a1b      	subne	r3, r3, r0
 800ae62:	50a3      	strne	r3, [r4, r2]
 800ae64:	e7af      	b.n	800adc6 <_malloc_r+0x22>
 800ae66:	6862      	ldr	r2, [r4, #4]
 800ae68:	42a3      	cmp	r3, r4
 800ae6a:	bf0c      	ite	eq
 800ae6c:	f8c8 2000 	streq.w	r2, [r8]
 800ae70:	605a      	strne	r2, [r3, #4]
 800ae72:	e7eb      	b.n	800ae4c <_malloc_r+0xa8>
 800ae74:	4623      	mov	r3, r4
 800ae76:	6864      	ldr	r4, [r4, #4]
 800ae78:	e7ae      	b.n	800add8 <_malloc_r+0x34>
 800ae7a:	463c      	mov	r4, r7
 800ae7c:	687f      	ldr	r7, [r7, #4]
 800ae7e:	e7b6      	b.n	800adee <_malloc_r+0x4a>
 800ae80:	461a      	mov	r2, r3
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d1fb      	bne.n	800ae80 <_malloc_r+0xdc>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	6053      	str	r3, [r2, #4]
 800ae8c:	e7de      	b.n	800ae4c <_malloc_r+0xa8>
 800ae8e:	230c      	movs	r3, #12
 800ae90:	6033      	str	r3, [r6, #0]
 800ae92:	4630      	mov	r0, r6
 800ae94:	f000 f80c 	bl	800aeb0 <__malloc_unlock>
 800ae98:	e794      	b.n	800adc4 <_malloc_r+0x20>
 800ae9a:	6005      	str	r5, [r0, #0]
 800ae9c:	e7d6      	b.n	800ae4c <_malloc_r+0xa8>
 800ae9e:	bf00      	nop
 800aea0:	24001f68 	.word	0x24001f68

0800aea4 <__malloc_lock>:
 800aea4:	4801      	ldr	r0, [pc, #4]	@ (800aeac <__malloc_lock+0x8>)
 800aea6:	f7ff bf0f 	b.w	800acc8 <__retarget_lock_acquire_recursive>
 800aeaa:	bf00      	nop
 800aeac:	24001f60 	.word	0x24001f60

0800aeb0 <__malloc_unlock>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	@ (800aeb8 <__malloc_unlock+0x8>)
 800aeb2:	f7ff bf0a 	b.w	800acca <__retarget_lock_release_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	24001f60 	.word	0x24001f60

0800aebc <__ssputs_r>:
 800aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	688e      	ldr	r6, [r1, #8]
 800aec2:	461f      	mov	r7, r3
 800aec4:	42be      	cmp	r6, r7
 800aec6:	680b      	ldr	r3, [r1, #0]
 800aec8:	4682      	mov	sl, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	4690      	mov	r8, r2
 800aece:	d82d      	bhi.n	800af2c <__ssputs_r+0x70>
 800aed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aed4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aed8:	d026      	beq.n	800af28 <__ssputs_r+0x6c>
 800aeda:	6965      	ldr	r5, [r4, #20]
 800aedc:	6909      	ldr	r1, [r1, #16]
 800aede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aee2:	eba3 0901 	sub.w	r9, r3, r1
 800aee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeea:	1c7b      	adds	r3, r7, #1
 800aeec:	444b      	add	r3, r9
 800aeee:	106d      	asrs	r5, r5, #1
 800aef0:	429d      	cmp	r5, r3
 800aef2:	bf38      	it	cc
 800aef4:	461d      	movcc	r5, r3
 800aef6:	0553      	lsls	r3, r2, #21
 800aef8:	d527      	bpl.n	800af4a <__ssputs_r+0x8e>
 800aefa:	4629      	mov	r1, r5
 800aefc:	f7ff ff52 	bl	800ada4 <_malloc_r>
 800af00:	4606      	mov	r6, r0
 800af02:	b360      	cbz	r0, 800af5e <__ssputs_r+0xa2>
 800af04:	6921      	ldr	r1, [r4, #16]
 800af06:	464a      	mov	r2, r9
 800af08:	f000 fae8 	bl	800b4dc <memcpy>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	6126      	str	r6, [r4, #16]
 800af1a:	6165      	str	r5, [r4, #20]
 800af1c:	444e      	add	r6, r9
 800af1e:	eba5 0509 	sub.w	r5, r5, r9
 800af22:	6026      	str	r6, [r4, #0]
 800af24:	60a5      	str	r5, [r4, #8]
 800af26:	463e      	mov	r6, r7
 800af28:	42be      	cmp	r6, r7
 800af2a:	d900      	bls.n	800af2e <__ssputs_r+0x72>
 800af2c:	463e      	mov	r6, r7
 800af2e:	6820      	ldr	r0, [r4, #0]
 800af30:	4632      	mov	r2, r6
 800af32:	4641      	mov	r1, r8
 800af34:	f000 faa8 	bl	800b488 <memmove>
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	1b9b      	subs	r3, r3, r6
 800af3c:	60a3      	str	r3, [r4, #8]
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	4433      	add	r3, r6
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	2000      	movs	r0, #0
 800af46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4a:	462a      	mov	r2, r5
 800af4c:	f000 fad4 	bl	800b4f8 <_realloc_r>
 800af50:	4606      	mov	r6, r0
 800af52:	2800      	cmp	r0, #0
 800af54:	d1e0      	bne.n	800af18 <__ssputs_r+0x5c>
 800af56:	6921      	ldr	r1, [r4, #16]
 800af58:	4650      	mov	r0, sl
 800af5a:	f7ff feb7 	bl	800accc <_free_r>
 800af5e:	230c      	movs	r3, #12
 800af60:	f8ca 3000 	str.w	r3, [sl]
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	e7e9      	b.n	800af46 <__ssputs_r+0x8a>
	...

0800af74 <_svfiprintf_r>:
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	4698      	mov	r8, r3
 800af7a:	898b      	ldrh	r3, [r1, #12]
 800af7c:	061b      	lsls	r3, r3, #24
 800af7e:	b09d      	sub	sp, #116	@ 0x74
 800af80:	4607      	mov	r7, r0
 800af82:	460d      	mov	r5, r1
 800af84:	4614      	mov	r4, r2
 800af86:	d510      	bpl.n	800afaa <_svfiprintf_r+0x36>
 800af88:	690b      	ldr	r3, [r1, #16]
 800af8a:	b973      	cbnz	r3, 800afaa <_svfiprintf_r+0x36>
 800af8c:	2140      	movs	r1, #64	@ 0x40
 800af8e:	f7ff ff09 	bl	800ada4 <_malloc_r>
 800af92:	6028      	str	r0, [r5, #0]
 800af94:	6128      	str	r0, [r5, #16]
 800af96:	b930      	cbnz	r0, 800afa6 <_svfiprintf_r+0x32>
 800af98:	230c      	movs	r3, #12
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	f04f 30ff 	mov.w	r0, #4294967295
 800afa0:	b01d      	add	sp, #116	@ 0x74
 800afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa6:	2340      	movs	r3, #64	@ 0x40
 800afa8:	616b      	str	r3, [r5, #20]
 800afaa:	2300      	movs	r3, #0
 800afac:	9309      	str	r3, [sp, #36]	@ 0x24
 800afae:	2320      	movs	r3, #32
 800afb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800afb8:	2330      	movs	r3, #48	@ 0x30
 800afba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b158 <_svfiprintf_r+0x1e4>
 800afbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afc2:	f04f 0901 	mov.w	r9, #1
 800afc6:	4623      	mov	r3, r4
 800afc8:	469a      	mov	sl, r3
 800afca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afce:	b10a      	cbz	r2, 800afd4 <_svfiprintf_r+0x60>
 800afd0:	2a25      	cmp	r2, #37	@ 0x25
 800afd2:	d1f9      	bne.n	800afc8 <_svfiprintf_r+0x54>
 800afd4:	ebba 0b04 	subs.w	fp, sl, r4
 800afd8:	d00b      	beq.n	800aff2 <_svfiprintf_r+0x7e>
 800afda:	465b      	mov	r3, fp
 800afdc:	4622      	mov	r2, r4
 800afde:	4629      	mov	r1, r5
 800afe0:	4638      	mov	r0, r7
 800afe2:	f7ff ff6b 	bl	800aebc <__ssputs_r>
 800afe6:	3001      	adds	r0, #1
 800afe8:	f000 80a7 	beq.w	800b13a <_svfiprintf_r+0x1c6>
 800afec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afee:	445a      	add	r2, fp
 800aff0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aff2:	f89a 3000 	ldrb.w	r3, [sl]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 809f 	beq.w	800b13a <_svfiprintf_r+0x1c6>
 800affc:	2300      	movs	r3, #0
 800affe:	f04f 32ff 	mov.w	r2, #4294967295
 800b002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b006:	f10a 0a01 	add.w	sl, sl, #1
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	9307      	str	r3, [sp, #28]
 800b00e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b012:	931a      	str	r3, [sp, #104]	@ 0x68
 800b014:	4654      	mov	r4, sl
 800b016:	2205      	movs	r2, #5
 800b018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b01c:	484e      	ldr	r0, [pc, #312]	@ (800b158 <_svfiprintf_r+0x1e4>)
 800b01e:	f7f5 f95f 	bl	80002e0 <memchr>
 800b022:	9a04      	ldr	r2, [sp, #16]
 800b024:	b9d8      	cbnz	r0, 800b05e <_svfiprintf_r+0xea>
 800b026:	06d0      	lsls	r0, r2, #27
 800b028:	bf44      	itt	mi
 800b02a:	2320      	movmi	r3, #32
 800b02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b030:	0711      	lsls	r1, r2, #28
 800b032:	bf44      	itt	mi
 800b034:	232b      	movmi	r3, #43	@ 0x2b
 800b036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b03a:	f89a 3000 	ldrb.w	r3, [sl]
 800b03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b040:	d015      	beq.n	800b06e <_svfiprintf_r+0xfa>
 800b042:	9a07      	ldr	r2, [sp, #28]
 800b044:	4654      	mov	r4, sl
 800b046:	2000      	movs	r0, #0
 800b048:	f04f 0c0a 	mov.w	ip, #10
 800b04c:	4621      	mov	r1, r4
 800b04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b052:	3b30      	subs	r3, #48	@ 0x30
 800b054:	2b09      	cmp	r3, #9
 800b056:	d94b      	bls.n	800b0f0 <_svfiprintf_r+0x17c>
 800b058:	b1b0      	cbz	r0, 800b088 <_svfiprintf_r+0x114>
 800b05a:	9207      	str	r2, [sp, #28]
 800b05c:	e014      	b.n	800b088 <_svfiprintf_r+0x114>
 800b05e:	eba0 0308 	sub.w	r3, r0, r8
 800b062:	fa09 f303 	lsl.w	r3, r9, r3
 800b066:	4313      	orrs	r3, r2
 800b068:	9304      	str	r3, [sp, #16]
 800b06a:	46a2      	mov	sl, r4
 800b06c:	e7d2      	b.n	800b014 <_svfiprintf_r+0xa0>
 800b06e:	9b03      	ldr	r3, [sp, #12]
 800b070:	1d19      	adds	r1, r3, #4
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	9103      	str	r1, [sp, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	bfbb      	ittet	lt
 800b07a:	425b      	neglt	r3, r3
 800b07c:	f042 0202 	orrlt.w	r2, r2, #2
 800b080:	9307      	strge	r3, [sp, #28]
 800b082:	9307      	strlt	r3, [sp, #28]
 800b084:	bfb8      	it	lt
 800b086:	9204      	strlt	r2, [sp, #16]
 800b088:	7823      	ldrb	r3, [r4, #0]
 800b08a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b08c:	d10a      	bne.n	800b0a4 <_svfiprintf_r+0x130>
 800b08e:	7863      	ldrb	r3, [r4, #1]
 800b090:	2b2a      	cmp	r3, #42	@ 0x2a
 800b092:	d132      	bne.n	800b0fa <_svfiprintf_r+0x186>
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	1d1a      	adds	r2, r3, #4
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	9203      	str	r2, [sp, #12]
 800b09c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0a0:	3402      	adds	r4, #2
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b168 <_svfiprintf_r+0x1f4>
 800b0a8:	7821      	ldrb	r1, [r4, #0]
 800b0aa:	2203      	movs	r2, #3
 800b0ac:	4650      	mov	r0, sl
 800b0ae:	f7f5 f917 	bl	80002e0 <memchr>
 800b0b2:	b138      	cbz	r0, 800b0c4 <_svfiprintf_r+0x150>
 800b0b4:	9b04      	ldr	r3, [sp, #16]
 800b0b6:	eba0 000a 	sub.w	r0, r0, sl
 800b0ba:	2240      	movs	r2, #64	@ 0x40
 800b0bc:	4082      	lsls	r2, r0
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	3401      	adds	r4, #1
 800b0c2:	9304      	str	r3, [sp, #16]
 800b0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c8:	4824      	ldr	r0, [pc, #144]	@ (800b15c <_svfiprintf_r+0x1e8>)
 800b0ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0ce:	2206      	movs	r2, #6
 800b0d0:	f7f5 f906 	bl	80002e0 <memchr>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d036      	beq.n	800b146 <_svfiprintf_r+0x1d2>
 800b0d8:	4b21      	ldr	r3, [pc, #132]	@ (800b160 <_svfiprintf_r+0x1ec>)
 800b0da:	bb1b      	cbnz	r3, 800b124 <_svfiprintf_r+0x1b0>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	3307      	adds	r3, #7
 800b0e0:	f023 0307 	bic.w	r3, r3, #7
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ea:	4433      	add	r3, r6
 800b0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ee:	e76a      	b.n	800afc6 <_svfiprintf_r+0x52>
 800b0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	e7a8      	b.n	800b04c <_svfiprintf_r+0xd8>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	3401      	adds	r4, #1
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	4619      	mov	r1, r3
 800b102:	f04f 0c0a 	mov.w	ip, #10
 800b106:	4620      	mov	r0, r4
 800b108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b10c:	3a30      	subs	r2, #48	@ 0x30
 800b10e:	2a09      	cmp	r2, #9
 800b110:	d903      	bls.n	800b11a <_svfiprintf_r+0x1a6>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0c6      	beq.n	800b0a4 <_svfiprintf_r+0x130>
 800b116:	9105      	str	r1, [sp, #20]
 800b118:	e7c4      	b.n	800b0a4 <_svfiprintf_r+0x130>
 800b11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b11e:	4604      	mov	r4, r0
 800b120:	2301      	movs	r3, #1
 800b122:	e7f0      	b.n	800b106 <_svfiprintf_r+0x192>
 800b124:	ab03      	add	r3, sp, #12
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	462a      	mov	r2, r5
 800b12a:	4b0e      	ldr	r3, [pc, #56]	@ (800b164 <_svfiprintf_r+0x1f0>)
 800b12c:	a904      	add	r1, sp, #16
 800b12e:	4638      	mov	r0, r7
 800b130:	f3af 8000 	nop.w
 800b134:	1c42      	adds	r2, r0, #1
 800b136:	4606      	mov	r6, r0
 800b138:	d1d6      	bne.n	800b0e8 <_svfiprintf_r+0x174>
 800b13a:	89ab      	ldrh	r3, [r5, #12]
 800b13c:	065b      	lsls	r3, r3, #25
 800b13e:	f53f af2d 	bmi.w	800af9c <_svfiprintf_r+0x28>
 800b142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b144:	e72c      	b.n	800afa0 <_svfiprintf_r+0x2c>
 800b146:	ab03      	add	r3, sp, #12
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	462a      	mov	r2, r5
 800b14c:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <_svfiprintf_r+0x1f0>)
 800b14e:	a904      	add	r1, sp, #16
 800b150:	4638      	mov	r0, r7
 800b152:	f000 f879 	bl	800b248 <_printf_i>
 800b156:	e7ed      	b.n	800b134 <_svfiprintf_r+0x1c0>
 800b158:	0800b620 	.word	0x0800b620
 800b15c:	0800b62a 	.word	0x0800b62a
 800b160:	00000000 	.word	0x00000000
 800b164:	0800aebd 	.word	0x0800aebd
 800b168:	0800b626 	.word	0x0800b626

0800b16c <_printf_common>:
 800b16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b170:	4616      	mov	r6, r2
 800b172:	4698      	mov	r8, r3
 800b174:	688a      	ldr	r2, [r1, #8]
 800b176:	690b      	ldr	r3, [r1, #16]
 800b178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b17c:	4293      	cmp	r3, r2
 800b17e:	bfb8      	it	lt
 800b180:	4613      	movlt	r3, r2
 800b182:	6033      	str	r3, [r6, #0]
 800b184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b188:	4607      	mov	r7, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	b10a      	cbz	r2, 800b192 <_printf_common+0x26>
 800b18e:	3301      	adds	r3, #1
 800b190:	6033      	str	r3, [r6, #0]
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	0699      	lsls	r1, r3, #26
 800b196:	bf42      	ittt	mi
 800b198:	6833      	ldrmi	r3, [r6, #0]
 800b19a:	3302      	addmi	r3, #2
 800b19c:	6033      	strmi	r3, [r6, #0]
 800b19e:	6825      	ldr	r5, [r4, #0]
 800b1a0:	f015 0506 	ands.w	r5, r5, #6
 800b1a4:	d106      	bne.n	800b1b4 <_printf_common+0x48>
 800b1a6:	f104 0a19 	add.w	sl, r4, #25
 800b1aa:	68e3      	ldr	r3, [r4, #12]
 800b1ac:	6832      	ldr	r2, [r6, #0]
 800b1ae:	1a9b      	subs	r3, r3, r2
 800b1b0:	42ab      	cmp	r3, r5
 800b1b2:	dc26      	bgt.n	800b202 <_printf_common+0x96>
 800b1b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1b8:	6822      	ldr	r2, [r4, #0]
 800b1ba:	3b00      	subs	r3, #0
 800b1bc:	bf18      	it	ne
 800b1be:	2301      	movne	r3, #1
 800b1c0:	0692      	lsls	r2, r2, #26
 800b1c2:	d42b      	bmi.n	800b21c <_printf_common+0xb0>
 800b1c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1c8:	4641      	mov	r1, r8
 800b1ca:	4638      	mov	r0, r7
 800b1cc:	47c8      	blx	r9
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d01e      	beq.n	800b210 <_printf_common+0xa4>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	6922      	ldr	r2, [r4, #16]
 800b1d6:	f003 0306 	and.w	r3, r3, #6
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	bf02      	ittt	eq
 800b1de:	68e5      	ldreq	r5, [r4, #12]
 800b1e0:	6833      	ldreq	r3, [r6, #0]
 800b1e2:	1aed      	subeq	r5, r5, r3
 800b1e4:	68a3      	ldr	r3, [r4, #8]
 800b1e6:	bf0c      	ite	eq
 800b1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1ec:	2500      	movne	r5, #0
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	bfc4      	itt	gt
 800b1f2:	1a9b      	subgt	r3, r3, r2
 800b1f4:	18ed      	addgt	r5, r5, r3
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	341a      	adds	r4, #26
 800b1fa:	42b5      	cmp	r5, r6
 800b1fc:	d11a      	bne.n	800b234 <_printf_common+0xc8>
 800b1fe:	2000      	movs	r0, #0
 800b200:	e008      	b.n	800b214 <_printf_common+0xa8>
 800b202:	2301      	movs	r3, #1
 800b204:	4652      	mov	r2, sl
 800b206:	4641      	mov	r1, r8
 800b208:	4638      	mov	r0, r7
 800b20a:	47c8      	blx	r9
 800b20c:	3001      	adds	r0, #1
 800b20e:	d103      	bne.n	800b218 <_printf_common+0xac>
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	3501      	adds	r5, #1
 800b21a:	e7c6      	b.n	800b1aa <_printf_common+0x3e>
 800b21c:	18e1      	adds	r1, r4, r3
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	2030      	movs	r0, #48	@ 0x30
 800b222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b226:	4422      	add	r2, r4
 800b228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b22c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b230:	3302      	adds	r3, #2
 800b232:	e7c7      	b.n	800b1c4 <_printf_common+0x58>
 800b234:	2301      	movs	r3, #1
 800b236:	4622      	mov	r2, r4
 800b238:	4641      	mov	r1, r8
 800b23a:	4638      	mov	r0, r7
 800b23c:	47c8      	blx	r9
 800b23e:	3001      	adds	r0, #1
 800b240:	d0e6      	beq.n	800b210 <_printf_common+0xa4>
 800b242:	3601      	adds	r6, #1
 800b244:	e7d9      	b.n	800b1fa <_printf_common+0x8e>
	...

0800b248 <_printf_i>:
 800b248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	7e0f      	ldrb	r7, [r1, #24]
 800b24e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b250:	2f78      	cmp	r7, #120	@ 0x78
 800b252:	4691      	mov	r9, r2
 800b254:	4680      	mov	r8, r0
 800b256:	460c      	mov	r4, r1
 800b258:	469a      	mov	sl, r3
 800b25a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b25e:	d807      	bhi.n	800b270 <_printf_i+0x28>
 800b260:	2f62      	cmp	r7, #98	@ 0x62
 800b262:	d80a      	bhi.n	800b27a <_printf_i+0x32>
 800b264:	2f00      	cmp	r7, #0
 800b266:	f000 80d2 	beq.w	800b40e <_printf_i+0x1c6>
 800b26a:	2f58      	cmp	r7, #88	@ 0x58
 800b26c:	f000 80b9 	beq.w	800b3e2 <_printf_i+0x19a>
 800b270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b278:	e03a      	b.n	800b2f0 <_printf_i+0xa8>
 800b27a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b27e:	2b15      	cmp	r3, #21
 800b280:	d8f6      	bhi.n	800b270 <_printf_i+0x28>
 800b282:	a101      	add	r1, pc, #4	@ (adr r1, 800b288 <_printf_i+0x40>)
 800b284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b288:	0800b2e1 	.word	0x0800b2e1
 800b28c:	0800b2f5 	.word	0x0800b2f5
 800b290:	0800b271 	.word	0x0800b271
 800b294:	0800b271 	.word	0x0800b271
 800b298:	0800b271 	.word	0x0800b271
 800b29c:	0800b271 	.word	0x0800b271
 800b2a0:	0800b2f5 	.word	0x0800b2f5
 800b2a4:	0800b271 	.word	0x0800b271
 800b2a8:	0800b271 	.word	0x0800b271
 800b2ac:	0800b271 	.word	0x0800b271
 800b2b0:	0800b271 	.word	0x0800b271
 800b2b4:	0800b3f5 	.word	0x0800b3f5
 800b2b8:	0800b31f 	.word	0x0800b31f
 800b2bc:	0800b3af 	.word	0x0800b3af
 800b2c0:	0800b271 	.word	0x0800b271
 800b2c4:	0800b271 	.word	0x0800b271
 800b2c8:	0800b417 	.word	0x0800b417
 800b2cc:	0800b271 	.word	0x0800b271
 800b2d0:	0800b31f 	.word	0x0800b31f
 800b2d4:	0800b271 	.word	0x0800b271
 800b2d8:	0800b271 	.word	0x0800b271
 800b2dc:	0800b3b7 	.word	0x0800b3b7
 800b2e0:	6833      	ldr	r3, [r6, #0]
 800b2e2:	1d1a      	adds	r2, r3, #4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6032      	str	r2, [r6, #0]
 800b2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e09d      	b.n	800b430 <_printf_i+0x1e8>
 800b2f4:	6833      	ldr	r3, [r6, #0]
 800b2f6:	6820      	ldr	r0, [r4, #0]
 800b2f8:	1d19      	adds	r1, r3, #4
 800b2fa:	6031      	str	r1, [r6, #0]
 800b2fc:	0606      	lsls	r6, r0, #24
 800b2fe:	d501      	bpl.n	800b304 <_printf_i+0xbc>
 800b300:	681d      	ldr	r5, [r3, #0]
 800b302:	e003      	b.n	800b30c <_printf_i+0xc4>
 800b304:	0645      	lsls	r5, r0, #25
 800b306:	d5fb      	bpl.n	800b300 <_printf_i+0xb8>
 800b308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b30c:	2d00      	cmp	r5, #0
 800b30e:	da03      	bge.n	800b318 <_printf_i+0xd0>
 800b310:	232d      	movs	r3, #45	@ 0x2d
 800b312:	426d      	negs	r5, r5
 800b314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b318:	4859      	ldr	r0, [pc, #356]	@ (800b480 <_printf_i+0x238>)
 800b31a:	230a      	movs	r3, #10
 800b31c:	e011      	b.n	800b342 <_printf_i+0xfa>
 800b31e:	6821      	ldr	r1, [r4, #0]
 800b320:	6833      	ldr	r3, [r6, #0]
 800b322:	0608      	lsls	r0, r1, #24
 800b324:	f853 5b04 	ldr.w	r5, [r3], #4
 800b328:	d402      	bmi.n	800b330 <_printf_i+0xe8>
 800b32a:	0649      	lsls	r1, r1, #25
 800b32c:	bf48      	it	mi
 800b32e:	b2ad      	uxthmi	r5, r5
 800b330:	2f6f      	cmp	r7, #111	@ 0x6f
 800b332:	4853      	ldr	r0, [pc, #332]	@ (800b480 <_printf_i+0x238>)
 800b334:	6033      	str	r3, [r6, #0]
 800b336:	bf14      	ite	ne
 800b338:	230a      	movne	r3, #10
 800b33a:	2308      	moveq	r3, #8
 800b33c:	2100      	movs	r1, #0
 800b33e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b342:	6866      	ldr	r6, [r4, #4]
 800b344:	60a6      	str	r6, [r4, #8]
 800b346:	2e00      	cmp	r6, #0
 800b348:	bfa2      	ittt	ge
 800b34a:	6821      	ldrge	r1, [r4, #0]
 800b34c:	f021 0104 	bicge.w	r1, r1, #4
 800b350:	6021      	strge	r1, [r4, #0]
 800b352:	b90d      	cbnz	r5, 800b358 <_printf_i+0x110>
 800b354:	2e00      	cmp	r6, #0
 800b356:	d04b      	beq.n	800b3f0 <_printf_i+0x1a8>
 800b358:	4616      	mov	r6, r2
 800b35a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b35e:	fb03 5711 	mls	r7, r3, r1, r5
 800b362:	5dc7      	ldrb	r7, [r0, r7]
 800b364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b368:	462f      	mov	r7, r5
 800b36a:	42bb      	cmp	r3, r7
 800b36c:	460d      	mov	r5, r1
 800b36e:	d9f4      	bls.n	800b35a <_printf_i+0x112>
 800b370:	2b08      	cmp	r3, #8
 800b372:	d10b      	bne.n	800b38c <_printf_i+0x144>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	07df      	lsls	r7, r3, #31
 800b378:	d508      	bpl.n	800b38c <_printf_i+0x144>
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	6861      	ldr	r1, [r4, #4]
 800b37e:	4299      	cmp	r1, r3
 800b380:	bfde      	ittt	le
 800b382:	2330      	movle	r3, #48	@ 0x30
 800b384:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b388:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b38c:	1b92      	subs	r2, r2, r6
 800b38e:	6122      	str	r2, [r4, #16]
 800b390:	f8cd a000 	str.w	sl, [sp]
 800b394:	464b      	mov	r3, r9
 800b396:	aa03      	add	r2, sp, #12
 800b398:	4621      	mov	r1, r4
 800b39a:	4640      	mov	r0, r8
 800b39c:	f7ff fee6 	bl	800b16c <_printf_common>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d14a      	bne.n	800b43a <_printf_i+0x1f2>
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a8:	b004      	add	sp, #16
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	f043 0320 	orr.w	r3, r3, #32
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	4833      	ldr	r0, [pc, #204]	@ (800b484 <_printf_i+0x23c>)
 800b3b8:	2778      	movs	r7, #120	@ 0x78
 800b3ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	6831      	ldr	r1, [r6, #0]
 800b3c2:	061f      	lsls	r7, r3, #24
 800b3c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3c8:	d402      	bmi.n	800b3d0 <_printf_i+0x188>
 800b3ca:	065f      	lsls	r7, r3, #25
 800b3cc:	bf48      	it	mi
 800b3ce:	b2ad      	uxthmi	r5, r5
 800b3d0:	6031      	str	r1, [r6, #0]
 800b3d2:	07d9      	lsls	r1, r3, #31
 800b3d4:	bf44      	itt	mi
 800b3d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b3da:	6023      	strmi	r3, [r4, #0]
 800b3dc:	b11d      	cbz	r5, 800b3e6 <_printf_i+0x19e>
 800b3de:	2310      	movs	r3, #16
 800b3e0:	e7ac      	b.n	800b33c <_printf_i+0xf4>
 800b3e2:	4827      	ldr	r0, [pc, #156]	@ (800b480 <_printf_i+0x238>)
 800b3e4:	e7e9      	b.n	800b3ba <_printf_i+0x172>
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	f023 0320 	bic.w	r3, r3, #32
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	e7f6      	b.n	800b3de <_printf_i+0x196>
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	e7bd      	b.n	800b370 <_printf_i+0x128>
 800b3f4:	6833      	ldr	r3, [r6, #0]
 800b3f6:	6825      	ldr	r5, [r4, #0]
 800b3f8:	6961      	ldr	r1, [r4, #20]
 800b3fa:	1d18      	adds	r0, r3, #4
 800b3fc:	6030      	str	r0, [r6, #0]
 800b3fe:	062e      	lsls	r6, r5, #24
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	d501      	bpl.n	800b408 <_printf_i+0x1c0>
 800b404:	6019      	str	r1, [r3, #0]
 800b406:	e002      	b.n	800b40e <_printf_i+0x1c6>
 800b408:	0668      	lsls	r0, r5, #25
 800b40a:	d5fb      	bpl.n	800b404 <_printf_i+0x1bc>
 800b40c:	8019      	strh	r1, [r3, #0]
 800b40e:	2300      	movs	r3, #0
 800b410:	6123      	str	r3, [r4, #16]
 800b412:	4616      	mov	r6, r2
 800b414:	e7bc      	b.n	800b390 <_printf_i+0x148>
 800b416:	6833      	ldr	r3, [r6, #0]
 800b418:	1d1a      	adds	r2, r3, #4
 800b41a:	6032      	str	r2, [r6, #0]
 800b41c:	681e      	ldr	r6, [r3, #0]
 800b41e:	6862      	ldr	r2, [r4, #4]
 800b420:	2100      	movs	r1, #0
 800b422:	4630      	mov	r0, r6
 800b424:	f7f4 ff5c 	bl	80002e0 <memchr>
 800b428:	b108      	cbz	r0, 800b42e <_printf_i+0x1e6>
 800b42a:	1b80      	subs	r0, r0, r6
 800b42c:	6060      	str	r0, [r4, #4]
 800b42e:	6863      	ldr	r3, [r4, #4]
 800b430:	6123      	str	r3, [r4, #16]
 800b432:	2300      	movs	r3, #0
 800b434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b438:	e7aa      	b.n	800b390 <_printf_i+0x148>
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	4632      	mov	r2, r6
 800b43e:	4649      	mov	r1, r9
 800b440:	4640      	mov	r0, r8
 800b442:	47d0      	blx	sl
 800b444:	3001      	adds	r0, #1
 800b446:	d0ad      	beq.n	800b3a4 <_printf_i+0x15c>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	079b      	lsls	r3, r3, #30
 800b44c:	d413      	bmi.n	800b476 <_printf_i+0x22e>
 800b44e:	68e0      	ldr	r0, [r4, #12]
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	4298      	cmp	r0, r3
 800b454:	bfb8      	it	lt
 800b456:	4618      	movlt	r0, r3
 800b458:	e7a6      	b.n	800b3a8 <_printf_i+0x160>
 800b45a:	2301      	movs	r3, #1
 800b45c:	4632      	mov	r2, r6
 800b45e:	4649      	mov	r1, r9
 800b460:	4640      	mov	r0, r8
 800b462:	47d0      	blx	sl
 800b464:	3001      	adds	r0, #1
 800b466:	d09d      	beq.n	800b3a4 <_printf_i+0x15c>
 800b468:	3501      	adds	r5, #1
 800b46a:	68e3      	ldr	r3, [r4, #12]
 800b46c:	9903      	ldr	r1, [sp, #12]
 800b46e:	1a5b      	subs	r3, r3, r1
 800b470:	42ab      	cmp	r3, r5
 800b472:	dcf2      	bgt.n	800b45a <_printf_i+0x212>
 800b474:	e7eb      	b.n	800b44e <_printf_i+0x206>
 800b476:	2500      	movs	r5, #0
 800b478:	f104 0619 	add.w	r6, r4, #25
 800b47c:	e7f5      	b.n	800b46a <_printf_i+0x222>
 800b47e:	bf00      	nop
 800b480:	0800b631 	.word	0x0800b631
 800b484:	0800b642 	.word	0x0800b642

0800b488 <memmove>:
 800b488:	4288      	cmp	r0, r1
 800b48a:	b510      	push	{r4, lr}
 800b48c:	eb01 0402 	add.w	r4, r1, r2
 800b490:	d902      	bls.n	800b498 <memmove+0x10>
 800b492:	4284      	cmp	r4, r0
 800b494:	4623      	mov	r3, r4
 800b496:	d807      	bhi.n	800b4a8 <memmove+0x20>
 800b498:	1e43      	subs	r3, r0, #1
 800b49a:	42a1      	cmp	r1, r4
 800b49c:	d008      	beq.n	800b4b0 <memmove+0x28>
 800b49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4a6:	e7f8      	b.n	800b49a <memmove+0x12>
 800b4a8:	4402      	add	r2, r0
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	428a      	cmp	r2, r1
 800b4ae:	d100      	bne.n	800b4b2 <memmove+0x2a>
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ba:	e7f7      	b.n	800b4ac <memmove+0x24>

0800b4bc <_sbrk_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d06      	ldr	r5, [pc, #24]	@ (800b4d8 <_sbrk_r+0x1c>)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	602b      	str	r3, [r5, #0]
 800b4c8:	f7f5 fb9a 	bl	8000c00 <_sbrk>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_sbrk_r+0x1a>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_sbrk_r+0x1a>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	24001f5c 	.word	0x24001f5c

0800b4dc <memcpy>:
 800b4dc:	440a      	add	r2, r1
 800b4de:	4291      	cmp	r1, r2
 800b4e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4e4:	d100      	bne.n	800b4e8 <memcpy+0xc>
 800b4e6:	4770      	bx	lr
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4f2:	4291      	cmp	r1, r2
 800b4f4:	d1f9      	bne.n	800b4ea <memcpy+0xe>
 800b4f6:	bd10      	pop	{r4, pc}

0800b4f8 <_realloc_r>:
 800b4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fc:	4680      	mov	r8, r0
 800b4fe:	4615      	mov	r5, r2
 800b500:	460c      	mov	r4, r1
 800b502:	b921      	cbnz	r1, 800b50e <_realloc_r+0x16>
 800b504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	4611      	mov	r1, r2
 800b50a:	f7ff bc4b 	b.w	800ada4 <_malloc_r>
 800b50e:	b92a      	cbnz	r2, 800b51c <_realloc_r+0x24>
 800b510:	f7ff fbdc 	bl	800accc <_free_r>
 800b514:	2400      	movs	r4, #0
 800b516:	4620      	mov	r0, r4
 800b518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51c:	f000 f81a 	bl	800b554 <_malloc_usable_size_r>
 800b520:	4285      	cmp	r5, r0
 800b522:	4606      	mov	r6, r0
 800b524:	d802      	bhi.n	800b52c <_realloc_r+0x34>
 800b526:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b52a:	d8f4      	bhi.n	800b516 <_realloc_r+0x1e>
 800b52c:	4629      	mov	r1, r5
 800b52e:	4640      	mov	r0, r8
 800b530:	f7ff fc38 	bl	800ada4 <_malloc_r>
 800b534:	4607      	mov	r7, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d0ec      	beq.n	800b514 <_realloc_r+0x1c>
 800b53a:	42b5      	cmp	r5, r6
 800b53c:	462a      	mov	r2, r5
 800b53e:	4621      	mov	r1, r4
 800b540:	bf28      	it	cs
 800b542:	4632      	movcs	r2, r6
 800b544:	f7ff ffca 	bl	800b4dc <memcpy>
 800b548:	4621      	mov	r1, r4
 800b54a:	4640      	mov	r0, r8
 800b54c:	f7ff fbbe 	bl	800accc <_free_r>
 800b550:	463c      	mov	r4, r7
 800b552:	e7e0      	b.n	800b516 <_realloc_r+0x1e>

0800b554 <_malloc_usable_size_r>:
 800b554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b558:	1f18      	subs	r0, r3, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	bfbc      	itt	lt
 800b55e:	580b      	ldrlt	r3, [r1, r0]
 800b560:	18c0      	addlt	r0, r0, r3
 800b562:	4770      	bx	lr

0800b564 <_init>:
 800b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b566:	bf00      	nop
 800b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56a:	bc08      	pop	{r3}
 800b56c:	469e      	mov	lr, r3
 800b56e:	4770      	bx	lr

0800b570 <_fini>:
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b572:	bf00      	nop
 800b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b576:	bc08      	pop	{r3}
 800b578:	469e      	mov	lr, r3
 800b57a:	4770      	bx	lr
